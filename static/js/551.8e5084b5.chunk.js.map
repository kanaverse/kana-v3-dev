{"version":3,"file":"static/js/551.8e5084b5.chunk.js","mappings":"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","sources":["../node_modules/jszip/dist/jszip.min.js","../node_modules/papaparse/papaparse.min.js","../node_modules/randomcolor/randomColor.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/classCheckPrivateStaticAccess.js","../node_modules/@babel/runtime/helpers/esm/classCheckPrivateStaticFieldDescriptor.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateFieldSpecGet.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateFieldSpecSet.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateMethodGet.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/bakana/browser/readers/10x.js","../node_modules/bakana/browser/readers/ArtifactDB-abstract.js","../node_modules/bakana/browser/readers/ArtifactDB-zipped.js","../node_modules/bakana/browser/readers/abstract/file.js","../node_modules/bakana/browser/readers/mtx.js","../node_modules/bakana/browser/readers/utils/abstract/stream.js","../node_modules/bakana/browser/readers/utils/extract.js","../node_modules/bakana/browser/readers/utils/features.js","../node_modules/bakana/browser/steps/abstract/worker_parent.js","../node_modules/bakana/browser/steps/adt_normalization.js","../node_modules/bakana/browser/steps/adt_pca.js","../node_modules/bakana/browser/steps/adt_quality_control.js","../node_modules/bakana/browser/steps/batch_correction.js","../node_modules/bakana/browser/steps/cell_filtering.js","../node_modules/bakana/browser/steps/cell_labelling.js","../node_modules/bakana/browser/steps/choose_clustering.js","../node_modules/bakana/browser/steps/combine_embeddings.js","../node_modules/bakana/browser/steps/crispr_normalization.js","../node_modules/bakana/browser/steps/crispr_pca.js","../node_modules/bakana/browser/steps/crispr_quality_control.js","../node_modules/bakana/browser/steps/feature_selection.js","../node_modules/bakana/browser/steps/kmeans_cluster.js","../node_modules/bakana/browser/steps/marker_detection.js","../node_modules/bakana/browser/steps/neighbor_index.js","../node_modules/bakana/browser/steps/rna_normalization.js","../node_modules/bakana/browser/steps/rna_pca.js","../node_modules/bakana/browser/steps/rna_quality_control.js","../node_modules/bakana/browser/steps/snn_graph_cluster.js","../node_modules/bakana/browser/steps/tsne.js","../node_modules/bakana/browser/steps/umap.js","../node_modules/bakana/browser/steps/utils/abstract/workers_parent.js","../node_modules/bakana/browser/steps/utils/general.js","../node_modules/bakana/browser/steps/utils/markers.js","../node_modules/bakana/browser/steps/utils/normalization.js","../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/bioconductor/src/utils.js","../node_modules/bioconductor/src/miscellaneous.js","../node_modules/bioconductor/src/AllGenerics.js","../node_modules/bioconductor/src/clone-utils.js","../node_modules/bioconductor/src/Annotated.js","../node_modules/bioconductor/src/InternalList.js","../node_modules/bioconductor/src/DataFrame.js","../node_modules/bioconductor/src/Vector.js","../node_modules/bioconductor/src/overlap-utils.js","../node_modules/bioconductor/src/IRanges.js","../node_modules/bioconductor/src/GRanges.js","../node_modules/bioconductor/src/GroupedGRanges.js","../node_modules/bioconductor/src/DenseMatrix.js","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","../node_modules/bioconductor/src/SummarizedExperiment.js","../node_modules/bioconductor/src/RangedSummarizedExperiment.js","../node_modules/bioconductor/src/SingleCellExperiment.js","../node_modules/gesel/src/utils.js","../node_modules/gesel/src/fetchAllGenes.js","../node_modules/gesel/src/mapGenesByIdentifier.js","../node_modules/gesel/src/searchGenes.js","../node_modules/gesel/src/fetchAllCollections.js","../node_modules/gesel/src/fetchAllSets.js","../node_modules/gesel/src/fetchSingleCollection.js","../node_modules/gesel/src/fetchSingleSet.js","../node_modules/gesel/src/fetchGenesForAllSets.js","../node_modules/gesel/src/fetchGenesForSet.js","../node_modules/gesel/src/fetchSetsForAllGenes.js","../node_modules/gesel/src/fetchSetsForGene.js","../node_modules/gesel/src/searchSetText.js","../node_modules/gesel/src/findOverlappingSets.js","../node_modules/gesel/src/reindexGenesForAllSets.js","../node_modules/gesel/src/reindexSetsForAllGenes.js","../node_modules/scran.js/browser/MultiMatrix.js","../node_modules/scran.js/browser/ScranMatrix.js","../node_modules/scran.js/browser/abstract/realize.js","../node_modules/scran.js/browser/block.js","../node_modules/scran.js/browser/cbind.js","../node_modules/scran.js/browser/chooseHVGs.js","../node_modules/scran.js/browser/clusterKmeans.js","../node_modules/scran.js/browser/clusterSNNGraph.js","../node_modules/scran.js/browser/factorize.js","../node_modules/scran.js/browser/filterCells.js","../node_modules/scran.js/browser/findNearestNeighbors.js","../node_modules/scran.js/browser/groupedSizeFactors.js","../node_modules/scran.js/browser/guessFeatures.js","../node_modules/scran.js/browser/hypergeometricTest.js","../node_modules/scran.js/browser/initializeSparseMatrix.js","../node_modules/scran.js/browser/internal/computePerCellQcFilters.js","../node_modules/scran.js/browser/internal/computePerCellQcMetrics.js","../node_modules/scran.js/browser/internal/pack_strings.js","../node_modules/scran.js/browser/labelCells.js","../node_modules/scran.js/browser/logNormCounts.js","../node_modules/scran.js/browser/mnnCorrect.js","../node_modules/scran.js/browser/modelGeneVar.js","../node_modules/scran.js/browser/perCellAdtQcMetrics.js","../node_modules/scran.js/browser/perCellCrisprQcMetrics.js","../node_modules/scran.js/browser/perCellRnaQcMetrics.js","../node_modules/scran.js/browser/quickAdtSizeFactors.js","../node_modules/scran.js/browser/rds.js","../node_modules/scran.js/browser/runPCA.js","../node_modules/scran.js/browser/runTSNE.js","../node_modules/scran.js/browser/scaleByNeighbors.js","../node_modules/scran.js/browser/scoreFeatureSet.js","../node_modules/scran.js/browser/scoreMarkers.js","../node_modules/scran.js/browser/subset.js","../node_modules/scran.js/browser/suggestAdtQcFilters.js","../node_modules/scran.js/browser/suggestCrisprQcFilters.js","../node_modules/scran.js/browser/suggestRnaQcFilters.js","../node_modules/scran.js/browser/utils.js","../node_modules/scran.js/browser/wasm.js","../node_modules/wasmarrays.js/src/derived.js","../node_modules/wasmarrays.js/src/create.js","../node_modules/wasmarrays.js/src/view.js"],"sourcesContent":["/*!\n\nJSZip v3.10.1 - A JavaScript class for generating and reading zip files\n<http://stuartk.com/jszip>\n\n(c) 2009-2016 Stuart Knightley <stuart [at] stuartk.com>\nDual licenced under the MIT license or GPLv3. See https://raw.github.com/Stuk/jszip/main/LICENSE.markdown.\n\nJSZip uses the library pako released under the MIT license :\nhttps://github.com/nodeca/pako/blob/main/LICENSE\n*/\n\n!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{(\"undefined\"!=typeof window?window:\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:this).JSZip=e()}}(function(){return function s(a,o,h){function u(r,e){if(!o[r]){if(!a[r]){var t=\"function\"==typeof require&&require;if(!e&&t)return t(r,!0);if(l)return l(r,!0);var n=new Error(\"Cannot find module '\"+r+\"'\");throw n.code=\"MODULE_NOT_FOUND\",n}var i=o[r]={exports:{}};a[r][0].call(i.exports,function(e){var t=a[r][1][e];return u(t||e)},i,i.exports,s,a,o,h)}return o[r].exports}for(var l=\"function\"==typeof require&&require,e=0;e<h.length;e++)u(h[e]);return u}({1:[function(e,t,r){\"use strict\";var d=e(\"./utils\"),c=e(\"./support\"),p=\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";r.encode=function(e){for(var t,r,n,i,s,a,o,h=[],u=0,l=e.length,f=l,c=\"string\"!==d.getTypeOf(e);u<e.length;)f=l-u,n=c?(t=e[u++],r=u<l?e[u++]:0,u<l?e[u++]:0):(t=e.charCodeAt(u++),r=u<l?e.charCodeAt(u++):0,u<l?e.charCodeAt(u++):0),i=t>>2,s=(3&t)<<4|r>>4,a=1<f?(15&r)<<2|n>>6:64,o=2<f?63&n:64,h.push(p.charAt(i)+p.charAt(s)+p.charAt(a)+p.charAt(o));return h.join(\"\")},r.decode=function(e){var t,r,n,i,s,a,o=0,h=0,u=\"data:\";if(e.substr(0,u.length)===u)throw new Error(\"Invalid base64 input, it looks like a data url.\");var l,f=3*(e=e.replace(/[^A-Za-z0-9+/=]/g,\"\")).length/4;if(e.charAt(e.length-1)===p.charAt(64)&&f--,e.charAt(e.length-2)===p.charAt(64)&&f--,f%1!=0)throw new Error(\"Invalid base64 input, bad content length.\");for(l=c.uint8array?new Uint8Array(0|f):new Array(0|f);o<e.length;)t=p.indexOf(e.charAt(o++))<<2|(i=p.indexOf(e.charAt(o++)))>>4,r=(15&i)<<4|(s=p.indexOf(e.charAt(o++)))>>2,n=(3&s)<<6|(a=p.indexOf(e.charAt(o++))),l[h++]=t,64!==s&&(l[h++]=r),64!==a&&(l[h++]=n);return l}},{\"./support\":30,\"./utils\":32}],2:[function(e,t,r){\"use strict\";var n=e(\"./external\"),i=e(\"./stream/DataWorker\"),s=e(\"./stream/Crc32Probe\"),a=e(\"./stream/DataLengthProbe\");function o(e,t,r,n,i){this.compressedSize=e,this.uncompressedSize=t,this.crc32=r,this.compression=n,this.compressedContent=i}o.prototype={getContentWorker:function(){var e=new i(n.Promise.resolve(this.compressedContent)).pipe(this.compression.uncompressWorker()).pipe(new a(\"data_length\")),t=this;return e.on(\"end\",function(){if(this.streamInfo.data_length!==t.uncompressedSize)throw new Error(\"Bug : uncompressed data size mismatch\")}),e},getCompressedWorker:function(){return new i(n.Promise.resolve(this.compressedContent)).withStreamInfo(\"compressedSize\",this.compressedSize).withStreamInfo(\"uncompressedSize\",this.uncompressedSize).withStreamInfo(\"crc32\",this.crc32).withStreamInfo(\"compression\",this.compression)}},o.createWorkerFrom=function(e,t,r){return e.pipe(new s).pipe(new a(\"uncompressedSize\")).pipe(t.compressWorker(r)).pipe(new a(\"compressedSize\")).withStreamInfo(\"compression\",t)},t.exports=o},{\"./external\":6,\"./stream/Crc32Probe\":25,\"./stream/DataLengthProbe\":26,\"./stream/DataWorker\":27}],3:[function(e,t,r){\"use strict\";var n=e(\"./stream/GenericWorker\");r.STORE={magic:\"\\0\\0\",compressWorker:function(){return new n(\"STORE compression\")},uncompressWorker:function(){return new n(\"STORE decompression\")}},r.DEFLATE=e(\"./flate\")},{\"./flate\":7,\"./stream/GenericWorker\":28}],4:[function(e,t,r){\"use strict\";var n=e(\"./utils\");var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t){return void 0!==e&&e.length?\"string\"!==n.getTypeOf(e)?function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}(0|t,e,e.length,0):function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t.charCodeAt(a))];return-1^e}(0|t,e,e.length,0):0}},{\"./utils\":32}],5:[function(e,t,r){\"use strict\";r.base64=!1,r.binary=!1,r.dir=!1,r.createFolders=!0,r.date=null,r.compression=null,r.compressionOptions=null,r.comment=null,r.unixPermissions=null,r.dosPermissions=null},{}],6:[function(e,t,r){\"use strict\";var n=null;n=\"undefined\"!=typeof Promise?Promise:e(\"lie\"),t.exports={Promise:n}},{lie:37}],7:[function(e,t,r){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Uint32Array,i=e(\"pako\"),s=e(\"./utils\"),a=e(\"./stream/GenericWorker\"),o=n?\"uint8array\":\"array\";function h(e,t){a.call(this,\"FlateWorker/\"+e),this._pako=null,this._pakoAction=e,this._pakoOptions=t,this.meta={}}r.magic=\"\\b\\0\",s.inherits(h,a),h.prototype.processChunk=function(e){this.meta=e.meta,null===this._pako&&this._createPako(),this._pako.push(s.transformTo(o,e.data),!1)},h.prototype.flush=function(){a.prototype.flush.call(this),null===this._pako&&this._createPako(),this._pako.push([],!0)},h.prototype.cleanUp=function(){a.prototype.cleanUp.call(this),this._pako=null},h.prototype._createPako=function(){this._pako=new i[this._pakoAction]({raw:!0,level:this._pakoOptions.level||-1});var t=this;this._pako.onData=function(e){t.push({data:e,meta:t.meta})}},r.compressWorker=function(e){return new h(\"Deflate\",e)},r.uncompressWorker=function(){return new h(\"Inflate\",{})}},{\"./stream/GenericWorker\":28,\"./utils\":32,pako:38}],8:[function(e,t,r){\"use strict\";function A(e,t){var r,n=\"\";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n}function n(e,t,r,n,i,s){var a,o,h=e.file,u=e.compression,l=s!==O.utf8encode,f=I.transformTo(\"string\",s(h.name)),c=I.transformTo(\"string\",O.utf8encode(h.name)),d=h.comment,p=I.transformTo(\"string\",s(d)),m=I.transformTo(\"string\",O.utf8encode(d)),_=c.length!==h.name.length,g=m.length!==d.length,b=\"\",v=\"\",y=\"\",w=h.dir,k=h.date,x={crc32:0,compressedSize:0,uncompressedSize:0};t&&!r||(x.crc32=e.crc32,x.compressedSize=e.compressedSize,x.uncompressedSize=e.uncompressedSize);var S=0;t&&(S|=8),l||!_&&!g||(S|=2048);var z=0,C=0;w&&(z|=16),\"UNIX\"===i?(C=798,z|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(h.unixPermissions,w)):(C=20,z|=function(e){return 63&(e||0)}(h.dosPermissions)),a=k.getUTCHours(),a<<=6,a|=k.getUTCMinutes(),a<<=5,a|=k.getUTCSeconds()/2,o=k.getUTCFullYear()-1980,o<<=4,o|=k.getUTCMonth()+1,o<<=5,o|=k.getUTCDate(),_&&(v=A(1,1)+A(B(f),4)+c,b+=\"up\"+A(v.length,2)+v),g&&(y=A(1,1)+A(B(p),4)+m,b+=\"uc\"+A(y.length,2)+y);var E=\"\";return E+=\"\\n\\0\",E+=A(S,2),E+=u.magic,E+=A(a,2),E+=A(o,2),E+=A(x.crc32,4),E+=A(x.compressedSize,4),E+=A(x.uncompressedSize,4),E+=A(f.length,2),E+=A(b.length,2),{fileRecord:R.LOCAL_FILE_HEADER+E+f+b,dirRecord:R.CENTRAL_FILE_HEADER+A(C,2)+E+A(p.length,2)+\"\\0\\0\\0\\0\"+A(z,4)+A(n,4)+f+b+p}}var I=e(\"../utils\"),i=e(\"../stream/GenericWorker\"),O=e(\"../utf8\"),B=e(\"../crc32\"),R=e(\"../signature\");function s(e,t,r,n){i.call(this,\"ZipFileWorker\"),this.bytesWritten=0,this.zipComment=t,this.zipPlatform=r,this.encodeFileName=n,this.streamFiles=e,this.accumulate=!1,this.contentBuffer=[],this.dirRecords=[],this.currentSourceOffset=0,this.entriesCount=0,this.currentFile=null,this._sources=[]}I.inherits(s,i),s.prototype.push=function(e){var t=e.meta.percent||0,r=this.entriesCount,n=this._sources.length;this.accumulate?this.contentBuffer.push(e):(this.bytesWritten+=e.data.length,i.prototype.push.call(this,{data:e.data,meta:{currentFile:this.currentFile,percent:r?(t+100*(r-n-1))/r:100}}))},s.prototype.openedSource=function(e){this.currentSourceOffset=this.bytesWritten,this.currentFile=e.file.name;var t=this.streamFiles&&!e.file.dir;if(t){var r=n(e,t,!1,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);this.push({data:r.fileRecord,meta:{percent:0}})}else this.accumulate=!0},s.prototype.closedSource=function(e){this.accumulate=!1;var t=this.streamFiles&&!e.file.dir,r=n(e,t,!0,this.currentSourceOffset,this.zipPlatform,this.encodeFileName);if(this.dirRecords.push(r.dirRecord),t)this.push({data:function(e){return R.DATA_DESCRIPTOR+A(e.crc32,4)+A(e.compressedSize,4)+A(e.uncompressedSize,4)}(e),meta:{percent:100}});else for(this.push({data:r.fileRecord,meta:{percent:0}});this.contentBuffer.length;)this.push(this.contentBuffer.shift());this.currentFile=null},s.prototype.flush=function(){for(var e=this.bytesWritten,t=0;t<this.dirRecords.length;t++)this.push({data:this.dirRecords[t],meta:{percent:100}});var r=this.bytesWritten-e,n=function(e,t,r,n,i){var s=I.transformTo(\"string\",i(n));return R.CENTRAL_DIRECTORY_END+\"\\0\\0\\0\\0\"+A(e,2)+A(e,2)+A(t,4)+A(r,4)+A(s.length,2)+s}(this.dirRecords.length,r,e,this.zipComment,this.encodeFileName);this.push({data:n,meta:{percent:100}})},s.prototype.prepareNextSource=function(){this.previous=this._sources.shift(),this.openedSource(this.previous.streamInfo),this.isPaused?this.previous.pause():this.previous.resume()},s.prototype.registerPrevious=function(e){this._sources.push(e);var t=this;return e.on(\"data\",function(e){t.processChunk(e)}),e.on(\"end\",function(){t.closedSource(t.previous.streamInfo),t._sources.length?t.prepareNextSource():t.end()}),e.on(\"error\",function(e){t.error(e)}),this},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this.previous&&this._sources.length?(this.prepareNextSource(),!0):this.previous||this._sources.length||this.generatedError?void 0:(this.end(),!0))},s.prototype.error=function(e){var t=this._sources;if(!i.prototype.error.call(this,e))return!1;for(var r=0;r<t.length;r++)try{t[r].error(e)}catch(e){}return!0},s.prototype.lock=function(){i.prototype.lock.call(this);for(var e=this._sources,t=0;t<e.length;t++)e[t].lock()},t.exports=s},{\"../crc32\":4,\"../signature\":23,\"../stream/GenericWorker\":28,\"../utf8\":31,\"../utils\":32}],9:[function(e,t,r){\"use strict\";var u=e(\"../compressions\"),n=e(\"./ZipFileWorker\");r.generateWorker=function(e,a,t){var o=new n(a.streamFiles,t,a.platform,a.encodeFileName),h=0;try{e.forEach(function(e,t){h++;var r=function(e,t){var r=e||t,n=u[r];if(!n)throw new Error(r+\" is not a valid compression method !\");return n}(t.options.compression,a.compression),n=t.options.compressionOptions||a.compressionOptions||{},i=t.dir,s=t.date;t._compressWorker(r,n).withStreamInfo(\"file\",{name:e,dir:i,date:s,comment:t.comment||\"\",unixPermissions:t.unixPermissions,dosPermissions:t.dosPermissions}).pipe(o)}),o.entriesCount=h}catch(e){o.error(e)}return o}},{\"../compressions\":3,\"./ZipFileWorker\":8}],10:[function(e,t,r){\"use strict\";function n(){if(!(this instanceof n))return new n;if(arguments.length)throw new Error(\"The constructor with parameters has been removed in JSZip 3.0, please check the upgrade guide.\");this.files=Object.create(null),this.comment=null,this.root=\"\",this.clone=function(){var e=new n;for(var t in this)\"function\"!=typeof this[t]&&(e[t]=this[t]);return e}}(n.prototype=e(\"./object\")).loadAsync=e(\"./load\"),n.support=e(\"./support\"),n.defaults=e(\"./defaults\"),n.version=\"3.10.1\",n.loadAsync=function(e,t){return(new n).loadAsync(e,t)},n.external=e(\"./external\"),t.exports=n},{\"./defaults\":5,\"./external\":6,\"./load\":11,\"./object\":15,\"./support\":30}],11:[function(e,t,r){\"use strict\";var u=e(\"./utils\"),i=e(\"./external\"),n=e(\"./utf8\"),s=e(\"./zipEntries\"),a=e(\"./stream/Crc32Probe\"),l=e(\"./nodejsUtils\");function f(n){return new i.Promise(function(e,t){var r=n.decompressed.getContentWorker().pipe(new a);r.on(\"error\",function(e){t(e)}).on(\"end\",function(){r.streamInfo.crc32!==n.decompressed.crc32?t(new Error(\"Corrupted zip : CRC32 mismatch\")):e()}).resume()})}t.exports=function(e,o){var h=this;return o=u.extend(o||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:n.utf8decode}),l.isNode&&l.isStream(e)?i.Promise.reject(new Error(\"JSZip can't accept a stream when loading a zip file.\")):u.prepareContent(\"the loaded zip file\",e,!0,o.optimizedBinaryString,o.base64).then(function(e){var t=new s(o);return t.load(e),t}).then(function(e){var t=[i.Promise.resolve(e)],r=e.files;if(o.checkCRC32)for(var n=0;n<r.length;n++)t.push(f(r[n]));return i.Promise.all(t)}).then(function(e){for(var t=e.shift(),r=t.files,n=0;n<r.length;n++){var i=r[n],s=i.fileNameStr,a=u.resolve(i.fileNameStr);h.file(a,i.decompressed,{binary:!0,optimizedBinaryString:!0,date:i.date,dir:i.dir,comment:i.fileCommentStr.length?i.fileCommentStr:null,unixPermissions:i.unixPermissions,dosPermissions:i.dosPermissions,createFolders:o.createFolders}),i.dir||(h.file(a).unsafeOriginalName=s)}return t.zipComment.length&&(h.comment=t.zipComment),h})}},{\"./external\":6,\"./nodejsUtils\":14,\"./stream/Crc32Probe\":25,\"./utf8\":31,\"./utils\":32,\"./zipEntries\":33}],12:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"../stream/GenericWorker\");function s(e,t){i.call(this,\"Nodejs stream input adapter for \"+e),this._upstreamEnded=!1,this._bindStream(t)}n.inherits(s,i),s.prototype._bindStream=function(e){var t=this;(this._stream=e).pause(),e.on(\"data\",function(e){t.push({data:e,meta:{percent:0}})}).on(\"error\",function(e){t.isPaused?this.generatedError=e:t.error(e)}).on(\"end\",function(){t.isPaused?t._upstreamEnded=!0:t.end()})},s.prototype.pause=function(){return!!i.prototype.pause.call(this)&&(this._stream.pause(),!0)},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(this._upstreamEnded?this.end():this._stream.resume(),!0)},t.exports=s},{\"../stream/GenericWorker\":28,\"../utils\":32}],13:[function(e,t,r){\"use strict\";var i=e(\"readable-stream\").Readable;function n(e,t,r){i.call(this,t),this._helper=e;var n=this;e.on(\"data\",function(e,t){n.push(e)||n._helper.pause(),r&&r(t)}).on(\"error\",function(e){n.emit(\"error\",e)}).on(\"end\",function(){n.push(null)})}e(\"../utils\").inherits(n,i),n.prototype._read=function(){this._helper.resume()},t.exports=n},{\"../utils\":32,\"readable-stream\":16}],14:[function(e,t,r){\"use strict\";t.exports={isNode:\"undefined\"!=typeof Buffer,newBufferFrom:function(e,t){if(Buffer.from&&Buffer.from!==Uint8Array.from)return Buffer.from(e,t);if(\"number\"==typeof e)throw new Error('The \"data\" argument must not be a number');return new Buffer(e,t)},allocBuffer:function(e){if(Buffer.alloc)return Buffer.alloc(e);var t=new Buffer(e);return t.fill(0),t},isBuffer:function(e){return Buffer.isBuffer(e)},isStream:function(e){return e&&\"function\"==typeof e.on&&\"function\"==typeof e.pause&&\"function\"==typeof e.resume}}},{}],15:[function(e,t,r){\"use strict\";function s(e,t,r){var n,i=u.getTypeOf(t),s=u.extend(r||{},f);s.date=s.date||new Date,null!==s.compression&&(s.compression=s.compression.toUpperCase()),\"string\"==typeof s.unixPermissions&&(s.unixPermissions=parseInt(s.unixPermissions,8)),s.unixPermissions&&16384&s.unixPermissions&&(s.dir=!0),s.dosPermissions&&16&s.dosPermissions&&(s.dir=!0),s.dir&&(e=g(e)),s.createFolders&&(n=_(e))&&b.call(this,n,!0);var a=\"string\"===i&&!1===s.binary&&!1===s.base64;r&&void 0!==r.binary||(s.binary=!a),(t instanceof c&&0===t.uncompressedSize||s.dir||!t||0===t.length)&&(s.base64=!1,s.binary=!0,t=\"\",s.compression=\"STORE\",i=\"string\");var o=null;o=t instanceof c||t instanceof l?t:p.isNode&&p.isStream(t)?new m(e,t):u.prepareContent(e,t,s.binary,s.optimizedBinaryString,s.base64);var h=new d(e,o,s);this.files[e]=h}var i=e(\"./utf8\"),u=e(\"./utils\"),l=e(\"./stream/GenericWorker\"),a=e(\"./stream/StreamHelper\"),f=e(\"./defaults\"),c=e(\"./compressedObject\"),d=e(\"./zipObject\"),o=e(\"./generate\"),p=e(\"./nodejsUtils\"),m=e(\"./nodejs/NodejsStreamInputAdapter\"),_=function(e){\"/\"===e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf(\"/\");return 0<t?e.substring(0,t):\"\"},g=function(e){return\"/\"!==e.slice(-1)&&(e+=\"/\"),e},b=function(e,t){return t=void 0!==t?t:f.createFolders,e=g(e),this.files[e]||s.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]};function h(e){return\"[object RegExp]\"===Object.prototype.toString.call(e)}var n={load:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},forEach:function(e){var t,r,n;for(t in this.files)n=this.files[t],(r=t.slice(this.root.length,t.length))&&t.slice(0,this.root.length)===this.root&&e(r,n)},filter:function(r){var n=[];return this.forEach(function(e,t){r(e,t)&&n.push(t)}),n},file:function(e,t,r){if(1!==arguments.length)return e=this.root+e,s.call(this,e,t,r),this;if(h(e)){var n=e;return this.filter(function(e,t){return!t.dir&&n.test(e)})}var i=this.files[this.root+e];return i&&!i.dir?i:null},folder:function(r){if(!r)return this;if(h(r))return this.filter(function(e,t){return t.dir&&r.test(e)});var e=this.root+r,t=b.call(this,e),n=this.clone();return n.root=t.name,n},remove:function(r){r=this.root+r;var e=this.files[r];if(e||(\"/\"!==r.slice(-1)&&(r+=\"/\"),e=this.files[r]),e&&!e.dir)delete this.files[r];else for(var t=this.filter(function(e,t){return t.name.slice(0,r.length)===r}),n=0;n<t.length;n++)delete this.files[t[n].name];return this},generate:function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},generateInternalStream:function(e){var t,r={};try{if((r=u.extend(e||{},{streamFiles:!1,compression:\"STORE\",compressionOptions:null,type:\"\",platform:\"DOS\",comment:null,mimeType:\"application/zip\",encodeFileName:i.utf8encode})).type=r.type.toLowerCase(),r.compression=r.compression.toUpperCase(),\"binarystring\"===r.type&&(r.type=\"string\"),!r.type)throw new Error(\"No output type specified.\");u.checkSupport(r.type),\"darwin\"!==r.platform&&\"freebsd\"!==r.platform&&\"linux\"!==r.platform&&\"sunos\"!==r.platform||(r.platform=\"UNIX\"),\"win32\"===r.platform&&(r.platform=\"DOS\");var n=r.comment||this.comment||\"\";t=o.generateWorker(this,r,n)}catch(e){(t=new l(\"error\")).error(e)}return new a(t,r.type||\"string\",r.mimeType)},generateAsync:function(e,t){return this.generateInternalStream(e).accumulate(t)},generateNodeStream:function(e,t){return(e=e||{}).type||(e.type=\"nodebuffer\"),this.generateInternalStream(e).toNodejsStream(t)}};t.exports=n},{\"./compressedObject\":2,\"./defaults\":5,\"./generate\":9,\"./nodejs/NodejsStreamInputAdapter\":12,\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31,\"./utils\":32,\"./zipObject\":35}],16:[function(e,t,r){\"use strict\";t.exports=e(\"stream\")},{stream:void 0}],17:[function(e,t,r){\"use strict\";var n=e(\"./DataReader\");function i(e){n.call(this,e);for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}e(\"../utils\").inherits(i,n),i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.length-4;0<=s;--s)if(this.data[s]===t&&this.data[s+1]===r&&this.data[s+2]===n&&this.data[s+3]===i)return s-this.zero;return-1},i.prototype.readAndCheckSignature=function(e){var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),s=this.readData(4);return t===s[0]&&r===s[1]&&n===s[2]&&i===s[3]},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./DataReader\":18}],18:[function(e,t,r){\"use strict\";var n=e(\"../utils\");function i(e){this.data=e,this.length=e.length,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error(\"End of data reached (data length = \"+this.length+\", asked index = \"+e+\"). Corrupted zip ?\")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo(\"string\",this.readData(e))},readData:function(){},lastIndexOfSignature:function(){},readAndCheckSignature:function(){},readDate:function(){var e=this.readInt(4);return new Date(Date.UTC(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1))}},t.exports=i},{\"../utils\":32}],19:[function(e,t,r){\"use strict\";var n=e(\"./Uint8ArrayReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./Uint8ArrayReader\":21}],20:[function(e,t,r){\"use strict\";var n=e(\"./DataReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},i.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},i.prototype.readAndCheckSignature=function(e){return e===this.readData(4)},i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./DataReader\":18}],21:[function(e,t,r){\"use strict\";var n=e(\"./ArrayReader\");function i(e){n.call(this,e)}e(\"../utils\").inherits(i,n),i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},t.exports=i},{\"../utils\":32,\"./ArrayReader\":17}],22:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"../support\"),s=e(\"./ArrayReader\"),a=e(\"./StringReader\"),o=e(\"./NodeBufferReader\"),h=e(\"./Uint8ArrayReader\");t.exports=function(e){var t=n.getTypeOf(e);return n.checkSupport(t),\"string\"!==t||i.uint8array?\"nodebuffer\"===t?new o(e):i.uint8array?new h(n.transformTo(\"uint8array\",e)):new s(n.transformTo(\"array\",e)):new a(e)}},{\"../support\":30,\"../utils\":32,\"./ArrayReader\":17,\"./NodeBufferReader\":19,\"./StringReader\":20,\"./Uint8ArrayReader\":21}],23:[function(e,t,r){\"use strict\";r.LOCAL_FILE_HEADER=\"PK\u0003\u0004\",r.CENTRAL_FILE_HEADER=\"PK\u0001\u0002\",r.CENTRAL_DIRECTORY_END=\"PK\u0005\u0006\",r.ZIP64_CENTRAL_DIRECTORY_LOCATOR=\"PK\u0006\u0007\",r.ZIP64_CENTRAL_DIRECTORY_END=\"PK\u0006\u0006\",r.DATA_DESCRIPTOR=\"PK\u0007\\b\"},{}],24:[function(e,t,r){\"use strict\";var n=e(\"./GenericWorker\"),i=e(\"../utils\");function s(e){n.call(this,\"ConvertWorker to \"+e),this.destType=e}i.inherits(s,n),s.prototype.processChunk=function(e){this.push({data:i.transformTo(this.destType,e.data),meta:e.meta})},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],25:[function(e,t,r){\"use strict\";var n=e(\"./GenericWorker\"),i=e(\"../crc32\");function s(){n.call(this,\"Crc32Probe\"),this.withStreamInfo(\"crc32\",0)}e(\"../utils\").inherits(s,n),s.prototype.processChunk=function(e){this.streamInfo.crc32=i(e.data,this.streamInfo.crc32||0),this.push(e)},t.exports=s},{\"../crc32\":4,\"../utils\":32,\"./GenericWorker\":28}],26:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"./GenericWorker\");function s(e){i.call(this,\"DataLengthProbe for \"+e),this.propName=e,this.withStreamInfo(e,0)}n.inherits(s,i),s.prototype.processChunk=function(e){if(e){var t=this.streamInfo[this.propName]||0;this.streamInfo[this.propName]=t+e.data.length}i.prototype.processChunk.call(this,e)},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],27:[function(e,t,r){\"use strict\";var n=e(\"../utils\"),i=e(\"./GenericWorker\");function s(e){i.call(this,\"DataWorker\");var t=this;this.dataIsReady=!1,this.index=0,this.max=0,this.data=null,this.type=\"\",this._tickScheduled=!1,e.then(function(e){t.dataIsReady=!0,t.data=e,t.max=e&&e.length||0,t.type=n.getTypeOf(e),t.isPaused||t._tickAndRepeat()},function(e){t.error(e)})}n.inherits(s,i),s.prototype.cleanUp=function(){i.prototype.cleanUp.call(this),this.data=null},s.prototype.resume=function(){return!!i.prototype.resume.call(this)&&(!this._tickScheduled&&this.dataIsReady&&(this._tickScheduled=!0,n.delay(this._tickAndRepeat,[],this)),!0)},s.prototype._tickAndRepeat=function(){this._tickScheduled=!1,this.isPaused||this.isFinished||(this._tick(),this.isFinished||(n.delay(this._tickAndRepeat,[],this),this._tickScheduled=!0))},s.prototype._tick=function(){if(this.isPaused||this.isFinished)return!1;var e=null,t=Math.min(this.max,this.index+16384);if(this.index>=this.max)return this.end();switch(this.type){case\"string\":e=this.data.substring(this.index,t);break;case\"uint8array\":e=this.data.subarray(this.index,t);break;case\"array\":case\"nodebuffer\":e=this.data.slice(this.index,t)}return this.index=t,this.push({data:e,meta:{percent:this.max?this.index/this.max*100:0}})},t.exports=s},{\"../utils\":32,\"./GenericWorker\":28}],28:[function(e,t,r){\"use strict\";function n(e){this.name=e||\"default\",this.streamInfo={},this.generatedError=null,this.extraStreamInfo={},this.isPaused=!0,this.isFinished=!1,this.isLocked=!1,this._listeners={data:[],end:[],error:[]},this.previous=null}n.prototype={push:function(e){this.emit(\"data\",e)},end:function(){if(this.isFinished)return!1;this.flush();try{this.emit(\"end\"),this.cleanUp(),this.isFinished=!0}catch(e){this.emit(\"error\",e)}return!0},error:function(e){return!this.isFinished&&(this.isPaused?this.generatedError=e:(this.isFinished=!0,this.emit(\"error\",e),this.previous&&this.previous.error(e),this.cleanUp()),!0)},on:function(e,t){return this._listeners[e].push(t),this},cleanUp:function(){this.streamInfo=this.generatedError=this.extraStreamInfo=null,this._listeners=[]},emit:function(e,t){if(this._listeners[e])for(var r=0;r<this._listeners[e].length;r++)this._listeners[e][r].call(this,t)},pipe:function(e){return e.registerPrevious(this)},registerPrevious:function(e){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.streamInfo=e.streamInfo,this.mergeStreamInfo(),this.previous=e;var t=this;return e.on(\"data\",function(e){t.processChunk(e)}),e.on(\"end\",function(){t.end()}),e.on(\"error\",function(e){t.error(e)}),this},pause:function(){return!this.isPaused&&!this.isFinished&&(this.isPaused=!0,this.previous&&this.previous.pause(),!0)},resume:function(){if(!this.isPaused||this.isFinished)return!1;var e=this.isPaused=!1;return this.generatedError&&(this.error(this.generatedError),e=!0),this.previous&&this.previous.resume(),!e},flush:function(){},processChunk:function(e){this.push(e)},withStreamInfo:function(e,t){return this.extraStreamInfo[e]=t,this.mergeStreamInfo(),this},mergeStreamInfo:function(){for(var e in this.extraStreamInfo)Object.prototype.hasOwnProperty.call(this.extraStreamInfo,e)&&(this.streamInfo[e]=this.extraStreamInfo[e])},lock:function(){if(this.isLocked)throw new Error(\"The stream '\"+this+\"' has already been used.\");this.isLocked=!0,this.previous&&this.previous.lock()},toString:function(){var e=\"Worker \"+this.name;return this.previous?this.previous+\" -> \"+e:e}},t.exports=n},{}],29:[function(e,t,r){\"use strict\";var h=e(\"../utils\"),i=e(\"./ConvertWorker\"),s=e(\"./GenericWorker\"),u=e(\"../base64\"),n=e(\"../support\"),a=e(\"../external\"),o=null;if(n.nodestream)try{o=e(\"../nodejs/NodejsStreamOutputAdapter\")}catch(e){}function l(e,o){return new a.Promise(function(t,r){var n=[],i=e._internalType,s=e._outputType,a=e._mimeType;e.on(\"data\",function(e,t){n.push(e),o&&o(t)}).on(\"error\",function(e){n=[],r(e)}).on(\"end\",function(){try{var e=function(e,t,r){switch(e){case\"blob\":return h.newBlob(h.transformTo(\"arraybuffer\",t),r);case\"base64\":return u.encode(t);default:return h.transformTo(e,t)}}(s,function(e,t){var r,n=0,i=null,s=0;for(r=0;r<t.length;r++)s+=t[r].length;switch(e){case\"string\":return t.join(\"\");case\"array\":return Array.prototype.concat.apply([],t);case\"uint8array\":for(i=new Uint8Array(s),r=0;r<t.length;r++)i.set(t[r],n),n+=t[r].length;return i;case\"nodebuffer\":return Buffer.concat(t);default:throw new Error(\"concat : unsupported type '\"+e+\"'\")}}(i,n),a);t(e)}catch(e){r(e)}n=[]}).resume()})}function f(e,t,r){var n=t;switch(t){case\"blob\":case\"arraybuffer\":n=\"uint8array\";break;case\"base64\":n=\"string\"}try{this._internalType=n,this._outputType=t,this._mimeType=r,h.checkSupport(n),this._worker=e.pipe(new i(n)),e.lock()}catch(e){this._worker=new s(\"error\"),this._worker.error(e)}}f.prototype={accumulate:function(e){return l(this,e)},on:function(e,t){var r=this;return\"data\"===e?this._worker.on(e,function(e){t.call(r,e.data,e.meta)}):this._worker.on(e,function(){h.delay(t,arguments,r)}),this},resume:function(){return h.delay(this._worker.resume,[],this._worker),this},pause:function(){return this._worker.pause(),this},toNodejsStream:function(e){if(h.checkSupport(\"nodestream\"),\"nodebuffer\"!==this._outputType)throw new Error(this._outputType+\" is not supported by this method\");return new o(this,{objectMode:\"nodebuffer\"!==this._outputType},e)}},t.exports=f},{\"../base64\":1,\"../external\":6,\"../nodejs/NodejsStreamOutputAdapter\":13,\"../support\":30,\"../utils\":32,\"./ConvertWorker\":24,\"./GenericWorker\":28}],30:[function(e,t,r){\"use strict\";if(r.base64=!0,r.array=!0,r.string=!0,r.arraybuffer=\"undefined\"!=typeof ArrayBuffer&&\"undefined\"!=typeof Uint8Array,r.nodebuffer=\"undefined\"!=typeof Buffer,r.uint8array=\"undefined\"!=typeof Uint8Array,\"undefined\"==typeof ArrayBuffer)r.blob=!1;else{var n=new ArrayBuffer(0);try{r.blob=0===new Blob([n],{type:\"application/zip\"}).size}catch(e){try{var i=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);i.append(n),r.blob=0===i.getBlob(\"application/zip\").size}catch(e){r.blob=!1}}}try{r.nodestream=!!e(\"readable-stream\").Readable}catch(e){r.nodestream=!1}},{\"readable-stream\":16}],31:[function(e,t,s){\"use strict\";for(var o=e(\"./utils\"),h=e(\"./support\"),r=e(\"./nodejsUtils\"),n=e(\"./stream/GenericWorker\"),u=new Array(256),i=0;i<256;i++)u[i]=252<=i?6:248<=i?5:240<=i?4:224<=i?3:192<=i?2:1;u[254]=u[254]=1;function a(){n.call(this,\"utf-8 decode\"),this.leftOver=null}function l(){n.call(this,\"utf-8 encode\")}s.utf8encode=function(e){return h.nodebuffer?r.newBufferFrom(e,\"utf-8\"):function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=h.uint8array?new Uint8Array(o):new Array(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t}(e)},s.utf8decode=function(e){return h.nodebuffer?o.transformTo(\"nodebuffer\",e).toString(\"utf-8\"):function(e){var t,r,n,i,s=e.length,a=new Array(2*s);for(t=r=0;t<s;)if((n=e[t++])<128)a[r++]=n;else if(4<(i=u[n]))a[r++]=65533,t+=i-1;else{for(n&=2===i?31:3===i?15:7;1<i&&t<s;)n=n<<6|63&e[t++],i--;1<i?a[r++]=65533:n<65536?a[r++]=n:(n-=65536,a[r++]=55296|n>>10&1023,a[r++]=56320|1023&n)}return a.length!==r&&(a.subarray?a=a.subarray(0,r):a.length=r),o.applyFromCharCode(a)}(e=o.transformTo(h.uint8array?\"uint8array\":\"array\",e))},o.inherits(a,n),a.prototype.processChunk=function(e){var t=o.transformTo(h.uint8array?\"uint8array\":\"array\",e.data);if(this.leftOver&&this.leftOver.length){if(h.uint8array){var r=t;(t=new Uint8Array(r.length+this.leftOver.length)).set(this.leftOver,0),t.set(r,this.leftOver.length)}else t=this.leftOver.concat(t);this.leftOver=null}var n=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}(t),i=t;n!==t.length&&(h.uint8array?(i=t.subarray(0,n),this.leftOver=t.subarray(n,t.length)):(i=t.slice(0,n),this.leftOver=t.slice(n,t.length))),this.push({data:s.utf8decode(i),meta:e.meta})},a.prototype.flush=function(){this.leftOver&&this.leftOver.length&&(this.push({data:s.utf8decode(this.leftOver),meta:{}}),this.leftOver=null)},s.Utf8DecodeWorker=a,o.inherits(l,n),l.prototype.processChunk=function(e){this.push({data:s.utf8encode(e.data),meta:e.meta})},s.Utf8EncodeWorker=l},{\"./nodejsUtils\":14,\"./stream/GenericWorker\":28,\"./support\":30,\"./utils\":32}],32:[function(e,t,a){\"use strict\";var o=e(\"./support\"),h=e(\"./base64\"),r=e(\"./nodejsUtils\"),u=e(\"./external\");function n(e){return e}function l(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}e(\"setimmediate\"),a.newBlob=function(t,r){a.checkSupport(\"blob\");try{return new Blob([t],{type:r})}catch(e){try{var n=new(self.BlobBuilder||self.WebKitBlobBuilder||self.MozBlobBuilder||self.MSBlobBuilder);return n.append(t),n.getBlob(r)}catch(e){throw new Error(\"Bug : can't construct the Blob.\")}}};var i={stringifyByChunk:function(e,t,r){var n=[],i=0,s=e.length;if(s<=r)return String.fromCharCode.apply(null,e);for(;i<s;)\"array\"===t||\"nodebuffer\"===t?n.push(String.fromCharCode.apply(null,e.slice(i,Math.min(i+r,s)))):n.push(String.fromCharCode.apply(null,e.subarray(i,Math.min(i+r,s)))),i+=r;return n.join(\"\")},stringifyByChar:function(e){for(var t=\"\",r=0;r<e.length;r++)t+=String.fromCharCode(e[r]);return t},applyCanBeUsed:{uint8array:function(){try{return o.uint8array&&1===String.fromCharCode.apply(null,new Uint8Array(1)).length}catch(e){return!1}}(),nodebuffer:function(){try{return o.nodebuffer&&1===String.fromCharCode.apply(null,r.allocBuffer(1)).length}catch(e){return!1}}()}};function s(e){var t=65536,r=a.getTypeOf(e),n=!0;if(\"uint8array\"===r?n=i.applyCanBeUsed.uint8array:\"nodebuffer\"===r&&(n=i.applyCanBeUsed.nodebuffer),n)for(;1<t;)try{return i.stringifyByChunk(e,r,t)}catch(e){t=Math.floor(t/2)}return i.stringifyByChar(e)}function f(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}a.applyFromCharCode=s;var c={};c.string={string:n,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:function(e){return l(e,r.allocBuffer(e.length))}},c.array={string:s,array:n,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(e)}},c.arraybuffer={string:function(e){return s(new Uint8Array(e))},array:function(e){return f(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:n,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return r.newBufferFrom(new Uint8Array(e))}},c.uint8array={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:n,nodebuffer:function(e){return r.newBufferFrom(e)}},c.nodebuffer={string:s,array:function(e){return f(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return f(e,new Uint8Array(e.length))},nodebuffer:n},a.transformTo=function(e,t){if(t=t||\"\",!e)return t;a.checkSupport(e);var r=a.getTypeOf(t);return c[r][e](t)},a.resolve=function(e){for(var t=e.split(\"/\"),r=[],n=0;n<t.length;n++){var i=t[n];\".\"===i||\"\"===i&&0!==n&&n!==t.length-1||(\"..\"===i?r.pop():r.push(i))}return r.join(\"/\")},a.getTypeOf=function(e){return\"string\"==typeof e?\"string\":\"[object Array]\"===Object.prototype.toString.call(e)?\"array\":o.nodebuffer&&r.isBuffer(e)?\"nodebuffer\":o.uint8array&&e instanceof Uint8Array?\"uint8array\":o.arraybuffer&&e instanceof ArrayBuffer?\"arraybuffer\":void 0},a.checkSupport=function(e){if(!o[e.toLowerCase()])throw new Error(e+\" is not supported by this platform\")},a.MAX_VALUE_16BITS=65535,a.MAX_VALUE_32BITS=-1,a.pretty=function(e){var t,r,n=\"\";for(r=0;r<(e||\"\").length;r++)n+=\"\\\\x\"+((t=e.charCodeAt(r))<16?\"0\":\"\")+t.toString(16).toUpperCase();return n},a.delay=function(e,t,r){setImmediate(function(){e.apply(r||null,t||[])})},a.inherits=function(e,t){function r(){}r.prototype=t.prototype,e.prototype=new r},a.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])Object.prototype.hasOwnProperty.call(arguments[e],t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r},a.prepareContent=function(r,e,n,i,s){return u.Promise.resolve(e).then(function(n){return o.blob&&(n instanceof Blob||-1!==[\"[object File]\",\"[object Blob]\"].indexOf(Object.prototype.toString.call(n)))&&\"undefined\"!=typeof FileReader?new u.Promise(function(t,r){var e=new FileReader;e.onload=function(e){t(e.target.result)},e.onerror=function(e){r(e.target.error)},e.readAsArrayBuffer(n)}):n}).then(function(e){var t=a.getTypeOf(e);return t?(\"arraybuffer\"===t?e=a.transformTo(\"uint8array\",e):\"string\"===t&&(s?e=h.decode(e):n&&!0!==i&&(e=function(e){return l(e,o.uint8array?new Uint8Array(e.length):new Array(e.length))}(e))),e):u.Promise.reject(new Error(\"Can't read the data of '\"+r+\"'. Is it in a supported JavaScript type (String, Blob, ArrayBuffer, etc) ?\"))})}},{\"./base64\":1,\"./external\":6,\"./nodejsUtils\":14,\"./support\":30,setimmediate:54}],33:[function(e,t,r){\"use strict\";var n=e(\"./reader/readerFor\"),i=e(\"./utils\"),s=e(\"./signature\"),a=e(\"./zipEntry\"),o=e(\"./support\");function h(e){this.files=[],this.loadOptions=e}h.prototype={checkSignature:function(e){if(!this.reader.readAndCheckSignature(e)){this.reader.index-=4;var t=this.reader.readString(4);throw new Error(\"Corrupted zip or bug: unexpected signature (\"+i.pretty(t)+\", expected \"+i.pretty(e)+\")\")}},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=o.uint8array?\"uint8array\":\"array\",r=i.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.reader.skip(4),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readData(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),1<this.disksCount)throw new Error(\"Multi-volumes zip are not supported\")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(s.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readAndCheckSignature(s.CENTRAL_FILE_HEADER);)(e=new a({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error(\"Corrupted zip or bug: expected \"+this.centralDirRecords+\" records in central dir, got \"+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(s.CENTRAL_DIRECTORY_END);if(e<0)throw!this.isSignature(0,s.LOCAL_FILE_HEADER)?new Error(\"Can't find end of central directory : is this a zip file ? If it is, see https://stuk.github.io/jszip/documentation/howto/read_zip.html\"):new Error(\"Corrupted zip: can't find end of central directory\");this.reader.setIndex(e);var t=e;if(this.checkSignature(s.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===i.MAX_VALUE_16BITS||this.diskWithCentralDirStart===i.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===i.MAX_VALUE_16BITS||this.centralDirRecords===i.MAX_VALUE_16BITS||this.centralDirSize===i.MAX_VALUE_32BITS||this.centralDirOffset===i.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory locator\");if(this.reader.setIndex(e),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,s.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error(\"Corrupted zip: can't find the ZIP64 end of central directory\");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(s.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(0<n)this.isSignature(t,s.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error(\"Corrupted zip: missing \"+Math.abs(n)+\" bytes.\")},prepareReader:function(e){this.reader=n(e)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},t.exports=h},{\"./reader/readerFor\":22,\"./signature\":23,\"./support\":30,\"./utils\":32,\"./zipEntry\":34}],34:[function(e,t,r){\"use strict\";var n=e(\"./reader/readerFor\"),s=e(\"./utils\"),i=e(\"./compressedObject\"),a=e(\"./crc32\"),o=e(\"./utf8\"),h=e(\"./compressions\"),u=e(\"./support\");function l(e,t){this.options=e,this.loadOptions=t}l.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1===this.compressedSize||-1===this.uncompressedSize)throw new Error(\"Bug or corrupted zip : didn't get enough information from the central directory (compressedSize === -1 || uncompressedSize === -1)\");if(null===(t=function(e){for(var t in h)if(Object.prototype.hasOwnProperty.call(h,t)&&h[t].magic===e)return h[t];return null}(this.compressionMethod)))throw new Error(\"Corrupted zip : compression \"+s.pretty(this.compressionMethod)+\" unknown (inner file : \"+s.transformTo(\"string\",this.fileName)+\")\");this.decompressed=new i(this.compressedSize,this.uncompressedSize,this.crc32,t,e.readData(this.compressedSize))},readCentralPart:function(e){this.versionMadeBy=e.readInt(2),e.skip(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4);var t=e.readInt(2);if(this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error(\"Encrypted zip are not supported\");e.skip(t),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0==e&&(this.dosPermissions=63&this.externalFileAttributes),3==e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||\"/\"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(){if(this.extraFields[1]){var e=n(this.extraFields[1].value);this.uncompressedSize===s.MAX_VALUE_32BITS&&(this.uncompressedSize=e.readInt(8)),this.compressedSize===s.MAX_VALUE_32BITS&&(this.compressedSize=e.readInt(8)),this.localHeaderOffset===s.MAX_VALUE_32BITS&&(this.localHeaderOffset=e.readInt(8)),this.diskNumberStart===s.MAX_VALUE_32BITS&&(this.diskNumberStart=e.readInt(4))}},readExtraFields:function(e){var t,r,n,i=e.index+this.extraFieldsLength;for(this.extraFields||(this.extraFields={});e.index+4<i;)t=e.readInt(2),r=e.readInt(2),n=e.readData(r),this.extraFields[t]={id:t,length:r,value:n};e.setIndex(i)},handleUTF8:function(){var e=u.uint8array?\"uint8array\":\"array\";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=s.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var i=s.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(i)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=n(e.value);return 1!==t.readInt(1)?null:a(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readData(e.length-5))}return null}},t.exports=l},{\"./compressedObject\":2,\"./compressions\":3,\"./crc32\":4,\"./reader/readerFor\":22,\"./support\":30,\"./utf8\":31,\"./utils\":32}],35:[function(e,t,r){\"use strict\";function n(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this._dataBinary=r.binary,this.options={compression:r.compression,compressionOptions:r.compressionOptions}}var s=e(\"./stream/StreamHelper\"),i=e(\"./stream/DataWorker\"),a=e(\"./utf8\"),o=e(\"./compressedObject\"),h=e(\"./stream/GenericWorker\");n.prototype={internalStream:function(e){var t=null,r=\"string\";try{if(!e)throw new Error(\"No output type specified.\");var n=\"string\"===(r=e.toLowerCase())||\"text\"===r;\"binarystring\"!==r&&\"text\"!==r||(r=\"string\"),t=this._decompressWorker();var i=!this._dataBinary;i&&!n&&(t=t.pipe(new a.Utf8EncodeWorker)),!i&&n&&(t=t.pipe(new a.Utf8DecodeWorker))}catch(e){(t=new h(\"error\")).error(e)}return new s(t,r,\"\")},async:function(e,t){return this.internalStream(e).accumulate(t)},nodeStream:function(e,t){return this.internalStream(e||\"nodebuffer\").toNodejsStream(t)},_compressWorker:function(e,t){if(this._data instanceof o&&this._data.compression.magic===e.magic)return this._data.getCompressedWorker();var r=this._decompressWorker();return this._dataBinary||(r=r.pipe(new a.Utf8EncodeWorker)),o.createWorkerFrom(r,e,t)},_decompressWorker:function(){return this._data instanceof o?this._data.getContentWorker():this._data instanceof h?this._data:new i(this._data)}};for(var u=[\"asText\",\"asBinary\",\"asNodeBuffer\",\"asUint8Array\",\"asArrayBuffer\"],l=function(){throw new Error(\"This method has been removed in JSZip 3.0, please check the upgrade guide.\")},f=0;f<u.length;f++)n.prototype[u[f]]=l;t.exports=n},{\"./compressedObject\":2,\"./stream/DataWorker\":27,\"./stream/GenericWorker\":28,\"./stream/StreamHelper\":29,\"./utf8\":31}],36:[function(e,l,t){(function(t){\"use strict\";var r,n,e=t.MutationObserver||t.WebKitMutationObserver;if(e){var i=0,s=new e(u),a=t.document.createTextNode(\"\");s.observe(a,{characterData:!0}),r=function(){a.data=i=++i%2}}else if(t.setImmediate||void 0===t.MessageChannel)r=\"document\"in t&&\"onreadystatechange\"in t.document.createElement(\"script\")?function(){var e=t.document.createElement(\"script\");e.onreadystatechange=function(){u(),e.onreadystatechange=null,e.parentNode.removeChild(e),e=null},t.document.documentElement.appendChild(e)}:function(){setTimeout(u,0)};else{var o=new t.MessageChannel;o.port1.onmessage=u,r=function(){o.port2.postMessage(0)}}var h=[];function u(){var e,t;n=!0;for(var r=h.length;r;){for(t=h,h=[],e=-1;++e<r;)t[e]();r=h.length}n=!1}l.exports=function(e){1!==h.push(e)||n||r()}}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}],37:[function(e,t,r){\"use strict\";var i=e(\"immediate\");function u(){}var l={},s=[\"REJECTED\"],a=[\"FULFILLED\"],n=[\"PENDING\"];function o(e){if(\"function\"!=typeof e)throw new TypeError(\"resolver must be a function\");this.state=n,this.queue=[],this.outcome=void 0,e!==u&&d(this,e)}function h(e,t,r){this.promise=e,\"function\"==typeof t&&(this.onFulfilled=t,this.callFulfilled=this.otherCallFulfilled),\"function\"==typeof r&&(this.onRejected=r,this.callRejected=this.otherCallRejected)}function f(t,r,n){i(function(){var e;try{e=r(n)}catch(e){return l.reject(t,e)}e===t?l.reject(t,new TypeError(\"Cannot resolve promise with itself\")):l.resolve(t,e)})}function c(e){var t=e&&e.then;if(e&&(\"object\"==typeof e||\"function\"==typeof e)&&\"function\"==typeof t)return function(){t.apply(e,arguments)}}function d(t,e){var r=!1;function n(e){r||(r=!0,l.reject(t,e))}function i(e){r||(r=!0,l.resolve(t,e))}var s=p(function(){e(i,n)});\"error\"===s.status&&n(s.value)}function p(e,t){var r={};try{r.value=e(t),r.status=\"success\"}catch(e){r.status=\"error\",r.value=e}return r}(t.exports=o).prototype.finally=function(t){if(\"function\"!=typeof t)return this;var r=this.constructor;return this.then(function(e){return r.resolve(t()).then(function(){return e})},function(e){return r.resolve(t()).then(function(){throw e})})},o.prototype.catch=function(e){return this.then(null,e)},o.prototype.then=function(e,t){if(\"function\"!=typeof e&&this.state===a||\"function\"!=typeof t&&this.state===s)return this;var r=new this.constructor(u);this.state!==n?f(r,this.state===a?e:t,this.outcome):this.queue.push(new h(r,e,t));return r},h.prototype.callFulfilled=function(e){l.resolve(this.promise,e)},h.prototype.otherCallFulfilled=function(e){f(this.promise,this.onFulfilled,e)},h.prototype.callRejected=function(e){l.reject(this.promise,e)},h.prototype.otherCallRejected=function(e){f(this.promise,this.onRejected,e)},l.resolve=function(e,t){var r=p(c,t);if(\"error\"===r.status)return l.reject(e,r.value);var n=r.value;if(n)d(e,n);else{e.state=a,e.outcome=t;for(var i=-1,s=e.queue.length;++i<s;)e.queue[i].callFulfilled(t)}return e},l.reject=function(e,t){e.state=s,e.outcome=t;for(var r=-1,n=e.queue.length;++r<n;)e.queue[r].callRejected(t);return e},o.resolve=function(e){if(e instanceof this)return e;return l.resolve(new this(u),e)},o.reject=function(e){var t=new this(u);return l.reject(t,e)},o.all=function(e){var r=this;if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var n=e.length,i=!1;if(!n)return this.resolve([]);var s=new Array(n),a=0,t=-1,o=new this(u);for(;++t<n;)h(e[t],t);return o;function h(e,t){r.resolve(e).then(function(e){s[t]=e,++a!==n||i||(i=!0,l.resolve(o,s))},function(e){i||(i=!0,l.reject(o,e))})}},o.race=function(e){var t=this;if(\"[object Array]\"!==Object.prototype.toString.call(e))return this.reject(new TypeError(\"must be an array\"));var r=e.length,n=!1;if(!r)return this.resolve([]);var i=-1,s=new this(u);for(;++i<r;)a=e[i],t.resolve(a).then(function(e){n||(n=!0,l.resolve(s,e))},function(e){n||(n=!0,l.reject(s,e))});var a;return s}},{immediate:36}],38:[function(e,t,r){\"use strict\";var n={};(0,e(\"./lib/utils/common\").assign)(n,e(\"./lib/deflate\"),e(\"./lib/inflate\"),e(\"./lib/zlib/constants\")),t.exports=n},{\"./lib/deflate\":39,\"./lib/inflate\":40,\"./lib/utils/common\":41,\"./lib/zlib/constants\":44}],39:[function(e,t,r){\"use strict\";var a=e(\"./zlib/deflate\"),o=e(\"./utils/common\"),h=e(\"./utils/strings\"),i=e(\"./zlib/messages\"),s=e(\"./zlib/zstream\"),u=Object.prototype.toString,l=0,f=-1,c=0,d=8;function p(e){if(!(this instanceof p))return new p(e);this.options=o.assign({level:f,method:d,chunkSize:16384,windowBits:15,memLevel:8,strategy:c,to:\"\"},e||{});var t=this.options;t.raw&&0<t.windowBits?t.windowBits=-t.windowBits:t.gzip&&0<t.windowBits&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=a.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==l)throw new Error(i[r]);if(t.header&&a.deflateSetHeader(this.strm,t.header),t.dictionary){var n;if(n=\"string\"==typeof t.dictionary?h.string2buf(t.dictionary):\"[object ArrayBuffer]\"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=a.deflateSetDictionary(this.strm,n))!==l)throw new Error(i[r]);this._dict_set=!0}}function n(e,t){var r=new p(t);if(r.push(e,!0),r.err)throw r.msg||i[r.err];return r.result}p.prototype.push=function(e,t){var r,n,i=this.strm,s=this.options.chunkSize;if(this.ended)return!1;n=t===~~t?t:!0===t?4:0,\"string\"==typeof e?i.input=h.string2buf(e):\"[object ArrayBuffer]\"===u.call(e)?i.input=new Uint8Array(e):i.input=e,i.next_in=0,i.avail_in=i.input.length;do{if(0===i.avail_out&&(i.output=new o.Buf8(s),i.next_out=0,i.avail_out=s),1!==(r=a.deflate(i,n))&&r!==l)return this.onEnd(r),!(this.ended=!0);0!==i.avail_out&&(0!==i.avail_in||4!==n&&2!==n)||(\"string\"===this.options.to?this.onData(h.buf2binstring(o.shrinkBuf(i.output,i.next_out))):this.onData(o.shrinkBuf(i.output,i.next_out)))}while((0<i.avail_in||0===i.avail_out)&&1!==r);return 4===n?(r=a.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==n||(this.onEnd(l),!(i.avail_out=0))},p.prototype.onData=function(e){this.chunks.push(e)},p.prototype.onEnd=function(e){e===l&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=o.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Deflate=p,r.deflate=n,r.deflateRaw=function(e,t){return(t=t||{}).raw=!0,n(e,t)},r.gzip=function(e,t){return(t=t||{}).gzip=!0,n(e,t)}},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/deflate\":46,\"./zlib/messages\":51,\"./zlib/zstream\":53}],40:[function(e,t,r){\"use strict\";var c=e(\"./zlib/inflate\"),d=e(\"./utils/common\"),p=e(\"./utils/strings\"),m=e(\"./zlib/constants\"),n=e(\"./zlib/messages\"),i=e(\"./zlib/zstream\"),s=e(\"./zlib/gzheader\"),_=Object.prototype.toString;function a(e){if(!(this instanceof a))return new a(e);this.options=d.assign({chunkSize:16384,windowBits:0,to:\"\"},e||{});var t=this.options;t.raw&&0<=t.windowBits&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(0<=t.windowBits&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),15<t.windowBits&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg=\"\",this.ended=!1,this.chunks=[],this.strm=new i,this.strm.avail_out=0;var r=c.inflateInit2(this.strm,t.windowBits);if(r!==m.Z_OK)throw new Error(n[r]);this.header=new s,c.inflateGetHeader(this.strm,this.header)}function o(e,t){var r=new a(t);if(r.push(e,!0),r.err)throw r.msg||n[r.err];return r.result}a.prototype.push=function(e,t){var r,n,i,s,a,o,h=this.strm,u=this.options.chunkSize,l=this.options.dictionary,f=!1;if(this.ended)return!1;n=t===~~t?t:!0===t?m.Z_FINISH:m.Z_NO_FLUSH,\"string\"==typeof e?h.input=p.binstring2buf(e):\"[object ArrayBuffer]\"===_.call(e)?h.input=new Uint8Array(e):h.input=e,h.next_in=0,h.avail_in=h.input.length;do{if(0===h.avail_out&&(h.output=new d.Buf8(u),h.next_out=0,h.avail_out=u),(r=c.inflate(h,m.Z_NO_FLUSH))===m.Z_NEED_DICT&&l&&(o=\"string\"==typeof l?p.string2buf(l):\"[object ArrayBuffer]\"===_.call(l)?new Uint8Array(l):l,r=c.inflateSetDictionary(this.strm,o)),r===m.Z_BUF_ERROR&&!0===f&&(r=m.Z_OK,f=!1),r!==m.Z_STREAM_END&&r!==m.Z_OK)return this.onEnd(r),!(this.ended=!0);h.next_out&&(0!==h.avail_out&&r!==m.Z_STREAM_END&&(0!==h.avail_in||n!==m.Z_FINISH&&n!==m.Z_SYNC_FLUSH)||(\"string\"===this.options.to?(i=p.utf8border(h.output,h.next_out),s=h.next_out-i,a=p.buf2string(h.output,i),h.next_out=s,h.avail_out=u-s,s&&d.arraySet(h.output,h.output,i,s,0),this.onData(a)):this.onData(d.shrinkBuf(h.output,h.next_out)))),0===h.avail_in&&0===h.avail_out&&(f=!0)}while((0<h.avail_in||0===h.avail_out)&&r!==m.Z_STREAM_END);return r===m.Z_STREAM_END&&(n=m.Z_FINISH),n===m.Z_FINISH?(r=c.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===m.Z_OK):n!==m.Z_SYNC_FLUSH||(this.onEnd(m.Z_OK),!(h.avail_out=0))},a.prototype.onData=function(e){this.chunks.push(e)},a.prototype.onEnd=function(e){e===m.Z_OK&&(\"string\"===this.options.to?this.result=this.chunks.join(\"\"):this.result=d.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},r.Inflate=a,r.inflate=o,r.inflateRaw=function(e,t){return(t=t||{}).raw=!0,o(e,t)},r.ungzip=o},{\"./utils/common\":41,\"./utils/strings\":42,\"./zlib/constants\":44,\"./zlib/gzheader\":47,\"./zlib/inflate\":49,\"./zlib/messages\":51,\"./zlib/zstream\":53}],41:[function(e,t,r){\"use strict\";var n=\"undefined\"!=typeof Uint8Array&&\"undefined\"!=typeof Uint16Array&&\"undefined\"!=typeof Int32Array;r.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if(\"object\"!=typeof r)throw new TypeError(r+\"must be non-object\");for(var n in r)r.hasOwnProperty(n)&&(e[n]=r[n])}}return e},r.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var i={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){var t,r,n,i,s,a;for(t=n=0,r=e.length;t<r;t++)n+=e[t].length;for(a=new Uint8Array(n),t=i=0,r=e.length;t<r;t++)s=e[t],a.set(s,i),i+=s.length;return a}},s={arraySet:function(e,t,r,n,i){for(var s=0;s<n;s++)e[i+s]=t[r+s]},flattenChunks:function(e){return[].concat.apply([],e)}};r.setTyped=function(e){e?(r.Buf8=Uint8Array,r.Buf16=Uint16Array,r.Buf32=Int32Array,r.assign(r,i)):(r.Buf8=Array,r.Buf16=Array,r.Buf32=Array,r.assign(r,s))},r.setTyped(n)},{}],42:[function(e,t,r){\"use strict\";var h=e(\"./common\"),i=!0,s=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){s=!1}for(var u=new h.Buf8(256),n=0;n<256;n++)u[n]=252<=n?6:248<=n?5:240<=n?4:224<=n?3:192<=n?2:1;function l(e,t){if(t<65537&&(e.subarray&&s||!e.subarray&&i))return String.fromCharCode.apply(null,h.shrinkBuf(e,t));for(var r=\"\",n=0;n<t;n++)r+=String.fromCharCode(e[n]);return r}u[254]=u[254]=1,r.string2buf=function(e){var t,r,n,i,s,a=e.length,o=0;for(i=0;i<a;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),o+=r<128?1:r<2048?2:r<65536?3:4;for(t=new h.Buf8(o),i=s=0;s<o;i++)55296==(64512&(r=e.charCodeAt(i)))&&i+1<a&&56320==(64512&(n=e.charCodeAt(i+1)))&&(r=65536+(r-55296<<10)+(n-56320),i++),r<128?t[s++]=r:(r<2048?t[s++]=192|r>>>6:(r<65536?t[s++]=224|r>>>12:(t[s++]=240|r>>>18,t[s++]=128|r>>>12&63),t[s++]=128|r>>>6&63),t[s++]=128|63&r);return t},r.buf2binstring=function(e){return l(e,e.length)},r.binstring2buf=function(e){for(var t=new h.Buf8(e.length),r=0,n=t.length;r<n;r++)t[r]=e.charCodeAt(r);return t},r.buf2string=function(e,t){var r,n,i,s,a=t||e.length,o=new Array(2*a);for(r=n=0;r<a;)if((i=e[r++])<128)o[n++]=i;else if(4<(s=u[i]))o[n++]=65533,r+=s-1;else{for(i&=2===s?31:3===s?15:7;1<s&&r<a;)i=i<<6|63&e[r++],s--;1<s?o[n++]=65533:i<65536?o[n++]=i:(i-=65536,o[n++]=55296|i>>10&1023,o[n++]=56320|1023&i)}return l(o,n)},r.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;0<=r&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+u[e[r]]>t?r:t}},{\"./common\":41}],43:[function(e,t,r){\"use strict\";t.exports=function(e,t,r,n){for(var i=65535&e|0,s=e>>>16&65535|0,a=0;0!==r;){for(r-=a=2e3<r?2e3:r;s=s+(i=i+t[n++]|0)|0,--a;);i%=65521,s%=65521}return i|s<<16|0}},{}],44:[function(e,t,r){\"use strict\";t.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},{}],45:[function(e,t,r){\"use strict\";var o=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();t.exports=function(e,t,r,n){var i=o,s=n+r;e^=-1;for(var a=n;a<s;a++)e=e>>>8^i[255&(e^t[a])];return-1^e}},{}],46:[function(e,t,r){\"use strict\";var h,c=e(\"../utils/common\"),u=e(\"./trees\"),d=e(\"./adler32\"),p=e(\"./crc32\"),n=e(\"./messages\"),l=0,f=4,m=0,_=-2,g=-1,b=4,i=2,v=8,y=9,s=286,a=30,o=19,w=2*s+1,k=15,x=3,S=258,z=S+x+1,C=42,E=113,A=1,I=2,O=3,B=4;function R(e,t){return e.msg=n[t],t}function T(e){return(e<<1)-(4<e?9:0)}function D(e){for(var t=e.length;0<=--t;)e[t]=0}function F(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(c.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function N(e,t){u._tr_flush_block(e,0<=e.block_start?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,F(e.strm)}function U(e,t){e.pending_buf[e.pending++]=t}function P(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function L(e,t){var r,n,i=e.max_chain_length,s=e.strstart,a=e.prev_length,o=e.nice_match,h=e.strstart>e.w_size-z?e.strstart-(e.w_size-z):0,u=e.window,l=e.w_mask,f=e.prev,c=e.strstart+S,d=u[s+a-1],p=u[s+a];e.prev_length>=e.good_match&&(i>>=2),o>e.lookahead&&(o=e.lookahead);do{if(u[(r=t)+a]===p&&u[r+a-1]===d&&u[r]===u[s]&&u[++r]===u[s+1]){s+=2,r++;do{}while(u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&u[++s]===u[++r]&&s<c);if(n=S-(c-s),s=c-S,a<n){if(e.match_start=t,o<=(a=n))break;d=u[s+a-1],p=u[s+a]}}}while((t=f[t&l])>h&&0!=--i);return a<=e.lookahead?a:e.lookahead}function j(e){var t,r,n,i,s,a,o,h,u,l,f=e.w_size;do{if(i=e.window_size-e.lookahead-e.strstart,e.strstart>=f+(f-z)){for(c.arraySet(e.window,e.window,f,f,0),e.match_start-=f,e.strstart-=f,e.block_start-=f,t=r=e.hash_size;n=e.head[--t],e.head[t]=f<=n?n-f:0,--r;);for(t=r=f;n=e.prev[--t],e.prev[t]=f<=n?n-f:0,--r;);i+=f}if(0===e.strm.avail_in)break;if(a=e.strm,o=e.window,h=e.strstart+e.lookahead,u=i,l=void 0,l=a.avail_in,u<l&&(l=u),r=0===l?0:(a.avail_in-=l,c.arraySet(o,a.input,a.next_in,l,h),1===a.state.wrap?a.adler=d(a.adler,o,l,h):2===a.state.wrap&&(a.adler=p(a.adler,o,l,h)),a.next_in+=l,a.total_in+=l,l),e.lookahead+=r,e.lookahead+e.insert>=x)for(s=e.strstart-e.insert,e.ins_h=e.window[s],e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[s+x-1])&e.hash_mask,e.prev[s&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=s,s++,e.insert--,!(e.lookahead+e.insert<x)););}while(e.lookahead<z&&0!==e.strm.avail_in)}function Z(e,t){for(var r,n;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r)),e.match_length>=x)if(n=u._tr_tally(e,e.strstart-e.match_start,e.match_length-x),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=x){for(e.match_length--;e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart,0!=--e.match_length;);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function W(e,t){for(var r,n,i;;){if(e.lookahead<z){if(j(e),e.lookahead<z&&t===l)return A;if(0===e.lookahead)break}if(r=0,e.lookahead>=x&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=x-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-z&&(e.match_length=L(e,r),e.match_length<=5&&(1===e.strategy||e.match_length===x&&4096<e.strstart-e.match_start)&&(e.match_length=x-1)),e.prev_length>=x&&e.match_length<=e.prev_length){for(i=e.strstart+e.lookahead-x,n=u._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-x),e.lookahead-=e.prev_length-1,e.prev_length-=2;++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+x-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!=--e.prev_length;);if(e.match_available=0,e.match_length=x-1,e.strstart++,n&&(N(e,!1),0===e.strm.avail_out))return A}else if(e.match_available){if((n=u._tr_tally(e,0,e.window[e.strstart-1]))&&N(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return A}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=u._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<x-1?e.strstart:x-1,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}function M(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function H(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=v,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new c.Buf16(2*w),this.dyn_dtree=new c.Buf16(2*(2*a+1)),this.bl_tree=new c.Buf16(2*(2*o+1)),D(this.dyn_ltree),D(this.dyn_dtree),D(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new c.Buf16(k+1),this.heap=new c.Buf16(2*s+1),D(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new c.Buf16(2*s+1),D(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}function G(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=i,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?C:E,e.adler=2===t.wrap?0:1,t.last_flush=l,u._tr_init(t),m):R(e,_)}function K(e){var t=G(e);return t===m&&function(e){e.window_size=2*e.w_size,D(e.head),e.max_lazy_match=h[e.level].max_lazy,e.good_match=h[e.level].good_length,e.nice_match=h[e.level].nice_length,e.max_chain_length=h[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=x-1,e.match_available=0,e.ins_h=0}(e.state),t}function Y(e,t,r,n,i,s){if(!e)return _;var a=1;if(t===g&&(t=6),n<0?(a=0,n=-n):15<n&&(a=2,n-=16),i<1||y<i||r!==v||n<8||15<n||t<0||9<t||s<0||b<s)return R(e,_);8===n&&(n=9);var o=new H;return(e.state=o).strm=e,o.wrap=a,o.gzhead=null,o.w_bits=n,o.w_size=1<<o.w_bits,o.w_mask=o.w_size-1,o.hash_bits=i+7,o.hash_size=1<<o.hash_bits,o.hash_mask=o.hash_size-1,o.hash_shift=~~((o.hash_bits+x-1)/x),o.window=new c.Buf8(2*o.w_size),o.head=new c.Buf16(o.hash_size),o.prev=new c.Buf16(o.w_size),o.lit_bufsize=1<<i+6,o.pending_buf_size=4*o.lit_bufsize,o.pending_buf=new c.Buf8(o.pending_buf_size),o.d_buf=1*o.lit_bufsize,o.l_buf=3*o.lit_bufsize,o.level=t,o.strategy=s,o.method=r,K(e)}h=[new M(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(j(e),0===e.lookahead&&t===l)return A;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,N(e,!1),0===e.strm.avail_out))return A;if(e.strstart-e.block_start>=e.w_size-z&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):(e.strstart>e.block_start&&(N(e,!1),e.strm.avail_out),A)}),new M(4,4,8,4,Z),new M(4,5,16,8,Z),new M(4,6,32,32,Z),new M(4,4,16,16,W),new M(8,16,32,32,W),new M(8,16,128,128,W),new M(8,32,128,256,W),new M(32,128,258,1024,W),new M(32,258,258,4096,W)],r.deflateInit=function(e,t){return Y(e,t,v,15,8,0)},r.deflateInit2=Y,r.deflateReset=K,r.deflateResetKeep=G,r.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?_:(e.state.gzhead=t,m):_},r.deflate=function(e,t){var r,n,i,s;if(!e||!e.state||5<t||t<0)return e?R(e,_):_;if(n=e.state,!e.output||!e.input&&0!==e.avail_in||666===n.status&&t!==f)return R(e,0===e.avail_out?-5:_);if(n.strm=e,r=n.last_flush,n.last_flush=t,n.status===C)if(2===n.wrap)e.adler=0,U(n,31),U(n,139),U(n,8),n.gzhead?(U(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),U(n,255&n.gzhead.time),U(n,n.gzhead.time>>8&255),U(n,n.gzhead.time>>16&255),U(n,n.gzhead.time>>24&255),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(U(n,255&n.gzhead.extra.length),U(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(e.adler=p(e.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(U(n,0),U(n,0),U(n,0),U(n,0),U(n,0),U(n,9===n.level?2:2<=n.strategy||n.level<2?4:0),U(n,3),n.status=E);else{var a=v+(n.w_bits-8<<4)<<8;a|=(2<=n.strategy||n.level<2?0:n.level<6?1:6===n.level?2:3)<<6,0!==n.strstart&&(a|=32),a+=31-a%31,n.status=E,P(n,a),0!==n.strstart&&(P(n,e.adler>>>16),P(n,65535&e.adler)),e.adler=1}if(69===n.status)if(n.gzhead.extra){for(i=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending!==n.pending_buf_size));)U(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73)}else n.status=73;if(73===n.status)if(n.gzhead.name){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,U(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.gzindex=0,n.status=91)}else n.status=91;if(91===n.status)if(n.gzhead.comment){i=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),F(e),i=n.pending,n.pending===n.pending_buf_size)){s=1;break}s=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,U(n,s)}while(0!==s);n.gzhead.hcrc&&n.pending>i&&(e.adler=p(e.adler,n.pending_buf,n.pending-i,i)),0===s&&(n.status=103)}else n.status=103;if(103===n.status&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&F(e),n.pending+2<=n.pending_buf_size&&(U(n,255&e.adler),U(n,e.adler>>8&255),e.adler=0,n.status=E)):n.status=E),0!==n.pending){if(F(e),0===e.avail_out)return n.last_flush=-1,m}else if(0===e.avail_in&&T(t)<=T(r)&&t!==f)return R(e,-5);if(666===n.status&&0!==e.avail_in)return R(e,-5);if(0!==e.avail_in||0!==n.lookahead||t!==l&&666!==n.status){var o=2===n.strategy?function(e,t){for(var r;;){if(0===e.lookahead&&(j(e),0===e.lookahead)){if(t===l)return A;break}if(e.match_length=0,r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):3===n.strategy?function(e,t){for(var r,n,i,s,a=e.window;;){if(e.lookahead<=S){if(j(e),e.lookahead<=S&&t===l)return A;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=x&&0<e.strstart&&(n=a[i=e.strstart-1])===a[++i]&&n===a[++i]&&n===a[++i]){s=e.strstart+S;do{}while(n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&n===a[++i]&&i<s);e.match_length=S-(s-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=x?(r=u._tr_tally(e,1,e.match_length-x),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=u._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(N(e,!1),0===e.strm.avail_out))return A}return e.insert=0,t===f?(N(e,!0),0===e.strm.avail_out?O:B):e.last_lit&&(N(e,!1),0===e.strm.avail_out)?A:I}(n,t):h[n.level].func(n,t);if(o!==O&&o!==B||(n.status=666),o===A||o===O)return 0===e.avail_out&&(n.last_flush=-1),m;if(o===I&&(1===t?u._tr_align(n):5!==t&&(u._tr_stored_block(n,0,0,!1),3===t&&(D(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),F(e),0===e.avail_out))return n.last_flush=-1,m}return t!==f?m:n.wrap<=0?1:(2===n.wrap?(U(n,255&e.adler),U(n,e.adler>>8&255),U(n,e.adler>>16&255),U(n,e.adler>>24&255),U(n,255&e.total_in),U(n,e.total_in>>8&255),U(n,e.total_in>>16&255),U(n,e.total_in>>24&255)):(P(n,e.adler>>>16),P(n,65535&e.adler)),F(e),0<n.wrap&&(n.wrap=-n.wrap),0!==n.pending?m:1)},r.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==C&&69!==t&&73!==t&&91!==t&&103!==t&&t!==E&&666!==t?R(e,_):(e.state=null,t===E?R(e,-3):m):_},r.deflateSetDictionary=function(e,t){var r,n,i,s,a,o,h,u,l=t.length;if(!e||!e.state)return _;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==C||r.lookahead)return _;for(1===s&&(e.adler=d(e.adler,t,l,0)),r.wrap=0,l>=r.w_size&&(0===s&&(D(r.head),r.strstart=0,r.block_start=0,r.insert=0),u=new c.Buf8(r.w_size),c.arraySet(u,t,l-r.w_size,r.w_size,0),t=u,l=r.w_size),a=e.avail_in,o=e.next_in,h=e.input,e.avail_in=l,e.next_in=0,e.input=t,j(r);r.lookahead>=x;){for(n=r.strstart,i=r.lookahead-(x-1);r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+x-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++,--i;);r.strstart=n,r.lookahead=x-1,j(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=x-1,r.match_available=0,e.next_in=o,e.input=h,e.avail_in=a,r.wrap=s,m},r.deflateInfo=\"pako deflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./messages\":51,\"./trees\":52}],47:[function(e,t,r){\"use strict\";t.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name=\"\",this.comment=\"\",this.hcrc=0,this.done=!1}},{}],48:[function(e,t,r){\"use strict\";t.exports=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C;r=e.state,n=e.next_in,z=e.input,i=n+(e.avail_in-5),s=e.next_out,C=e.output,a=s-(t-e.avail_out),o=s+(e.avail_out-257),h=r.dmax,u=r.wsize,l=r.whave,f=r.wnext,c=r.window,d=r.hold,p=r.bits,m=r.lencode,_=r.distcode,g=(1<<r.lenbits)-1,b=(1<<r.distbits)-1;e:do{p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=m[d&g];t:for(;;){if(d>>>=y=v>>>24,p-=y,0===(y=v>>>16&255))C[s++]=65535&v;else{if(!(16&y)){if(0==(64&y)){v=m[(65535&v)+(d&(1<<y)-1)];continue t}if(32&y){r.mode=12;break e}e.msg=\"invalid literal/length code\",r.mode=30;break e}w=65535&v,(y&=15)&&(p<y&&(d+=z[n++]<<p,p+=8),w+=d&(1<<y)-1,d>>>=y,p-=y),p<15&&(d+=z[n++]<<p,p+=8,d+=z[n++]<<p,p+=8),v=_[d&b];r:for(;;){if(d>>>=y=v>>>24,p-=y,!(16&(y=v>>>16&255))){if(0==(64&y)){v=_[(65535&v)+(d&(1<<y)-1)];continue r}e.msg=\"invalid distance code\",r.mode=30;break e}if(k=65535&v,p<(y&=15)&&(d+=z[n++]<<p,(p+=8)<y&&(d+=z[n++]<<p,p+=8)),h<(k+=d&(1<<y)-1)){e.msg=\"invalid distance too far back\",r.mode=30;break e}if(d>>>=y,p-=y,(y=s-a)<k){if(l<(y=k-y)&&r.sane){e.msg=\"invalid distance too far back\",r.mode=30;break e}if(S=c,(x=0)===f){if(x+=u-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C}}else if(f<y){if(x+=u+f-y,(y-=f)<w){for(w-=y;C[s++]=c[x++],--y;);if(x=0,f<w){for(w-=y=f;C[s++]=c[x++],--y;);x=s-k,S=C}}}else if(x+=f-y,y<w){for(w-=y;C[s++]=c[x++],--y;);x=s-k,S=C}for(;2<w;)C[s++]=S[x++],C[s++]=S[x++],C[s++]=S[x++],w-=3;w&&(C[s++]=S[x++],1<w&&(C[s++]=S[x++]))}else{for(x=s-k;C[s++]=C[x++],C[s++]=C[x++],C[s++]=C[x++],2<(w-=3););w&&(C[s++]=C[x++],1<w&&(C[s++]=C[x++]))}break}}break}}while(n<i&&s<o);n-=w=p>>3,d&=(1<<(p-=w<<3))-1,e.next_in=n,e.next_out=s,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=s<o?o-s+257:257-(s-o),r.hold=d,r.bits=p}},{}],49:[function(e,t,r){\"use strict\";var I=e(\"../utils/common\"),O=e(\"./adler32\"),B=e(\"./crc32\"),R=e(\"./inffast\"),T=e(\"./inftrees\"),D=1,F=2,N=0,U=-2,P=1,n=852,i=592;function L(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function s(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new I.Buf16(320),this.work=new I.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}function a(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg=\"\",t.wrap&&(e.adler=1&t.wrap),t.mode=P,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new I.Buf32(n),t.distcode=t.distdyn=new I.Buf32(i),t.sane=1,t.back=-1,N):U}function o(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,a(e)):U}function h(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||15<t)?U:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,o(e))):U}function u(e,t){var r,n;return e?(n=new s,(e.state=n).window=null,(r=h(e,t))!==N&&(e.state=null),r):U}var l,f,c=!0;function j(e){if(c){var t;for(l=new I.Buf32(512),f=new I.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(T(D,e.lens,0,288,l,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;T(F,e.lens,0,32,f,0,e.work,{bits:5}),c=!1}e.lencode=l,e.lenbits=9,e.distcode=f,e.distbits=5}function Z(e,t,r,n){var i,s=e.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new I.Buf8(s.wsize)),n>=s.wsize?(I.arraySet(s.window,t,r-s.wsize,s.wsize,0),s.wnext=0,s.whave=s.wsize):(n<(i=s.wsize-s.wnext)&&(i=n),I.arraySet(s.window,t,r-n,i,s.wnext),(n-=i)?(I.arraySet(s.window,t,r-n,n,0),s.wnext=n,s.whave=s.wsize):(s.wnext+=i,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=i))),0}r.inflateReset=o,r.inflateReset2=h,r.inflateResetKeep=a,r.inflateInit=function(e){return u(e,15)},r.inflateInit2=u,r.inflate=function(e,t){var r,n,i,s,a,o,h,u,l,f,c,d,p,m,_,g,b,v,y,w,k,x,S,z,C=0,E=new I.Buf8(4),A=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return U;12===(r=e.state).mode&&(r.mode=13),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,f=o,c=h,x=N;e:for(;;)switch(r.mode){case P:if(0===r.wrap){r.mode=13;break}for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(2&r.wrap&&35615===u){E[r.check=0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0),l=u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&u)<<8)+(u>>8))%31){e.msg=\"incorrect header check\",r.mode=30;break}if(8!=(15&u)){e.msg=\"unknown compression method\",r.mode=30;break}if(l-=4,k=8+(15&(u>>>=4)),0===r.wbits)r.wbits=k;else if(k>r.wbits){e.msg=\"invalid window size\",r.mode=30;break}r.dmax=1<<k,e.adler=r.check=1,r.mode=512&u?10:12,l=u=0;break;case 2:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(r.flags=u,8!=(255&r.flags)){e.msg=\"unknown compression method\",r.mode=30;break}if(57344&r.flags){e.msg=\"unknown header flags set\",r.mode=30;break}r.head&&(r.head.text=u>>8&1),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=3;case 3:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.head&&(r.head.time=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,E[2]=u>>>16&255,E[3]=u>>>24&255,r.check=B(r.check,E,4,0)),l=u=0,r.mode=4;case 4:for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.head&&(r.head.xflags=255&u,r.head.os=u>>8),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0,r.mode=5;case 5:if(1024&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.length=u,r.head&&(r.head.extra_len=u),512&r.flags&&(E[0]=255&u,E[1]=u>>>8&255,r.check=B(r.check,E,2,0)),l=u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(o<(d=r.length)&&(d=o),d&&(r.head&&(k=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),I.arraySet(r.head.extra,n,s,d,k)),512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,r.length-=d),r.length))break e;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.name+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===o)break e;for(d=0;k=n[s+d++],r.head&&k&&r.length<65536&&(r.head.comment+=String.fromCharCode(k)),k&&d<o;);if(512&r.flags&&(r.check=B(r.check,n,d,s)),o-=d,s+=d,k)break e}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;l<16;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u!==(65535&r.check)){e.msg=\"header crc mismatch\",r.mode=30;break}l=u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=12;break;case 10:for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}e.adler=r.check=L(u),l=u=0,r.mode=11;case 11:if(0===r.havedict)return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,2;e.adler=r.check=1,r.mode=12;case 12:if(5===t||6===t)break e;case 13:if(r.last){u>>>=7&l,l-=7&l,r.mode=27;break}for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}switch(r.last=1&u,l-=1,3&(u>>>=1)){case 0:r.mode=14;break;case 1:if(j(r),r.mode=20,6!==t)break;u>>>=2,l-=2;break e;case 2:r.mode=17;break;case 3:e.msg=\"invalid block type\",r.mode=30}u>>>=2,l-=2;break;case 14:for(u>>>=7&l,l-=7&l;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if((65535&u)!=(u>>>16^65535)){e.msg=\"invalid stored block lengths\",r.mode=30;break}if(r.length=65535&u,l=u=0,r.mode=15,6===t)break e;case 15:r.mode=16;case 16:if(d=r.length){if(o<d&&(d=o),h<d&&(d=h),0===d)break e;I.arraySet(i,n,s,d,a),o-=d,s+=d,h-=d,a+=d,r.length-=d;break}r.mode=12;break;case 17:for(;l<14;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(r.nlen=257+(31&u),u>>>=5,l-=5,r.ndist=1+(31&u),u>>>=5,l-=5,r.ncode=4+(15&u),u>>>=4,l-=4,286<r.nlen||30<r.ndist){e.msg=\"too many length or distance symbols\",r.mode=30;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;l<3;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.lens[A[r.have++]]=7&u,u>>>=3,l-=3}for(;r.have<19;)r.lens[A[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,S={bits:r.lenbits},x=T(0,r.lens,0,19,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg=\"invalid code lengths set\",r.mode=30;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(b<16)u>>>=_,l-=_,r.lens[r.have++]=b;else{if(16===b){for(z=_+2;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u>>>=_,l-=_,0===r.have){e.msg=\"invalid bit length repeat\",r.mode=30;break}k=r.lens[r.have-1],d=3+(3&u),u>>>=2,l-=2}else if(17===b){for(z=_+3;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}l-=_,k=0,d=3+(7&(u>>>=_)),u>>>=3,l-=3}else{for(z=_+7;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}l-=_,k=0,d=11+(127&(u>>>=_)),u>>>=7,l-=7}if(r.have+d>r.nlen+r.ndist){e.msg=\"invalid bit length repeat\",r.mode=30;break}for(;d--;)r.lens[r.have++]=k}}if(30===r.mode)break;if(0===r.lens[256]){e.msg=\"invalid code -- missing end-of-block\",r.mode=30;break}if(r.lenbits=9,S={bits:r.lenbits},x=T(D,r.lens,0,r.nlen,r.lencode,0,r.work,S),r.lenbits=S.bits,x){e.msg=\"invalid literal/lengths set\",r.mode=30;break}if(r.distbits=6,r.distcode=r.distdyn,S={bits:r.distbits},x=T(F,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,S),r.distbits=S.bits,x){e.msg=\"invalid distances set\",r.mode=30;break}if(r.mode=20,6===t)break e;case 20:r.mode=21;case 21:if(6<=o&&258<=h){e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,R(e,c),a=e.next_out,i=e.output,h=e.avail_out,s=e.next_in,n=e.input,o=e.avail_in,u=r.hold,l=r.bits,12===r.mode&&(r.back=-1);break}for(r.back=0;g=(C=r.lencode[u&(1<<r.lenbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(g&&0==(240&g)){for(v=_,y=g,w=b;g=(C=r.lencode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,r.length=b,0===g){r.mode=26;break}if(32&g){r.back=-1,r.mode=12;break}if(64&g){e.msg=\"invalid literal/length code\",r.mode=30;break}r.extra=15&g,r.mode=22;case 22:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.length+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;g=(C=r.distcode[u&(1<<r.distbits)-1])>>>16&255,b=65535&C,!((_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(0==(240&g)){for(v=_,y=g,w=b;g=(C=r.distcode[w+((u&(1<<v+y)-1)>>v)])>>>16&255,b=65535&C,!(v+(_=C>>>24)<=l);){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}u>>>=v,l-=v,r.back+=v}if(u>>>=_,l-=_,r.back+=_,64&g){e.msg=\"invalid distance code\",r.mode=30;break}r.offset=b,r.extra=15&g,r.mode=24;case 24:if(r.extra){for(z=r.extra;l<z;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}r.offset+=u&(1<<r.extra)-1,u>>>=r.extra,l-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg=\"invalid distance too far back\",r.mode=30;break}r.mode=25;case 25:if(0===h)break e;if(d=c-h,r.offset>d){if((d=r.offset-d)>r.whave&&r.sane){e.msg=\"invalid distance too far back\",r.mode=30;break}p=d>r.wnext?(d-=r.wnext,r.wsize-d):r.wnext-d,d>r.length&&(d=r.length),m=r.window}else m=i,p=a-r.offset,d=r.length;for(h<d&&(d=h),h-=d,r.length-=d;i[a++]=m[p++],--d;);0===r.length&&(r.mode=21);break;case 26:if(0===h)break e;i[a++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;l<32;){if(0===o)break e;o--,u|=n[s++]<<l,l+=8}if(c-=h,e.total_out+=c,r.total+=c,c&&(e.adler=r.check=r.flags?B(r.check,i,c,a-c):O(r.check,i,c,a-c)),c=h,(r.flags?u:L(u))!==r.check){e.msg=\"incorrect data check\",r.mode=30;break}l=u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;l<32;){if(0===o)break e;o--,u+=n[s++]<<l,l+=8}if(u!==(4294967295&r.total)){e.msg=\"incorrect length check\",r.mode=30;break}l=u=0}r.mode=29;case 29:x=1;break e;case 30:x=-3;break e;case 31:return-4;case 32:default:return U}return e.next_out=a,e.avail_out=h,e.next_in=s,e.avail_in=o,r.hold=u,r.bits=l,(r.wsize||c!==e.avail_out&&r.mode<30&&(r.mode<27||4!==t))&&Z(e,e.output,e.next_out,c-e.avail_out)?(r.mode=31,-4):(f-=e.avail_in,c-=e.avail_out,e.total_in+=f,e.total_out+=c,r.total+=c,r.wrap&&c&&(e.adler=r.check=r.flags?B(r.check,i,c,e.next_out-c):O(r.check,i,c,e.next_out-c)),e.data_type=r.bits+(r.last?64:0)+(12===r.mode?128:0)+(20===r.mode||15===r.mode?256:0),(0==f&&0===c||4===t)&&x===N&&(x=-5),x)},r.inflateEnd=function(e){if(!e||!e.state)return U;var t=e.state;return t.window&&(t.window=null),e.state=null,N},r.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?U:((r.head=t).done=!1,N):U},r.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&11!==r.mode?U:11===r.mode&&O(1,t,n,0)!==r.check?-3:Z(e,t,n,n)?(r.mode=31,-4):(r.havedict=1,N):U},r.inflateInfo=\"pako inflate (from Nodeca project)\"},{\"../utils/common\":41,\"./adler32\":43,\"./crc32\":45,\"./inffast\":48,\"./inftrees\":50}],50:[function(e,t,r){\"use strict\";var D=e(\"../utils/common\"),F=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],N=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],U=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],P=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];t.exports=function(e,t,r,n,i,s,a,o){var h,u,l,f,c,d,p,m,_,g=o.bits,b=0,v=0,y=0,w=0,k=0,x=0,S=0,z=0,C=0,E=0,A=null,I=0,O=new D.Buf16(16),B=new D.Buf16(16),R=null,T=0;for(b=0;b<=15;b++)O[b]=0;for(v=0;v<n;v++)O[t[r+v]]++;for(k=g,w=15;1<=w&&0===O[w];w--);if(w<k&&(k=w),0===w)return i[s++]=20971520,i[s++]=20971520,o.bits=1,0;for(y=1;y<w&&0===O[y];y++);for(k<y&&(k=y),b=z=1;b<=15;b++)if(z<<=1,(z-=O[b])<0)return-1;if(0<z&&(0===e||1!==w))return-1;for(B[1]=0,b=1;b<15;b++)B[b+1]=B[b]+O[b];for(v=0;v<n;v++)0!==t[r+v]&&(a[B[t[r+v]]++]=v);if(d=0===e?(A=R=a,19):1===e?(A=F,I-=257,R=N,T-=257,256):(A=U,R=P,-1),b=y,c=s,S=v=E=0,l=-1,f=(C=1<<(x=k))-1,1===e&&852<C||2===e&&592<C)return 1;for(;;){for(p=b-S,_=a[v]<d?(m=0,a[v]):a[v]>d?(m=R[T+a[v]],A[I+a[v]]):(m=96,0),h=1<<b-S,y=u=1<<x;i[c+(E>>S)+(u-=h)]=p<<24|m<<16|_|0,0!==u;);for(h=1<<b-1;E&h;)h>>=1;if(0!==h?(E&=h-1,E+=h):E=0,v++,0==--O[b]){if(b===w)break;b=t[r+a[v]]}if(k<b&&(E&f)!==l){for(0===S&&(S=k),c+=y,z=1<<(x=b-S);x+S<w&&!((z-=O[x+S])<=0);)x++,z<<=1;if(C+=1<<x,1===e&&852<C||2===e&&592<C)return 1;i[l=E&f]=k<<24|x<<16|c-s|0}}return 0!==E&&(i[c+E]=b-S<<24|64<<16|0),o.bits=k,0}},{\"../utils/common\":41}],51:[function(e,t,r){\"use strict\";t.exports={2:\"need dictionary\",1:\"stream end\",0:\"\",\"-1\":\"file error\",\"-2\":\"stream error\",\"-3\":\"data error\",\"-4\":\"insufficient memory\",\"-5\":\"buffer error\",\"-6\":\"incompatible version\"}},{}],52:[function(e,t,r){\"use strict\";var i=e(\"../utils/common\"),o=0,h=1;function n(e){for(var t=e.length;0<=--t;)e[t]=0}var s=0,a=29,u=256,l=u+1+a,f=30,c=19,_=2*l+1,g=15,d=16,p=7,m=256,b=16,v=17,y=18,w=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],k=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],x=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],z=new Array(2*(l+2));n(z);var C=new Array(2*f);n(C);var E=new Array(512);n(E);var A=new Array(256);n(A);var I=new Array(a);n(I);var O,B,R,T=new Array(f);function D(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function F(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function N(e){return e<256?E[e]:E[256+(e>>>7)]}function U(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function P(e,t,r){e.bi_valid>d-r?(e.bi_buf|=t<<e.bi_valid&65535,U(e,e.bi_buf),e.bi_buf=t>>d-e.bi_valid,e.bi_valid+=r-d):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function L(e,t,r){P(e,r[2*t],r[2*t+1])}function j(e,t){for(var r=0;r|=1&e,e>>>=1,r<<=1,0<--t;);return r>>>1}function Z(e,t,r){var n,i,s=new Array(g+1),a=0;for(n=1;n<=g;n++)s[n]=a=a+r[n-1]<<1;for(i=0;i<=t;i++){var o=e[2*i+1];0!==o&&(e[2*i]=j(s[o]++,o))}}function W(e){var t;for(t=0;t<l;t++)e.dyn_ltree[2*t]=0;for(t=0;t<f;t++)e.dyn_dtree[2*t]=0;for(t=0;t<c;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*m]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function M(e){8<e.bi_valid?U(e,e.bi_buf):0<e.bi_valid&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function H(e,t,r,n){var i=2*t,s=2*r;return e[i]<e[s]||e[i]===e[s]&&n[t]<=n[r]}function G(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&H(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!H(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function K(e,t,r){var n,i,s,a,o=0;if(0!==e.last_lit)for(;n=e.pending_buf[e.d_buf+2*o]<<8|e.pending_buf[e.d_buf+2*o+1],i=e.pending_buf[e.l_buf+o],o++,0===n?L(e,i,t):(L(e,(s=A[i])+u+1,t),0!==(a=w[s])&&P(e,i-=I[s],a),L(e,s=N(--n),r),0!==(a=k[s])&&P(e,n-=T[s],a)),o<e.last_lit;);L(e,m,t)}function Y(e,t){var r,n,i,s=t.dyn_tree,a=t.stat_desc.static_tree,o=t.stat_desc.has_stree,h=t.stat_desc.elems,u=-1;for(e.heap_len=0,e.heap_max=_,r=0;r<h;r++)0!==s[2*r]?(e.heap[++e.heap_len]=u=r,e.depth[r]=0):s[2*r+1]=0;for(;e.heap_len<2;)s[2*(i=e.heap[++e.heap_len]=u<2?++u:0)]=1,e.depth[i]=0,e.opt_len--,o&&(e.static_len-=a[2*i+1]);for(t.max_code=u,r=e.heap_len>>1;1<=r;r--)G(e,s,r);for(i=h;r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],G(e,s,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,s[2*i]=s[2*r]+s[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,s[2*r+1]=s[2*n+1]=i,e.heap[1]=i++,G(e,s,1),2<=e.heap_len;);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,s,a,o,h=t.dyn_tree,u=t.max_code,l=t.stat_desc.static_tree,f=t.stat_desc.has_stree,c=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(s=0;s<=g;s++)e.bl_count[s]=0;for(h[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<_;r++)p<(s=h[2*h[2*(n=e.heap[r])+1]+1]+1)&&(s=p,m++),h[2*n+1]=s,u<n||(e.bl_count[s]++,a=0,d<=n&&(a=c[n-d]),o=h[2*n],e.opt_len+=o*(s+a),f&&(e.static_len+=o*(l[2*n+1]+a)));if(0!==m){do{for(s=p-1;0===e.bl_count[s];)s--;e.bl_count[s]--,e.bl_count[s+1]+=2,e.bl_count[p]--,m-=2}while(0<m);for(s=p;0!==s;s--)for(n=e.bl_count[s];0!==n;)u<(i=e.heap[--r])||(h[2*i+1]!==s&&(e.opt_len+=(s-h[2*i+1])*h[2*i],h[2*i+1]=s),n--)}}(e,t),Z(s,u,e.bl_count)}function X(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=a,a=t[2*(n+1)+1],++o<h&&i===a||(o<u?e.bl_tree[2*i]+=o:0!==i?(i!==s&&e.bl_tree[2*i]++,e.bl_tree[2*b]++):o<=10?e.bl_tree[2*v]++:e.bl_tree[2*y]++,s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4))}function V(e,t,r){var n,i,s=-1,a=t[1],o=0,h=7,u=4;for(0===a&&(h=138,u=3),n=0;n<=r;n++)if(i=a,a=t[2*(n+1)+1],!(++o<h&&i===a)){if(o<u)for(;L(e,i,e.bl_tree),0!=--o;);else 0!==i?(i!==s&&(L(e,i,e.bl_tree),o--),L(e,b,e.bl_tree),P(e,o-3,2)):o<=10?(L(e,v,e.bl_tree),P(e,o-3,3)):(L(e,y,e.bl_tree),P(e,o-11,7));s=i,u=(o=0)===a?(h=138,3):i===a?(h=6,3):(h=7,4)}}n(T);var q=!1;function J(e,t,r,n){P(e,(s<<1)+(n?1:0),3),function(e,t,r,n){M(e),n&&(U(e,r),U(e,~r)),i.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r,!0)}r._tr_init=function(e){q||(function(){var e,t,r,n,i,s=new Array(g+1);for(n=r=0;n<a-1;n++)for(I[n]=r,e=0;e<1<<w[n];e++)A[r++]=n;for(A[r-1]=n,n=i=0;n<16;n++)for(T[n]=i,e=0;e<1<<k[n];e++)E[i++]=n;for(i>>=7;n<f;n++)for(T[n]=i<<7,e=0;e<1<<k[n]-7;e++)E[256+i++]=n;for(t=0;t<=g;t++)s[t]=0;for(e=0;e<=143;)z[2*e+1]=8,e++,s[8]++;for(;e<=255;)z[2*e+1]=9,e++,s[9]++;for(;e<=279;)z[2*e+1]=7,e++,s[7]++;for(;e<=287;)z[2*e+1]=8,e++,s[8]++;for(Z(z,l+1,s),e=0;e<f;e++)C[2*e+1]=5,C[2*e]=j(e,5);O=new D(z,w,u+1,l,g),B=new D(C,k,0,f,g),R=new D(new Array(0),x,0,c,p)}(),q=!0),e.l_desc=new F(e.dyn_ltree,O),e.d_desc=new F(e.dyn_dtree,B),e.bl_desc=new F(e.bl_tree,R),e.bi_buf=0,e.bi_valid=0,W(e)},r._tr_stored_block=J,r._tr_flush_block=function(e,t,r,n){var i,s,a=0;0<e.level?(2===e.strm.data_type&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return o;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return h;for(t=32;t<u;t++)if(0!==e.dyn_ltree[2*t])return h;return o}(e)),Y(e,e.l_desc),Y(e,e.d_desc),a=function(e){var t;for(X(e,e.dyn_ltree,e.l_desc.max_code),X(e,e.dyn_dtree,e.d_desc.max_code),Y(e,e.bl_desc),t=c-1;3<=t&&0===e.bl_tree[2*S[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),i=e.opt_len+3+7>>>3,(s=e.static_len+3+7>>>3)<=i&&(i=s)):i=s=r+5,r+4<=i&&-1!==t?J(e,t,r,n):4===e.strategy||s===i?(P(e,2+(n?1:0),3),K(e,z,C)):(P(e,4+(n?1:0),3),function(e,t,r,n){var i;for(P(e,t-257,5),P(e,r-1,5),P(e,n-4,4),i=0;i<n;i++)P(e,e.bl_tree[2*S[i]+1],3);V(e,e.dyn_ltree,t-1),V(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,a+1),K(e,e.dyn_ltree,e.dyn_dtree)),W(e),n&&M(e)},r._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(A[r]+u+1)]++,e.dyn_dtree[2*N(t)]++),e.last_lit===e.lit_bufsize-1},r._tr_align=function(e){P(e,2,3),L(e,m,z),function(e){16===e.bi_valid?(U(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):8<=e.bi_valid&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},{\"../utils/common\":41}],53:[function(e,t,r){\"use strict\";t.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg=\"\",this.state=null,this.data_type=2,this.adler=0}},{}],54:[function(e,t,r){(function(e){!function(r,n){\"use strict\";if(!r.setImmediate){var i,s,t,a,o=1,h={},u=!1,l=r.document,e=Object.getPrototypeOf&&Object.getPrototypeOf(r);e=e&&e.setTimeout?e:r,i=\"[object process]\"==={}.toString.call(r.process)?function(e){process.nextTick(function(){c(e)})}:function(){if(r.postMessage&&!r.importScripts){var e=!0,t=r.onmessage;return r.onmessage=function(){e=!1},r.postMessage(\"\",\"*\"),r.onmessage=t,e}}()?(a=\"setImmediate$\"+Math.random()+\"$\",r.addEventListener?r.addEventListener(\"message\",d,!1):r.attachEvent(\"onmessage\",d),function(e){r.postMessage(a+e,\"*\")}):r.MessageChannel?((t=new MessageChannel).port1.onmessage=function(e){c(e.data)},function(e){t.port2.postMessage(e)}):l&&\"onreadystatechange\"in l.createElement(\"script\")?(s=l.documentElement,function(e){var t=l.createElement(\"script\");t.onreadystatechange=function(){c(e),t.onreadystatechange=null,s.removeChild(t),t=null},s.appendChild(t)}):function(e){setTimeout(c,0,e)},e.setImmediate=function(e){\"function\"!=typeof e&&(e=new Function(\"\"+e));for(var t=new Array(arguments.length-1),r=0;r<t.length;r++)t[r]=arguments[r+1];var n={callback:e,args:t};return h[o]=n,i(o),o++},e.clearImmediate=f}function f(e){delete h[e]}function c(e){if(u)setTimeout(c,0,e);else{var t=h[e];if(t){u=!0;try{!function(e){var t=e.callback,r=e.args;switch(r.length){case 0:t();break;case 1:t(r[0]);break;case 2:t(r[0],r[1]);break;case 3:t(r[0],r[1],r[2]);break;default:t.apply(n,r)}}(t)}finally{f(e),u=!1}}}}function d(e){e.source===r&&\"string\"==typeof e.data&&0===e.data.indexOf(a)&&c(+e.data.slice(a.length))}}(\"undefined\"==typeof self?void 0===e?this:e:self)}).call(this,\"undefined\"!=typeof global?global:\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:{})},{}]},{},[10])(10)});","/* @license\nPapa Parse\nv5.4.0\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n!function(e,t){\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof module&&\"undefined\"!=typeof exports?module.exports=t():e.Papa=t()}(this,function s(){\"use strict\";var f=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:void 0!==f?f:{};var n=!f.document&&!!f.postMessage,o=f.IS_PAPA_WORKER||!1,a={},u=0,b={parse:function(e,t){var r=(t=t||{}).dynamicTyping||!1;J(r)&&(t.dynamicTypingFunction=r,r={});if(t.dynamicTyping=r,t.transform=!!J(t.transform)&&t.transform,t.worker&&b.WORKERS_SUPPORTED){var i=function(){if(!b.WORKERS_SUPPORTED)return!1;var e=(r=f.URL||f.webkitURL||null,i=s.toString(),b.BLOB_URL||(b.BLOB_URL=r.createObjectURL(new Blob([\"var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; \",\"(\",i,\")();\"],{type:\"text/javascript\"})))),t=new f.Worker(e);var r,i;return t.onmessage=_,t.id=u++,a[t.id]=t}();return i.userStep=t.step,i.userChunk=t.chunk,i.userComplete=t.complete,i.userError=t.error,t.step=J(t.step),t.chunk=J(t.chunk),t.complete=J(t.complete),t.error=J(t.error),delete t.worker,void i.postMessage({input:e,config:t,workerId:i.id})}var n=null;b.NODE_STREAM_INPUT,\"string\"==typeof e?(e=function(e){if(65279===e.charCodeAt(0))return e.slice(1);return e}(e),n=t.download?new l(t):new p(t)):!0===e.readable&&J(e.read)&&J(e.on)?n=new g(t):(f.File&&e instanceof File||e instanceof Object)&&(n=new c(t));return n.stream(e)},unparse:function(e,t){var n=!1,_=!0,m=\",\",y=\"\\r\\n\",s='\"',a=s+s,r=!1,i=null,o=!1;!function(){if(\"object\"!=typeof t)return;\"string\"!=typeof t.delimiter||b.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter);(\"boolean\"==typeof t.quotes||\"function\"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes);\"boolean\"!=typeof t.skipEmptyLines&&\"string\"!=typeof t.skipEmptyLines||(r=t.skipEmptyLines);\"string\"==typeof t.newline&&(y=t.newline);\"string\"==typeof t.quoteChar&&(s=t.quoteChar);\"boolean\"==typeof t.header&&(_=t.header);if(Array.isArray(t.columns)){if(0===t.columns.length)throw new Error(\"Option columns is empty\");i=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s);(\"boolean\"==typeof t.escapeFormulae||t.escapeFormulae instanceof RegExp)&&(o=t.escapeFormulae instanceof RegExp?t.escapeFormulae:/^[=+\\-@\\t\\r].*$/)}();var u=new RegExp(Q(s),\"g\");\"string\"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return h(null,e,r);if(\"object\"==typeof e[0])return h(i||Object.keys(e[0]),e,r)}else if(\"object\"==typeof e)return\"string\"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields||i),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:\"object\"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||\"object\"==typeof e.data[0]||(e.data=[e.data])),h(e.fields||[],e.data||[],r);throw new Error(\"Unable to serialize unrecognized input\");function h(e,t,r){var i=\"\";\"string\"==typeof e&&(e=JSON.parse(e)),\"string\"==typeof t&&(t=JSON.parse(t));var n=Array.isArray(e)&&0<e.length,s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(i+=m),i+=v(e[a],a);0<t.length&&(i+=y)}for(var o=0;o<t.length;o++){var u=n?e.length:t[o].length,h=!1,f=n?0===Object.keys(t[o]).length:0===t[o].length;if(r&&!n&&(h=\"greedy\"===r?\"\"===t[o].join(\"\").trim():1===t[o].length&&0===t[o][0].length),\"greedy\"===r&&n){for(var d=[],l=0;l<u;l++){var c=s?e[l]:l;d.push(t[o][c])}h=\"\"===d.join(\"\").trim()}if(!h){for(var p=0;p<u;p++){0<p&&!f&&(i+=m);var g=n&&s?e[p]:p;i+=v(t[o][g],p)}o<t.length-1&&(!r||0<u&&!f)&&(i+=y)}}return i}function v(e,t){if(null==e)return\"\";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);var r=!1;o&&\"string\"==typeof e&&o.test(e)&&(e=\"'\"+e,r=!0);var i=e.toString().replace(u,a);return(r=r||!0===n||\"function\"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||function(e,t){for(var r=0;r<t.length;r++)if(-1<e.indexOf(t[r]))return!0;return!1}(i,b.BAD_DELIMITERS)||-1<i.indexOf(m)||\" \"===i.charAt(0)||\" \"===i.charAt(i.length-1))?s+i+s:i}}};if(b.RECORD_SEP=String.fromCharCode(30),b.UNIT_SEP=String.fromCharCode(31),b.BYTE_ORDER_MARK=\"\\ufeff\",b.BAD_DELIMITERS=[\"\\r\",\"\\n\",'\"',b.BYTE_ORDER_MARK],b.WORKERS_SUPPORTED=!n&&!!f.Worker,b.NODE_STREAM_INPUT=1,b.LocalChunkSize=10485760,b.RemoteChunkSize=5242880,b.DefaultDelimiter=\",\",b.Parser=E,b.ParserHandle=r,b.NetworkStreamer=l,b.FileStreamer=c,b.StringStreamer=p,b.ReadableStreamStreamer=g,f.jQuery){var d=f.jQuery;d.fn.parse=function(o){var r=o.config||{},u=[];return this.each(function(e){if(!(\"INPUT\"===d(this).prop(\"tagName\").toUpperCase()&&\"file\"===d(this).attr(\"type\").toLowerCase()&&f.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)u.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},r)})}),e(),this;function e(){if(0!==u.length){var e,t,r,i,n=u[0];if(J(o.before)){var s=o.before(n.file,n.inputElem);if(\"object\"==typeof s){if(\"abort\"===s.action)return e=\"AbortError\",t=n.file,r=n.inputElem,i=s.reason,void(J(o.error)&&o.error({name:e},t,r,i));if(\"skip\"===s.action)return void h();\"object\"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if(\"skip\"===s)return void h()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){J(a)&&a(e,n.file,n.inputElem),h()},b.parse(n.file,n.instanceConfig)}else J(o.complete)&&o.complete()}function h(){u.splice(0,1),e()}}}function h(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine=\"\",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=w(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new r(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&J(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1,this._halted=!1;var i=this._partialLine+e;this._partialLine=\"\";var n=this._handle.parse(i,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=n.meta.cursor;this._finished||(this._partialLine=i.substring(s-this._baseIndex),this._baseIndex=s),n&&n.data&&(this._rowCount+=n.data.length);var a=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(o)f.postMessage({results:n,workerId:b.WORKER_ID,finished:a});else if(J(this._config.chunk)&&!t){if(this._config.chunk(n,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);n=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(n.data),this._completeResults.errors=this._completeResults.errors.concat(n.errors),this._completeResults.meta=n.meta),this._completed||!a||!J(this._config.complete)||n&&n.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),a||n&&n.meta.paused||this._nextChunk(),n}this._halted=!0},this._sendError=function(e){J(this._config.error)?this._config.error(e):o&&this._config.error&&f.postMessage({workerId:b.WORKER_ID,error:e,finished:!1})}}function l(e){var i;(e=e||{}).chunkSize||(e.chunkSize=b.RemoteChunkSize),h.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(i=new XMLHttpRequest,this._config.withCredentials&&(i.withCredentials=this._config.withCredentials),n||(i.onload=v(this._chunkLoaded,this),i.onerror=v(this._chunkError,this)),i.open(this._config.downloadRequestBody?\"POST\":\"GET\",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var t in e)i.setRequestHeader(t,e[t])}if(this._config.chunkSize){var r=this._start+this._config.chunkSize-1;i.setRequestHeader(\"Range\",\"bytes=\"+this._start+\"-\"+r)}try{i.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}n&&0===i.status&&this._chunkError()}},this._chunkLoaded=function(){4===i.readyState&&(i.status<200||400<=i.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:i.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader(\"Content-Range\");if(null===t)return-1;return parseInt(t.substring(t.lastIndexOf(\"/\")+1))}(i),this.parseChunk(i.responseText)))},this._chunkError=function(e){var t=i.statusText||e;this._sendError(new Error(t))}}function c(e){var i,n;(e=e||{}).chunkSize||(e.chunkSize=b.LocalChunkSize),h.call(this,e);var s=\"undefined\"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,s?((i=new FileReader).onload=v(this._chunkLoaded,this),i.onerror=v(this._chunkError,this)):i=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var t=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,t)}var r=i.readAsText(e,this._config.encoding);s||this._chunkLoaded({target:{result:r}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(i.error)}}function p(e){var r;h.call(this,e=e||{}),this.stream=function(e){return r=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,t=this._config.chunkSize;return t?(e=r.substring(0,t),r=r.substring(t)):(e=r,r=\"\"),this._finished=!r,this.parseChunk(e)}}}function g(e){h.call(this,e=e||{});var t=[],r=!0,i=!1;this.pause=function(){h.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){h.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on(\"data\",this._streamData),this._input.on(\"end\",this._streamEnd),this._input.on(\"error\",this._streamError)},this._checkIsFinished=function(){i&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):r=!0},this._streamData=v(function(e){try{t.push(\"string\"==typeof e?e:e.toString(this._config.encoding)),r&&(r=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=v(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=v(function(){this._streamCleanUp(),i=!0,this._streamData(\"\")},this),this._streamCleanUp=v(function(){this._input.removeListener(\"data\",this._streamData),this._input.removeListener(\"end\",this._streamEnd),this._input.removeListener(\"error\",this._streamError)},this)}function r(m){var a,o,u,i=Math.pow(2,53),n=-i,s=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/,h=/^((\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)))$/,t=this,r=0,f=0,d=!1,e=!1,l=[],c={data:[],errors:[],meta:{}};if(J(m.step)){var p=m.step;m.step=function(e){if(c=e,_())g();else{if(g(),0===c.data.length)return;r+=e.data.length,m.preview&&r>m.preview?o.abort():(c.data=c.data[0],p(c,t))}}}function y(e){return\"greedy\"===m.skipEmptyLines?\"\"===e.join(\"\").trim():1===e.length&&0===e[0].length}function g(){return c&&u&&(k(\"Delimiter\",\"UndetectableDelimiter\",\"Unable to auto-detect delimiting character; defaulted to '\"+b.DefaultDelimiter+\"'\"),u=!1),m.skipEmptyLines&&(c.data=c.data.filter(function(e){return!y(e)})),_()&&function(){if(!c)return;function e(e,t){J(m.transformHeader)&&(e=m.transformHeader(e,t)),l.push(e)}if(Array.isArray(c.data[0])){for(var t=0;_()&&t<c.data.length;t++)c.data[t].forEach(e);c.data.splice(0,1)}else c.data.forEach(e)}(),function(){if(!c||!m.header&&!m.dynamicTyping&&!m.transform)return c;function e(e,t){var r,i=m.header?{}:[];for(r=0;r<e.length;r++){var n=r,s=e[r];m.header&&(n=r>=l.length?\"__parsed_extra\":l[r]),m.transform&&(s=m.transform(s,n)),s=v(n,s),\"__parsed_extra\"===n?(i[n]=i[n]||[],i[n].push(s)):i[n]=s}return m.header&&(r>l.length?k(\"FieldMismatch\",\"TooManyFields\",\"Too many fields: expected \"+l.length+\" fields but parsed \"+r,f+t):r<l.length&&k(\"FieldMismatch\",\"TooFewFields\",\"Too few fields: expected \"+l.length+\" fields but parsed \"+r,f+t)),i}var t=1;!c.data.length||Array.isArray(c.data[0])?(c.data=c.data.map(e),t=c.data.length):c.data=e(c.data,0);m.header&&c.meta&&(c.meta.fields=l);return f+=t,c}()}function _(){return m.header&&0===l.length}function v(e,t){return r=e,m.dynamicTypingFunction&&void 0===m.dynamicTyping[r]&&(m.dynamicTyping[r]=m.dynamicTypingFunction(r)),!0===(m.dynamicTyping[r]||m.dynamicTyping)?\"true\"===t||\"TRUE\"===t||\"false\"!==t&&\"FALSE\"!==t&&(function(e){if(s.test(e)){var t=parseFloat(e);if(n<t&&t<i)return!0}return!1}(t)?parseFloat(t):h.test(t)?new Date(t):\"\"===t?null:t):t;var r}function k(e,t,r,i){var n={type:e,code:t,message:r};void 0!==i&&(n.row=i),c.errors.push(n)}this.parse=function(e,t,r){var i=m.quoteChar||'\"';if(m.newline||(m.newline=function(e,t){e=e.substring(0,1048576);var r=new RegExp(Q(t)+\"([^]*?)\"+Q(t),\"gm\"),i=(e=e.replace(r,\"\")).split(\"\\r\"),n=e.split(\"\\n\"),s=1<n.length&&n[0].length<i[0].length;if(1===i.length||s)return\"\\n\";for(var a=0,o=0;o<i.length;o++)\"\\n\"===i[o][0]&&a++;return a>=i.length/2?\"\\r\\n\":\"\\r\"}(e,i)),u=!1,m.delimiter)J(m.delimiter)&&(m.delimiter=m.delimiter(e),c.meta.delimiter=m.delimiter);else{var n=function(e,t,r,i,n){var s,a,o,u;n=n||[\",\",\"\\t\",\"|\",\";\",b.RECORD_SEP,b.UNIT_SEP];for(var h=0;h<n.length;h++){var f=n[h],d=0,l=0,c=0;o=void 0;for(var p=new E({comments:i,delimiter:f,newline:t,preview:10}).parse(e),g=0;g<p.data.length;g++)if(r&&y(p.data[g]))c++;else{var _=p.data[g].length;l+=_,void 0!==o?0<_&&(d+=Math.abs(_-o),o=_):o=_}0<p.data.length&&(l/=p.data.length-c),(void 0===a||d<=a)&&(void 0===u||u<l)&&1.99<l&&(a=d,s=f,u=l)}return{successful:!!(m.delimiter=s),bestDelimiter:s}}(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess);n.successful?m.delimiter=n.bestDelimiter:(u=!0,m.delimiter=b.DefaultDelimiter),c.meta.delimiter=m.delimiter}var s=w(m);return m.preview&&m.header&&s.preview++,a=e,o=new E(s),c=o.parse(a,t,r),g(),d?{meta:{paused:!0}}:c||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,o.abort(),a=J(m.chunk)?\"\":a.substring(o.getCharIndex())},this.resume=function(){t.streamer._halted?(d=!1,t.streamer.parseChunk(a,!0)):setTimeout(t.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,o.abort(),c.meta.aborted=!0,J(m.complete)&&m.complete(c),a=\"\"}}function Q(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\")}function E(j){var z,M=(j=j||{}).delimiter,P=j.newline,U=j.comments,q=j.step,N=j.preview,B=j.fastMode,K=z=void 0===j.quoteChar||null===j.quoteChar?'\"':j.quoteChar;if(void 0!==j.escapeChar&&(K=j.escapeChar),(\"string\"!=typeof M||-1<b.BAD_DELIMITERS.indexOf(M))&&(M=\",\"),U===M)throw new Error(\"Comment character same as delimiter\");!0===U?U=\"#\":(\"string\"!=typeof U||-1<b.BAD_DELIMITERS.indexOf(U))&&(U=!1),\"\\n\"!==P&&\"\\r\"!==P&&\"\\r\\n\"!==P&&(P=\"\\n\");var W=0,H=!1;this.parse=function(i,t,r){if(\"string\"!=typeof i)throw new Error(\"Input must be a string\");var n=i.length,e=M.length,s=P.length,a=U.length,o=J(q),u=[],h=[],f=[],d=W=0;if(!i)return L();if(j.header){var l=i.split(P)[0].split(M),c=[],p={},g=!1;for(var _ in l){var m=l[_];J(j.transformHeader)&&(m=j.transformHeader(m,_));var y=m,v=p[m]||0;0<v&&(g=!0,y=m+\"_\"+v),p[m]=v+1,c.push(y)}if(g){var k=i.split(P);k[0]=c.join(M),i=k.join(P)}}if(B||!1!==B&&-1===i.indexOf(z)){for(var b=i.split(P),E=0;E<b.length;E++){if(f=b[E],W+=f.length,E!==b.length-1)W+=P.length;else if(r)return L();if(!U||f.substring(0,a)!==U){if(o){if(u=[],I(f.split(M)),F(),H)return L()}else I(f.split(M));if(N&&N<=E)return u=u.slice(0,N),L(!0)}}return L()}for(var w=i.indexOf(M,W),R=i.indexOf(P,W),C=new RegExp(Q(K)+Q(z),\"g\"),S=i.indexOf(z,W);;)if(i[W]!==z)if(U&&0===f.length&&i.substring(W,W+a)===U){if(-1===R)return L();W=R+s,R=i.indexOf(P,W),w=i.indexOf(M,W)}else if(-1!==w&&(w<R||-1===R))f.push(i.substring(W,w)),W=w+e,w=i.indexOf(M,W);else{if(-1===R)break;if(f.push(i.substring(W,R)),D(R+s),o&&(F(),H))return L();if(N&&u.length>=N)return L(!0)}else for(S=W,W++;;){if(-1===(S=i.indexOf(z,S+1)))return r||h.push({type:\"Quotes\",code:\"MissingQuotes\",message:\"Quoted field unterminated\",row:u.length,index:W}),T();if(S===n-1)return T(i.substring(W,S).replace(C,z));if(z!==K||i[S+1]!==K){if(z===K||0===S||i[S-1]!==K){-1!==w&&w<S+1&&(w=i.indexOf(M,S+1)),-1!==R&&R<S+1&&(R=i.indexOf(P,S+1));var O=A(-1===R?w:Math.min(w,R));if(i.substr(S+1+O,e)===M){f.push(i.substring(W,S).replace(C,z)),i[W=S+1+O+e]!==z&&(S=i.indexOf(z,W)),w=i.indexOf(M,W),R=i.indexOf(P,W);break}var x=A(R);if(i.substring(S+1+x,S+1+x+s)===P){if(f.push(i.substring(W,S).replace(C,z)),D(S+1+x+s),w=i.indexOf(M,W),S=i.indexOf(z,W),o&&(F(),H))return L();if(N&&u.length>=N)return L(!0);break}h.push({type:\"Quotes\",code:\"InvalidQuotes\",message:\"Trailing quote on quoted field is malformed\",row:u.length,index:W}),S++}}else S++}return T();function I(e){u.push(e),d=W}function A(e){var t=0;if(-1!==e){var r=i.substring(S+1,e);r&&\"\"===r.trim()&&(t=r.length)}return t}function T(e){return r||(void 0===e&&(e=i.substring(W)),f.push(e),W=n,I(f),o&&F()),L()}function D(e){W=e,I(f),f=[],R=i.indexOf(P,W)}function L(e){return{data:u,errors:h,meta:{delimiter:M,linebreak:P,aborted:H,truncated:!!e,cursor:d+(t||0)}}}function F(){q(L()),u=[],h=[]}},this.abort=function(){H=!0},this.getCharIndex=function(){return W}}function _(e){var t=e.data,r=a[t.workerId],i=!1;if(t.error)r.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){i=!0,m(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:y,resume:y};if(J(r.userStep)){for(var s=0;s<t.results.data.length&&(r.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!i);s++);delete t.results}else J(r.userChunk)&&(r.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!i&&m(t.workerId,t.results)}function m(e,t){var r=a[e];J(r.userComplete)&&r.userComplete(t),r.terminate(),delete a[e]}function y(){throw new Error(\"Not implemented.\")}function w(e){if(\"object\"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var r in e)t[r]=w(e[r]);return t}function v(e,t){return function(){e.apply(t,arguments)}}function J(e){return\"function\"==typeof e}return o&&(f.onmessage=function(e){var t=e.data;void 0===b.WORKER_ID&&t&&(b.WORKER_ID=t.workerId);if(\"string\"==typeof t.input)f.postMessage({workerId:b.WORKER_ID,results:b.parse(t.input,t.config),finished:!0});else if(f.File&&t.input instanceof File||t.input instanceof Object){var r=b.parse(t.input,t.config);r&&f.postMessage({workerId:b.WORKER_ID,results:r,finished:!0})}}),(l.prototype=Object.create(h.prototype)).constructor=l,(c.prototype=Object.create(h.prototype)).constructor=c,(p.prototype=Object.create(p.prototype)).constructor=p,(g.prototype=Object.create(h.prototype)).constructor=g,b});","// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support CommonJS\n  if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  // check if a range is taken\n  var colorRanges = [];\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n      // Value false at index i means the range i is not taken yet.\n      for (var i = 0; i < options.count; i++) {\n        colorRanges.push(false)\n        }\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        var color = randomColor(options);\n\n        if (seed !== null) {\n          options.seed = seed;\n        }\n\n        colors.push(color);\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue(options) {\n    if (colorRanges.length > 0) {\n      var hueRange = getRealHueRange(options.hue)\n\n      var hue = randomWithin(hueRange)\n\n      //Each of colorRanges.length ranges has a length equal approximatelly one step\n      var step = (hueRange[1] - hueRange[0]) / colorRanges.length\n\n      var j = parseInt((hue - hueRange[0]) / step)\n\n      //Check if the range j is taken\n      if (colorRanges[j] === true) {\n        j = (j + 2) % colorRanges.length\n      }\n      else {\n        colorRanges[j] = true\n           }\n\n      var min = (hueRange[0] + j * step) % 359,\n          max = (hueRange[0] + (j + 1) * step) % 359;\n\n      hueRange = [min, max]\n\n      hue = randomWithin(hueRange)\n\n      if (hue < 0) {hue = 360 + hue;}\n      return hue\n    }\n    else {\n      var hueRange = getHueRange(options.hue)\n\n      hue = randomWithin(hueRange);\n      // Instead of storing red as two seperate ranges,\n      // we group them, using negative numbers\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n\n      return hue;\n    }\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + alpha + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [ hue, hue ];\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n      var golden_ratio = 0.618033988749895\n      var r=Math.random()\n      r += golden_ratio\n      r %= 1\n      return Math.floor(range[0] + r*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n}\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [18,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [46,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [62,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [178, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [257, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [282, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HexToHSB (hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n          green = parseInt(hex.substr(2, 2), 16) / 255,\n          blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n          delta = cMax - Math.min(red, green, blue),\n          saturation = cMax ? (delta / cMax) : 0;\n\n    switch (cMax) {\n      case red: return [ 60 * (((green - blue) / delta) % 6) || 0, saturation, cMax ];\n      case green: return [ 60 * (((blue - red) / delta) + 2) || 0, saturation, cMax ];\n      case blue: return [ 60 * (((red - green) / delta) + 4) || 0, saturation, cMax ];\n    }\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  // get The range of given hue when options.count!=0\n  function getRealHueRange(colorHue)\n  { if (!isNaN(colorHue)) {\n    var number = parseInt(colorHue);\n\n    if (number < 360 && number > 0) {\n      return getColorInfo(colorHue).hueRange\n    }\n  }\n    else if (typeof colorHue === 'string') {\n\n      if (colorDictionary[colorHue]) {\n        var color = colorDictionary[colorHue];\n\n        if (color.hueRange) {\n          return color.hueRange\n       }\n    } else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorHue)[0]\n        return getColorInfo(hue).hueRange\n    }\n  }\n\n    return [0,360]\n}\n  return randomColor;\n}));\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {\n  if (receiver !== classConstructor) {\n    throw new TypeError(\"Private static access of wrong provenance\");\n  }\n}","export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {\n  if (descriptor === undefined) {\n    throw new TypeError(\"attempted to \" + action + \" private static field before its declaration\");\n  }\n}","export default function _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateMethodInitSpec(obj, privateSet) {\n  checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}","import classApplyDescriptorGet from \"./classApplyDescriptorGet.js\";\nimport classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nimport classCheckPrivateStaticFieldDescriptor from \"./classCheckPrivateStaticFieldDescriptor.js\";\nexport default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  classCheckPrivateStaticFieldDescriptor(descriptor, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}","import classApplyDescriptorSet from \"./classApplyDescriptorSet.js\";\nimport classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nimport classCheckPrivateStaticFieldDescriptor from \"./classCheckPrivateStaticFieldDescriptor.js\";\nexport default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  classCheckPrivateStaticFieldDescriptor(descriptor, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}","import classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nexport default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  return method;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as afile from \"./abstract/file.js\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\n\n/**\n * Dataset in the 10X HDF5 feature-barcode matrix format, see [here](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/output/matrices) for details.\n */\nexport class TenxHdf5Dataset { \n    #h5_file;\n    #h5_path;\n    #h5_flush;\n\n    #raw_features;\n    #raw_cells;\n\n    #featureTypeRnaName;\n    #featureTypeAdtName;\n    #featureTypeCrisprName;\n\n    #primaryRnaFeatureIdColumn;\n    #primaryAdtFeatureIdColumn;\n    #primaryCrisprFeatureIdColumn;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"h5\", file: fun(this.#h5_file) }];\n        let options = {\n            featureTypeRnaName: this.#featureTypeRnaName,\n            featureTypeAdtName: this.#featureTypeAdtName,\n            featureTypeCrisprName: this.#featureTypeCrisprName,\n            primaryRnaFeatureIdColumn: this.#primaryRnaFeatureIdColumn,\n            primaryAdtFeatureIdColumn: this.#primaryAdtFeatureIdColumn,\n            primaryCrisprFeatureIdColumn: this.#primaryCrisprFeatureIdColumn\n        };\n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} h5File - Contents of a HDF5 file in the 10X feature-barcode format.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?string} [options.featureTypeRnaName=\"Gene Expression\"] - See {@linkcode TenxHdf5Dataset#setFeatureTypeRnaName setFeatureTypeRnaName}.\n     * @param {?string} [options.featureTypeAdtName=\"Antibody Capture\"] - See {@linkcode TenxHdf5Dataset#setFeatureTypeAdtName setFeatureTypeAdtName}.\n     * @param {?string} [options.featureTypeCrisprName=\"CRISPR Guide Capture\"] - See {@linkcode TenxHdf5Dataset#setFeatureTypeCrisprName setFeatureTypeCrisprName}.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn=0] - See {@linkcode TenxHdf5Dataset#setPrimaryRnaFeatureIdColumn setPrimaryRnaFeatureIdColumn}.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn=0] - See {@linkcode TenxHdf5Dataset#setPrimaryAdtFeatureIdColumn setPrimaryAdtFeatureIdColumn}.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn=0] - See {@linkcode TenxHdf5Dataset#setPrimaryCrisprFeatureIdColumn setPrimaryCrisprFeatureIdColumn}.\n     */\n    constructor(h5File, { \n        featureTypeRnaName = \"Gene Expression\", \n        featureTypeAdtName = \"Antibody Capture\", \n        featureTypeCrisprName = \"CRISPR Guide Capture\", \n        primaryRnaFeatureIdColumn = 0, \n        primaryAdtFeatureIdColumn = 0,\n        primaryCrisprFeatureIdColumn = 0\n    } = {}) {\n        if (h5File instanceof afile.SimpleFile) {\n            this.#h5_file = h5File;\n        } else {\n            this.#h5_file = new afile.SimpleFile(h5File);\n        }\n\n        this.#featureTypeRnaName = featureTypeRnaName;\n        this.#featureTypeAdtName = featureTypeAdtName;\n        this.#featureTypeCrisprName = featureTypeCrisprName;\n\n        this.#primaryRnaFeatureIdColumn = primaryRnaFeatureIdColumn;\n        this.#primaryAdtFeatureIdColumn = primaryAdtFeatureIdColumn;\n        this.#primaryCrisprFeatureIdColumn = primaryCrisprFeatureIdColumn;\n\n        this.clear();\n    }\n\n    /**\n     * @param {?string} name - Name of the feature type for gene expression.\n     * Alternatively `null`, to indicate that no RNA features are to be loaded.\n     */\n    setFeatureTypeRnaName(name) {\n        this.#featureTypeRnaName = name;\n        return;\n    }\n\n    /**\n     * @param {?string} name - Name of the feature type for ADTs.\n     * Alternatively `null`, to indicate that no ADT features are to be loaded.\n     */\n    setFeatureTypeAdtName(name) {\n        this.#featureTypeAdtName = name;\n        return;\n    }\n\n    /**\n     * @param {?string} name - Name of the feature type for CRISPR guides.\n     * Alternatively `null`, to indicate that no guides are to be loaded.\n     */\n    setFeatureTypeCrisprName(name) {\n        this.#featureTypeCrisprName = name;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setPrimaryRnaFeatureIdColumn(i) {\n        this.#primaryRnaFeatureIdColumn = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setPrimaryAdtFeatureIdColumn(i) {\n        this.#primaryAdtFeatureIdColumn = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setPrimaryCrisprFeatureIdColumn(i) {\n        this.#primaryCrisprFeatureIdColumn = i;\n        return;\n    }\n\n    #instantiate() {\n        if (this.#h5_path !== null) {\n            return;\n        }\n\n        let info = scran.realizeFile(this.#h5_file.content());\n        this.#h5_path = info.path;\n        this.#h5_flush = info.flush;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode TenxHdf5Dataset#load load} or {@linkcodeTenxHdf5Dataset#summary summary}. \n     */\n    clear() {\n        if (typeof this.#h5_flush == \"function\") {\n            this.#h5_flush();\n        }\n        this.#h5_flush = null;\n        this.#h5_path = null;\n\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"10X\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset,\n     * in a form that can be cheaply stringified.\n     */\n    abbreviate() {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n\n        this.#instantiate();\n        let handle = new scran.H5File(this.#h5_path);\n        if (!(\"matrix\" in handle.children) || handle.children[\"matrix\"] != \"Group\") {\n            throw new Error(\"expected a 'matrix' group at the top level of the file\");\n        }\n        let mhandle = handle.open(\"matrix\");\n\n        if (!(\"features\" in mhandle.children) || mhandle.children[\"features\"] != \"Group\") {\n            throw new Error(\"expected a 'matrix/features' group containing the feature annotation\");\n        }\n        let fhandle = mhandle.open(\"features\");\n\n        let ids = eutils.extractHDF5Strings(fhandle, \"id\");\n        if (ids == null) {\n            throw new Error(\"expected a 'matrix/features/id' string dataset containing the feature IDs\");\n        }\n        let feats = new bioc.DataFrame({ id: ids }); // build it piece-by-piece for a well-defined ordering.\n\n        let names = eutils.extractHDF5Strings(fhandle, \"name\");\n        if (names !== null) {\n            feats.$setColumn(\"name\", names);\n        }\n\n        let ftype = eutils.extractHDF5Strings(fhandle, \"feature_type\");\n        if (ftype !== null) {\n            feats.$setColumn(\"type\", ftype);\n        }\n\n        this.#raw_features = feats;\n        return;\n    }\n\n    #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#instantiate();\n        let details = scran.extractHDF5MatrixDetails(this.#h5_path, \"matrix\");\n        this.#raw_cells = new bioc.DataFrame({}, { numberOfRows: details.columns });\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode TenxHdf5Dataset#load load}.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode TenxMatrixMarketDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     */\n    summary({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n\n        let output = {\n            \"modality_features\": futils.reportFeatures(this.#raw_features, \"type\"),\n            \"cells\": this.#raw_cells\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode TenxHdf5Dataset#summary summary}.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array of strings containing the feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * It is assumed that an appropriate mapping from the feature types inside the `featureFile` was previously declared,\n     * either in the constructor or in setters like {@linkcode setFeatureTypeRnaName}.\n     *\n     * If the feature annotation lacks information about the feature types, it is assumed that all features are genes, i.e., only the RNA modality is present.\n     */\n    load({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n\n        let loaded = scran.initializeSparseMatrixFromHDF5(this.#h5_path, \"matrix\"); // collection gets handled inside splitScranMatrixAndFeatures.\n\n        let mappings = { \n            RNA: this.#featureTypeRnaName, \n            ADT: this.#featureTypeAdtName,\n            CRISPR: this.#featureTypeCrisprName\n        };\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, \"type\", mappings, \"RNA\");\n        output.cells = this.#raw_cells;\n\n        let primaries = { \n            RNA: this.#primaryRnaFeatureIdColumn, \n            ADT: this.#primaryAdtFeatureIdColumn,\n            CRISPR: this.#primaryCrisprFeatureIdColumn\n        };\n        output.primary_ids = futils.extractPrimaryIds(output.features, primaries);\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode TenxHdf5Dataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {TenxHdf5Dataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        if (files.length != 1 || files[0].type != \"h5\") {\n            throw new Error(\"expected exactly one file of type 'h5' for 10X HDF5 unserialization\");\n        }\n        return new TenxHdf5Dataset(files[0].file, options);\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\nimport * as afile from \"./abstract/file.js\";\n\n/**\n * Any class that satisfies the ArtifactdbProjectNavigator contract, so called as it is intended to \"navigate\" an ArtifactDB project directory.\n * This should provide the following methods:\n * \n * - `metadata(p)`, a (possibly async) method that accepts a string `p` containing a relative path to a resource inside an ArtifactDB project directory,\n *   and returns an object containing the metadata for that object.\n *   Any redirections should be resolved by this method.\n *\n *   Note that {@linkplain AbstractArtifactdbDataset} will automatically cache the outputs of all `metadata()` calls between any invocations of {@linkcode AbstractArtifactdbDataset#clear clear},\n *   to improve efficiency when repeatedly accessing the same metadata.\n *   The same applies to {@linkplain AbstractArtifactdbResult}.\n * - `file(p)`, a (possibly async) method that accepts a string `p` containing a relative path inside a project directory and returns the contents of the file at that path.\n *   The return value should typically be a Uint8Array; on Node.js, methods may alternatively return a string containing a path to the file on the local file system.\n *   The method does not need to handle redirections from `p`.\n *\n * Optionally, the ArtifactdbProjectNavigator class may implement a `clear()` method to remove any cached content.\n * This will be called by {@linkcode AbstractArtifactdbDataset#clear AbstractArtifactdbDataset.clear} and  {@linkcode AbstractArtifactdbResult#clear AbstractArtifactdbResult.clear}.\n *\n * @typedef ArtifactdbProjectNavigator\n */\n\n/**************************\n ******* Internals ********\n **************************/\n\nasync function load_data_frame(info, navigator) {\n    if (typeof info == \"string\") {\n        info = await navigator.metadata(info);\n    }\n    let contents = await navigator.file(info.path);\n\n    let colnames;\n    let columns;\n    let rownames = null;\n\n    if (info[\"$schema\"].startsWith(\"csv_data_frame/\")) {\n        // TODO: replace with comservatory parser.\n        let parsed = await eutils.readTable2(contents, { delim: \",\" });\n        colnames = parsed.shift();\n\n        columns = new Array(colnames.length);\n        for (var i = 0; i < columns.length; i++) {\n            let current = [];\n            for (const x of parsed) {\n                current.push(x[i]);\n            }\n            columns[i] = current;\n        }\n\n        if (info.data_frame.row_names) {\n            rownames = columns.shift();\n            colnames.shift();\n        }\n\n        // Mutating the type... this doesn't quite handle NAs and NaNs properly, but whatever.\n        for (var i = 0; i < columns.length; i++) {\n            let type = info.data_frame.columns[i].type;\n            if (type == \"integer\") {\n                columns[i] = new Int32Array(columns[i]);\n            } else if (type == \"number\") {\n                columns[i] = new Float64Array(columns[i]);\n            } else if (type == \"boolean\") {\n                columns[i] = columns[i].map(x => x == \"true\");\n            }\n        }\n\n    } else if (info[\"$schema\"].startsWith(\"hdf5_data_frame/\")) {\n        let out = scran.realizeFile(contents);\n        try {\n            let handle = new scran.H5File(out.path);\n            let ghandle = handle.open(info.hdf5_data_frame.group);\n\n            colnames = ghandle.open(\"column_names\", { load: true }).values;\n            if (info.data_frame.row_names) {\n                rownames = ghandle.open(\"row_names\", { load: true }).values;\n            }\n\n            columns = [];\n            let chandle = ghandle.open(\"data\");\n            for (var i = 0; i < colnames.length; i++) {\n                if (!(String(i) in chandle.children)) {\n                    columns.push(null);\n                    continue;\n                }\n\n                let dhandle = chandle.open(String(i), { load: true });\n                let current = dhandle.values;\n\n                let type = info.data_frame.columns[i];\n                if (type == \"integer\") {\n                    if (current instanceof Float64Array || current instanceof Float32Array) {\n                        current = new Int32Array(current);\n                    }\n\n                } else if (type == \"number\") {\n                    if (!(current instanceof Float64Array) && !(current instanceof Float32Array)) {\n                        current = new Float64Array(current);\n                    }\n\n                } else if (type == \"boolean\") {\n                    let replacement = new Array(current.length);\n                    for (var i = 0; i < current.length; i++) {\n                        if (current[i] == -2147483648) {\n                            replacement[i] = null;\n                        } else {\n                            replacement[i] = current[i] != 0\n                        }\n                    }\n                    current = replacement;\n\n                } else if (type == \"string\" || type == \"date\") {\n                    if (\"missing-value-placeholder\" in dhandle.attributes) {\n                        let placeholder = dhandle.readAttribute(\"missing-value-placeholder\").values[0];\n                        for (var i = 0; i < current.length; i++) {\n                            if (current[i] == placeholder) {\n                                current[i] = null;\n                            }\n                        }\n                    }\n                }\n\n                columns.push(current);\n            }\n        } finally {\n            out.flush();\n        }\n\n    } else {\n        throw new Error(\"unknown data_frame schema type '\" + info[\"$schema\"] + \"'\");\n    }\n\n    let new_columns = {};\n    let new_colnames = [];\n    for (var i = 0; i < columns.length; i++) {\n        if (info.data_frame.columns[i].type === \"other\") {\n            let nest_meta = await navigator.metadata(info.data_frame.columns[i].resource.path);\n            try {\n                new_columns[colnames[i]] = await load_data_frame(nest_meta, navigator);\n                new_colnames.push(colnames[i]);\n            } catch (e) {\n                console.warn(e);\n            }\n        } else {\n            new_columns[colnames[i]] = columns[i];\n            new_colnames.push(colnames[i]);\n        }\n    }\n\n    return new bioc.DataFrame(new_columns, { \n        columnOrder: new_colnames, \n        rowNames: rownames, \n        numberOfRows: info.data_frame.dimensions[0] \n    });\n}\n\nconst main_experiment_name = \"\";\n\nasync function extract_all_features(path, navigator) {\n    let extract_features = async se_meta => {\n        if (\"row_data\" in se_meta.summarized_experiment) {\n            let row_path = se_meta.summarized_experiment.row_data.resource.path;\n            return await load_data_frame(row_path, navigator);\n        } else {\n            return new bioc.DataFrame({}, { numberOfRows: se_meta.summarized_experiment.dimensions[0] });\n        }\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let output = {};\n    output[main_experiment_name] = await extract_features(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                output[alt.name] = await extract_features(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return output;\n}\n\nasync function extract_all_assay_names(path, navigator) {\n    let extract_assay_names = se_meta => {\n        let output = [];\n        for (const ass of se_meta.summarized_experiment.assays) {\n            output.push(ass.name);\n        }\n        return output;\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let assays = {};\n    assays[main_experiment_name] = extract_assay_names(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                assays[alt.name] = extract_assay_names(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return assays;\n}\n\n// This specifically loads the log-counts created by the dumper.\n// TODO: replace this with chihaya.js.\nasync function extract_logcounts(handle, navigator) {\n    if (handle.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (handle.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (Math.abs(handle.open(\"value\", { load: true }).values[0] - Math.log(2)) > 0.00000001) {\n        return null;\n    }\n    if (handle.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (handle.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n\n    let ghandle2 = handle.open(\"seed\");\n    if (ghandle2.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle2.readAttribute(\"delayed_operation\").values[0] !== \"unary math\") {\n        return null;\n    }\n    if (ghandle2.open(\"method\", { load: true }).values[0] !== \"log1p\") {\n        return null;\n    }\n\n    let ghandle3 = ghandle2.open(\"seed\");\n    if (ghandle3.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle3.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (ghandle3.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (ghandle3.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n    if (ghandle3.open(\"along\", { load: true }).values[0] !== 1) {\n        return null;\n    }\n    let sf = ghandle3.open(\"value\", { load: true }).values;\n\n    let ahandle = ghandle3.open(\"seed\");\n    if (ahandle.readAttribute(\"delayed_type\").values[0] !== \"array\") {\n        return null;\n    }\n    if (ahandle.readAttribute(\"delayed_array\").values[0] !== \"custom alabaster local array\") {\n        return null;\n    }\n    let path = ahandle.open(\"path\", { load: true }).values[0];\n\n    let mat;\n    let output = {};\n    try {\n        mat = await extract_assay_raw(path, navigator, false); // don't force it to be integer, but we don't mind if it is.\n        output.matrix = scran.logNormCounts(mat.matrix, { sizeFactors: sf, center: false });\n        output.row_ids = mat.row_ids;\n    } finally {\n        scran.free(mat.matrix);\n    }\n                \n    return output;\n}\n\nasync function extract_assay(meta, assay, navigator, forceInteger) {\n    if (typeof assay == \"string\") {\n        var counter = 0;\n        for (const ass of meta.summarized_experiment.assays) {\n            if (ass.name == assay) {\n                assay = counter;\n                break;\n            }\n            counter++;\n        }\n        if (counter == meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay '\" + assay + \"' not found\");\n        }\n    } else {\n        if (assay >= meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay \" + String(assay) + \" out of range\");\n        }\n    }\n\n    let asspath = meta.summarized_experiment.assays[assay].resource.path;\n    return extract_assay_raw(asspath, navigator, forceInteger);\n}\n\nasync function extract_assay_raw(asspath, navigator, forceInteger) {\n    let assmeta = await navigator.metadata(asspath);\n    let contents = await navigator.file(assmeta.path);\n    let output;\n\n    let schema = assmeta[\"$schema\"];\n    let is_dense = schema.startsWith(\"hdf5_dense_array/\");\n    let is_sparse = schema.startsWith(\"hdf5_sparse_matrix/\");\n\n    if (is_dense || is_sparse) {\n        let name = (is_sparse ?  assmeta.hdf5_sparse_matrix.group : assmeta.hdf5_dense_array.dataset);\n        let stuff = scran.realizeFile(contents);\n        try {\n            output = scran.initializeSparseMatrixFromHDF5(stuff.path, name, { forceInteger });\n        } finally {\n            stuff.flush();\n        }\n\n    } else if (assmeta[\"$schema\"].startsWith(\"hdf5_delayed_array/\")) {\n        let stuff = scran.realizeFile(contents);\n        try {\n            let fhandle = new scran.H5File(stuff.path);\n            let ghandle = fhandle.open(assmeta.hdf5_delayed_array.group);\n\n            // TODO: replace with calls to chihaya.js.\n            output = await extract_logcounts(ghandle, navigator);\n            if (output == null) {\n                throw new Error(\"currently only supporting bakana-generated log-counts for delayed arrays\");\n            }\n        } finally {\n            stuff.flush();\n        }\n\n    } else {\n        throw new Error(\"array schema '\" + assmeta[\"$schema\"] + \"' is currently not supported\");\n    }\n\n    return output;\n}\n\nasync function extract_other_data(other_path, navigator) {\n    let othermeta = await navigator.metadata(other_path);\n    if (!othermeta[\"$schema\"].startsWith(\"json_simple_list/\")) {\n        throw new Error(\"currently only support JSON-formatted lists in the 'other_data'\");\n    }\n\n    let contents = await navigator.file(othermeta.path);\n    let ofile = new afile.SimpleFile(contents, { name: \"list.json\" });\n    let unpacked = eutils.unpackText(ofile.buffer(), { compression: (othermeta.json_simple_list.compression == \"gzip\" ? \"gz\" : \"none\") });\n    let parsed = JSON.parse(unpacked);\n    return extract_list_data_internal(parsed);\n}\n\nfunction extract_list_data_internal(obj) {\n    if (!(\"type\" in obj)) {\n        throw new Error(\"non-standard JSON object for 'json_simple_list' schema\");\n    }\n\n    if (obj.type == \"number\") {\n        if (obj.values instanceof Array) {\n            let output = new Float64Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? Number.NaN : x) \n            });\n            return output;\n        } else {\n            return (obj.values == null ? Number.NaN : obj.values);\n        }\n\n    } else if (obj.type == \"integer\") {\n        if (obj.values instanceof Array) {\n            let output = new Int32Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? -2147483648 : x) \n            });\n            return output;\n        } else {\n            return obj.values;\n        }\n\n    } else if (obj.type == \"boolean\" || obj.type == \"string\") {\n        return obj.values;\n\n    } else if (obj.type == \"list\") {\n        if (\"names\" in obj) {\n            let output = {};\n            for (var i = 0; i < obj.values.length; i++) {\n                output[obj.names[i]] = extract_list_data_internal(obj.values[i]);\n            }\n            return output;\n        } else {\n            let output = [];\n            for (var i = 0; i < obj.values.length; i++) {\n                output.push(extract_list_data_internal(obj.values[i]));\n            }\n            return output;\n        }\n\n    } else if (obj.type == \"nothing\") {\n        return null;\n\n    } else {\n        console.warn(\"JSON simple list containing type '\" + obj.type + \"' is not yet supported\");\n        return null;\n    }\n}\n\n/***********************\n ******* Cacher ********\n ***********************/\n\n// As we'll be using the metadata often, we cache it at this level. This\n// removes the burden of caching on the implementation of the navigator. \nclass MetadataCacheWrapper {\n    #navigator;\n    #metadata_cache;\n\n    constructor(nav) {\n        this.#navigator = nav;\n        this.#metadata_cache = {};\n    }\n\n    clear() {\n        this.#metadata_cache = {};\n        if (\"clear\" in this.#navigator) {\n            this.#navigator.clear();\n        }\n    }\n\n    async metadata(path) {\n        if (path in this.#metadata_cache) {\n            return this.#metadata_cache[path];\n        } else {\n            let content = await this.#navigator.metadata(path);\n            this.#metadata_cache[path] = content;\n            return content;\n        }\n    }\n\n    file(path) {\n        return this.#navigator.file(path);\n    }\n};\n\n/************************\n ******* Dataset ********\n ************************/\n\n/**\n * Dataset stored as a SummarizedExperiment in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n * Subclasses should define `abbreviate()` and `serialize()` methods, as well as the static `format()` and `unserialize()` methods - \n * see the [Dataset contract](https://github.com/LTLA/bakana/blob/master/docs/related/custom_readers.md) for more details.\n */\nexport class AbstractArtifactdbDataset {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n\n    #rnaCountAssay;\n    #adtCountAssay;\n    #crisprCountAssay;\n\n    #rnaExperiment;\n    #adtExperiment;\n    #crisprExperiment;\n\n    #primaryRnaFeatureIdColumn;\n    #primaryAdtFeatureIdColumn;\n    #primaryCrisprFeatureIdColumn;\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return {\n            rnaCountAssay: this.#rnaCountAssay,\n            adtCountAssay: this.#adtCountAssay,\n            crisprCountAssay: this.#crisprCountAssay,\n            rnaExperiment: this.#rnaExperiment,\n            adtExperiment: this.#adtExperiment,\n            crisprExperiment: this.#crisprExperiment,\n            primaryRnaFeatureIdColumn: this.#primaryRnaFeatureIdColumn,\n            primaryAdtFeatureIdColumn: this.#primaryAdtFeatureIdColumn,\n            primaryCrisprFeatureIdColumn: this.#primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string|number} [options.rnaCountAssay=0] - See {@linkcode AbstractArtifactdbDataset#setRnaCountAssay setRnaCountAssay}.\n     * @param {string|number} [options.adtCountAssay=0] - See {@linkcode AbstractArtifactdbDataset#setAdtCountAssay setAdtCountAssay}.\n     * @param {string|number} [options.crisprCountAssay=0] - See {@linkcode AbstractArtifactdbDataset#setCrisprCountAssay setCrisprCountAssay}.\n     * @param {?(string|number)} [options.rnaExperiment=\"\"] - See {@linkcode AbstractArtifactdbDataset#setRnaExperiment setRnaExperiment}.\n     * @param {?(string|number)} [options.adtExperiment=\"Antibody Capture\"] - See {@linkcode AbstractArtifactdbDataset#setAdtExperiment setAdtExperiment}.\n     * @param {?(string|number)} [options.crisprExperiment=\"CRISPR Guide Capture\"] - See {@linkcode AbstractArtifactdbDataset#setCrisprExperiment setCrisprExperiment}.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn=null] - See {@linkcode AbstractArtifactdbDataset#setPrimaryRnaFeatureIdColumn setPrimaryRnaFeatureIdColumn}.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn=null] - See {@linkcode AbstractArtifactdbDataset#setPrimaryAdtFeatureIdColumn setPrimaryAdtFeatureIdColumn}.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn=null] - See {@linkcode AbstractArtifactdbDataset#setPrimaryCrisprFeatureIdColumn setPrimaryCrisprFeatureIdColumn}.\n     */\n    constructor(path, navigator, { \n        rnaCountAssay = 0, \n        adtCountAssay = 0, \n        crisprCountAssay = 0,\n        rnaExperiment = \"\", \n        adtExperiment = \"Antibody Capture\", \n        crisprExperiment = \"CRISPR Guide Capture\",\n        primaryRnaFeatureIdColumn = null, \n        primaryAdtFeatureIdColumn = null,\n        primaryCrisprFeatureIdColumn = null \n    } = {}) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n\n        this.#rnaCountAssay = rnaCountAssay;\n        this.#adtCountAssay = adtCountAssay;\n        this.#crisprCountAssay = crisprCountAssay;\n\n        this.#rnaExperiment = rnaExperiment;\n        this.#adtExperiment = adtExperiment;\n        this.#crisprExperiment = crisprExperiment;\n\n        this.#primaryRnaFeatureIdColumn = primaryRnaFeatureIdColumn;\n        this.#primaryAdtFeatureIdColumn = primaryAdtFeatureIdColumn;\n        this.#primaryCrisprFeatureIdColumn = primaryCrisprFeatureIdColumn;\n\n        // Don't call this.clear() here. We don't want to clear the navigator's\n        // cache at this point, as the navigator might contain some cached\n        // values when passed to the constructor. We should respect any caches\n        // until we're specifically told to discard it with clear() or cache =\n        // false in load() or summary().\n        this.#reset_local_caches();\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the assay containing the RNA count matrix.\n     */\n    setRnaCountAssay(i) {\n        this.#rnaCountAssay = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the assay containing the ADT count matrix.\n     */\n    setAdtCountAssay(i) {\n        this.#adtCountAssay = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the assay containing the CRISPR count matrix.\n     */\n    setCrisprCountAssay(i) {\n        this.#adtCountAssay = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the alternative experiment containing gene expression data.\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no RNA data is assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the gene expression data.\n     */\n    setRnaExperiment(i) {\n        this.#rnaExperiment = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the alternative experiment containing ADT data.\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no ADTs are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the ADT data.\n     */\n    setAdtExperiment(i) {\n        this.#adtExperiment = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the alternative experiment containing CRISPR guide data.\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no CRISPR guides are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the guide data.\n     */\n    setCrisprExperiment(i) {\n        this.#crisprExperiment = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setPrimaryRnaFeatureIdColumn(i) {\n        this.#primaryRnaFeatureIdColumn = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setPrimaryAdtFeatureIdColumn(i) {\n        this.#primaryAdtFeatureIdColumn = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the existing row names (if they exist) are used as the primary identifier.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setPrimaryCrisprFeatureIdColumn(i) {\n        this.#primaryCrisprFeatureIdColumn = i;\n        return;\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbDataset#load load} or {@linkcode AbstractArtifactdbDataset#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbDataset#load load}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator)\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbDataset#summary summary}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an integer array containing the feature identifiers for each row in that modality.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            row_ids: {},\n            features: {},\n            cells: this.#raw_cells\n        };\n\n        let mapping = { \n            RNA: { exp: this.#rnaExperiment, assay: this.#rnaCountAssay },\n            ADT: { exp: this.#adtExperiment, assay: this.#adtCountAssay },\n            CRISPR: { exp: this.#crisprExperiment, assay: this.#crisprCountAssay }\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let altmap = {};\n        let alts = [];\n        if (\"single_cell_experiment\" in full_meta) {\n            alts = full_meta.single_cell_experiment.alternative_experiments;\n            for (const alt of alts) {\n                altmap[alt.name] = alt.resource.path;\n            }\n        }\n\n        try {\n            for (const [k, v] of Object.entries(mapping)) {\n                if (v.exp === null) {\n                    continue;\n                }\n\n                let meta = null;\n                let name = v.exp;\n                if (typeof v.exp == \"string\") {\n                    if (v.exp === \"\") {\n                        meta = full_meta;\n                    } else {\n                        if (!(v.exp in altmap)) {\n                            continue;\n                        }\n                        meta = await this.#navigator.metadata(altmap[v.exp]);\n                    }\n                } else {\n                    if (v.exp >= alts.length) {\n                        continue;\n                    }\n                    name = alts[v.exp].name;\n                    meta = await this.#navigator.metadata(alts[v.exp].resource.path);\n                }\n\n                let loaded = await extract_assay(meta, v.assay, this.#navigator, true);\n                output.matrix.add(k, loaded.matrix);\n                let out_ids = loaded.row_ids;\n                output.row_ids[k] = out_ids;\n                output.features[k] = bioc.SLICE(this.#raw_features[name], out_ids);\n            }\n\n            let primaries = { \n                RNA: this.#primaryRnaFeatureIdColumn, \n                ADT: this.#primaryAdtFeatureIdColumn,\n                CRISPR: this.#primaryCrisprFeatureIdColumn\n            };\n            output.primary_ids = futils.extractPrimaryIds(output.features, primaries);\n\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentDatasetBase = AbstractArtifactdbDataset;\n\n/***********************\n ******* Result ********\n ***********************/\n\n/**\n * Pre-computed analysis results stored as a SummarizedExperiment object (or one of its subclasses) in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n */\nexport class AbstractArtifactdbResult {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n    #raw_other;\n\n    #primaryAssay;\n    #isPrimaryNormalized;\n    #reducedDimensionNames;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {object|string|number} [options.primaryAssay=0] - See {@linkcode AbstractArtifactdbResult#setPrimaryAssay setPrimaryAssay}.\n     * @param {object|boolean} [options.isPrimaryNormalized={}] - See {@linkcode AbstractArtifactdbResult#setIsPrimaryNormalized setIsPrimaryNormalized}.\n     * @param {?Array} [options.reducedDimensionNames=null] - See {@linkcode AbstractArtifactdbResult#setReducedDimensionNames setReducedDimensionNames}.\n     */\n    constructor(path, navigator, { \n        primaryAssay = 0,\n        isPrimaryNormalized = true,\n        reducedDimensionNames = null\n    } = {}) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n\n        // Cloning to avoid pass-by-reference links.\n        this.#primaryAssay = bioc.CLONE(primaryAssay);\n        this.#isPrimaryNormalized = bioc.CLONE(isPrimaryNormalized);\n        this.#reducedDimensionNames = bioc.CLONE(reducedDimensionNames);\n\n        // Don't call clear() here, see comments above in the Dataset constructor.\n        this.#reset_local_caches();\n    }\n\n    /**\n     * @param {object|string|number} primary - Assay containing the relevant data for each modality.\n     *\n     * - If a string, this is used as the name of the assay across all modalities.\n     * - If a number, this is used as the index of the assay across all modalities.\n     * - If any object, the key should be the name of a modality and the value may be either a string or number specifying the assay to use for that modality.\n     *   Modalities absent from this object will not be loaded.\n     */\n    setPrimaryAssay(primary) {\n        this.#primaryAssay = bioc.CLONE(primary);\n        return;\n    }\n\n    /**\n     * @param {object|boolean} normalized - Whether or not the assay for a particular modality has already been normalized.\n     *\n     * - If a boolean, this is used to indicate normalization status of assays across all modalities.\n     *   If `false`, that modality's assay is assumed to contain count data and is subjected to library size normalization. \n     * - If any object, the key should be the name of a modality and the value should be a boolean indicating whether that modality's assay has been normalized.\n     *   Modalities absent from this object are assumed to have been normalized.\n     */\n    setIsPrimaryNormalized(normalized) {\n        this.#isPrimaryNormalized = bioc.CLONE(normalized);\n        return;\n    }\n\n    /**\n     * @param {?Array} names - Array of names of the reduced dimensions to load.\n     * If `null`, all reduced dimensions found in the file are loaded.\n     */\n    setReducedDimensionNames(names) {\n        this.#reducedDimensionNames = bioc.CLONE(names);\n        return;\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n        this.#raw_other = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbResult#load load} or {@linkcode AbstractArtifactdbResult#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    async #other() {\n        if (this.#raw_other !== null) {\n            return;\n        }\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"other_data\" in full_meta.summarized_experiment) {\n            let other_path = full_meta.summarized_experiment.other_data.resource.path;\n            this.#raw_other = await extract_other_data(other_path, this.#navigator);\n        } else {\n            this.#raw_other = {};\n        }\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbDataset#load load}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     * - `reduced_dimension_names`: an Array of strings containing names of dimensionality reduction results.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async \n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator),\n            reduced_dimension_names: [],\n            other_metadata: this.#raw_other\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"single_cell_experiment\" in full_meta) {\n            for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                let redmeta = await this.#navigator.metadata(red.resource.path);\n                if (redmeta[\"$schema\"].startsWith(\"hdf5_dense_array/\") && redmeta.array.dimensions.length == 2) {\n                    output.reduced_dimension_names.push(red.name);\n                }\n            }\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbDataset#summary summary}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `reduced_dimensions`: an object containing the dimensionality reduction results.\n     *   Each value is an array of arrays, where each inner array contains the coordinates for one dimension.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            features: {},\n            cells: this.#raw_cells,\n            reduced_dimensions: {},\n            other_metadata: this.#raw_other\n        };\n\n        // Fetch the reduced dimensions first.\n        {\n            let reddims = this.#reducedDimensionNames;\n            if (reddims == null) {\n                reddims = [];\n                if (\"single_cell_experiment\" in full_meta) {\n                    for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                        reddims.push(red.name);\n                    }\n                }\n            }\n\n            if (reddims.length > 0) {\n                let redmap = {};\n                for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                    redmap[red.name] = red.resource.path;\n                }\n\n                for (const k of reddims) {\n                    let redmeta = await this.#navigator.metadata(redmap[k]); // this should be only HDF5 dense matrices.\n                    let dims = redmeta.array.dimensions;\n                    let redcontents = await this.#navigator.file(redmeta.path); \n\n                    let realized = scran.realizeFile(redcontents);\n                    let acquired = [];\n                    try {\n                        let fhandle = new scran.H5File(realized.path);\n                        let dhandle = fhandle.open(redmeta.hdf5_dense_array.dataset, { load: true });\n                        let contents = dhandle.values;\n                        for (var d = 0; d < dims[1]; d++) {\n                            acquired.push(contents.slice(d * dims[0], (d + 1) * dims[0]));\n                        }\n                    } finally {\n                        realized.flush();\n                    }\n\n                    output.reduced_dimensions[k] = acquired;\n                }\n            }\n        }\n\n        // Now fetching the assay matrix.\n        {\n            let altmap = {};\n            if (\"single_cell_experiment\" in full_meta) {\n                for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n                    altmap[alt.name] = alt.resource.path;\n                }\n            }\n\n            try {\n                for (const [k, v] of Object.entries(this.#raw_features)) {\n                    let curassay = this.#primaryAssay;\n                    if (typeof curassay == \"object\") {\n                        if (k in curassay) {\n                            curassay = curassay[k];\n                        } else {\n                            continue;\n                        }\n                    }\n\n                    let curnormalized = this.#isPrimaryNormalized;\n                    if (typeof curnormalized == \"object\") {\n                        if (k in curnormalized) {\n                            curnormalized = curnormalized[k];\n                        } else {\n                            curnormalized = true;\n                        }\n                    }\n\n                    let meta;\n                    if (k === \"\") {\n                        meta = full_meta;\n                    } else {\n                        meta = await this.#navigator.metadata(altmap[k]);\n                    }\n\n                    let loaded = await extract_assay(meta, curassay, this.#navigator, !curnormalized);\n                    output.matrix.add(k, loaded.matrix);\n\n                    if (!curnormalized) {\n                        let normed = scran.logNormCounts(loaded.matrix, { allowZeros: true });\n                        output.matrix.add(k, normed);\n                    }\n\n                    if (loaded.row_ids !== null) {\n                        output.features[k] = bioc.SLICE(this.#raw_features[k], loaded.row_ids);\n                    } else {\n                        output.features[k] = this.#raw_features[k];\n                    }\n                }\n\n            } catch (e) {\n                scran.free(output.matrix);\n                throw e;\n            }\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentResultBase = AbstractArtifactdbResult;\n","import * as adb from \"./ArtifactDB-abstract.js\";\nimport JSZip from \"jszip\";\n\nclass ZippedProjectNavigator {\n    #zipfile;\n    #ziphandle;\n\n    constructor(zipfile, ziphandle) {\n        this.#zipfile = zipfile;\n        this.#ziphandle = null;\n    }\n\n    async file(path) {\n        if (this.#ziphandle == null) {\n            this.#ziphandle = await JSZip.loadAsync(this.#zipfile.buffer());\n        }\n        return await this.#ziphandle.file(path).async(\"uint8array\");\n    }\n\n    async metadata(path) {\n        if (this.#ziphandle == null) {\n            this.#ziphandle = await JSZip.loadAsync(this.#zipfile.buffer());\n        }\n\n        while (1) {\n            if (!path.endsWith(\".json\")) { \n                path += \".json\";\n            }\n\n            let contents = await this.#ziphandle.file(path).async(\"string\");\n            let values = JSON.parse(contents);\n\n            if (values[\"$schema\"].startsWith(\"redirection/\")){\n                path = values.redirection.targets[0].location;\n            } else {\n                return values;\n            }\n        }\n    }\n\n    clear() {\n        this.#ziphandle = null;\n    }\n};\n\n/************************\n ******* Dataset ********\n ************************/\n\n/**\n * Dataset as a ZIP file containing a SummarizedExperiment in the **ArtifactDB** representation,\n * e.g., as produced by {@linkcode saveSingleCellExperiment}.\n * Specifically, the ZIP file should contain the contents of an **ArtifactDB** project directory.\n * This project directory may contain multiple objects; the SummarizedExperiment of interest is identified in the constructor.\n *\n * @extends AbstractArtifactdbDataset\n */\nexport class ZippedArtifactdbDataset extends adb.AbstractArtifactdbDataset {\n    #zipfile;\n    #name;\n\n    /**\n     * @param {string} name - Name of the SummarizedExperiment object inside the project directory.\n     * @param {SimpleFile} zipfile - A {@linkplain SimpleFile} object representing the ZIP file containing the project directory.\n     * @param {object} [options={}] - Optional parameters, including those to be passed to the {@linkplain AbstractArtifactdbDataset} constructor.\n     * @param {?JSZip} [options.existingHandle=null] - An existing handle into the ZIP file, generated using the [**JSZip**](https://stuk.github.io/jszip/) package.\n     * If an existing handle already exists, passing it in here will allow it to be re-used for greater efficiency.\n     * If `null`, a new handle is created for this ZippedArtifactdbDataset instance.\n     */\n    constructor(name, zipfile, options={}) {\n        let ziphandle = null;\n        if (\"existingHandle\" in options) {\n            ziphandle = options.existingHandle;\n            delete options.existingHandle;\n        }\n\n        let nav = new ZippedProjectNavigator(zipfile, ziphandle);\n        super(name, nav, options);\n        this.#zipfile = zipfile;\n        this.#name = name;\n    }\n\n    /**\n     * @return {string} String specifying the format for this dataset.\n     */\n    static format() {\n        return \"ArtifactDB-zipped\";\n    }\n\n    #dump_summary(fun) {\n        let files = [ { type: \"zip\", file: fun(this.#zipfile) } ]; \n        let opt = this.options();\n        opt.datasetName = this.#name; // storing the name as a special option... can't be bothered to store it as a separate file.\n        return { files: files, options: opt };\n\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset.\n     */\n    abbreviate() {\n        return this.#dump_summary(f => { \n            return { size: f.size(), name: f.name() }\n        });\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode ZippedArtifactdbDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {ZippedArtifactdbDataset} A new instance of this class.\n     * @static\n     */\n    static unserialize(files, options) {\n        if (files.length != 1 || files[0].type != \"zip\") {\n            throw new Error(\"expected exactly one file of type 'zip' for Zipped ArtifactDB unserialization\");\n        }\n\n        let name = options.datasetName;\n        delete options.datasetName;\n        return new ZippedArtifactdbDataset(name, files[0].file, options);\n    }\n}\n\n/***********************\n ******* Result ********\n ***********************/\n\n/**\n * Result as a ZIP file containing a SummarizedExperiment in the **ArtifactDB** representation,\n * e.g., as produced by {@linkcode saveSingleCellExperiment}.\n * Specifically, the ZIP file should contain the contents of an **ArtifactDB** project directory.\n * This project directory may contain multiple objects; the SummarizedExperiment of interest is identified in the constructor.\n *\n * @extends AbstractArtifactdbResult\n */\nexport class ZippedArtifactdbResult extends adb.AbstractArtifactdbResult {\n    /**\n     * @param {string} name - Name of the SummarizedExperiment object inside the project directory.\n     * @param {SimpleFile} zipfile - A {@linkplain SimpleFile} object representing the ZIP file containing the project directory.\n     * @param {object} [options={}] - Optional parameters, including those to be passed to the {@linkplain AbstractArtifactdbResult} constructor.\n     * @param {?JSZip} [options.existingHandle=null] - An existing handle into the ZIP file, generated using the [**JSZip**](https://stuk.github.io/jszip/) package.\n     * If an existing handle already exists, passing it in here will allow it to be re-used for greater efficiency.\n     * If `null`, a new handle is created for this ZippedArtifactdbDataset instance.\n     */\n    constructor(name, zipfile, options={}) {\n        let ziphandle = null;\n        if (\"existingHandle\" in options) {\n            ziphandle = options.existingHandle;\n            delete options.existingHandle;\n        }\n\n        let nav = new ZippedProjectNavigator(zipfile, ziphandle);\n        super(name, nav, options);\n    }\n}\n","export class SimpleFile {\n    #mode;\n    #buffer;\n    #file;\n    #name;\n\n    constructor(x, { name = null } = {}) {\n        if (x instanceof File) {\n            this.#mode = \"file\";\n            this.#file = x;\n            if (name === null) {\n                name = x.name;\n            }\n            this.#name = name;\n        } else if (x instanceof Uint8Array) {\n            this.#mode = \"buffer\";\n            this.#buffer = x; \n            if (name === null) {\n                throw new Error(\"'name' must be provided for Uint8Array inputs in SimpleFile constructor\");\n            }\n            this.#name = name;\n        } else {\n            throw new Error(\"unknown type '\" + typeof(x) + \"' for SimpleFile constructor\");\n        }\n    }\n\n    buffer({ copy = false } = {}) {\n        if (this.#mode == \"file\") {\n            let reader = new FileReaderSync();\n            let b = reader.readAsArrayBuffer(this.#file);\n            return new Uint8Array(b);\n        } else {\n            if (copy) {\n                return this.#buffer.slice();\n            } else {\n                return this.#buffer;\n            }\n        }\n    }\n\n    size() {\n        if (this.#mode == \"file\") {\n            return this.#file.size;\n        } else {\n            return this.#buffer.length;\n        }\n    }\n\n    name() {\n        return this.#name;\n    }\n\n    content({ copy = false } = {}) {\n        return this.buffer({ copy: copy });\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as afile from \"./abstract/file.js\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\n\n/**\n * Dataset in the 10X Matrix Market format, see [here](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/matrices) for details.\n */\nexport class TenxMatrixMarketDataset {\n    #matrix_file;\n    #feature_file;\n    #barcode_file;\n\n    #dimensions;\n    #raw_features;\n    #raw_cells;\n\n    #featureTypeRnaName;\n    #featureTypeAdtName;\n    #featureTypeCrisprName;\n\n    #primaryRnaFeatureIdColumn;\n    #primaryAdtFeatureIdColumn;\n    #primaryCrisprFeatureIdColumn;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"mtx\", file: fun(this.#matrix_file) }];\n\n        if (this.#feature_file !== null) {\n            files.push({ type: \"genes\", file: fun(this.#feature_file) });\n        }\n\n        if (this.#barcode_file !== null) {\n            files.push({ type: \"annotations\", file: fun(this.#barcode_file) });\n        }\n\n        let options = {\n            featureTypeRnaName: this.#featureTypeRnaName,\n            featureTypeAdtName: this.#featureTypeAdtName,\n            featureTypeCrisprName: this.#featureTypeCrisprName,\n            primaryRnaFeatureIdColumn: this.#primaryRnaFeatureIdColumn,\n            primaryAdtFeatureIdColumn: this.#primaryAdtFeatureIdColumn,\n            primaryCrisprFeatureIdColumn: this.#primaryCrisprFeatureIdColumn\n        };\n\n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} matrixFile - A Matrix Market file.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     * @param {?(SimpleFile|string|Uint8Array|File)} featureFile - Contents of a feature annotation file.\n     * If `null`, it is assumed that no file was available.\n     * @param {?(SimpleFile|string|Uint8Array|File)} barcodeFile - Contents of a barcode annotation file.\n     * If `null`, it is assumed that no file was available.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?string} [options.featureTypeRnaName=\"Gene Expression\"] - See {@linkcode TenxMatrixMarketDataset#setFeatureTypeRnaName setFeatureTypeRnaName}.\n     * @param {?string} [options.featureTypeAdtName=\"Antibody Capture\"] - See {@linkcode TenxMatrixMarketDataset#setFeatureTypeAdtName setFeatureTypeAdtName}.\n     * @param {?string} [options.featureTypeCrisprName=\"CRISPR Guide Capture\"] - See {@linkcode TenxMatrixMarketDataset#setFeatureTypeCrisprName setFeatureTypeCrisprName}.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn=0] - See {@linkcode TenxMatrixMarketDataset#primaryRnaFeatureIdColumn primaryRnaFeatureIdColumn}.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn=0] - See {@linkcode TenxMatrixMarketDataset#primaryAdtFeatureIdColumn primaryAdtFeatureIdColumn}.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn=0] - See {@linkcode TenxMatrixMarketDataset#setPrimaryCrisprFeatureIdColumn setPrimaryCrisprFeatureIdColumn}.\n     */\n    constructor(matrixFile, featureFile, barcodeFile, { \n        featureTypeRnaName = \"Gene Expression\", \n        featureTypeAdtName = \"Antibody Capture\", \n        featureTypeCrisprName = \"CRISPR Guide Capture\", \n        primaryRnaFeatureIdColumn = 0, \n        primaryAdtFeatureIdColumn = 0,\n        primaryCrisprFeatureIdColumn = 0\n    } = {}) {\n        if (matrixFile instanceof afile.SimpleFile) {\n            this.#matrix_file = matrixFile;\n        } else {\n            this.#matrix_file = new afile.SimpleFile(matrixFile);\n        }\n\n        if (featureFile instanceof afile.SimpleFile || featureFile == null) {\n            this.#feature_file = featureFile;\n        } else {\n            this.#feature_file = new afile.SimpleFile(featureFile);\n        }\n\n        if (barcodeFile instanceof afile.SimpleFile || barcodeFile == null) {\n            this.#barcode_file = barcodeFile;\n        } else {\n            this.#barcode_file = new afile.SimpleFile(barcodeFile);\n        }\n\n        this.#featureTypeRnaName = featureTypeRnaName;\n        this.#featureTypeAdtName = featureTypeAdtName;\n        this.#featureTypeCrisprName = featureTypeCrisprName;\n\n        this.#primaryRnaFeatureIdColumn = primaryRnaFeatureIdColumn;\n        this.#primaryAdtFeatureIdColumn = primaryAdtFeatureIdColumn;\n        this.#primaryCrisprFeatureIdColumn = primaryCrisprFeatureIdColumn;\n\n        this.clear();\n    }\n\n    /**\n     * @param {?string} name - Name of the feature type for gene expression.\n     * Alternatively `null`, to indicate that no RNA features are to be loaded.\n     */\n    setFeatureTypeRnaName(name) {\n        this.#featureTypeRnaName = name;\n        return;\n    }\n\n    /**\n     * @param {?string} name - Name of the feature type for ADTs.\n     * Alternatively `null`, to indicate that no ADT features are to be loaded.\n     */\n    setFeatureTypeAdtName(name) {\n        this.#featureTypeAdtName = name;\n        return;\n    }\n\n    /**\n     * @param {?string} name - Name of the feature type for CRISPR guides.\n     * Alternatively `null`, to indicate that no guides are to be loaded.\n     */\n    setFeatureTypeCrisprName(name) {\n        this.#featureTypeCrisprName = name;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setPrimaryRnaFeatureIdColumn(i) {\n        this.#primaryRnaFeatureIdColumn = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setPrimaryAdtFeatureIdColumn(i) {\n        this.#primaryAdtFeatureIdColumn = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setPrimaryCrisprFeatureIdColumn(i) {\n        this.#primaryCrisprFeatureIdColumn = i;\n        return;\n    }\n\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode TenxMatrixMarketDataset#load load} or {@linkcodeTenxMatrixMarketDataset#summary summary}. \n     */\n    clear() {\n        this.#dimensions = null;\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"MatrixMarket\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset,\n     * in a form that can be cheaply stringified.\n     */\n    abbreviate(args) {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #fetch_dimensions() {\n        if (this.#dimensions !== null) {\n            return;\n        }\n        var is_gz = this.#matrix_file.name().endsWith(\".gz\");\n        let headers = scran.extractMatrixMarketDimensions(this.#matrix_file.content(), { \"compressed\": is_gz });\n        this.#dimensions = [headers.rows, headers.columns];\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n\n        this.#fetch_dimensions();\n        let NR = this.#dimensions[0];\n        if (this.#feature_file == null) {\n            this.#raw_features = new bioc.DataFrame({}, { numberOfRows: NR });\n            return;\n        }\n\n        let fname = this.#feature_file.name();\n        var is_gz = fname.endsWith(\".gz\");\n        let parsed = await eutils.readTable2(this.#feature_file.content(), { compression: (is_gz ? \"gz\" : \"none\") });\n\n        if (parsed.length == NR + 1) {\n            // If it seems to have a header, we just use that directly.\n            let output = {};\n            let headers = parsed.shift();\n            headers.forEach((x, i) => {\n                output[x] = parsed.map(y => y[i]);\n            });\n            this.#raw_features = output;\n            return;\n        }\n\n        // Otherwise, we assume it's standard 10X CellRanger output, without a header.\n        if (parsed.length !== NR) {\n            throw new Error(\"number of matrix rows is not equal to the number of rows in '\" + fname + \"'\");\n        } \n\n        var ids = [], symb = [];\n        parsed.forEach(x => {\n            ids.push(x[0]);\n            symb.push(x[1]);\n        });\n\n        let output = new bioc.DataFrame({}, { numberOfRows: NR }); // build it piece-by-piece for a well-defined order.\n        output.$setColumn(\"id\", ids);\n        output.$setColumn(\"name\", symb);\n\n        if (parsed[0].length > 2) {\n            let types = [];\n            parsed.forEach(x => { types.push(x[2]); });\n            output.$setColumn(\"type\", types);\n        }\n\n        this.#raw_features = output;\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#fetch_dimensions();\n        if (this.#barcode_file == null) {\n            this.#raw_cells = new bioc.DataFrame({}, { numberOfRows: this.#dimensions[1] });\n            return;\n        }\n\n        let bname = this.#barcode_file.name();\n        var is_gz = bname.endsWith(\".gz\");\n        let parsed = await eutils.readTable2(this.#barcode_file.content(), { compression: (is_gz ? \"gz\" : \"none\") });\n\n        // Check if a header is present or not. Standard 10X output doesn't have a \n        // header but we'd like to support some kind of customization.\n        let diff = this.#dimensions[1] - parsed.length;\n        let headers;\n        if (diff == 0) {\n            headers = parsed[0]; // whatever, just using the first row. Hope it's unique enough!\n        } else if (diff == -1) {\n            headers = parsed.shift();\n        } else {\n            throw new Error(\"number of matrix columns is not equal to the number of rows in '\" + bname + \"'\");\n        }\n\n        let annotations = {}\n        headers.forEach((x, i) => {\n            annotations[x] = parsed.map(y => y[i]);\n        });\n\n        for (const [k, v] of Object.entries(annotations)) {\n            let conv = eutils.promoteToNumber(v);\n            if (conv !== null) {\n                annotations[k] = conv;\n            }\n        }\n\n        this.#raw_cells = new bioc.DataFrame(annotations);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode TenxMatrixMarketDataset#load load}.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode TenxMatrixMarketDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            \"modality_features\": futils.reportFeatures(this.#raw_features, \"type\"),\n            \"cells\": this.#raw_cells\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode TenxMatrixMarketDataset#summary summary}.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array of strings containing the feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"` or `\"ADT\"`.\n     * It is assumed that an appropriate mapping from the feature types inside the `featureFile` was previously declared,\n     * either in the constructor or in {@linkcode setFeatureTypeRnaName} and {@linkcode setFeatureTypeAdtName}.\n     *\n     * If the feature annotation file is absent or if it lacks a third column for the feature types,\n     * `load()` will assume that all features are genes (i.e., only the RNA modality is present).\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        var is_gz = this.#matrix_file.name().endsWith(\".gz\");\n        let loaded = scran.initializeSparseMatrixFromMatrixMarket(this.#matrix_file.content(), { \"compressed\": is_gz });\n\n        let mappings = { \n            RNA: this.#featureTypeRnaName, \n            ADT: this.#featureTypeAdtName,\n            CRISPR: this.#featureTypeCrisprName\n        };\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, \"type\", mappings, \"RNA\"); \n        output.cells = this.#raw_cells;\n\n        let primaries = { \n            RNA: this.#primaryRnaFeatureIdColumn, \n            ADT: this.#primaryAdtFeatureIdColumn,\n            CRISPR: this.#primaryCrisprFeatureIdColumn\n        };\n        output.primary_ids = futils.extractPrimaryIds(output.features, primaries);\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    async serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode TenxMatrixMarketDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {TenxMatrixMarketDataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        let args = {};\n        for (const x of files) {\n            if (x.type in args) {\n                throw new Error(\"duplicate file of type '\" + x.type + \"' detected during MatrixMarket unserialization\");\n            }\n            args[x.type] = x.file;\n        }\n\n        if (!(\"mtx\" in args)) {\n            throw new Error(\"expected file of type 'mtx' for during MatrixMarket unserialization\");\n        }\n\n        let feat = null;\n        if (\"genes\" in args) {\n            feat = args.genes;\n        }\n\n        let barcode = null;\n        if (\"annotations\" in args) {\n            barcode = args.annotations;\n        }\n\n        return new TenxMatrixMarketDataset(args.mtx, feat, barcode, options);\n    }\n}\n","export function stream(file, chunkSize, callback, resolve, reject) {\n    reject(\"no support for file paths in the browser context\");\n}\n\nexport function peek(file, n) {\n    throw new Error(\"no support for file paths in the browser context\");\n}\n","import * as pako from \"pako\";\nimport ppp from \"papaparse\";\nimport * as astream from \"./abstract/stream.js\";\nimport * as afile from \"../abstract/file.js\";\n\nexport function extractHDF5Strings(handle, name) {\n    if (!(name in handle.children)) {\n        return null;\n    }\n\n    if (handle.children[name] !== \"DataSet\") {\n        return null;\n    }\n\n    let content = handle.open(name);\n    if (content.type !== \"String\") {\n        return null;\n    }\n\n    return content.load();\n}\n\n/**\n * Summarize an array, typically corresponding to a single column of per-cell annotation.\n * This can be used as part of a preflight response in a Reader.\n *\n * @param {Array|TypedArray} array - Per-cell annotation array of length equal to the number of cells for a given matrix.\n * An Array is treated as categorical data and should contain strings, while TypedArrays are treated as continuous data.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.limit=50] - Maximum number of unique values to report for categorical `x`.\n *\n * @return {object} Object containing `type`, a string indicating whether `array` was categorical or continuous.\n *\n * If `\"categorical\"`, the object will contain `values`, an array of unique values up to the length specified by `limit`.\n * It will also contain `truncated`, a boolean indicating whether the actual number of unique values exceeds `limit`.\n *\n * If `\"continuous\"`, the object will contain the numbers `min` and `max` specifying the minimum and maximum value in `x`, respectively.\n * `min` or `max` may be negative or positive infinity, respectively, if there is no bound on one or both ends.\n * If `min > max`, all values in `array` are `NaN`s such that no bound can be found.\n */\nexport function summarizeArray(array, { limit = 50 } = {}) {\n    if (array instanceof Array) {\n        let chosen = Array.from(new Set(array));\n        chosen.sort();\n        let truncated = false;\n        if (chosen.length > limit) {\n            chosen = chosen.slice(0, limit);\n            truncated = true;\n        }\n        return {\n            \"type\": \"categorical\",\n            \"values\": chosen,\n            \"truncated\": truncated\n        };\n    } else {\n        let min = Number.POSITIVE_INFINITY, max = Number.NEGATIVE_INFINITY;\n        array.forEach(x => {\n            if (x < min) {\n                min = x;\n            }\n            if (x > max) {\n                max = x;\n            }\n        });\n\n        return { \n            \"type\": \"continuous\",\n            \"min\": min, \n            \"max\": max \n        };\n    }\n}\n\nfunction guess_compression(x, compression) {\n    if (compression !== null) {\n        return compression;\n    }\n\n    let buffer;\n    if (x instanceof Uint8Array) {\n        buffer = x;\n    } else {\n        buffer = astream.peek(x, 3);\n    }\n\n    // Compare against magic words for auto-detection.\n    if (buffer.length >= 3 && buffer[0] == 0x1F && buffer[1] == 0x8B && buffer[2] == 0x08) {\n        return 'gz';\n    }\n\n    return 'none';\n}\n\nexport function unpackText(buffer, { compression = null } = {}) {\n    compression = guess_compression(buffer, compression);\n    let txt = (compression === \"gz\" ? pako.ungzip(buffer) : buffer);\n    const dec = new TextDecoder();\n    return dec.decode(txt);\n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readLines(buffer, { compression = null } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let lines = decoded.split(\"\\n\");\n    if (lines.length > 0 && lines[lines.length - 1] == \"\") { // ignoring the trailing newline.\n        lines.pop();\n    }\n    return lines;    \n}\n\nfunction merge_bytes(leftovers, decoder) {\n    let total = 0;\n    for (const x of leftovers) {\n        total += x.length;\n    }\n\n    let combined = new Uint8Array(total);\n    total = 0;\n    for (const x of leftovers) {\n        combined.set(x, total);\n        total += x.length;\n    }\n\n    return decoder.decode(combined);\n}\n\nasync function stream_callback(x, compression, chunkSize, callback) {\n    // Force the input to be either a Uint8Array or a file path string.\n    if (typeof x == \"string\") {\n        ;\n    } else if (x instanceof Uint8Array) {\n        ;\n    } else if (x instanceof afile.SimpleFile) {\n        x = x.content();\n    } else {\n        x = (new afile.SimpleFile(x, { name: \"dummy\" })).content();\n    }\n\n    if (guess_compression(x, compression) == \"gz\") {\n        await (new Promise((resolve, reject) => {\n            let gz = new pako.Inflate({ chunkSize: chunkSize });\n            gz.onData = callback;\n            gz.onEnd = status => {\n                if (status) {\n                    reject(\"gzip decompression failed; \" + gz.msg);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            if (typeof x == \"string\") {\n                astream.stream(x, chunkSize, chunk => gz.push(chunk), null, reject);\n            } else {\n                gz.push(x);\n            }\n        }));\n        return;\n    }\n\n    // Remaining possibilities are uncompressed.\n    if (typeof x == \"string\") {\n        await (new Promise((resolve, reject) => astream.stream(x, chunkSize, callback, resolve, reject)));\n        return;\n    }\n\n    callback(x);\n    return;\n}\n\n/**\n * Read lines of text from a file, possibly with decompression.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {number} [options.chunkSize=65536] - Chunk size in bytes to use for file reading (if `x` is a file path) and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of strings where each entry contains a line in `buffer`.\n * The newline itself is not included in each string.\n * @async \n */\nexport async function readLines2(x, { compression = null, chunkSize = 65536 } = {}) {\n    const dec = new TextDecoder;\n    let leftovers = [];\n    let lines = [];\n\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            if (chunk[i] == 10) { // i.e., ASCII newline.\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    lines.push(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    lines.push(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        lines.push(merge_bytes(leftovers, dec));\n    }\n\n    return lines;    \n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readTable(buffer, { compression = null, delim = \"\\t\", firstOnly = false } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let res = ppp.parse(decoded, { delimiter: delim, preview: (firstOnly ? 1 : 0) });\n\n    // Handle terminating newlines.\n    let last = res.data[res.data.length - 1];\n    if (last.length === 1 && last[0] === \"\") {\n        res.data.pop();\n    }\n\n    return res.data;\n}\n\n/**\n * Read a delimiter-separated table from a buffer, possibly with decompression.\n * This assumes that newlines represent the end of each row of the table, i.e., there cannot be newlines inside quoted strings.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {string} [options.delim=\"\\t\"] - Delimiter between fields.\n * @param {number} [options.chunkSize=1048576] - Chunk size in bytes to use for file reading (if `x` is a path), parsing of rows, and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of length equal to the number of lines in `buffer`.\n * Each entry is an array of strings, containing the `delim`-separated fields for its corresponding line.\n *\n * @async\n */\nexport async function readTable2(x, { compression = null, delim = \"\\t\", chunkSize = 1048576 } = {}) {\n    const dec = new TextDecoder;\n\n    let rows = [];\n    let parse = (str) => {\n        let out = ppp.parse(str, { delimiter: delim });\n        if (out.meta.aborted) {\n            let msg = \"failed to parse delimited file\";\n            for (const e of out.errors) {\n                msg += \"; \" + e.message;\n            }\n            throw new Error(msg);\n        }\n        for (const x of out.data) {\n            rows.push(x);\n        }\n    };\n\n    let leftovers = [];\n    let size_left = 0;\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            // We assume that all newlines are end-of-rows, i.e., there are no\n            // newlines inside quoted strings. Under this assumption, we can\n            // safely chunk the input stream based on newlines, parse each\n            // chunk, and then combine the parsing results together. To avoid\n            // too many parsing calls, we accumulate buffers until we hit \n            // the chunkSize and then we decode + parse them altogether.\n            if (chunk[i] == 10 && (i - last) + size_left >= chunkSize) {\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    parse(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    parse(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n                size_left = 0;\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n            size_left += chunk.length - last;\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        let combined = merge_bytes(leftovers, dec);\n        parse(combined);\n        if (combined[combined.length - 1] == \"\\n\") { // guaranteed to have non-zero length, by virtue of how 'leftovers' is filled.\n            rows.pop();            \n        }\n    }\n\n    return rows;    \n}\n\n/**\n * Detect if an array contains only stringified numbers and, if so, convert it into a TypedArray.\n * Conversion will still be performed for non-number strings corresponding to missing values or explicit not-a-number entries.\n *\n * @param {Array} x Array of strings, usually corresponding to a column in a table read by {@linkcode readDSVFromBuffer}.\n *\n * @return {?Float64Array} A Float64Array is returned if `x` contains stringified numbers.\n * Otherwise, `null` is returned if the conversion could not be performed.\n */\nexport function promoteToNumber(x) {\n    let as_num = new Float64Array(x.length);\n\n    for (const [i, v] of Object.entries(x)) {\n        // See discussion at https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number.\n        let opt1 = Number(v);\n        let opt2 = parseFloat(v);\n        if (!isNaN(opt1) && !isNaN(opt2)) {\n            as_num[i] = opt1;\n        } else if (v === \"\" || v === \"NA\" || v == \"na\" || v == \"NaN\" || v == \"nan\") {\n            as_num[i] = NaN;\n        } else if (v == \"Inf\" || v == \"inf\") {\n            as_num[i] = Number.POSITIVE_INFINITY;\n        } else if (v == \"-Inf\" || v == \"-inf\") {\n            as_num[i] = Number.NEGATIVE_INFINITY;\n        } else {\n            return null;\n        }\n    }\n\n    return as_num;\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\n\nfunction create_solo_default_object(value, modality) {\n    let output = {};\n    output[modality] = value;\n    return output;\n}\n\nexport function reportFeatures(rawFeatures, typeField) {\n    if (rawFeatures.hasColumn(typeField)) {\n        let by_type = bioc.presplitFactor(rawFeatures.column(typeField));\n        let copy = bioc.CLONE(rawFeatures, { deepCopy: false }); // SPLIT will make a copy anyway.\n        copy.$removeColumn(typeField);\n        return bioc.SPLIT(copy, by_type);\n    } else {\n        return create_solo_default_object(rawFeatures, \"\");\n    }\n}\n\nfunction is_subset_noop(indices, full_length) {\n    if (indices.length != full_length) {\n        return false;\n    }\n    for (var i = 0; i < full_length; i++) {\n        if (i !== indices[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function splitScranMatrixAndFeatures(loaded, rawFeatures, typeField, featureTypeMapping, featureTypeDefault) {\n    let output = { matrix: new scran.MultiMatrix };\n\n    try {\n        let out_mat = loaded.matrix;\n        let out_ids = loaded.row_ids;\n        output.matrix.add(\"\", out_mat);\n\n        let current_features;\n        if (out_ids !== null) {\n            current_features = bioc.SLICE(rawFeatures, out_ids);\n        } else {\n            current_features = bioc.CLONE(rawFeatures, { deepCopy: false }); // because we're deleting a column.\n            out_ids = new Int32Array(out_mat.numberOfRows());\n            out_ids.forEach((x, i) => { out_ids[i] = i });\n        }\n\n        if (typeField !== null && current_features.hasColumn(typeField)) {\n            let by_type = bioc.presplitFactor(current_features.column(typeField));\n            if (featureTypeMapping !== null) {\n                let selected = {};\n                for (const [k, v] of Object.entries(featureTypeMapping)) {\n                    if (v !== null && v in by_type) {\n                        selected[k] = by_type[v];\n                    }\n                }\n                by_type = selected;\n            }\n\n            let type_keys = Object.keys(by_type);\n            let skip_subset = is_subset_noop(type_keys[0], out_mat.numberOfRows());\n\n            if (type_keys.length > 1 || !skip_subset) {\n                let replacement = new scran.MultiMatrix({ store: scran.splitRows(out_mat, by_type) });\n                scran.free(output.matrix);\n                output.matrix = replacement;\n            } else {\n                output.matrix.rename(\"\", type_keys[0]);\n            }\n\n            delete current_features[typeField];\n            output.features = bioc.SPLIT(current_features, by_type);\n            output.row_ids = bioc.SPLIT(out_ids, by_type);\n\n        } else {\n            output.matrix.rename(\"\", featureTypeDefault);\n            output.row_ids = create_solo_default_object(out_ids, featureTypeDefault);\n            output.features = create_solo_default_object(current_features, featureTypeDefault);\n        }\n    } catch (e) {\n        scran.free(output.matrix);\n        throw e;\n    }\n\n    return output;\n}\n\nexport function extractPrimaryIds(features, primary) {\n    let output = {};\n    for (const k of Object.keys(features)) {\n        if (!(k in primary)) {\n            throw new Error(\"modality '\" + k + \"' has no primary key identifier\");  \n        }\n\n        let curfeat = features[k];\n        let id = primary[k];\n        if ((typeof id == \"string\" && curfeat.hasColumn(id)) || (typeof id == \"number\" && id < curfeat.numberOfColumns())) {\n            output[k] = curfeat.column(id);\n        } else {\n            output[k] = curfeat.rowNames();\n        }\n    }\n    return output;\n}\n","/**\n * Webpack (or something in kana's build system) specifically recognizes the\n * hard-coded path in this 'new Worker(new URL(...))' pattern. This is why we\n * have hard-coded creators for the workers rather than allowing callers to\n * pass in the URL as a variable, as that doesn't pack the worker's JS.\n */\n\nexport function createTsneWorker() {\n    return new Worker(new URL(\"../tsne.worker.js\", import.meta.url), { type: \"module\" });\n}\n\nexport function createUmapWorker() {\n    return new Worker(new URL(\"../umap.worker.js\", import.meta.url), { type: \"module\" });\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./adt_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"adt_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered ADT matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`groupedSizeFactors`](https://kanaverse.github.io/scran.js/global.html#groupedSizeFactors) \n * and [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc' should be a AdtQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.sf_buffer);\n        utils.freeCache(this.#cache.centered_sf_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"ADT\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized ADT values,\n     * available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the ADT-derived size factor for each cell in the (QC-filtered) dataset.\n     * This is available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sf_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sf_buffer.length, \"Float64Array\", this.#cache, \"centered_sf_buffer\");\n            scran.centerSizeFactors(this.#cache.sf_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n        var block = this.#filter.fetchFilteredBlock();\n\n        var buffer = this.#cache.sf_buffer;\n        if (buffer.length != mat.numberOfColumns()) {\n            throw new Error(\"length of size factor vector should equal number of columns after QC\");\n        }\n\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.remove_bias - Whether to remove composition bias between cell subpopulations.\n     * This is done by clustering cells and computing median-based size factors between the average pseudo-cells for each cluster.\n     * Users can set this to `false` to speed up the compute.\n     * @param {number} parameters.num_pcs - Number of PCs to use for creating a low-dimensional embedding for clustering.\n     * Only used if `remove_bias = true`.\n     * @param {number} parameters.num_clusters - Number of clusters to create with k-means clustering.\n     * Only used if `remove_bias = true`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        const { num_pcs, num_clusters } = parameters;\n        let remove_bias = true;\n        if (\"remove_bias\" in parameters) {\n            remove_bias = parameters.remove_bias;\n        }\n\n        this.changed = false;\n\n        if (this.#qc.changed || \n            this.#filter.changed || \n            remove_bias !== this.#parameters.remove_bias ||\n            (\n                remove_bias &&\n                (\n                    num_pcs !== this.#parameters.num_pcs || \n                    num_clusters != this.#parameters.num_clusters\n                ) \n            )\n        ) {\n            if (this.valid()) {\n                var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n                let total_buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"total_buffer\");\n                var block = this.#filter.fetchFilteredBlock();\n                var sf_buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", this.#cache, \"sf_buffer\");\n\n                if (remove_bias) {\n                    scran.quickAdtSizeFactors(mat, { \n                        totals: total_buffer, \n                        block: block, \n                        buffer: sf_buffer, \n                        numberOfPCs: num_pcs, \n                        numberOfClusters: num_clusters \n                    });\n                } else {\n                    scran.centerSizeFactors(total_buffer, { buffer: sf_buffer, block: block });\n                }\n\n                this.changed = true;\n            }\n\n        } \n\n        this.#parameters.remove_bias = remove_bias;\n        this.#parameters.num_pcs = num_pcs;\n        this.#parameters.num_clusters = num_clusters;\n\n        if (this.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n            }\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n           remove_bias: true,\n           num_pcs: 25,\n           num_clusters: 20\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    let cache = {};\n    let parameters = AdtNormalizationState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\");\n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.num_clusters = phandle.open(\"num_clusters\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n            \n            if (\"size_factors\" in rhandle.children) {\n                let sf = rhandle.open(\"size_factors\", { load: true }).values;\n                cache.sf_buffer = scran.createFloat64WasmArray(sf.length);\n                cache.sf_buffer.set(sf);\n            }\n\n            output = new AdtNormalizationState(qc, filter, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.sf_buffer);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtNormalizationState(qc, filter, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./adt_normalization.js\";\n\nexport const step_name = \"adt_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise ADT data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm' should be a AdtNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized ADT matrix,\n     * available after running {@linkcode AdtPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = AdtPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new AdtPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new AdtPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"adt_quality_control\";\n\n/**\n * Results of computing per-cell ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellAdtQcMetricsResults.html) for details.\n *\n * @external PerCellAdtQcMetricsResults\n */\n\n/**\n * Suggested filters for the ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestAdtQcFiltersResults.html) for details.\n *\n * @external SuggestAdtQcFiltersResults\n */\n\n/**\n * This step applies quality control on the ADT count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellAdtQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellAdtQcMetrics)\n * and [`suggestAdtQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestAdtQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"ADT\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestAdtQcFiltersResults} Result of filtering on the ADT-derived QC metrics.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellAdtQcMetricsResults} ADT-derived QC metrics,\n     * available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults() {\n        return {\n            automatic: true,\n            tag_id_column: null,\n            igg_prefix: \"IgG\",\n            nmads: 3,\n            min_detected_drop: 0.1\n        };\n    }\n\n    static configureFeatureParameters(lower_igg, annotations) {\n        let counter = val => {\n            let n = 0;\n            val.forEach(x => {\n                if (x.toLowerCase().startsWith(lower_igg)) {\n                    n++;\n                }\n            });\n            return n;\n        };\n\n        let best_key = null;\n        let best = 0;\n\n        let rn = annotations.rowNames();\n        if (rn !== null) {\n            best = counter(rn);\n        }\n\n        for (const key of annotations.columnNames()) {\n            let latest = counter(annotations.column(key));\n            if (latest > best) {\n                best_key = key;\n                best = latest;\n            }\n        }\n\n        return best_key;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * \n     * @param {object} parameters - Parameter object, equivalent to the `adt_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotations. \n     * Specifically, `tag_id_column` is set to the column with the most matches to `igg_prefix`.\n     * @param {?(string|number)} parameters.tag_id_column - Name or index of the column of the feature annotations that contains the tag identifiers.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.igg_prefix - Prefix of the identifiers for isotype controls.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     * @param {number} parameters.min_detected_drop - Minimum proportional drop in the number of detected features before a cell is to be considered low-quality.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { igg_prefix, nmads, min_detected_drop } = parameters;\n        this.changed = false;\n\n        let automatic;\n        let tag_id_column; \n        if (\"automatic\" in parameters) {\n            automatic = parameters.automatic;\n            tag_id_column = parameters.tag_id_column;\n        } else {\n            automatic = true;\n            tag_id_column = null;\n        }\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            igg_prefix !== this.#parameters.igg_prefix ||\n            (!automatic && tag_id_column !== this.#parameters.tag_id_column)\n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var tag_info = this.#inputs.fetchFeatureAnnotations()[\"ADT\"];\n                var subsets = utils.allocateCachedArray(tag_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (igg_prefix !== null) {\n                    var lower_igg = igg_prefix.toLowerCase();\n                    let key = tag_id_column;\n                    if (automatic) {\n                        key = AdtQualityControlState.configureFeatureParameters(lower_igg, tag_info);\n                    }\n\n                    let val = (key == null ? tag_info.rowNames() : tag_info.column(key));\n                    if (val !== null) {\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => { \n                            if (x.toLowerCase().startsWith(lower_igg)) {\n                                sub_arr[i] = 1;                        \n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"ADT\");\n                this.#cache.metrics = scran.perCellAdtQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.tag_id_column = tag_id_column;\n        this.#parameters.igg_prefix = igg_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads || min_detected_drop !== this.#parameters.min_detected_drop) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestAdtQcFilters(this.#cache.metrics, { numberOfMADs: nmads, minDetectedDrop: min_detected_drop, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n            this.#parameters.min_detected_drop = min_detected_drop;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = AdtQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.igg_prefix = phandle.open(\"igg_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n        parameters.min_detected_drop = phandle.open(\"min_detected_drop\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellAdtQcMetricsResults(detected.length, 1);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n                let igg_total = mhandle.open(\"igg_total\", { load: true }).values;\n                cache.metrics.subsetTotals(0, { fillable: true }).set(igg_total);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n                let thresholds_igg_total = thandle.open(\"igg_total\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestAdtQcFiltersResults(1, thresholds_detected.length);\n                cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n                cache.filters.thresholdsSubsetTotals(0, { fillable: true }).set(thresholds_igg_total);\n            }\n\n            output = new AdtQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as combine_module from \"./combine_embeddings.js\";\n\nexport const step_name = \"batch_correction\";\n\n/**\n * Correct for batch effects in PC space based on mutual nearest neighbors.\n * This wraps the [`mnnCorrect`](https://kanaverse.github.io/scran.js/global.html#mnnCorrect) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class BatchCorrectionState {\n    #filter;\n    #combined;\n    #parameters;\n    #cache;\n\n    constructor(filter, combined, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(combined instanceof combine_module.CombineEmbeddingsState)) {\n            throw new Error(\"'pca' should be a CombineEmbeddingsState object\");\n        }\n        this.#combined = combined;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.corrected);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the batch-corrected embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode BatchCorrectionState#compute compute}.\n     */\n    fetchCorrected() {\n        return this.#cache.corrected;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfCells() {\n        return this.#combined.fetchNumberOfCells();\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#combined.fetchNumberOfDimensions();\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `batch_correction` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - The correction method to use.\n     * Currently this can be either `\"mnn\"` or `\"none\"`.\n     * If `\"mnn\"`, it is recommended that upstream PCA steps (i.e., {@linkplain RnaPcaState} and {@linkplain AdtPcaState}) use `block_method = \"weight\"`.\n     * @param {number} parameters.num_neighbors - Number of neighbors to use during MNN correction.\n     * @param {boolean} parameters.approximate - Whether to use an approximate method to identify MNNs.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { method, num_neighbors, approximate} = parameters;\n        this.changed = false;\n\n        if (this.#filter.changed || this.#combined.changed) {\n            this.changed = true;\n        }\n        let block = this.#filter.fetchFilteredBlock();\n        let needs_correction = (method == \"mnn\" && block !== null);\n\n        if (this.changed || method !== this.#parameters.method || num_neighbors !== this.#parameters.num_neighbors || approximate !== this.#parameters.approximate) { \n            if (needs_correction) {\n                let pcs = this.#combined.fetchCombined();\n                let corrected = utils.allocateCachedArray(pcs.length, \"Float64Array\", this.#cache, \"corrected\");\n                scran.mnnCorrect(pcs, block, { \n                    k: num_neighbors, \n                    buffer: corrected, \n                    numberOfCells: this.#combined.fetchNumberOfCells(), \n                    numberOfDims: this.#combined.fetchNumberOfDimensions(), \n                    approximate: approximate \n                });\n                this.changed = true;\n            }\n        }\n\n        if (this.changed) {\n            // If no correction is actually required, we shouldn't respond to\n            // changes in parameters, because they won't have any effect.\n            if (!needs_correction) {\n                utils.freeCache(this.#cache.corrected);\n                this.#cache.corrected = this.#combined.fetchCombined().view();\n            }\n        }\n\n        // Updating all parameters, even if they weren't used.\n        this.#parameters.method = method;\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.approximate = approximate;\n        return;\n    }\n\n    static defaults() {\n        return {\n            method: \"mnn\",\n            num_neighbors: 15,\n            approximate: true\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, combined) {\n    let cache = {};\n    let parameters = BatchCorrectionState.defaults();\n    let output;\n    \n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.method = phandle.open(\"method\", { load: true }).values[0];\n        parameters.num_neighbors = phandle.open(\"num_neighbors\", { load: true }).values[0];\n        parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"corrected\" in rhandle.children) {\n                let corrected = rhandle.open(\"corrected\", { load: true }).values;\n                cache.corrected = scran.createFloat64WasmArray(corrected.length);\n                cache.corrected.set(corrected);\n            } else {\n                // Creating a view from the upstream combined state.\n                let pcs = combined.fetchCombined();\n                cache.corrected = pcs.view();\n            }\n\n            output = new BatchCorrectionState(filter, combined, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.corrected);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        let ghandle = handle.open(\"pca\");\n\n        let rhandle = ghandle.open(\"results\");\n        if (\"corrected\" in rhandle.children) {\n            let corrected = rhandle.open(\"corrected\", { load: true }).values;\n            let corbuffer = utils.allocateCachedArray(corrected.length, \"Float64Array\", cache, \"corrected\");\n            corbuffer.set(corrected);\n        } else {\n            cache.corrected = combined.fetchCombined().view();\n        }\n\n        output = new BatchCorrectionState(filter, combined, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as rna_qc_module from \"./rna_quality_control.js\";\nimport * as adt_qc_module from \"./adt_quality_control.js\";\nimport * as crispr_qc_module from \"./crispr_quality_control.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"cell_filtering\";\n\nfunction find_usable_upstream_states(qc_states, in_use) {\n    let tmp = utils.findValidUpstreamStates(qc_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (in_use[k]) {\n            to_use.push(qc_states[k]);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step filters the count matrices to remove low-quality cells,\n * based on metrics and thresholds computed in {@linkplain RnaQualityControlState} and friends.\n * It wraps the [`filterCells`](https://kanaverse.github.io/scran.js/global.html#filterCells) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * For multi-modal datasets, this can combine quality calls from all valid modalities; \n * a cell is removed if it is considered low-quality in any individual modality.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellFilteringState {\n    #inputs;\n    #qc_states;\n    #cache;\n    #parameters;\n\n    constructor(inputs, qc_states, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        if (!(qc_states.RNA instanceof rna_qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc_states.RNA' should be a RnaQualityControlState object\");\n        }\n        if (!(qc_states.ADT instanceof adt_qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc_states.ADT' should be a AdtQualityControlState object\");\n        }\n        if (!(qc_states.CRISPR instanceof crispr_qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc_states.CRISPR' should be a CrisprQualityControlState object\");\n        }\n        this.#qc_states = qc_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.block_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {external:MultiMatrix} A {@linkplain external:MultiMatrix MultiMatrix} object containing the filtered and normalized matrices for all modalities,\n     * available after running {@linkcode CellFilteringState#compute compute}.\n     */\n    fetchFilteredMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute_matrix();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Int32WasmArray} Array of length equal to the number of cells after filtering, \n     * containing the block assignment for each cell.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null` if no blocks are present in the dataset.\n     */\n    fetchFilteredBlock() {\n        if (!(\"block_buffer\" in this.#cache)) {\n            this.#raw_compute_block();\n        }\n        return this.#cache.block_buffer;\n    }\n\n    /**\n     * @return {?Uint8WasmArray} Combined discard vector, i.e., an array of length equal to the number of cells in the dataset,\n     * indicating whether each cell should be removed.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null`, if no upstream filtering steps were performed.\n     */\n    fetchDiscards() {\n        if (\"discard_buffer\" in this.#cache) {\n            return this.#cache.discard_buffer;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute_matrix() {\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = new scran.MultiMatrix;\n\n        let inputs = this.#inputs.fetchCountMatrix();\n        for (const a of inputs.available()) {\n            let src = inputs.get(a);\n\n            let sub;\n            if (\"discard_buffer\" in this.#cache) {\n                sub = scran.filterCells(src, this.#cache.discard_buffer);\n            } else {\n                sub = src.clone();\n            }\n\n            this.#cache.matrix.add(a, sub);\n        }\n    }\n\n    #raw_compute_block() {\n        utils.freeCache(this.#cache.block_buffer);\n\n        let block = this.#inputs.fetchBlock();\n        if (block !== null) {\n            if (\"discard_buffer\" in this.#cache) {\n                // Filtering on the block. Might as well force a load of the\n                // matrix, it'll be needed once we have the blocks anyway.\n                let filtered_ncols = this.fetchFilteredMatrix().numberOfColumns();\n                let bcache = utils.allocateCachedArray(filtered_ncols, \"Int32Array\", this.#cache, \"block_buffer\");\n                scran.filterBlock(block, this.#cache.discard_buffer, { buffer: bcache });\n            } else {\n                this.#cache.block_buffer = block.view();\n            }\n        } else {\n            this.#cache.block_buffer = null;\n        }\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `cell_filtering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.use_rna - Whether to use the RNA-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_adt - Whether to use the ADT-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_crispr - Whether to use the CRISPR-derived QC metrics for filtering.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { use_rna, use_adt, use_crispr } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            this.changed = true;\n        }\n\n        if (this.#parameters.use_rna !== use_rna || this.#parameters.use_adt !== use_adt || this.#parameters.use_crispr !== use_crispr) {\n            this.#parameters.use_rna = use_rna;\n            this.#parameters.use_adt = use_adt;\n            this.#parameters.use_crispr = use_crispr;\n            this.changed = true;\n        }\n\n        let to_use = find_usable_upstream_states(this.#qc_states, { RNA: use_rna, ADT: use_adt, CRISPR: use_crispr });\n        if (!this.changed) {\n            for (const u of to_use) {\n                if (u.changed) {\n                    this.changed = true;\n                    break;\n                }\n            }\n        }\n\n        if (this.changed) {\n            if (to_use.length > 0) {\n                let first = to_use[0].fetchDiscards();\n\n                if (to_use.length > 1) {\n                    // A discard signal in any modality causes the cell to be removed. \n                    let disc_buffer = utils.allocateCachedArray(first.length, \"Uint8Array\", this.#cache, \"discard_buffer\");\n                    disc_buffer.fill(0);\n\n                    let disc_arr = disc_buffer.array();\n                    for (const u of to_use) {\n                        u.fetchDiscards().forEach((y, i) => { disc_arr[i] |= y; });\n                    }\n                } else {\n                    // If there's only one valid modality, we just create a view on it\n                    // to avoid unnecessary duplication.\n                    utils.freeCache(this.#cache.discard_buffer);\n                    this.#cache.discard_buffer = first.view();\n                }\n\n            } else {\n                // Deleting this so that serialization will behave correctly.\n                utils.freeCache(this.#cache.discard_buffer);\n                delete this.#cache.discard_buffer;\n            }\n\n            this.#raw_compute_matrix();\n            this.#raw_compute_block();\n        }\n    }\n\n    static defaults() {\n        return {\n            use_rna: true,\n            use_adt: true,\n            use_crispr: true\n        };\n    }\n\n    /**\n     * Apply the same filter to an array of data for each cell in the unfiltered dataset.\n     * Any calls to this method should be done after running {@linkcode CellFilteringState#compute compute}.\n     *\n     * @param {Array|TypedArray} Any array-like object of length equal to the number of cells in the unfiltered dataset.\n     * \n     * @return {Array|TypedArray} An array-like object of the same type as `x`,\n     * where all elements corresponding to low-quality cells have been discarded.\n     * This will have number of columns equal to that of {@linkcode CellFilteringState#fetchFilteredMatrix fetchFilteredMatrix}.\n     */\n    applyFilter(x) {\n        let expect_len = this.#inputs.fetchCountMatrix().numberOfColumns();\n        if (expect_len != x.length) {\n            throw new Error(\"length of 'x' should be equal to the number of cells in the unfiltered dataset\");\n        }\n\n        if (!(\"discard_buffer\" in this.#cache)) {\n            return x.slice(); // making a copy.\n        } else {\n            let discard = this.#cache.discard_buffer.array();\n            return x.filter((y, i) => !discard[i]);\n        }\n    }\n\n    /**\n     * Undo the effect of filtering on an array of indices.\n     * This is primarily useful for adjusting indices from downstream steps \n     * (e.g., {@linkcode CustomSelectionsState#fetchSelectionIndices CustomSelectionsState.fetchSelectionIndices})\n     * so that it can be used in {@linkcode subsetInputs}.\n     *\n     * @param {Array|TypedArray} indices - Array of column indices to the filtered matrix.\n     * Note that this will be modified in-place.\n     *\n     * @return Entries of `indices` are replaced with indices to the unfiltered matrix.\n     */\n    undoFilter(indices) {\n        let max_index = this.fetchFilteredMatrix().numberOfColumns();\n        for (const x of indices) {\n            if (x < 0 || x >= max_index) {\n                throw new Error(\"entries of 'indices' should be less than the number of cells in the filtered dataset\");\n            }\n        }\n\n        if (!('discard_buffer' in this.#cache)) {\n            return;\n        }\n\n        let keep = [];\n        this.#cache.discard_buffer.forEach((x, i) => {\n            if (x == 0) {\n                keep.push(i);\n            }\n        });\n\n        indices.forEach((x, i) => {\n            indices[i] = keep[x];\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, qc_states) {\n    let parameters = CellFilteringState.defaults();\n    let cache = {};\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            if (\"parameters\" in ghandle.children) {\n                let phandle = ghandle.open(\"parameters\");\n                if (\"use_rna\" in phandle.children) {\n                    parameters.use_rna = phandle.open(\"use_rna\", { load: true }).values[0] > 0;\n                    parameters.use_adt = phandle.open(\"use_adt\", { load: true }).values[0] > 0;\n                    parameters.use_crispr = phandle.open(\"use_crispr\", { load: true }).values[0] > 0;\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"discards\" in rhandle.children) {\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n            }\n        } \n\n        if (!(\"discard_buffer\" in cache)) {\n            let to_use = find_usable_upstream_states(qc_states, { RNA: parameters.use_rna, ADT: parameters.use_adt, CRISPR: parameters.use_crispr });\n\n            if (to_use.length == 1) {\n                // We figure out which upstream QC state contains the discard vector\n                // and create a view on it so that our discard_buffer checks work properly.\n                // (v1 and earlier also implicitly falls in this category.)\n                cache.discard_buffer = to_use[0].fetchDiscards().view();\n            } else if (to_use.length == 0) {\n                // No-op; we don't need to define discard_buffer.\n                ;\n            } else {\n                throw new Error(\"no more than one upstream QC state should be valid if 'discards' is not available\");\n            }\n        }\n\n        output = new CellFilteringState(inputs, qc_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.discard_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as rutils from \"../readers/index.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as markers_module from \"./marker_detection.js\";\n\nconst baseUrl = \"https://github.com/LTLA/singlepp-references/releases/download/v2.0.0\";\n\nexport const step_name = \"cell_labelling\";\n\n/**\n * Cell labelling involves assigning cell type labels to clusters using the [**SingleR** algorithm](https://github.com/LTLA/CppSingleR),\n * based on [pre-formatted reference expression profiles](https://github.com/clusterfork/singlepp-references).\n * This wraps [`labelCells`](https://kanaverse.github.io/scran.js/global.html#labelCells)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * In theory, we could do this at the single-cell level, but we use clusters instead to expedite the computation and simplify interpretation.\n * If multiple references are requested, we will use each for assignment before attempting to choose the best label for each cluster across references.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellLabellingState {\n    #inputs;\n    #markers;\n    #parameters;\n    #cache;\n\n    constructor(inputs, markers, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        if (!(markers instanceof markers_module.MarkerDetectionState)) {\n            throw new Error(\"'markers' should be a State object from './marker_detection.js'\");\n        }\n        this.#markers = markers;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    #flush_prepared() {\n        if (\"prepared\" in this.#cache) {\n            for (const v of Object.values(this.#cache.prepared)) {\n                v.built.raw.free();\n            }\n            delete this.#cache.prepared;\n        }\n    }\n\n    free() {\n        utils.freeCache(this.#cache.buffer);\n        this.#flush_prepared();\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let mat = this.#inputs.fetchCountMatrix();\n        return mat.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        let out = { ...this.#parameters };\n        out.references = bioc.CLONE(out.references);\n        out.species = bioc.CLONE(out.species);\n        return out;\n    }\n\n    /**\n     * @return {object} An object containing:\n     *\n     * - `per_reference`: an object where keys are the reference names and the values are arrays of strings.\n     *   Each array is of length equal to the number of clusters and contains the cell type classification for each cluster.\n     * - `integrated`: an array of length equal to the number of clusters.\n     *   Each element is a string specifying the name of the reference with the best label for each cluster.\n     *   Only available if multiple references are requested.\n     *\n     * This is available after running {@linkcode CellLabellingState#compute compute}.\n     */\n    fetchResults() {\n        // No real need to clone these, they're string arrays\n        // so they can't be transferred anyway.\n        let perref = {};\n        for (const [key, val] of Object.entries(this.#cache.results)) {\n            perref[key] = val;\n        }\n\n        let output = { \"per_reference\": perref };\n        if (\"integrated_results\" in this.#cache) {\n            output.integrated = this.#cache.integrated_results;\n        }\n\n        return output;\n    }\n\n    /**\n     * @return {object} Object where each key is the name of a reference and each value is the number of shared features between the test and reference daatasets.\n     */\n    fetchNumberOfSharedFeatures() {\n        let output = {};\n        for (const key of Object.keys(this.#cache.results)) {\n            output[key] = this.#cache.prepared[key].built.raw.sharedFeatures();\n        }\n        return output;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults() {\n        return {\n            references: [],\n            automatic: true,\n            species: [],\n            gene_id_column: null,\n            gene_id_type: \"ENSEMBL\"\n        };\n    }\n\n    static configureFeatureParameters(guesses) {\n        let best_key = null;\n        let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n        if (\"row_names\" in guesses) {\n            let val = guesses.row_names;\n            if (val.confidence > best.confidence) {\n                best = val;\n            }\n        }\n\n        for (const [key, val] of Object.entries(guesses.columns)) {\n           if (val.confidence > best.confidence) {\n                best = val;\n                best_key = key;\n            }\n        }\n\n        return {\n            gene_id_column: best_key,\n            species: [best.species],\n            gene_id_type: best.type.toUpperCase()\n        };\n    }\n\n    /**\n     * Available references for each species.\n     * Each key is a taxonomy ID and each value is an array of strings containing the names of references for that species.\n     * @type {object}\n     */\n    static availableReferences = {\n        \"9606\": [ \"BlueprintEncode\", \"DatabaseImmuneCellExpression\", \"HumanPrimaryCellAtlas\", \"MonacoImmune\", \"NovershternHematopoietic\" ],\n        \"10090\": [ \"ImmGen\", \"MouseRNAseq\" ]\n    };\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    async #load_reference(name) {\n        let all_loaded = CellLabellingState.#all_loaded;\n        if (name in all_loaded) {\n            return;\n        }\n\n        const suffixes = [ \n            \"genes.csv.gz\",\n            \"labels_fine.csv.gz\",\n            \"label_names_fine.csv.gz\",\n            \"markers_fine.gmt.gz\",\n            \"matrix.csv.gz\"\n        ];\n\n        let contents = await Promise.all(\n            suffixes.map(\n                async suffix => {\n                    let full = name + \"_\" + suffix;\n                    let b = await CellLabellingState.#downloadFun(baseUrl + \"/\" + full);\n                    return new rutils.SimpleFile(b, { name: full })\n                }\n            )\n        );\n\n        let loaded;\n        try {\n            loaded = scran.loadLabelledReferenceFromBuffers(\n                contents[4].buffer(), // rank matrix\n                contents[3].buffer(), // markers\n                contents[1].buffer()  // label per sample\n            );\n\n            let gene_lines = await rutils.readLines2(contents[0].content(), { compression: \"gz\" }); // gene names\n            let ensembl = [];\n            let symbol = [];\n            let entrez = [];\n            let empty2null = x => (x == \"\" ? null : x);\n\n            gene_lines.forEach(x => {\n                let fields = x.split(\",\");\n                ensembl.push(empty2null(fields[0]));\n                symbol.push(empty2null(fields[1]));\n                entrez.push(empty2null(fields[2]));\n            });\n\n            let labels = await rutils.readLines2(contents[2].content(), { compression: \"gz\" }); // full label names\n            all_loaded[name] = { \n                \"raw\": loaded, \n                \"genes\": {\n                    \"ENSEMBL\": ensembl,\n                    \"SYMBOL\": symbol,\n                    \"ENTREZ\": entrez\n                },\n                \"labels\": labels\n            };\n\n        } catch (e) {\n            utils.freeCache(loaded);\n            throw e;\n        }\n    }\n\n    static #all_loaded = {};\n\n    /**\n     * Flush all cached references.\n     *\n     * By default, {@linkcode CellLabellingState#compute compute} will cache the loaded references in a static member for re-use across {@linkplain CellLabellingState} instances.\n     * These cached references are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        for (const [k, v] of Object.entries(CellLabellingState.#all_loaded)) {\n            v.raw.free();\n        }\n        CellLabellingState.#all_loaded = {};\n        return;\n    }\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * Specify a function to download references for the cell labelling step.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step. \n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        let previous = CellLabellingState.#downloadFun;\n        CellLabellingState.#downloadFun = fun;\n        return previous;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #build_reference(name, gene_ids, gene_id_type) {\n        let built;\n        let output;\n        try {\n            let current = CellLabellingState.#all_loaded[name];\n            let loaded = current.raw;\n\n            if (!(gene_id_type in current.genes)) {\n                throw new Error(\"unknown gene type '\" + gene_id_type + \"'\");\n            }\n            let chosen_ids = current.genes[gene_id_type];\n\n            built = scran.buildLabelledReference(gene_ids, loaded, chosen_ids); \n            output = {\n                \"loaded\": current,\n                \"built\": {\n                    \"features\": chosen_ids,\n                    \"raw\": built\n                }\n            };\n\n        } catch (e) {\n            utils.freeCache(built);\n            throw e;\n        }\n\n        return output;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `cell_labelling` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {Array} parameters.references - Array of strings specifying the names of the reference datasets, see {@linkcode CellLabellingState.availableReferences availableReferences} for more details.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If `true`, the column of the annotation that best matches human/mouse Ensembl/symbols is identified and used to set `species`, `gene_id_column` and `gene_id_type`.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species involved in this dataset.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode CellLabellingState.availableReferences availableReferences}.\n     * This is used internally to filter `references` to the entries relevant to these species. \n     * Ignored if `automatic = true`.\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the RNA entry of {@linkcode InputsState#fetchFeatureAnnotations InputsState.fetchFeatureAnnotations} containing the identity of each gene. \n     * If `null`, identifiers are taken from the row names.\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Type of feature identifier in `gene_id_column`.\n     * This should be one of `\"ENSEMBL\"`, `\"SYMBOL\"` or `\"ENTREZ\"`\n     * Ignored if `automatic = true`.\n     *\n     * @return The object is updated with the new results.\n     * @async\n     */\n    async compute(parameters) {\n        let references;\n        let automatic;\n        let species;\n        let gene_id_column;\n        let gene_id_type;\n\n        if (\"references\" in parameters) {\n            references = parameters.references;\n            automatic = parameters.automatic;\n            species = parameters.species;\n            gene_id_column = parameters.gene_id_column;\n            gene_id_type = parameters.gene_id_type;\n        } else {\n            references = [ ...(parameters.human_references), ...(parameters.mouse_references) ];\n            automatic = true;\n            let def = CellLabellingState.defaults();\n            species = def.species;\n            gene_id_column = def.gene_id_column;\n            gene_id_type = def.gene_id_type;\n        }\n\n        this.changed = false;\n\n        if (this.valid()) {\n            // Gathering the references.\n            if (\n                this.#inputs.changed ||\n                automatic !== this.#parameters.automatic ||\n                utils.changedParameters(references, this.#parameters.references) ||\n                (\n                    !automatic &&\n                    (\n                        species !== this.#parameters.species ||\n                        gene_id_column !== this.#parameters.gene_id_column ||\n                        gene_id_type !== this.#parameters.gene_id_type\n                    )\n                )\n            ) {\n                let species2 = species;\n                let gene_id_column2 = gene_id_column;\n                let gene_id_type2 = gene_id_type;\n\n                if (automatic) {\n                    let guesses = this.#inputs.guessRnaFeatureTypes();\n                    let auto = CellLabellingState.configureFeatureParameters(guesses);\n                    species2 = auto.species;\n                    gene_id_column2 = auto.gene_id_column;\n                    gene_id_type2 = auto.gene_id_type;\n                }\n\n                let allowable = new Set;\n                for (const s of species2) {\n                    if (s in CellLabellingState.availableReferences) {\n                        CellLabellingState.availableReferences[s].forEach(x => { allowable.add(x); });\n                    }\n                }\n\n                // Building each individual reference.\n                let feats = this.#inputs.fetchFeatureAnnotations()[\"RNA\"];\n                let gene_ids = (gene_id_column2 == null ? feats.rowNames() : feats.column(gene_id_column2));\n                this.#cache.gene_ids = gene_ids;\n\n                let valid = {};\n                if (gene_ids !== null) {\n                    for (const ref of references) {\n                        if (allowable.has(ref)) {\n                            await this.#load_reference(ref);\n                            valid[ref] = this.#build_reference(ref, gene_ids, gene_id_type2);\n                        }\n                    }\n                }\n\n                this.#flush_prepared();\n                this.#cache.prepared = valid;\n\n                // Building an integrated reference, if necessary.\n                let used_refs = Object.keys(valid);\n                if (used_refs.length > 1) {\n                    let arr = Object.values(valid);\n                    let loaded = arr.map(x => x.loaded.raw);\n                    let feats = arr.map(x => x.built.features);\n                    let built = arr.map(x => x.built.raw);\n\n                    utils.freeCache(this.#cache.integrated);\n                    this.#cache.integrated = scran.integrateLabelledReferences(gene_ids, loaded, feats, built);\n                } else {\n                    utils.freeCache(this.#cache.integrated);\n                    delete this.#cache.integrated;\n                }\n                this.#cache.used_refs = used_refs;\n\n                this.changed = true;\n            }\n\n            let marker_results = this.#markers.fetchResults()[\"RNA\"];\n            let ngroups = marker_results.numberOfGroups();\n            let ngenes = (this.#cache.gene_ids !== null ? this.#cache.gene_ids.length : null);\n            let cluster_means = this.#cache.buffer;\n\n            if (this.#markers.changed) {\n                if (ngenes !== null) {\n                    // Creating a column-major array of mean vectors for each cluster.\n                    cluster_means = utils.allocateCachedArray(ngroups * ngenes, \"Float64Array\", this.#cache);\n                    for (var g = 0; g < ngroups; g++) {\n                        let means = marker_results.means(g, { copy: false }); // Warning: direct view in wasm space - be careful.\n                        let cluster_array = cluster_means.array();\n                        cluster_array.set(means, g * ngenes);\n                    }\n                }\n                this.changed = true;\n            }\n\n            if (this.changed) {\n                // Running classifications on the cluster means. This is a\n                // no-op if gene_ids = null as 'valid' should be empty.\n                let valid = this.#cache.prepared;\n\n                this.#cache.results = {};\n                for (const [key, ref] of Object.entries(valid)) {\n                    let output = scran.labelCells(cluster_means, ref.built.raw, { numberOfFeatures: ngenes, numberOfCells: ngroups });\n                    let labels = [];\n                    for (const o of output) {\n                        labels.push(ref.loaded.labels[o]);\n                    }\n                    this.#cache.results[key] = labels;\n                }\n\n                // Performing additional integration, if necessary. \n                if (\"integrated\" in this.#cache) {\n                    let results = [];\n                    for (const key of this.#cache.used_refs) {\n                        results.push(this.#cache.results[key]);\n                    }\n\n                    let out = scran.integrateCellLabels(cluster_means, results, this.#cache.integrated, { numberOfFeatures: ngenes, numberOfCells: ngroups });\n                    let as_names = [];\n                    out.forEach(i => {\n                        as_names.push(this.#cache.used_refs[i]);\n                    });\n                    this.#cache.integrated_results = as_names;\n                } else {\n                    delete this.#cache.integrated_results;\n                }\n            }\n        } else {\n            this.#cache.results = {};\n            delete this.#cache.integrated_results;\n        }\n\n        this.#parameters.references = bioc.CLONE(references); // make a copy to avoid pass-by-reference behavior.\n        this.#parameters.automatic = automatic;\n        this.#parameters.species = bioc.CLONE(species);\n        this.#parameters.gene_id_column = gene_id_column;\n        this.#parameters.gene_id_type = gene_id_type;\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, markers) {\n    let parameters =  {\n        mouse_references: [],\n        human_references: []\n    };\n    let cache = { results: {} };\n\n    // Protect against old analysis states that don't have cell_labelling.\n    if (\"cell_labelling\" in handle.children) {\n        let ghandle = handle.open(\"cell_labelling\");\n        \n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.mouse_references = phandle.open(\"mouse_references\", { load: true }).values;\n            parameters.human_references = phandle.open(\"human_references\", { load: true }).values;\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"per_reference\" in rhandle.children) {\n                let perhandle = rhandle.open(\"per_reference\");\n                for (const key of Object.keys(perhandle.children)) {\n                    cache.results[key] = perhandle.open(key, { load: true }).values;\n                }\n                if (\"integrated\" in rhandle.children) {\n                    cache.integrated_results = rhandle.open(\"integrated\", { load: true }).values;\n                }\n            }\n        }\n    }\n\n    return new CellLabellingState(inputs, markers, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as snn_module from \"./snn_graph_cluster.js\";\nimport * as kmeans_module from \"./kmeans_cluster.js\";\n\n/**\n * This step chooses between the k-means and SNN graph clusterings from {@linkplain KmeansClusterState} and {@linkplain SnnGraphClusterState}, respectively.\n * We added this step to preserve the cache for each clustering step - \n * specifically, each clustering does not need to be recomputed when a user changes their choice.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class ChooseClusteringState {\n    #snn_cluster;\n    #kmeans_cluster;\n    #parameters;\n    #cache;\n\n    constructor(snn, kmeans, parameters = null, cache = null) {\n        if (!(snn instanceof snn_module.SnnGraphClusterState)) {\n            throw new Error(\"'snn' should be a State object from './snn_graph_cluster.js'\");\n        }\n        this.#snn_cluster = snn;\n\n        if (!(kmeans instanceof kmeans_module.KmeansClusterState)) {\n            throw new Error(\"'kmeans' should be a State object from './kmeans_cluster.js'\");\n        }\n        this.#kmeans_cluster = kmeans;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {}\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode ChooseClusteringState#compute compute}.\n     */\n    fetchClusters() {\n        if (this.#parameters.method == \"snn_graph\") {\n            return this.#snn_cluster.fetchClusters();\n        } else if (this.#parameters.method == \"kmeans\") {\n            return this.#kmeans_cluster.fetchClusters();\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - Clustering method to use, either `\"kmeans\"` or `\"snn_graph\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { method } = parameters;\n        this.changed = true;\n        \n        if (method == this.#parameters.method) {\n            if (method == \"snn_graph\") {\n                if (!this.#snn_cluster.changed) {\n                    this.changed = false;\n                }\n            } else if (method == \"kmeans\") {\n                if (!this.#kmeans_cluster.changed) {\n                    this.changed = false;\n                }\n            }\n        }\n\n        this.#parameters.method = method;\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, snn, kmeans) {\n    let ghandle = handle.open(\"choose_clustering\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            method: phandle.open(\"method\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    return new ChooseClusteringState(snn, kmeans, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as rna_pca_module from \"./rna_pca.js\";\nimport * as adt_pca_module from \"./adt_pca.js\";\nimport * as crispr_pca_module from \"./crispr_pca.js\";\n\nexport const step_name = \"combine_embeddings\";\n\nfunction find_nonzero_upstream_states(pca_states, weights) {\n    let tmp = utils.findValidUpstreamStates(pca_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (weights[k] > 0) {\n            to_use.push(k);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step combines multiple embeddings from different modalities into a single matrix for downstream analysis.\n * It wraps the [`scaleByNeighbors`](https://kanaverse.github.io/scran.js/global.html#scaleByNeighbors) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CombineEmbeddingsState {\n    #pca_states;\n    #parameters;\n    #cache;\n\n    constructor(pca_states, parameters = null, cache = null) {\n        if (!(pca_states.RNA instanceof rna_pca_module.RnaPcaState)) {\n            throw new Error(\"'pca_states.RNA' should be an RnaPcaState object\");\n        }\n        if (!(pca_states.ADT instanceof adt_pca_module.AdtPcaState)) {\n            throw new Error(\"'pca_states.ADT' should be an AdtPcaState object\");\n        }\n        if (!(pca_states.CRISPR instanceof crispr_pca_module.CrisprPcaState)) {\n            throw new Error(\"'pca_states.CRISPR' should be an CrisprPcaState object\");\n        }\n        this.#pca_states = pca_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.combined_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the combined embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchCombined() {\n        return this.#cache.combined_buffer;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfCells() {\n        return this.#cache.num_cells;\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#cache.total_dims;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return { \n            rna_weight: 1,\n            adt_weight: 1,\n            crispr_weight: 0,\n            approximate: true\n        };\n    }\n\n    static createPcsView(cache, upstream) {\n        utils.freeCache(cache.combined_buffer);\n        cache.combined_buffer = upstream.principalComponents({ copy: \"view\" }).view();\n        cache.num_cells = upstream.numberOfCells();\n        cache.total_dims = upstream.numberOfPCs();\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.rna_weight - Relative weight of the RNA embeddings.\n     * @param {number} parameters.adt_weight - Relative weight of the ADT embeddings.\n     * @param {number} parameters.crispr_weight - Relative weight of the CRISPR embeddings.\n     * @param {boolean} parameters.approximate - Whether an approximate nearest neighbor search should be used by `scaleByNeighbors`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { rna_weight, adt_weight, crispr_weight, approximate } = parameters;\n        this.changed = false;\n\n        for (const v of Object.values(this.#pca_states)) {\n            if (v.changed) {\n                this.changed = true;\n                break;\n            }\n        }\n\n        if (approximate !== this.#parameters.approximate) {\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        if (rna_weight !== this.#parameters.rna_weight || adt_weight !== this.#parameters.adt_weight || crispr_weight !== this.#parameters.crispr_weight) {\n            this.#parameters.rna_weight = rna_weight;\n            this.#parameters.adt_weight = adt_weight;\n            this.#parameters.crispr_weight = crispr_weight;\n            this.changed = true;\n        }\n\n        if (this.changed) { \n            const weights = { RNA: rna_weight, ADT: adt_weight, CRISPR: crispr_weight };\n            let to_use = find_nonzero_upstream_states(this.#pca_states, weights);\n\n            if (to_use.length > 1) {\n                let weight_arr = to_use.map(x => weights[x]);\n                let collected = [];\n                let total = 0;\n                let ncells = null;\n\n                for (const k of to_use) {\n                    let curpcs = this.#pca_states[k].fetchPCs();\n                    collected.push(curpcs.principalComponents({ copy: \"view\" }));\n                    if (ncells == null) {\n                        ncells = curpcs.numberOfCells();\n                    } else if (ncells !== curpcs.numberOfCells()) {\n                        throw new Error(\"number of cells should be consistent across all embeddings\");\n                    }\n                    total += curpcs.numberOfPCs();\n                }\n\n                let buffer = utils.allocateCachedArray(ncells * total, \"Float64Array\", this.#cache, \"combined_buffer\");\n                scran.scaleByNeighbors(collected, ncells, { buffer: buffer, weights: weight_arr, approximate: approximate });\n                this.#cache.num_cells = ncells;\n                this.#cache.total_dims = total;\n\n            } else {\n                // If there's only one embedding, we shouldn't respond to changes\n                // in parameters, because they won't have any effect.\n                let pcs = this.#pca_states[to_use[0]].fetchPCs();\n                this.constructor.createPcsView(this.#cache, pcs);\n            }\n        }\n\n        // Updating all parameters anyway. This requires us to take ownership\n        // of 'weights' to avoid pass-by-reference shenanigans.\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca_states) {\n    let cache = {};\n    let parameters = CombineEmbeddingsState.defaults();\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            {\n                let phandle = ghandle.open(\"parameters\");\n                parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n                if ('weights' in phandle.children) { // v2.0\n                    let whandle = phandle.open(\"weights\");\n                    if (\"RNA\" in whandle.children) {\n                        parameters.rna_weight = whandle.open(\"RNA\", { load: true }).values[0];\n                    }\n                    if (\"ADT\" in whandle.children) {\n                        parameters.adt_weight = whandle.open(\"ADT\", { load: true }).values[0];\n                    }\n                    if (\"CRISPR\" in whandle.children) {\n                        parameters.crispr_weight = whandle.open(\"CRISPR\", { load: true }).values[0];\n                    }\n                } else {\n                    parameters.rna_weight = phandle.open(\"rna_weight\", { load: true }).values[0];\n                    parameters.adt_weight = phandle.open(\"adt_weight\", { load: true }).values[0];\n                    parameters.crispr_weight = phandle.open(\"crispr_weight\", { load: true }).values[0];\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"combined\" in rhandle.children) {\n                let phandle = rhandle.open(\"combined\", { load: true });\n                cache.num_cells = phandle.shape[0];\n                cache.total_dims = phandle.shape[1];\n\n                let vals = phandle.values;\n                cache.combined_buffer = scran.createFloat64WasmArray(vals.length);\n                cache.combined_buffer.set(vals);\n            }\n        }\n\n        if (!(\"combined_buffer\" in cache)) {\n            // This only happens if there was only one upstream PCA state; in which case, \n            // we figure out which upstream PCA state contains the PC vector\n            // and create a view on it so that our fetchPCs() works properly.\n            // (v1 and earlier also implicitly falls in this category.)\n            const weights = { RNA: parameters.rna_weight, ADT: parameters.adt_weight, CRISPR: parameters.crispr_weight };\n            let to_use = find_nonzero_upstream_states(pca_states, weights);\n\n            if (to_use.length != 1) {\n                throw new Error(\"only one upstream PCA state should be valid with non-zero weight if 'combined' is not available\");\n            }\n\n            let pcs = pca_states[to_use[0]].fetchPCs();\n            CombineEmbeddingsState.createPcsView(cache, pcs);\n        }\n\n        output = new CombineEmbeddingsState(pca_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.combined_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./crispr_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"crispr_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered CRISPR count matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc' should be a CrisprQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.centered_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized CRISPR abundances,\n     * available after running {@linkcode CrisprNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the CRISPR-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"CRISPR\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n                this.changed = true;\n            }\n        } \n\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n        let phandle = ghandle.createGroup(\"parameters\"); \n        let rhandle = ghandle.createGroup(\"results\"); \n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new CrisprNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"crispr_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise CRISPR abundance data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm' should be a CrisprNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized CRISPR abundance matrix,\n     * available after running {@linkcode CrisprPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = CrisprPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new CrisprPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new CrisprPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"crispr_quality_control\";\n\n/**\n * Results of computing per-cell CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellCrisprQcMetricsResults.html) for details.\n *\n * @external PerCellCrisprQcMetricsResults\n */\n\n/**\n * Suggested filters for the CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestCrisprQcFiltersResults.html) for details.\n *\n * @external SuggestCrisprQcFiltersResults\n */\n\n/**\n * This step applies quality control on the CRISPR guide count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellCrisprQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellCrisprQcMetrics)\n * and [`suggestCrisprQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestCrisprQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestCrisprQcFiltersResults} Result of filtering on the CRISPR-derived QC metrics.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellCrisprQcMetricsResults} CRISPR-derived QC metrics,\n     * available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            nmads: 3\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold on the maximum count. \n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { nmads } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var mat = this.#inputs.fetchCountMatrix().get(\"CRISPR\");\n                this.#cache.metrics = scran.perCellCrisprQcMetrics(mat);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestCrisprQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = CrisprQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellCrisprQcMetricsResults(detected.length);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n\n                let max_prop = mhandle.open(\"max_proportion\", { load: true }).values;\n                cache.metrics.maxProportions({ fillable: true }).set(max_prop);\n\n                let max_index = mhandle.open(\"max_index\", { load: true }).values;\n                cache.metrics.maxIndex({ fillable: true }).set(max_index);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_max_count = thandle.open(\"max_count\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestCrisprQcFiltersResults(thresholds_max_count.length);\n                cache.filters.thresholdsMaxCount({ fillable: true }).set(thresholds_max_count);\n            }\n\n            output = new CrisprQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback if the results aren't available. \n        output = new CrisprQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\n\n/**\n * Results of per-gene variance modelling,\n * see [here](https://kanaverse.github.io/scran.js/ModelGeneVarResults.html) for details.\n *\n * @external ModelGeneVarResults\n */\n\n/**\n * Feature selection is performed by modelling the per-gene variance and finding highly variable genes.\n * This wraps the [`modelGeneVar`](https://kanaverse.github.io/scran.js/global.html#modelGeneVar) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class FeatureSelectionState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:ModelGeneVarResults} Variance modelling results,\n     * available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.results;\n    }\n\n    /**\n     * @return {Float64Array} Array of length equal to the number of genes,\n     * containing the sorted residuals after fitting a mean-dependent trend to the variances.\n     * Available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchSortedResiduals() {\n        return this.#cache.sorted_residuals;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference activity.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n \n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `feature_selection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.span - Value between 0 and 1 specifying the span for the LOWESS smoother.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { span } = parameters;\n        this.changed = false;\n        \n        if (this.#norm.changed || span != this.#parameters.span) {\n            utils.freeCache(this.#cache.results);\n\n            if (this.valid()) {\n                let mat = this.#norm.fetchNormalizedMatrix();\n                let block = this.#filter.fetchFilteredBlock();\n                this.#cache.results = scran.modelGeneVar(mat, { span: span, block: block });\n\n                this.#cache.sorted_residuals = this.#cache.results.residuals().slice(); // a separate copy.\n                this.#cache.sorted_residuals.sort();\n\n                this.changed = true;\n            }\n\n            this.#parameters.span = span;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, permuter, filter, norm) {\n    let ghandle = handle.open(\"feature_selection\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            span: phandle.open(\"span\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"means\" in rhandle.children) {\n            // Possibly permuting it to match the new permutation order;\n            // see 'unserialize' in 'inputs.js'.\n            let reloaded = {};\n            for (const key of [ \"means\", \"vars\", \"fitted\", \"resids\" ]) {\n                let value = rhandle.open(key, { load: true }).values;\n                reloaded[key] = permuter(value);\n            }\n\n            cache.results = scran.emptyModelGeneVarResults(reloaded.means.length, 1);\n            cache.results.means({ fillable: true }).set(reloaded.means);\n            cache.results.variances({ fillable: true }).set(reloaded.vars);\n            cache.results.fitted({ fillable: true }).set(reloaded.fitted);\n            cache.results.residuals({ fillable: true }).set(reloaded.resids);\n\n            cache.sorted_residuals = cache.results.residuals({ copy: true });\n            cache.sorted_residuals.sort();\n        }\n    }\n\n    return new FeatureSelectionState(filter, norm, parameters, cache);\n}\n\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\n/**\n * This step performs k-means clustering on the PCs, \n * wrapping the [`clusterKmeans`](https://kanaverse.github.io/scran.js/global.html#clusterKmeans) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class KmeansClusterState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode KmeansClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw new Error(\"cannot fetch k-means clusters from an invalid state\");\n        } else {\n            return this.#cache.raw.clusters({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    };\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"raw\" in this.#cache;\n    }\n\n    /** \n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of clusters to create.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || k != this.#parameters.k || (!this.#valid() && run_me)) {\n            utils.freeCache(this.#cache.raw);\n\n            if (run_me) {\n                var pcs = this.#correct.fetchCorrected();\n                this.#cache.raw = scran.clusterKmeans(pcs, k, { \n                    numberOfDims: this.#correct.fetchNumberOfDimensions(),\n                    numberOfCells: this.#correct.fetchNumberOfCells(),\n                    initMethod: \"pca-part\" \n                });\n            } else {\n                delete this.#cache.raw; // ensure this step gets re-run later when run_me = true. \n            }\n\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let parameters = {\n        k: 10\n    };\n    let cache = {};\n\n    // Protect against old analysis states that don't have kmeans_cluster.\n    if (\"kmeans_cluster\" in handle.children) {\n        let ghandle = handle.open(\"kmeans_cluster\");\n\n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.k = phandle.open(\"k\", { load: true }).values[0];\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n            if (\"clusters\" in rhandle.children) {\n                let clusters = rhandle.open(\"clusters\", { load: true }).values;\n                cache.raw = scran.emptyClusterKmeansResults(clusters.length, parameters.k, pca.fetchNumberOfDimensions());\n                cache.raw.clusters({ fillable: true }).set(clusters);\n            }\n        }\n    }\n\n    return new KmeansClusterState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as markers from \"./utils/markers.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as choice_module from \"./choose_clustering.js\";\nimport * as rna_norm_module from \"./rna_normalization.js\";\nimport * as adt_norm_module from \"./adt_normalization.js\";\nimport * as crispr_norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"marker_detection\";\n\n/**\n * Results of marker detection,\n * see [here](https://www.kanaverse.github.io/scran.js/ScoreMarkersResults.html) for details.\n *\n * @external ScoreMarkersResults\n */\n\n/*********************\n ***** Internals *****\n *********************/\n\nfunction _free(cache) {\n    for (const v of Object.values(cache.raw)) {\n        utils.freeCache(v);\n    }\n    cache.raw = {};\n    markers.freeVersusResults(cache.versus);\n    delete cache.versus;\n}\n\nfunction _computeVersus(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n    let cache_info = markers.locateVersusCache(left, right, cache);\n    let left_index = (cache_info.left_small ? 0 : 1);\n    let right_index = (cache_info.left_small ? 1 : 0);\n\n    if (cache_info.run) {\n        let new_clusters = [];\n        let keep = [];\n        let leftfound = false, rightfound = false;\n        clusters.forEach((x, i) => {\n            if (x == left) {\n                new_clusters.push(left_index);\n                keep.push(i);\n                leftfound = true;\n            } else if (x == right) {\n                new_clusters.push(right_index);\n                keep.push(i);\n                rightfound = true;\n            }\n        });\n\n        if (!leftfound || !rightfound) {\n            throw new Error(\"non-zero entries should be present for both requested clusters in versus mode\");\n        }\n\n        markers.computeVersusResults(matrices, new_clusters, block, keep, cache_info.cached, lfc_threshold, compute_auc);\n    }\n\n    return { \n        results: cache_info.cached,\n        left: left_index,\n        right: right_index\n    };\n}\n\n/*****************\n ***** State *****\n *****************/\n\n/**\n * This step performs marker detection for each cluster of cells by performing pairwise comparisons to each other cluster.\n * This wraps the [`scoreMarkers`](https://kanaverse.github.io/scran.js/global.html#scoreMarkers) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * The clustering is obtained from the upstream {@linkplain ChooseClusteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class MarkerDetectionState {\n    #filter;\n    #norm_states;\n    #choice;\n    #parameters;\n    #cache;\n\n    constructor(filter, norm_states, choice, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a State object from './cell_filtering.js'\");\n        }\n        this.#filter = filter;\n\n        if (!(norm_states.RNA instanceof rna_norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm_states.RNA' should be an RnaNormalizationState object\");\n        }\n        if (!(norm_states.ADT instanceof adt_norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm_states.ADT' should be an AdtNormalizationState object\");\n        }\n        if (!(norm_states.CRISPR instanceof crispr_norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm_states.CRISPR' should be an CrisprNormalizationState object\");\n        }\n        this.#norm_states = norm_states;\n\n        if (!(choice instanceof choice_module.ChooseClusteringState)) {\n            throw new Error(\"'choice' should be a State object from './choose_clustering.js'\");\n        }\n        this.#choice = choice;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? { \"raw\": {} } : cache);\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        _free(this.#cache);\n    }\n\n    /**\n     * Obtain the marker detection results for all modalities.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object where each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all clusters.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * Parameters used to compute the results.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `marker_detection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.lfc_threshold - Log-fold change threshold to use when computing the Cohen's d and AUC for each pairwise comparison.\n     * @param {boolean} parameters.compute_auc - Whether to compute the AUCs.\n     * Setting this to `false` will skip AUC calculations and improve speed and memory efficiency.\n     *\n     * @return The state is updated with new results.\n     */\n    compute(parameters) {\n        let { lfc_threshold, compute_auc } = parameters;\n        this.changed = false;\n        let changed_params = (lfc_threshold !== this.#parameters.lfc_threshold || compute_auc !== this.#parameters.compute_auc);\n        \n        for (const [k, v] of Object.entries(this.#norm_states)) {\n            if (!v.valid()) {\n                continue;\n            }\n\n            if (this.#choice.changed || v.changed || changed_params) {\n                var mat = v.fetchNormalizedMatrix();\n                var clusters = this.#choice.fetchClusters();\n                var block = this.#filter.fetchFilteredBlock();\n                \n                utils.freeCache(this.#cache.raw[k]);\n                this.#cache.raw[k] = scran.scoreMarkers(mat, clusters, { block: block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n\n                this.changed = true;\n            }\n        }\n\n        this.#parameters.lfc_threshold = lfc_threshold;\n        this.#parameters.compute_auc = compute_auc;\n        if (this.changed) {\n            markers.freeVersusResults(this.#cache.versus);\n        }\n\n        return;\n    }\n\n    /**\n     * @return {object} Default parameters that may be modified and fed into {@linkcode MarkerDetectionCore#compute compute}.\n     */\n    static defaults() {\n        return {\n            lfc_threshold: 0,\n            compute_auc: true\n        };\n    }\n\n    // Soft-deprecated.\n    static computeVersusCustom(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n        return computeVersus(left, right, matrices, clusters, { cache, block, lfc_threshold, compute_auc });\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two clusters for more detailed examination of the differences between them.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @param {number} left - Index of one cluster in which to find upregulated markers.\n     * @param {number} right - Index of another cluster to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two clusters.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` cluster in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` cluster in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        var clusters = this.#choice.fetchClusters();\n        var block = this.#filter.fetchFilteredBlock();\n\n        // No need to free this afterwards; we don't own the normalized matrices anyway.\n        let matrices = new scran.MultiMatrix;\n        for (const [modality, state] of Object.entries(this.#norm_states)) {\n            if (!state.valid()) {\n                continue;\n            }\n            matrices.add(modality, state.fetchNormalizedMatrix());\n        }\n\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n\n        return _computeVersus(left, right, matrices, clusters, { \n            cache: this.#cache.versus, \n            block: block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**********************\n ***** Standalone *****\n **********************/\n\n/**\n * Standalone version of {@linkplain MarkerDetectionState} that provides the same functionality outside of {@linkcode runAnalysis}.\n * Users can supply their own normalized matrices, groups and blocking factor to compute the various marker statistics for each group.\n * Users are also responsible for ensuring that the lifetime of the supplied objects exceeds that of the constructed MarkerDetectionStandalone instance,\n * i.e., the Wasm-related `free()` methods are not called while the MarkerDetectionStandalone instance is still in operation.\n */\nexport class MarkerDetectionStandalone {\n    #matrices;\n\n    #groups;\n    #group_levels;\n    #block;\n    #block_levels;\n\n    #cache;\n    #parameters;\n\n    /**\n     * @param {external:MultiMatrix} normalized - A {@linkplain external:MultiMatrix MultiMatrix} of log-normalized values for multiple modalities.\n     * @param {Array|TypedArray} groups - Array of length equal to the number of columns in any value of `normalized`, containing the group assignments for each column. \n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.block=null] - Array of length equal to the number of columns in any value of `normalized`, containing the block assignments for each column.\n     * If `null`, all columns are assigned to the same block.\n     */\n    constructor(normalized, groups, { block = null } = {}) {\n        // Checking dimensions.\n        let N = groups.length;\n\n        for (const k of normalized.available()) {\n            let v = normalized.get(k);\n            if (v.numberOfColumns() != N) {\n                throw new Error(\"all matrices in 'normalized' should have the same number of columns as the length of 'groups'\");\n            }\n        }\n\n        if (block !== null) {\n            if (block.length != N) {\n                throw new Error(\"'block' should have the same length as 'groups' if not null\");\n            }\n        }\n\n        let arrays = [ groups ];\n        if (block !== null) {\n            arrays.push(block);\n        }\n        let dump = utils.subsetInvalidFactors(arrays);\n\n        // Maybe taking a subset to eliminate invalid entries.\n        let new_matrices;\n        if (dump.retain !== null) {\n            new_matrices = new scran.MultiMatrix;\n            let temp = scran.createInt32WasmArray(dump.retain.length);\n            try {\n                temp.set(dump.retain);\n                for (const k of normalized.available()) {\n                    new_matrices.add(k, scran.subsetColumns(normalized.get(k), temp))\n                }\n            } catch (e) {\n                new_matrices.free();\n                throw e;\n            } finally {\n                scran.free(temp);\n            }\n        } else {\n            new_matrices = normalized.clone();\n        }\n\n        this.#matrices = new_matrices;\n        this.#groups = dump.arrays[0].ids;\n        this.#group_levels = dump.arrays[0].levels;\n\n        if (block !== null) {\n            this.#block = dump.arrays[1].ids;\n            this.#block_levels = dump.arrays[1].levels;\n        } else {\n            this.#block = null;\n            this.#block_levels = null;\n        }\n\n        this.#cache = { raw: {}, init: true };\n        this.#parameters = MarkerDetectionState.defaults();\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        scran.free(this.#groups);\n        scran.free(this.#block);\n        scran.free(this.#matrices);\n        _free(this.#cache);\n    }\n\n    /**\n     * @return {object} Marker detection results for the all modalities.\n     * Each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all groups.\n     * This is available after running {@linkcode MarkerDetectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the grouping factor.\n     * Group indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchGroupLevels({ copy = true } = {}) {\n        let ret = this.#group_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the blocking factor.\n     * Block indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchBlockLevels({ copy = true } = {}) {\n        let ret = this.#block_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    // Testing functions to check that the sanitization worked correctly.\n    _peekMatrices() {\n        return this.#matrices;\n    }\n\n    _peekGroups() {\n        return this.#groups;\n    }\n\n    _peekBlock() {\n        return this.#block;\n    }\n\n    /**\n     * If this method is not called, the parameters default to those in {@linkcode MarkerDetectionState#defaults MarkerDetectionState.defaults}.\n     *\n     * @param {object} parameters - Parameter object, see the argument of the same name in {@linkcode MarkerDetectionState#compute MarkerDetectionState.compute} for more details.\n     *\n     * @return The state is updated with new parameters.\n     */\n    setParameters(parameters) {\n        if (this.#parameters.lfc_threshold !== parameters.lfc_threshold || this.#parameters.compute_auc !== parameters.compute_auc) {\n            this.free();\n        }\n        this.#parameters = { ...parameters };\n        return;\n    }\n\n    /**\n     * Compute markers for all groups.\n     *\n     * @return The state is updated with new results.\n     */\n    computeAll() {\n        let { lfc_threshold, compute_auc } = this.#parameters;\n        for (const k of this.#matrices.available()) {\n            var mat = this.#matrices.get(k);\n            utils.freeCache(this.#cache.raw[k]);\n            this.#cache.raw[k] = scran.scoreMarkers(mat, this.#groups, { block: this.#block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        }\n        return;\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two groups, \n     * for more detailed examination of the differences between them.\n     *\n     * @param {number} left - Index of one group in which to find upregulated markers.\n     * @param {number} right - Index of another group to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two groups.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` group in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` group in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n        return _computeVersus(left, right, this.#matrices, this.#groups, { \n            cache: this.#cache.versus, \n            block: this.#block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nfunction fill_results(stats, num_blocks) {\n    let keys = Object.keys(stats);\n    let first = stats[keys[0]];\n    let ngenes = first.means.length;\n    let object = scran.emptyScoreMarkersResults(ngenes, keys.length, num_blocks, { computeAuc: (\"auc\" in first) });\n\n    for (const k of keys) {\n        let i = Number(k);\n        let vals = stats[k];\n        object.means(i, { fillable: true }).set(vals.means);\n        object.detected(i, { fillable: true }).set(vals.detected);\n\n        for (const [s, v] of Object.entries(vals.cohen)) {\n            object.cohen(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.lfc)) {\n            object.lfc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.delta_detected)) {\n            object.deltaDetected(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        if (\"auc\" in vals) {\n            for (const [s, v] of Object.entries(vals.auc)) {\n                object.auc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n            }\n        }\n    }\n\n    return object;\n}\n\nexport function unserialize(handle, permuters, filter, norm_states, choice) {\n    let ghandle = handle.open(\"marker_detection\");\n\n    let parameters = MarkerDetectionState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        if (\"lfc_threshold\" in phandle.children) {\n            parameters.lfc_threshold = phandle.open(\"lfc_threshold\", { load: true }).values[0];\n        }\n        if (\"compute_auc\" in phandle.children) {\n            parameters.compute_auc = phandle.open(\"compute_auc\", { load: true }).values[0] > 0;\n        }\n    }\n\n    // Figure out the number of blocks.\n    let num_blocks = 1;\n    {\n        let filtered = filter.fetchFilteredBlock();\n        if (filtered != null) {\n            filtered.forEach(x => {\n                if (x + 1 > num_blocks) {\n                    num_blocks = x + 1;\n                }\n            });\n        }\n    }\n\n    // Set up the marker detection statistics.\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        cache.raw = {};\n\n        if (\"clusters\" in rhandle.children) { \n            // below v2.0\n            let chandle = rhandle.open(\"clusters\");\n            let clusters = {};\n            for (const cl of Object.keys(chandle.children)) {\n                clusters[Number(cl)] = markers.unserializeGroupStats(chandle.open(cl), permuters[\"RNA\"], { compute_auc: parameters.compute_auc });\n            }\n            cache.raw.RNA = fill_results(clusters, num_blocks);\n        } else {\n            // after v2.0.\n            let chandle = rhandle.open(\"per_cluster\");\n            for (const a of Object.keys(chandle.children)) {\n                let clusters = {};\n                let ahandle = chandle.open(a);\n                for (const cl of Object.keys(ahandle.children)) {\n                    clusters[Number(cl)] = markers.unserializeGroupStats(ahandle.open(cl), permuters[a], { compute_auc: parameters.compute_auc });\n                }\n                cache.raw[a] = fill_results(clusters, num_blocks);\n            }\n        }\n \n    }\n\n    return new MarkerDetectionState(filter, norm_states, choice, parameters, cache);\n}\n\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\nexport const step_name = \"neighbor_index\";\n\n/**\n * This step assembles the neighbor search indices from the PCs (see {@linkplain PcaState}) in preparation for nearest neighbor searches in downstream steps.\n * It wraps the [`buildNeighborSearchIndex`](https://kanaverse.github.io/scran.js/global.html#buildNeighborSearchIndex) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class NeighborIndexState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {BuildNeighborSearchIndexResults} Index for a nearest-neighbor search,\n     * available after running {@linkcode NeighborIndexState#compute compute}.\n     */\n    fetchIndex() {\n        if (!(\"raw\" in this.#cache)) {\n            this.#raw_compute(this.#parameters.approximate);\n        }\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            approximate: true\n        };\n    }\n\n    #raw_compute(approximate) {\n        this.#cache.raw = scran.buildNeighborSearchIndex(this.#correct.fetchCorrected(), { \n            approximate: approximate, \n            numberOfDims: this.#correct.fetchNumberOfDimensions(),\n            numberOfCells: this.#correct.fetchNumberOfCells()\n        });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `neighbor_index` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.approximate - Whether to create an approximate search index.\n     * If `false`, an exact index is used.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { approximate } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || approximate != this.#parameters.approximate) {\n            utils.freeCache(this.#cache.raw);\n            this.#raw_compute(approximate);\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let ghandle = handle.open(\"neighbor_index\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            approximate: phandle.open(\"approximate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let cache = {};\n    return new NeighborIndexState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./rna_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"rna_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered matrix from the {@linkplain QualityControlState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaNormalizationState {\n    #qc\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc' should be a RnaQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.sum_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"RNA\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing normalized expression values,\n     * available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the RNA-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"RNA\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.changed = true;\n            }\n        } \n\n        if (this.changed) {\n            this.#raw_compute();\n        }\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new RnaNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\nimport * as feat_module from \"./feature_selection.js\";\n\nexport const step_name = \"rna_pca\";\n\n/**\n * Results of running PCA on some input matrix,\n * see [here](https://kanaverse.github.io/scran.js/RunPCAResults.html) for details.\n *\n * @external RunPCAResults\n */\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise the data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaPcaState { \n    #filter;\n    #norm;\n    #feat;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, feat, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        if (!(feat instanceof feat_module.FeatureSelectionState)) {\n            throw new Error(\"'feat' should be a FeatureSelectionState object\");\n        }\n        this.#feat = feat;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.hvg_buffer);\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized gene expression values.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {number} parameters.num_hvgs - Number of highly variable genes (see {@linkplain FeatureSelectionState}) to use in the PCA.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be one of:\n     *\n     * - `\"none\"`, in which case nothing is done using the sample information. \n     * - `\"regress\"`, where linear regression is applied to remove mean differences between samples.\n     * - `\"weight\"`, where samples are weighted so that they contribute equally regardless of the number of cells.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_hvgs, num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#feat.changed || num_hvgs !== this.#parameters.num_hvgs) {\n            if (this.valid()) {\n                choose_hvgs(num_hvgs, this.#feat, this.#cache);\n                this.changed = true;\n            }\n\n            this.#parameters.num_hvgs = num_hvgs;\n        }\n\n        if (this.changed || this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            utils.freeCache(this.#cache.pcs);\n\n            if (this.valid()) {\n                let sub = this.#cache.hvg_buffer;\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                this.#cache.pcs = scran.runPCA(mat, { features: sub, numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_hvgs: 2000,\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******* Internals ********\n **************************/\n\nfunction choose_hvgs(num_hvgs, feat, cache) {\n    var sorted_resids = feat.fetchSortedResiduals();\n    var sub = utils.allocateCachedArray(sorted_resids.length, \"Uint8Array\", cache, \"hvg_buffer\");\n\n    if (num_hvgs < sorted_resids.length) {\n        var threshold_at = sorted_resids[sorted_resids.length - num_hvgs];\n        var unsorted_resids = feat.fetchResults().residuals({ copy: false });\n        sub.array().forEach((element, index, array) => {\n            array[index] = unsorted_resids[index] >= threshold_at;\n        });\n    } else {\n        sub.fill(1);\n    }\n\n    return sub;\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm, feat) {\n    let ghandle = handle.open(\"rna_pca\" in handle.children ? \"rna_pca\" : \"pca\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters = { \n            num_hvgs: phandle.open(\"num_hvgs\", { load: true }).values[0],\n            num_pcs: phandle.open(\"num_pcs\", { load: true }).values[0]\n        };\n\n        // For back-compatibility.\n        if (\"block_method\" in phandle.children) {\n            parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n            if (parameters.block_method == \"mnn\") {\n                parameters.block_method = \"weight\";\n            }\n        } else {\n            parameters.block_method = \"none\";\n        }\n    }\n\n    let output;\n    let cache = {};\n    try {\n        if (feat.valid()) {\n            choose_hvgs(parameters.num_hvgs, feat, cache);\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"pcs\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n        }\n\n        output = new RnaPcaState(filter, norm, feat, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.hvg_buffer);\n        utils.freeCache(cache.pcs);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as rutils from \"../readers/index.js\";\n\nconst baseUrl = \"https://github.com/kanaverse/kana-special-features/releases/download/v1.0.0\";\n\nexport const step_name = \"rna_quality_control\";\n\n/**\n * Results of computing per-cell RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellRnaQcMetricsResults.html) for details.\n *\n * @external PerCellRnaQcMetricsResults\n */\n\n/**\n * Suggested filters for the RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestRnaQcFiltersResults.html) for details.\n *\n * @external SuggestRnaQcFiltersResults\n */\n\n/**\n * This step applies quality control on the RNA count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellRnaQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellRnaQcMetrics)\n * and [`suggestRnaQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestRnaQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n    #automatic;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.#automatic = false;\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n    \n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        let output = { ...this.#parameters }; // avoid pass-by-reference links.\n        output.species = bioc.CLONE(output.species);\n        return output;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:SuggestRnaQcFiltersResults} Result of filtering on the RNA-derived QC metrics.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {external:PerCellRnaQcMetricsResults} RNA-derived QC metrics.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults () {\n        return {\n            automatic: true,\n            gene_id_column: null,\n            use_reference_mito: true,\n            species: [],\n            gene_id_type: \"ENSEMBL\",\n            mito_prefix: \"mt-\",\n            nmads: 3\n        };\n    }\n\n    static configureFeatureParameters(use_reference_mito, guesses) {\n        let best_key = null;\n        let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n        if (\"row_names\" in guesses) {\n            let val = guesses.row_names;\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n            }\n        }\n\n        for (const [key, val] of Object.entries(guesses.columns)) {\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n                best_key = key;\n            }\n        }\n\n        return {\n            gene_id_column: best_key,\n            species: [best.species],\n            gene_id_type: best.type.toUpperCase()\n        };\n    }\n\n    /**\n     * Array of strings containing the taxonomy IDs for species where mitochondrial gene lists are available.\n     * @type {Array}\n     */\n    static mitochondriaSpecies = [ \n        \"9606\",  // Mouse\n        \"10090\", // Human\n        \"6239\",  // C. elegans\n        \"10116\", // Rat\n        \"9541\",  // M. fascicularis\n        \"7227\",  // Fly\n        \"7955\",  // Zebrafish\n        \"9598\"   // Chimp\n    ];\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    async #acquire_reference(species, feature_type) {\n        let output = new Set;\n        let mito_lists = RnaQualityControlState.#mito_lists;\n\n        for (const s of species) {\n            let target = s + \"-mito-\" + feature_type.toLowerCase() + \".txt.gz\";\n            if (!(target in mito_lists)) {\n                let contents = await RnaQualityControlState.#downloadFun(baseUrl + \"/\" + target);\n                let lines = await rutils.readLines2(contents, { compression: \"gz\" });\n                mito_lists[target] = lines;\n            }\n\n            mito_lists[target].forEach(x => { output.add(x); });\n        }\n\n        return output;\n    }\n\n    static #mito_lists = {};\n\n    /**\n     * Flush all cached lists of mitochondrial genes.\n     *\n     * By default, {@linkcode RnaQualityControlState#compute compute} will cache the mitochondrial gene lists in a static member for re-use across {@linkplain RnaQualityControlState} instances.\n     * These cached lists are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        RnaQualityControlState.#mito_lists = {};\n        return;\n    }\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * Specify a function to download the reference mitochondrial gene lists.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step. \n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        let previous = RnaQualityControlState.#downloadFun;\n        RnaQualityControlState.#downloadFun = fun;\n        return previous;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If set to `true`, the following logic is applied:\n     *\n     * - If `use_reference_mito = true`, the annotation column that best matches human/mouse Ensembl/symbols is set as `gene_id_column`.\n     *   Based on the identified species and feature type, `species` and `gene_id_type` are also set.\n     * - If `use_reference_mito = false`, the annotation column that best matches human/mouse symbols is set as `gene_id_column`.\n     *\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the feature annotations that contains the gene identifiers for the RNA modality.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {boolean} parameters.use_reference_mito - Whether to use the reference lists of mitochondrial genes.\n     * If `false`, mitochondrial genes are instead identified from their prefix.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species to use to obtain a reference list of mitochondrial genes.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode RnaQualityControlState#mitochondriaSpecies mitochondriaSpecies}).\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Name of the feature type in the reference list of mitochondrial genes.\n     * This can be any one of `\"ENSEMBL\"`, `\"SYMBOL\"`, or `\"ENTREZ\"`.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.mito_prefix - Case-insensitive prefix to use to identify mitochondrial genes from the dataset.\n     * Only used when `use_reference_mito = false`; in such cases, `gene_id_column` should point to symbols.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     *\n     * @return The object is updated with the new results.\n     * @async\n     */\n    async compute(parameters) {\n        let { mito_prefix, nmads } = parameters;\n        let automatic;\n        let use_reference_mito;\n        let gene_id_column;\n        let species;\n        let gene_id_type;\n\n        // Some back-compatibility here.\n        if (\"use_reference_mito\" in parameters) {\n            automatic = parameters.automatic;\n            use_reference_mito = parameters.use_reference_mito;\n            gene_id_column = parameters.gene_id_column;\n            species = parameters.species;\n            gene_id_type = parameters.gene_id_type;\n        } else {\n            automatic = true;\n            use_reference_mito = parameters.use_mito_default;\n            let def = RnaQualityControlState.defaults();\n            gene_id_column = def.gene_id_column;\n            species = def.species;\n            gene_id_type = def.gene_id_type;\n        }\n\n        this.changed = false;\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            use_reference_mito !== this.#parameters.use_reference_mito || \n            (\n                !automatic && \n                (\n                    gene_id_column !== this.#parameters.gene_id_column || \n                    (!use_reference_mito && mito_prefix !== this.#parameters.mito_prefix) ||\n                    (\n                        use_reference_mito && \n                        (\n                            utils.changedParameters(species, this.#parameters.species) || \n                            gene_id_type !== this.#parameters.gene_id_type\n                        )\n                    )\n                )\n            ) \n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                let gene_id_column2 = gene_id_column;\n                let species2 = species;\n                let gene_id_type2 = gene_id_type;\n\n                if (automatic) {\n                    let guesses = this.#inputs.guessRnaFeatureTypes();\n                    let backcomp = RnaQualityControlState.configureFeatureParameters(use_reference_mito, guesses);\n                    gene_id_column2 = backcomp.gene_id_column;\n                    species2 = backcomp.species;\n                    gene_id_type2 = backcomp.gene_id_type;\n                }\n\n                var gene_info = this.#inputs.fetchFeatureAnnotations()[\"RNA\"];\n                let val = (gene_id_column2 == null ? gene_info.rowNames() : gene_info.column(gene_id_column2));\n                var subsets = utils.allocateCachedArray(gene_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (val !== null) {\n                    if (use_reference_mito) {\n                        let lists = await this.#acquire_reference(species2, gene_id_type2);\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if (lists.has(x)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    } else if (mito_prefix !== null) {\n                        var lower_mito = mito_prefix.toLowerCase();\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if(x.toLowerCase().startsWith(lower_mito)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"RNA\");\n                this.#cache.metrics = scran.perCellRnaQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.gene_id_column = gene_id_column;\n        this.#parameters.use_reference_mito = use_reference_mito;\n        this.#parameters.species = bioc.CLONE(species); // avoid pass-by-reference behavior.\n        this.#parameters.gene_id_type = gene_id_type;\n        this.#parameters.mito_prefix = mito_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestRnaQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let ghandle = handle.open(\"rna_quality_control\" in handle.children ? \"rna_quality_control\" : \"quality_control\");\n\n    let parameters = RnaQualityControlState.defaults(); \n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.use_mito_default = phandle.open(\"use_mito_default\", { load: true }).values[0] > 0;\n        parameters.mito_prefix = phandle.open(\"mito_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n    }\n\n    let output;\n    let cache = {};\n    try {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"metrics\" in rhandle.children) { // QC metrics may not be reported if skipped.\n            let mhandle = rhandle.open(\"metrics\");\n            let sums = mhandle.open(\"sums\", { load: true }).values;\n\n            cache.metrics = scran.emptyPerCellRnaQcMetricsResults(sums.length, 1);\n            cache.metrics.sums({ fillable: true }).set(sums);\n\n            let detected = mhandle.open(\"detected\", { load: true }).values;\n            cache.metrics.detected({ fillable: true }).set(detected);\n            let proportions = mhandle.open(\"proportion\", { load: true }).values;\n            cache.metrics.subsetProportions(0, { fillable: true }).set(proportions);\n        }\n\n        if (\"thresholds\" in rhandle.children) { // if skip=true, QC thresholds may not be reported.\n            let discards = rhandle.open(\"discards\", { load: true }).values; \n            cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n            cache.discard_buffer.set(discards);\n\n            let thandle = rhandle.open(\"thresholds\");\n            let thresholds_sums = thandle.open(\"sums\", { load: true }).values;\n            let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n            let thresholds_proportion = thandle.open(\"proportion\", { load: true }).values;\n\n            cache.filters = scran.emptySuggestRnaQcFiltersResults(1, thresholds_sums.length);\n            cache.filters.thresholdsSums({ fillable: true }).set(thresholds_sums);\n            cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n            cache.filters.thresholdsSubsetProportions(0, { fillable: true }).set(thresholds_proportion);\n        }\n\n        output = new RnaQualityControlState(inputs, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.metrics);\n        utils.freeCache(cache.filters)\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\n\nexport const step_name = \"snn_graph_cluster\";\n\n/**\n * This step does SNN graph clustering based on the neighbor search index built by {@linkplain NeighborIndexState}.\n * This wraps [`clusterSNNGraph`](https://kanaverse.github.io/scran.js/global.html#clusterSNNGraph) \n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class SnnGraphClusterState {\n    #index;\n    #parameters;\n    #cache;\n\n    constructor(index, parameters = null, cache = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.neighbors);\n        utils.freeCache(this.#cache.graph);\n        utils.freeCache(this.#cache.clusters);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode SnnGraphClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw \"cannot fetch SNN clusters from an invalid state\";\n        } else {\n            return this.#cache.clusters.membership({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"clusters\" in this.#cache;\n    }\n\n    #compute_neighbors(k) {\n        this.#cache.neighbors = scran.findNearestNeighbors(this.#index.fetchIndex(), k);\n        return;\n    }\n\n    #compute_graph(scheme) {\n        if (!(\"neighbors\" in this.#cache)) { // need to check as reloaded state will not populate the internals.\n            this.#compute_neighbors(this.#parameters.k);\n        }\n        this.#cache.graph = scran.buildSNNGraph(this.#cache.neighbors, { scheme: scheme });\n        return;\n    }\n\n    #compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps) {\n        if (!(\"graph\" in this.#cache)) {\n            this.#compute_graph(this.#parameters.scheme);\n        }\n        this.#cache.clusters = scran.clusterSNNGraph(this.#cache.graph, {\n            method: algorithm,\n            multiLevelResolution: multilevel_resolution,\n            leidenResolution: leiden_resolution,\n            leidenModularityObjective: true, // avoid problems with unstable interpretation of leidenResolution.\n            walktrapSteps: walktrap_steps\n        });\n        return;\n    }\n\n    static defaults() {\n        return { \n            k: 10,\n            scheme: \"rank\",\n            algorithm: \"multilevel\",\n            multilevel_resolution: 1,\n            leiden_resolution: 1,\n            walktrap_steps: 4\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `snn_graph_cluster` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of nearest neighbors used to construct the graph.\n     * @param {string} parameters.scheme - Weighting scheme for graph construction.\n     * This can be one of `\"rank\"`, `\"number\"` or `\"jaccard\"`.\n     * @param {string} parameters.algorithm - Algorithm to use for community detection.\n     * This can be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n     * @param {number} parameters.multilevel_resolution - Resolution of the multi-level community detection.\n     * @param {number} parameters.leiden_resolution - Resolution of the Leiden community detection.\n     * @param {number} parameters.walktrap_steps - Number of merge steps for the Walktrap algorithm.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k, scheme, algorithm, multilevel_resolution, leiden_resolution, walktrap_steps } = parameters;\n        this.changed = false;\n\n        if (this.#index.changed || k !== this.#parameters.k) {\n            utils.freeCache(this.#cache.neighbors);\n            if (run_me) {\n                this.#compute_neighbors(k);\n            } else {\n                delete this.#cache.neighbors; // ensuring that this is re-run on future calls to compute() with run_me = true.\n            }\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        if (this.changed || scheme !== this.#parameters.scheme) {\n            utils.freeCache(this.#cache.graph);\n            if (run_me) {\n                this.#compute_graph(scheme);\n            } else {\n                delete this.#cache.graph;\n            }\n            this.#parameters.scheme = scheme;\n            this.changed = true \n        }\n\n        if (this.changed \n            || algorithm !== this.#parameters.algorithm \n            || multilevel_resolution !== this.#parameters.multilevel_resolution \n            || leiden_resolution !== this.#parameters.leiden_resolution \n            || walktrap_steps !== this.#parameters.walktrap_steps \n            || (!this.#valid() && run_me))\n        {\n            utils.freeCache(this.#cache.clusters);\n            if (run_me) {\n                this.#compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps);\n            } else {\n                delete this.#cache.clusters;\n            }\n\n            this.#parameters.algorithm = algorithm;\n            this.#parameters.multilevel_resolution = multilevel_resolution;\n            this.#parameters.leiden_resolution = leiden_resolution;\n            this.#parameters.walktrap_steps = walktrap_steps;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, index) {\n    let ghandle = handle.open(\"snn_graph_cluster\");\n\n    let parameters = SnnGraphClusterState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters.k = phandle.open(\"k\", { load: true }).values[0];\n\n        parameters.scheme = phandle.open(\"scheme\", { load: true }).values[0];\n        if (typeof parameters.scheme !== \"string\") { // because I stuffed up and tried to save a string as an int in v1.0, oops.\n            parameters.scheme = \"rank\";\n        }\n\n        if (\"algorithm\" in phandle.children) {\n            // v3.0\n            parameters.algorithm = phandle.open(\"algorithm\", { load: true }).values[0];\n            parameters.multilevel_resolution = phandle.open(\"multilevel_resolution\", { load: true }).values[0];\n            parameters.leiden_resolution = phandle.open(\"leiden_resolution\", { load: true }).values[0];\n            parameters.walktrap_steps = phandle.open(\"walktrap_steps\", { load: true }).values[0];\n        } else {\n            // v2.0\n            parameters.multilevel_resolution = phandle.open(\"resolution\", { load: true }).values[0];\n        }\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        if (\"clusters\" in rhandle.children) {\n            let clusters = rhandle.open(\"clusters\", { load: true }).values;\n            cache.clusters = scran.emptyClusterSNNGraphResults(clusters.length, 1);\n            cache.clusters.setBest(0); // whatever.\n            cache.clusters.membership({ fillable: true }).set(clusters);\n        }\n    }\n\n    return new SnnGraphClusterState(index, parameters, cache);\n}\n\n\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"./abstract/worker_parent.js\";\n\n/**\n * This creates a t-SNE embedding based on the neighbor index constructed by {@linkplain NeighborIndexState}.\n * This wraps [`runTSNE`](https://kanaverse.github.io/scran.js/global.html#runTSNE)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class TsneState {\n    #index;\n    #parameters;\n    #reloaded;\n\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createTsneWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, vizutils.scranOptions);\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to create a copy of the coordinates,\n     * if the caller might mutate them.\n     *\n     * @return {object} Object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     *\n     * @async\n     */\n    async fetchResults({ copy = true } = {}) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n        \n            output.iterations = this.#parameters.iterations;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"FETCH\" });\n        }\n    }\n\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #core(perplexity, iterations, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            var k = scran.perplexityToNeighbors(perplexity);\n            nn_out = vizutils.computeNeighbors(this.#index, k);\n        }\n\n        let args = {\n            \"perplexity\": perplexity,\n            \"iterations\": iterations,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the t-SNE runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker_id, args, nn_out);\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `tsne` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.perplexity - Number specifying the perplexity for the probability calculations.\n     * @param {number} parameters.iterations - Number of iterations to run the algorithm.\n     * @param {boolean} parameters.animate - Whether to process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return t-SNE coordinates are computed in parallel on a separate worker thread.\n     * A promise is returned that resolves when those calculations are complete.\n     */\n    compute(parameters) {\n        let { perplexity, iterations, animate } = parameters;\n\n        let same_neighbors = (!this.#index.changed && perplexity === this.#parameters.perplexity);\n        if (same_neighbors && iterations == this.#parameters.iterations) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(perplexity, iterations, animate, !same_neighbors);\n\n        this.#parameters.perplexity = perplexity;\n        this.#parameters.iterations = iterations;\n        this.#parameters.animate = animate;\n\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******* Animators *********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.perplexity, this.#parameters.iterations, true, true);\n\n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => {\n                    return {\n                        \"type\": \"tsne_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"RERUN\" });\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport async function unserialize(handle, index) {\n    let ghandle = handle.open(\"tsne\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            perplexity: phandle.open(\"perplexity\", { load: true }).values[0],\n            iterations: phandle.open(\"iterations\", { load: true }).values[0],\n            animate: phandle.open(\"animate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let reloaded;\n    {\n        let rhandle = ghandle.open(\"results\");\n        reloaded = {\n            x: rhandle.open(\"x\", { load: true }).values,\n            y: rhandle.open(\"y\", { load: true }).values\n        };\n    }\n\n    let output = new TsneState(index, parameters, reloaded);\n    await output.ready();\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"./abstract/worker_parent.js\";\n\n/**\n * This creates a UMAP embedding based on the neighbor index constructed at {@linkplain NeighborIndexState}.\n * This wraps [`runUMAP`](https://kanaverse.github.io/scran.js/global.html#runUMAP)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class UmapState {\n    #index;\n    #parameters;\n    #reloaded;\n\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createUmapWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, vizutils.scranOptions);\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to create a copy of the coordinates,\n     * if the caller might mutate them.\n     *\n     * @return {object} Object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     *\n     * @async\n     */\n    async fetchResults({ copy = true } = {}) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n\n            output.iterations = this.#parameters.num_epochs;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"FETCH\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #core(num_neighbors, num_epochs, min_dist, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            nn_out = vizutils.computeNeighbors(this.#index, num_neighbors);\n        }\n\n        let args = {\n            \"num_neighbors\": num_neighbors,\n            \"num_epochs\": num_epochs,\n            \"min_dist\": min_dist,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the UMAP runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker_id, args, nn_out);\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `umap` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_neighbors - Number of neighbors to use to construct the simplicial sets.\n     * @param {number} parameters.num_epochs - Number of epochs to run the algorithm.\n     * @param {number} parameters.min_dist - Number specifying the minimum distance between points.\n     * @param {boolean} parameters.animate - Whether to process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return UMAP coordinates are computed in parallel on a separate worker thread.\n     * A promise that resolves when the calculations are complete.\n     */\n    compute(parameters) {\n        let { num_neighbors, num_epochs, min_dist, animate } = parameters;\n\n        let same_neighbors = (!this.#index.changed && this.#parameters.num_neighbors === num_neighbors);\n        if (same_neighbors && num_epochs === this.#parameters.num_epochs && min_dist === this.#parameters.min_dist) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(num_neighbors, num_epochs, min_dist, animate, !same_neighbors);\n\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.num_epochs = num_epochs;\n        this.#parameters.min_dist = min_dist;\n        this.#parameters.animate = animate;\n\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.num_neighbors, this.#parameters.num_epochs, this.#parameters.min_dist, true, true);\n      \n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => { \n                    return {\n                        \"type\": \"umap_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"RERUN\" });\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport async function unserialize(handle, index) {\n    let ghandle = handle.open(\"umap\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            num_neighbors: phandle.open(\"num_neighbors\", { load: true }).values[0],\n            num_epochs: phandle.open(\"num_epochs\", { load: true }).values[0],\n            min_dist: phandle.open(\"min_dist\", { load: true }).values[0],\n            animate: phandle.open(\"animate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let reloaded;\n    {\n        let rhandle = ghandle.open(\"results\");\n        reloaded = {\n            x: rhandle.open(\"x\", { load: true }).values,\n            y: rhandle.open(\"y\", { load: true }).values\n        };\n    }\n\n    let output = new UmapState(index, parameters, reloaded);\n    await output.ready();\n    return output;\n}\n","export function registerCallback(worker, callback) {\n    worker.onmessage = callback;\n    return;\n}\n\nexport function sendMessage(worker, message, transfer) {\n    worker.postMessage(message, transfer);\n    return;\n}\n\nexport function terminateWorker(worker) {\n    worker.terminate();\n    return;\n}\n","import * as scran from \"scran.js\";\n\nexport function freeCache(object) {\n    // Just an alias for back-compatibility.\n    scran.free(object);\n    return;\n}\n\nfunction changedParametersIllegal(x, y, xskip, yskip) {\n    // Failing if this is a TypedArray or ArrayBuffer;\n    // we shouldn't be seeing these things here anyway.\n    if (!xskip) {\n        if (x instanceof ArrayBuffer || ArrayBuffer.isView(x)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n    if (!yskip) {\n        if (y instanceof ArrayBuffer || ArrayBuffer.isView(y)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n}\n\nexport function changedParameters(x, y) {\n    if (typeof x != typeof y) {\n        changedParametersIllegal(x, y, false, false);\n        return true;\n    } else if (typeof x != \"object\") {\n        return x != y;\n    }\n\n    //Handling nulls (which are objects).\n    let xnull = x === null;\n    let ynull = y === null;\n    if (xnull !== ynull) {\n        changedParametersIllegal(x, y, xnull, ynull);\n        return true;\n    } else if (xnull) {\n        return false;\n    }\n\n    // Handling arrays (which are also objects).\n    let xarr = x instanceof Array;\n    let yarr = y instanceof Array;\n    if (xarr != yarr) {\n        changedParametersIllegal(x, y, xarr, yarr);\n        return true;\n    } else if (xarr) {\n        if (x.length != y.length) {\n            return true;\n        }\n\n        for (var i = 0; i < x.length; i++) {\n            if (changedParameters(x[i], y[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    changedParametersIllegal(x, y, false, false);\n    \n    // Now actually handling objects. We don't \n    // worry about the order of the keys here.\n    let xkeys = Object.keys(x);\n    let ykeys = Object.keys(y);\n    if (xkeys.length != ykeys.length) {\n        return true;\n    }\n\n    xkeys.sort();\n    ykeys.sort();\n    for (var i = 0; i < xkeys.length; i++) {\n        if (xkeys[i] != ykeys[i]) {\n            return true;\n        }\n    }\n\n    for (const k of xkeys) {\n        if (changedParameters(x[k], y[k])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n\n        // Views also trigger reallocation, because it is assumed that the\n        // caller of this function does not own the view, but downstream\n        // uses of the array will involve writing to it.\n        if (candidate.size != size || candidate.constructor.className != type || candidate.owner !== null) { \n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = scran.createUint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = scran.createInt32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = scran.createFloat64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function findValidUpstreamStates(states, msg) {\n    let to_use = [];\n    for (const [k, v] of Object.entries(states)) {\n        if (v.valid()) {\n            to_use.push(k);\n        }\n    }\n    if (to_use.length == 0) {\n        throw new Error(\"expected at least one valid upstream \" + msg + \" state\");\n    }\n    return to_use;\n}\n\nexport function checkIndices(indices, max) {\n    if (max !== null) {\n        for (const i of indices) {\n            if (i < 0 || i >= max) {\n                throw new Error(\"subset indices are out of range\");\n            }\n        }\n    }\n\n    for (var i = 1; i < indices.length; i++) {\n        if (indices[i] <= indices[i-1]) {\n            throw new Error(\"subset indices must be sorted and unique\");\n        }\n    }\n}\n\nexport async function defaultDownload(url) {\n    let resp = await fetch(url);\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch content at \" + url + \"(\" + resp.status + \")\");\n    }\n    return new Uint8Array(await resp.arrayBuffer());\n}\n\nexport function guessFeatureTypes(genes) {\n    let output = { columns: {} };\n\n    let rn = genes.rowNames();\n    if (rn !== null) {\n        output.row_names = scran.guessFeatures(rn, { forceTaxonomy: true });\n    }\n\n    for (const key of genes.columnNames()) {\n        let curcol = genes.column(key);\n        if (curcol instanceof Array) {\n            output.columns[key] = scran.guessFeatures(genes.column(key), { forceTaxonomy: true });\n        }\n    }\n\n    return output;\n}\n\nexport function subsetInvalidFactors(arrays) {\n    let N = arrays[0].length;\n    let output = { arrays: [], retain: null };\n\n    let invalid = new Uint8Array(N);\n    invalid.fill(0);\n    for (const x of arrays) {\n        let transformed = scran.factorize(x, { action: \"none\", placeholder: -1 });\n        output.arrays.push(transformed);\n        transformed.ids.forEach((y, i) => {\n            if (y == -1) {\n                invalid[i] = 1;\n            }\n        });\n    }\n\n    let num_invalid = 0;\n    invalid.forEach(y => { num_invalid += y; });\n    if (num_invalid == 0) {\n        return output;\n    }\n\n    let retain = new Int32Array(N - num_invalid);\n    {\n        let counter = 0;\n        for (var i = 0; i < N; i++) {\n            if (invalid[i] == 0) {\n                retain[counter] = i;\n                counter++;\n            }\n        }\n    }\n    output.retain = retain;\n\n    for (var i = 0; i < output.arrays.length; i++) {\n        let x = output.arrays[i];\n        let new_ids = scran.subsetBlock(x.ids, retain);\n        let remapping = scran.dropUnusedBlock(new_ids);\n        let new_levels = remapping.map(i => x.levels[i]);\n\n        scran.free(x.ids);\n        x.ids = new_ids;\n        x.levels = new_levels;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\n\nexport const summaries2int = { \"min\": 0, \"mean\": 1, \"min_rank\": 4 };\n\nexport function unserializeGroupStats(handle, permuter, { no_summaries = false, compute_auc = true } = {}) {\n    let output = {};\n    for (const x of [ \"means\", \"detected\" ]) {\n        output[x] = permuter(handle.open(x, { load: true }).values);\n    }\n\n    for (const i of [ \"lfc\", \"delta_detected\", \"auc\", \"cohen\" ]) {\n        if (i == \"auc\" && !compute_auc) {\n            continue;\n        }\n\n        if (no_summaries) {\n            output[i] = handle.open(i, { load: true }).values;\n        } else {\n            let rhandle = handle.open(i);\n            let current = {};\n            for (const j of Object.keys(rhandle.children)) {\n                current[j] = permuter(rhandle.open(j, { load: true }).values);\n            }\n            output[i] = current;\n        }\n    }\n\n    return output;\n}\n\nexport function fillGroupStats(object, i, vals) {\n    object.means(i, { copy: false }).set(vals.means);\n    object.detected(i, { copy: false }).set(vals.detected);\n\n    for (const [s, v] of Object.entries(vals.cohen)) {\n        object.cohen(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.lfc)) {\n        object.lfc(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.delta_detected)) {\n        object.deltaDetected(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    if (\"auc\" in vals) {\n        for (const [s, v] of Object.entries(vals.auc)) {\n            object.auc(i, { summary: summaries2int[s], copy: false }).set(v);\n        }\n    }\n}\n\n/**\n * Report marker results for a given group or cluster, ordered so that the strongest candidate markers appear first.\n *\n * @param {ScoreMarkersResults} results - The marker results object generated by the `scoreMarkers` function in **scran.js**.\n * @param {number} group - Integer specifying the group or cluster of interest.\n * Any number can be used if it was part of the `groups` passed to `scoreMarkers`.\n * @param {string} rankEffect - Summarized effect size to use for ranking markers.\n * This should follow the format of `<effect>-<summary>` where `<effect>` may be `lfc`, `cohen`, `auc` or `delta_detected`,\n * and `<summary>` may be `min`, `mean` or `min-rank`.\n *\n * @return An object containing the marker statistics for the selection, sorted by the specified effect and summary size from `rankEffect`.\n * This contains:\n *   - `means`: a Float64Array of length equal to the number of genes, containing the mean expression within the selection.\n *   - `detected`: a Float64Array of length equal to the number of genes, containing the proportion of cells with detected expression inside the selection.\n *   - `lfc`: a Float64Array of length equal to the number of genes, containing the log-fold changes for the comparison between cells inside and outside the selection.\n *   - `delta_detected`: a Float64Array of length equal to the number of genes, containing the difference in the detected proportions between cells inside and outside the selection.\n */\nexport function formatMarkerResults(results, group, rankEffect) {\n    if (!rankEffect || rankEffect === undefined) {\n        rankEffect = \"cohen-min-rank\";\n    }\n\n    var ordering;\n    {\n        // Choosing the ranking statistic. Do NOT do any Wasm allocations\n        // until 'ranking' is fully consumed!\n        let ranking;\n        let increasing = false;\n      \n        let index = 1;\n        if (rankEffect.match(/-min$/)) {\n            index = 0;\n        } else if (rankEffect.match(/-min-rank$/)) {\n            increasing = true;\n            index = 4;\n        }\n\n        if (rankEffect.match(/^cohen-/)) {\n            ranking = results.cohen(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^auc-/)) {\n            ranking = results.auc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^lfc-/)) {\n            ranking = results.lfc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^delta-d-/)) {\n            ranking = results.deltaDetected(group, { summary: index, copy: false });\n        } else {\n            throw \"unknown rank type '\" + rankEffect + \"'\";\n        }\n  \n        // Computing the ordering based on the ranking statistic.\n        ordering = new Int32Array(ranking.length);\n        for (var i = 0; i < ordering.length; i++) {\n            ordering[i] = i;\n        }\n        if (increasing) {\n            ordering.sort((f, s) => (ranking[f] - ranking[s]));\n        } else {\n            ordering.sort((f, s) => (ranking[s] - ranking[f]));\n        }\n    }\n  \n    // Apply that ordering to each statistic of interest.\n    var reorder = function(stats) {\n        var thing = new Float64Array(stats.length);\n        for (var i = 0; i < ordering.length; i++) {\n            thing[i] = stats[ordering[i]];\n        }\n        return thing;\n    };\n  \n    var stat_detected = reorder(results.detected(group, { copy: false }));\n    var stat_mean = reorder(results.means(group, { copy: false }));\n    var stat_lfc = reorder(results.lfc(group, { summary: 1, copy: false }));\n    var stat_delta_d = reorder(results.deltaDetected(group, { summary: 1, copy: false }));\n\n    return {\n        \"ordering\": ordering,\n        \"means\": stat_mean,\n        \"detected\": stat_detected,\n        \"lfc\": stat_lfc,\n        \"delta_detected\": stat_delta_d\n    };\n}\n\nexport function locateVersusCache(left, right, cache) {\n    let left_small = left < right;\n\n    let bigg = (left_small ? right : left);\n    if (!(bigg in cache)) {\n        cache[bigg] = {};\n    }\n    let biggversus = cache[bigg];\n\n    let smal = (left_small ? left : right); \n    let rerun = !(smal in biggversus);\n    if (rerun) {\n        biggversus[smal] = {};\n    }\n\n    return { \n        cached: biggversus[smal],\n        run: rerun,\n        left_small: left_small\n    };\n}\n\nexport function freeVersusResults(cache) {\n    if (cache) {\n        for (const v of Object.values(cache)) {\n            for (const v2 of Object.values(v)) {\n                for (const m of Object.values(v2)) {\n                    scran.free(m);\n                }\n            }\n        }\n        for (const k of Object.keys(cache)) {\n            delete cache[k];\n        }\n    }\n}\n\nexport function computeVersusResults(matrices, clusters, block, keep, cache, lfc_threshold, compute_auc) {\n    let new_block = null;\n    if (block !== null) {\n        new_block = scran.subsetBlock(block, keep);\n        scran.dropUnusedBlock(new_block);\n    }\n\n    for (const modality of matrices.available()) {\n        let modmat = matrices.get(modality);\n        let sub;\n        try {\n            sub = scran.subsetColumns(modmat, keep);\n            cache[modality] = scran.scoreMarkers(sub, clusters, { block: new_block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        } finally {\n            scran.free(sub);\n        }\n    }\n}\n","import * as utils from \"./general.js\";\n\nexport function subsetSums(qc, filter, mat, cache, name) {\n    let output = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache, name);\n    let discards = filter.fetchDiscards();\n\n    // unsafe, so no more Wasm allocations past this point. \n    let sums = qc.fetchMetrics().sums({ copy: false }); \n\n    if (discards == null) {\n        output.set(sums);\n    } else {\n        let oarr = output.array();\n        var j = 0;\n        discards.forEach((x, i) => {\n            if (!x) {\n                if (j == output.length) {\n                    throw new Error(\"normalization and filtering are not in sync\");\n                }\n                oarr[j] = sums[i];\n                j++;\n            }\n        });\n        if (j !== output.length) {\n            throw new Error(\"normalization and filtering are not in sync\");\n        }\n    }\n\n    return output;\n}\n","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","export function areArraysEqual(x, y) {\n    if (x.length !== y.length) {\n        return false;\n    }\n\n    for (var i = 0; i < x.length; i++) {\n        if (x[i] != y[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function isArrayLike(x) {\n    return x.constructor == Array || ArrayBuffer.isView(x);\n}\n\nexport function chooseArrayConstructors(con1, con2) {\n    if (con1 == con2) {\n        return con1;\n    }\n\n    if (con1 == Array || con2 == Array) {\n        return Array;\n    }\n\n    if (con1 == BigInt64Array || con2 == BigInt64Array || con1 == BigUint64Array || con2 == BigUint64Array) {\n        return Array;\n    }\n\n    return Float64Array;\n}\n\nexport function formatLengthError(left, right) {\n    return new Error(left + \" should have length equal to \" + right);\n}\n\nexport function checkStringArray(names, typeMessage) {\n    for (const x of names) {\n        if (typeof x !== \"string\") {\n            throw new Error(typeMessage + \" array should only contain strings\");\n        }\n    }\n}\n\nexport function checkNamesArray(names, typeMessage, numExpected, lengthMessage) {\n    checkStringArray(names, typeMessage);\n    if (names.length != numExpected) {\n        throw formatLengthError(typeMessage + \" array\", lengthMessage);\n    }\n}\n\nexport function sum(y) {\n    let total = 0;\n    y.forEach(x => { total += x; });\n    return total;\n}\n\nexport function combineNames(all_names, all_lengths, total_n = null) {\n    let all_null = true;\n    for (var i = 0; i < all_names.length; i++) {\n        if (all_names[i] !== null) {\n            all_null = false;\n        }\n    }\n\n    if (all_null) {\n        return null;\n    }\n\n    if (total_n === null) {\n        total_n = sum(all_lengths);\n    }\n\n    let output = new Array(total_n);\n    let counter = 0;\n    for (var i = 0; i < all_names.length; i++) {\n        let n = all_names[i];\n        if (n === null) {\n            output.fill(\"\", counter, counter + all_lengths[i]);\n            counter += all_lengths[i];\n        } else {\n            n.forEach(x => {\n                output[counter] = x;\n                counter++;\n            });\n        }\n    }\n\n    return output;\n}\n\nexport function createSequence(n) {\n    let output = new Int32Array(n);\n    for (var i = 0; i < n; i++) {\n        output[i] = i;\n    }\n    return output;\n}\n\nexport function isSorted(n, cmp) {\n    for (var i = 1; i < n; ++i) {\n        if (cmp(i-1, i) > 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function convertToInt32Array(x) {\n    if (x instanceof Int32Array) {\n        return x;\n    } else {\n        return new Int32Array(x);\n    }\n}\n\nexport function checkNonNegative(x, msg) {\n    for (const y of x) {\n        if (y < 0) {\n            throw new Error(\"detected a negative entry in '\" + msg + \"'\");\n        }\n    }\n}\n\nexport function object2map(x) {\n    if (x.constructor == Object) {\n        let replacement = new Map;\n        for (const [k, v] of Object.entries(x)) {\n            replacement.set(k, v);\n        }\n        return replacement;\n    } \n\n    if (!(x instanceof Map)) {\n        throw new Error(\"'x' should be either an object or Map\");\n    }\n    return x;\n}\n","/**\n * @param {Array|TypedArray} x - Array of values to be interpreted as truthy or falsey.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.not=false] - Whether to select the entries of `x` that are falsey.\n *\n * @return {Array} Array of indices of the entries of `x` that are truthy (if `not=false`) or falsey (if `not=true`).\n * This array is guaranteed to be sorted in ascending order.\n */\nexport function which(x, { not = false } = {}) {\n    let output = [];\n    x.forEach((y, i) => {\n        if ((!y) == not) {\n            output.push(i);\n        }\n    });\n    return output;\n}\n\n/**\n * Given a factor, return the indices corresponding to each level.\n * This can be used in subsequent {@linkcode splitRows} calls.\n *\n * @param {Array|TypedArray} factor - Array containing the factor of interest.\n *\n * @return {Object} Object where each key is a factor level and each value is an array containing the indices corresponding to that level in `factor`.\n */\nexport function presplitFactor(factor) {\n    let by = {};\n    factor.forEach((x, i) => {\n        if (!(x in by)) {\n            by[x] = [];\n        }\n        by[x].push(i);\n    });\n    return by;\n}\n","import * as utils from \"./utils.js\";\nimport * as misc from \"./miscellaneous.js\";\n\n/**\n * Compute the length of a vector-like object.\n *\n * For Array and TypedArrays, this just returns the `length` property directly.\n *\n * Custom classes should provide a `_bioconductor_LENGTH` method to describe their length.\n * This method should accept no arguments. \n *\n * @param {*} x - Some vector-like object.\n * @return {number} Length of the object.\n */\nexport function LENGTH(x) {\n    if (\"_bioconductor_LENGTH\" in x) {\n        return x._bioconductor_LENGTH();\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'LENGTH' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    return x.length;\n}\n\n/**\n * Slice a vector-like object.\n *\n * For Array and TypedArrays, this just uses `slice()` or `subarray()`.\n *\n * Custom classes should provide a `_bioconductor_SLICE` method to create a slice.\n * This method should accept the same arguments as `SLICE` except for `x`.\n *\n * @param {*} x - Some vector-like object.\n * @param {Object|Array|TypedArray} i - An Array or TypedArray of integer indices specifying the slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.allowView=false] - Whether a view can be created to mimic the slice operation.\n * Whether this is actually done depends on the method, but may improve efficiency by avoiding unnecessary copies.\n *\n * @return {*} A vector-like object, typically of the same class as `x`, containing data for the specified slice.\n *\n * If `allowInPlace = true`, `x` _may_ be modified in place, and the return value _may_ be a reference to `x`. \n */\nexport function SLICE(x, i, { allowView = false } = {}) {\n    if (\"_bioconductor_SLICE\" in x) {\n        let output = new x.constructor;\n        x._bioconductor_SLICE(output, i, { allowView });\n        return output;\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'SLICE' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    if (i.constructor == Object) {\n        if (allowView && ArrayBuffer.isView(x)) {\n            return x.subarray(i.start, i.end);\n        } else {\n            return x.slice(i.start, i.end);\n        }\n    } else {\n        let output = new x.constructor(i.length);\n        i.forEach((y, j) => {\n            output[j] = x[y];\n        });\n        return output;\n    }\n}\n\n/**\n * Combine multiple vector-like objects.\n *\n * For Array and TypedArrays, the combined array is of a class that avoids information loss.\n *\n * Custom classes should provide a `_bioconductor_COMBINE` method to define the combining operation.\n * This method should accept the same arguments as `COMBINE`.\n *\n * @param {Array} objects - Array of vector-like objects to be combined.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE` method of the first element of `objects`.\n *\n * @return {*} A vector-like object containing the concatenated data from the input objects.\n * - If the first entry of `objects` is an instance of a custom class, the return value should be of the same class.\n * - If all `objects` are TypedArrays of the same class, the return value will be a TypedArray of that class.\n * - If any of the `objects` are Arrays, the return value will be an Array.\n * - If any of the `objects` are 64-bit TypedArrays of different classes, the return value will be an Array.\n * - Otherwise, for any other classes of TypedArrays in `objects`, the return value will be a Float64Array.\n */\nexport function COMBINE(objects) {\n    let x = objects[0];\n    if (\"_bioconductor_COMBINE\" in x) {\n        let output = new x.constructor;\n        x._bioconductor_COMBINE(output, objects);\n        return output;\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'COMBINE' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    // It is assumed that every 'y' is of some compatible Array-like type as well.\n    let total_LENGTH = 0;\n    let constructor = x.constructor;\n\n    for (const obj of objects) {\n        total_LENGTH += obj.length;\n        constructor = utils.chooseArrayConstructors(constructor, obj.constructor);\n    }\n\n    let output = new constructor(total_LENGTH);\n    let position = 0;\n    for (const obj of objects) {\n        if (\"set\" in output) {\n            output.set(obj, position);\n            position += obj.length;\n        } else {\n            obj.forEach(x => {\n                output[position] = x;\n                position++;\n            });\n        }\n    }\n\n    return output;\n}\n\n/**\n * Clone a vector-like object.\n * \n * For TypedArrays, this just uses `slice()`.\n * For Arrays, this creates a copy and runs `CLONE` on each element in the copy.\n *\n * Custom classes should provide a `_bioconductor_CLONE` method to define the cloning operation.\n * This method should accept the same arguments as `COMBINE` except for `x`.\n *\n * @param {*} x - Some vector-like object.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.deepCopy=true] - Whether to create a deep copy.\n * The exact interpretation of `deepCopy=false` is left to each method, but generally speaking, \n * any setter (`$`-marked) functions operating on the copy should not alter `x`.\n *\n * @return {*} A clone of `x`, i.e., the return value and `x` should not compare equal.\n * If `deepCopy=true`, all internal components are also cloned.\n */\nexport function CLONE(x, { deepCopy = true } = {}) {\n    if (x instanceof Object) {\n        let options = { deepCopy };\n        if (\"_bioconductor_CLONE\" in x) {\n            let output = new x.constructor;\n            x._bioconductor_CLONE(output, options);\n            return output;\n        }\n\n        if (utils.isArrayLike(x)) {\n            if (x.constructor == Array) {\n                return x.map(y => CLONE(y, options));\n            } else if (deepCopy) {\n                return x.slice();\n            } else {\n                return x.subarray();\n            }\n        }\n\n        if (x.constructor == Object) {\n            if (deepCopy) {\n                let output = {};\n                for (const [k, v] of Object.entries(x)) {\n                    output[k] = CLONE(v);\n                }\n                return output;\n            } else {\n                return { ...x };\n            }\n        }\n\n        if (x.constructor == Map) {\n            let output = new Map;\n            for (const [k, v] of x) {\n                output.set(k, deepCopy ? CLONE(v) : v);\n            }\n            return output;\n        }\n\n        if (x.constructor == Set) {\n            let output = new Set;\n            for (const k of x) {\n                output.add(deepCopy ? CLONE(k) : k);\n            }\n            return output;\n        }\n\n\n        throw new Error(\"unknown CLONE operation for instance of class '\" + x.constructor.name + \"'\");\n    }\n\n    // Immutable atomics should be all that's left.\n    return x;\n}\n\n/**\n * Split a vector-like object along its length according to the levels of a factor of the same length.\n * This works automatically for all classes for which there is a {@linkcode SLICE} method,\n * but custom classes may also choose to define their own `_bioconductor_SPLIT` method. \n *\n * @param {*} x - Some vector-like object.\n * @param {Array|TypedArray} factor - Array containing the factor to use for splitting.\n * This should have the same length as `x`.\n *\n * Alternatively, the output of {@linkcode presplitFactor} can be supplied.\n *\n * @return {Object} An object containing one key per level of `factor`,\n * where the value is the slice of `x` corresponding to the indices of that level in `factor`.\n */\nexport function SPLIT(x, factor) {\n    if (factor.constructor != Object) {\n        factor = misc.presplitFactor(factor);\n    }\n\n    if (\"_bioconductor_SPLIT\" in x) {\n        return x._bioconductor_SPLIT(factor);\n    }\n\n    let output = {};\n    for (const [k, v] of Object.entries(factor)) {\n        output[k] = SLICE(x, v);\n    }\n\n    return output;\n}\n\n/**\n * Return the number of rows for a two-dimensional object.\n * Custom classes should provide a `_bioconductor_NUMBER_OF_ROWS` method, accepting no arguments.\n *\n * @param {*} x - Some two-dimensional object.\n * @return {number} Number of rows.\n */\nexport function NUMBER_OF_ROWS(x) {\n    if (!(\"_bioconductor_NUMBER_OF_ROWS\" in x)) {\n        throw new Error(\"no 'NUMBER_OF_ROWS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_NUMBER_OF_ROWS();\n}\n\n/**\n * Return the number of columns for a two-dimensional object.\n * Custom classes should provide a `_bioconductor_NUMBER_OF_COLUMNS` method, accepting no arguments.\n *\n * @param {*} x - Some two-dimensional object.\n * @return {number} Number of columns.\n */\nexport function NUMBER_OF_COLUMNS(x) {\n    if (!(\"_bioconductor_NUMBER_OF_COLUMNS\" in x)) {\n        throw new Error(\"no 'NUMBER_OF_COLUMNS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_NUMBER_OF_COLUMNS();\n}\n\n/**\n * Slice a two-dimensional object by its rows and/or columns.\n *\n * Custom classes should provide a `_bioconductor_SLICE_2D` method, accepting the same arguments as this generic but with `x` replaced by an \"empty\" instance of the same class.\n * Each method should then fill the empty instance with the sliced contents of `x`.\n *\n * @param {*} x - Some two-dimensional object.\n * @param {?(Object|Array|TypedArray)} rows - An Array or TypedArray of integer indices specifying the row-wise slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n * \n * Alternatively `null`, to indicate that no slicing is to be performed on the rows.\n * @param {?(Object|Array|TypedArray)} columns - An Array or TypedArray of integer indices specifying the column-wise slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n *\n * Alternatively `null`, to indicate that no slicing is to be performed on the columns.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.allowView=false] - Whether a view can be created to mimic the slice operation.\n * Whether this is actually done depends on the method, but may improve efficiency by avoiding unnecessary copies.\n *\n * @return {*} A two-dimensional object, typically of the same class as `x`, containing data for the specified slice.\n */\nexport function SLICE_2D(x, rows, columns, { allowView = false } = {}) {\n    if (!(\"_bioconductor_SLICE_2D\" in x)) {\n        throw new Error(\"no 'SLICE_2D' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n    return output;\n}\n\n/**\n * Combine multiple two-dimensional objects by row.\n * Custom classes should provide a `_bioconductor_COMBINE_ROWS` method to define the combining operation.\n * This method should accept:\n * - an \"empty\" instance of the class of the first object, to be populated with data.\n * - an array of objects to be combined, like `objects`.\n *\n * @param {Array} objects - Array of two-dimensional objects to be combined by row.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE_ROWS` method of the first element of `objects`.\n *\n * @return {*} A two-dimensional object containing the row-wise concatenated data from the input objects, typically of the same class as the first entry of `objects`.\n */\nexport function COMBINE_ROWS(objects) {\n    let x = objects[0];\n    if (!(\"_bioconductor_COMBINE_ROWS\" in x)) {\n        throw new Error(\"no 'COMBINE_ROWS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_COMBINE_ROWS(output, objects);\n    return output;\n}\n\n/**\n * Combine multiple two-dimensional objects by column.\n * Custom classes should provide a `_bioconductor_COMBINE_COLUMNS` method to define the combining operation.\n * This method should accept:\n * - an \"empty\" instance of the class of the first object, to be populated with data.\n * - an array of objects to be combined, like `objects`.\n *\n * @param {Array} objects - Array of two-dimensional objects to be combined by column.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE_COLUMNS` method of the first element of `objects`.\n *\n * @return {*} A two-dimensional object containing the column-wise concatenated data from the input objects, typically of the same class as the first entry of `objects`.\n */\nexport function COMBINE_COLUMNS(objects) {\n    let x = objects[0];\n    if (!(\"_bioconductor_COMBINE_COLUMNS\" in x)) {\n        throw new Error(\"no 'COMBINE_COLUMNS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_COMBINE_COLUMNS(output, objects);\n    return output;\n}\n","import * as generics from \"./AllGenerics.js\";\n\nexport function setterTarget(object, inPlace) {\n    return (inPlace ? object : generics.CLONE(object, { deepCopy: false }));\n}\n\nexport function cloneField(value, deepCopy) {\n    return (deepCopy ? generics.CLONE(value) : value);\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * The Annotated class provides a store for arbitrary object-wide metadata.\n * It is intended as a base class for other structures and should not be constructed directly.\n */\nexport class Annotated {\n    /**\n     * @param {Object|Map} metadata - Object or Map containing arbitrary metadata as key-value pairs.\n     */\n    constructor(metadata) {\n        if (arguments.length == 0) {\n            return;\n        }\n\n        this._metadata = utils.object2map(metadata);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Map} Map containing arbitrary metadata.\n     */\n    metadata() {\n        return this._metadata;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object|Map} value - Object containing the metadata.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Annotated instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Annotated} The Annotated object after replacing the metadata.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setMetadata(value, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._metadata = utils.object2map(value);\n        return target;\n    }\n\n    /**\n     * @param {Object} value - Object containing the metadata.\n     * @return {Annotated} A reference to this Annotated object.\n     */\n    $setMetadata(value) {\n        return this.setMetadata(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        output._metadata = cutils.cloneField(this._metadata, deepCopy);\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as generics from \"./AllGenerics.js\";\n\nexport class InternalList {\n    constructor(entries, order) {\n        if (arguments.length == 0){\n            return;\n        }\n\n        entries = utils.object2map(entries);\n\n        let expected = Array.from(entries.keys());\n        if (order !== null) {\n            utils.checkNamesArray(order, \"'order'\", expected.length, \"the length of 'entries'\");\n            let observed = order.slice().sort();\n            expected.sort();\n\n            if (!utils.areArraysEqual(observed, expected)) {\n                throw new Error(\"values of 'order' should be the same as the keys of 'entries'\");\n            }\n        } else {\n            order = expected;\n        }\n\n        this._entries = entries;\n        this._order = order;\n    }\n\n    static className = \"InternalList\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    names() {\n        return this._order;\n    }\n\n    numberOfEntries() {\n        return this._order.length;\n    }\n\n    #check_entry_index(i) {\n        if (i < 0 || i >= this._order.length) {\n            throw new Error(\" index '\" + String(i) + \"' out of range for this \" + this.constructor.className);\n        }\n    }\n\n    entry(i) {\n        if (typeof i == \"string\") {\n            if (!this._entries.has(i)) {\n                throw new Error(\"no entry '\" + i + \"' present in this \" + this.constructor.className);\n            }\n            return this._entries.get(i);\n        } else {\n            this.#check_entry_index(i);\n            return this._entries.get(this._order[i]);\n        }\n    }\n\n    has(name) {\n        return this._entries.has(name);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n    \n    delete(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            // Shallow copies so that we can do our setting.\n            target._order = target._order.slice();\n            target._entries = new Map(target._entries); \n        }\n\n        if (typeof i == \"string\") {\n            let ii = target._order.indexOf(i);\n            if (ii < 0) {\n                throw new Error(\"no entry '\" + i + \"' present in this \" + this.constructor.className);\n            }\n            target._order.splice(ii, 1); \n            target._entries.delete(i);\n        } else {\n            this.#check_entry_index(i);\n            let n = target._order[i];\n            target._order.splice(i, 1);\n            target._entries.delete(n);\n        }\n\n        return target;\n    }\n\n    set(i, value, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            // Shallow copy so that we can do our setting.\n            target._entries = new Map(target._entries);\n        }\n\n        if (typeof i == \"string\") {\n            if (!target._entries.has(i)) {\n                if (!inPlace) {\n                    target._order = target._order.slice();\n                }\n                target._order.push(i);\n            }\n            target._entries.set(i, value);\n        } else {\n            this.#check_entry_index(i);\n            target._entries.set(target._order[i], value);\n        }\n\n        return target;\n    }\n\n    setNames(names, { inPlace = false } = {}) {\n        utils.checkNamesArray(names, \"replacement 'names'\", this._order.length, \"length of 'names()'\");\n\n        let new_entries = new Map;\n        for (var i = 0; i < names.length; i++) {\n            if (new_entries.has(names[i])) {\n                throw new Error(\"detected duplicate value '\" + names[i] + \"' in replacement 'names'\");\n            }\n            new_entries.set(names[i], this._entries.get(this._order[i]));\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._entries = new_entries;\n        target._order = names;\n        return target;\n    }\n\n    slice(indices, { inPlace = false } = {}) {\n        let new_entries = new Map;\n        let new_order = [];\n\n        for (var ii of indices) {\n            if (typeof ii != \"string\") {\n                this.#check_entry_index(ii);\n                ii = this._order[ii];\n            }\n            if (new_entries.has(ii)) {\n                throw new Error(\"duplicate entries detected in slice request\");\n            } else if (!this._entries.has(ii)) {\n                throw new Error(\"slice contains missing entry '\" + ii + \"' \");\n            }\n\n            new_entries.set(ii, this._entries.get(ii));\n            new_order.push(ii);\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._entries = new_entries;\n        target._order = new_order;\n        return target;\n    }\n\n    reorder(indices, { inPlace = false } = {}) {\n        // Reorder can be slightly more efficient than slice because we just\n        // need to change the ordering vector rather than creating a new Map.\n        if (indices.length !== this._order.length) {\n            throw utils.formatLengthError(\"reordered indices\", \"the number of existing entries\");\n        }\n\n        let new_order = [];\n        for (var ii of indices) {\n            if (typeof ii != \"string\") {\n                this.#check_entry_index(ii);\n                ii = this._order[ii];\n            }\n            if (!this._entries.has(ii)) {\n                throw new Error(\"missing entry '\" + ii + \"' among the reordered indices\");\n            }\n            new_order.push(ii);\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._order = new_order;\n        return target;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_CLONE(output, { deepCopy = true } = {}) {\n        output._entries = (deepCopy ? generics.CLONE(this._entries) : this._entries);\n        output._order = (deepCopy ? generics.CLONE(this._order) : this._order);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    apply(FUN, { inPlace = false } = {}) {\n        let new_entries = (inPlace ? this._entries : new Map);\n        for (const [k, v] of this._entries) {\n            new_entries.set(k, FUN(v));\n        }\n        return (inPlace ? this : new InternalList(new_entries, this._order));\n    }\n\n    static parallelCombine(objects, combiner) {\n        let first_order = objects[0]._order;\n        for (var i = 1; i < objects.length; i++) {\n            if (!utils.areArraysEqual(first_order, objects[i]._order)) {\n                throw new Error(\"detected differences in names between first object and object \" + String(i) + \" to be combined\");\n            }\n        }\n\n        let new_entries = new Map;\n        for (const k of first_order) {\n            let found = objects.map(x => x._entries.get(k));\n            new_entries.set(k, combiner(found));\n        }\n\n        return new InternalList(new_entries, first_order);\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as ann from \"./Annotated.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A DataFrame is a collection of equilength vector-like objects as \"columns\".\n * The number of rows in the DataFrame is equal to the length of the columns, where the i-th row consists of the i-th element from each column.\n *\n * This class supports optional row names, which are either `null` or an array of strings of length equal to the number of rows.\n *\n * This class supports empty instances with a non-zero number of rows, which may be useful for piece-wise construction.\n *\n * The vector-like object for each column is expected to have methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * The DataFrame itself defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @augments Annotated\n */\nexport class DataFrame extends ann.Annotated {\n    /**\n     * @param {Object|Map} columns - Object or Map where keys are the column names and the values are equilength vector-like objects.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?number} [options.numberOfRows=null] - Non-negative value specifying the number of rows in the DataFrame.\n     * If `null`, this is automatically determined from the length of the vectors in `columns`, or from the length of `rowNames`.\n     * If non-`null`, this should not conflict with the inferred lengths from `columns` or `rowNames`.\n     * @param {?Array} [options.rowNames=null] - Array of strings containing the names for each row.\n     * If non-`null`, this should have the same length as the vectors inside `columns`, if any exist.\n     * If `null`, no row names are used.\n     * @param {?Array} [options.columnOrder=null] - Array of strings specifying the ordering of the columns.\n     * If non-`null`, this should have the same values as the keys of `columns`.\n     * If `null`, an arbitrary ordering is obtained from `columns`.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(columns, { numberOfRows = null, rowNames = null, columnOrder = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n        this._numberOfRows = numberOfRows;\n        this._rowNames = rowNames;\n        \n        try {\n            this._columns = new il.InternalList(columns, columnOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize columns for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n\n        for (const k of this._columns.names()) {\n            let n = generics.LENGTH(this._columns.entry(k));\n            if (this._numberOfRows == null) {\n                this._numberOfRows = n;\n            } else if (n != this._numberOfRows) {\n                throw new Error(\"expected all arrays in 'columns' to have equal length\");\n            }\n        }\n\n        if (rowNames != null) {\n            if (this._numberOfRows == null) {\n                this._numberOfRows = rowNames.length;\n            }\n            utils.checkNamesArray(rowNames, \"'rowNames'\", this._numberOfRows, \"'numberOfRows' or the length of arrays in 'columns'\");\n        }\n\n        if (this._numberOfRows == null) {\n            this._numberOfRows = 0;\n        }\n    }\n\n    static className = \"DataFrame\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {?Array} Array of strings containing row names, or `null` if no row names are available.\n     */\n    rowNames() {\n        return this._rowNames;\n    }\n\n    /**\n     * @return {Array} Array of strings containing the column names in the specified order.\n     */\n    columnNames() {\n        return this._columns.names();\n    }\n\n    /**\n     * @param {string} name - Name of a column.\n     * @return {boolean} Whether the column exists in this DataFrame.\n     */\n    hasColumn(name) {\n        return this._columns.has(name);\n    }\n\n    /**\n     * @return {number} Number of rows in this DataFrame.\n     */\n    numberOfRows() {\n        return this._numberOfRows;\n    }\n\n    /**\n     * @return {number} Number of columns in this DataFrame.\n     */\n    numberOfColumns() {\n        return this._columns.numberOfEntries();\n    }\n\n    /**\n     * @param {string|number} i - Column to retrieve, either by name or index.\n     * @return {*} The contents of column `i` as a vector-like object.\n     */\n    column(i) {\n        return this._columns.entry(i);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Column to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     * \n     * @return {DataFrame} The DataFrame after removing the specified column.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeColumn(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.delete(i, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Column to remove, either by name or index.\n     * @return {DataFrame} A reference to this DataFrame after removing the specified column.\n     */\n    $removeColumn(i) {\n        return this.removeColumn(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the column to add, either by name or index.\n     * - If `i` is a number, the column at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of columns.\n     * - If `i` is a string, any column with the same name is replaced.\n     *   If no such column exists, a new column is appended to the DataFrame.\n     * @param {*} value - Array-like column to set/add as the column.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame after adding/replacing the specified column.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumn(i, value, { inPlace = false } = {}) {\n        if (generics.LENGTH(value) != this._numberOfRows) {\n            throw new Error(\"expected 'value' to have the same length as the number of rows in 'x'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the column to add, either by name or index.\n     * - If `i` is a number, the column at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of columns.\n     * - If `i` is a string, any column with the same name is replaced.\n     *   If no such column exists, a new column is appended to the DataFrame.\n     * @param {*} value - Array-like column to set/add as the column.\n     *\n     * @return {DataFrame} A reference to this DataFrame after adding/replacing the specified column.\n     */\n    $setColumn(i, value) {\n        return this.setColumn(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of unique strings containing the new name for each column.\n     * This should have the same length as {@linkcode DataFrame#columnNames DataFrame.columnNames}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = target._columns.setNames(names, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of unique strings containing the new name for each column.\n     * This should have the same length as {@linkcode DataFrame#columnNames DataFrame.columnNames}.\n     * @return {DataFrame} A reference to this DataFrame with modified column names.\n     */\n    $setColumnNames(names) {\n        return this.setColumnNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {?Array} names - Array of unique strings containing the new name for each row.\n     * This should have the same length as {@linkcode DataFrame#numberOfRows DataFrame.numberOfRows}.\n     *\n     * Alternatively, this may be `null` to remove any existing column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame with modified row names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowNames(names, { inPlace = false } = {}) {\n        if (names != null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this._numberOfRows, \"'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowNames = names;\n        return target;\n    }\n\n    /**\n     * @param {?Array} names - Array of unique strings containing the new name for each row.\n     * This should have the same length as {@linkcode DataFrame#numberOfRows DataFrame.numberOfRows}.\n     *\n     * Alternatively, this may be `null` to remove any existing column names.\n     * @return {DataFrame} A reference to this DataFrame with modified row names.\n     */\n    $setRowNames(names) {\n        return this.setRowNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the columns to retain in the slice.\n     * This should refer to unique column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} Reference to this DataFrame after slicing to the specified columns.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceColumns(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.slice(i, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the columns to retain in the slice.\n     * This should refer to unique column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} Reference to this DataFrame after slicing to the specified columns.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    $sliceColumns(i) {\n        return this.sliceColumns(i, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        let options = { allowView };\n\n        let new_columns = this._columns.apply(v => generics.SLICE(v, i, options));\n        let new_rowNames = (this._rowNames == null ? null : generics.SLICE(this._rowNames, i, options));\n\n        let new_numberOfRows;\n        if (i.constructor == Object) {\n            new_numberOfRows = i.end - i.start;\n        } else {\n            new_numberOfRows = i.length;\n        }\n\n        output._rowNames = new_rowNames;\n        output._columns = new_columns;\n        output._numberOfRows = new_numberOfRows;\n        output._metadata = this._metadata;\n        return; \n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        let new_columns = il.InternalList.parallelCombine(objects.map(x => x._columns), generics.COMBINE);\n\n        let all_n = [];\n        let all_l = [];\n        for (const yi of objects) {\n            all_n.push(yi.rowNames());\n            all_l.push(yi.numberOfRows());\n        }\n\n        let new_numberOfRows = utils.sum(all_l);\n        let new_rowNames = utils.combineNames(all_n, all_l, new_numberOfRows);\n\n        output._rowNames = new_rowNames;\n        output._columns = new_columns;\n        output._numberOfRows = new_numberOfRows;\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._columns = cutils.cloneField(this._columns, deepCopy);\n        output._rowNames = cutils.cloneField(this._rowNames, deepCopy);\n        output._numberOfRows = this._numberOfRows;\n        return;\n    }\n};\n\n/**\n * Flexibly combine multiple DataFrames by row by filling in missing columns with an array of `null`s.\n * This is equivalent to calling {@linkcode COMBINE} on an array of DataFrames that may have mismatching columns.\n *\n * @param {Array} objects - Array of {@linkplain DataFrame}s to be combined.\n *\n * @return {DataFrame} The combined DataFrame, where the number of rows is equal to sum of rows across `objects`,\n * and the columns is equal to the union of columns across `objects`.\n */\nexport function flexibleCombineRows(objects) {\n    let ckeys = new Set();\n    let corder = [];\n    for (const current of objects) {\n        let cnames = current.columnNames();\n        for (const a of cnames) {\n            if (!ckeys.has(a)) {\n                ckeys.add(a);\n                corder.push(a);\n            }\n        }\n    }\n\n    let copies = [];\n    for (const current of objects) {\n        let dummy = new Array(current.numberOfRows());\n        dummy.fill(null);\n        let copy = generics.CLONE(current, { deepCopy: false });\n\n        for (const a of corder) {\n            if (!current.hasColumn(a)) {\n                copy.$setColumn(a, dummy);\n            }\n        }\n\n        copy._columns = copy._columns.reorder(corder);\n        copies.push(copy);\n    }\n\n    return generics.COMBINE(copies);\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as ann from \"./Annotated.js\";\n\nfunction verifyElementMetadata(elementMetadata, numExpected, className) {\n    if (elementMetadata !== null) {\n        if (!(elementMetadata instanceof df.DataFrame)) {\n            throw new Error(\"'elementMetadata' should be a DataFrame\");\n        }\n        if (generics.LENGTH(elementMetadata) !== numExpected) {\n            throw new Error(\"'elementMetadata' should have the same number of rows as 'LENGTH(<\" + className + \">)'\");\n        }\n    } else {\n        elementMetadata = new df.DataFrame({}, { numberOfRows: numExpected });\n    }\n    return elementMetadata;\n}\n\n/**\n * The Vector class implements a store for arbitrary per-element metadata and per-element names.\n * It is intended as a base class for other structures that have a concept of \"vector-ness\".\n * It should not be constructed directly.\n *\n * @augments Annotated\n */\nexport class Vector extends ann.Annotated {\n    /**\n     * @param {number} length - Number of elements in this vector-like object.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-element annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(length, { names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n\n        this._elementMetadata = verifyElementMetadata(elementMetadata, length, this.constructor.className);\n\n        if (names !== null) {\n            utils.checkNamesArray(names, \"'names'\", length, \"'LENGTH(<\" + this.constructor.className + \">)'\");\n        }\n        this._names = names;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {DataFrame} A {@linkplain DataFrame} with one row corresponding to each vector element, containing arbitrary per-element metadata.\n     */\n    elementMetadata() {\n        return this._elementMetadata;\n    }\n\n    /**\n     * @return {?Array} Array of strings containing the name of each range, or `null` if no names are available.\n     */\n    names() {\n        return this._names;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {?DataFrame} elementMetadata - Arbitrary metadata for each vector element.\n     * This should have number of rows equal to the vector length.\n     * Alternatively `null`, in which case all existing per-element metadata is removed.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Vector instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Vector} The Vector object after setting the element metadata to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setElementMetadata(elementMetadata, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._elementMetadata = verifyElementMetadata(elementMetadata, generics.LENGTH(target), target.constructor.className);\n        return target;\n    }\n\n    /**\n     * @param {?DataFrame} elementMetadata - Arbitrary metadata for each vector element.\n     * This should have number of rows equal to the vector length.\n     * Alternatively `null`, in which case all existing per-element metadata is removed.\n     *\n     * @return {Vector} A reference to this Vector object after setting the element metadata to `value`.\n     */\n    $setElementMetadata(elementMetadata) {\n        return this.setElementMetadata(elementMetadata, { inPlace: true });\n    }\n\n    /**\n     * @param {?Array} names - Array of strings containing a name for each range.\n     * This should have length equal to the number of ranges.\n     * Alternatively `null`, if no names are present.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Vector instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Vector} The Vector object after setting the names to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", generics.LENGTH(this), \"'LENGTH(<\" + this.constructor.className + \">)'\");\n        } \n        let target = cutils.setterTarget(this, inPlace);\n        target._names = names;\n        return target;\n    }\n\n    /**\n     * @param {?Array} names - Array of strings containing a name for each range.\n     * This should have length equal to the number of ranges.\n     * Alternatively `null`, if no names are present.\n     *\n     * @return {Vector} A reference to this Vector object after setting the element metadata to `value`.\n     */\n    $setNames(names) {\n        return this.setNames(names, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        output._elementMetadata = generics.SLICE(this._elementMetadata, i, { allowView });\n        output._names = (this._names === null ? null : generics.SLICE(this._names, i, { allowView }));\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        let all_em = [];\n        let all_n = [];\n        let all_l = [];\n\n        for (const x of objects) {\n            all_em.push(x._elementMetadata);\n            all_n.push(x._names);\n            all_l.push(generics.LENGTH(x));\n        }\n\n        output._elementMetadata = generics.COMBINE(all_em);\n        output._names = utils.combineNames(all_n, all_l);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._elementMetadata = cutils.cloneField(this._elementMetadata, deepCopy);\n        output._names = cutils.cloneField(this._names, deepCopy);\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\n\nexport function convertPositionToRank(start, end, { slice = null } = {}) {\n    let n = (slice == null ? start.length : slice.length);\n\n    let positions = new Int32Array(n * 2);\n    let add = new Uint8Array(n * 2);\n    let index = new Int32Array(n * 2);\n\n    {\n        let counter = 0;\n        let fillIndex = i => {\n            let at = counter * 2;\n            let next = at + 1;\n            positions[at] = start[i];\n            positions[next] = end[i];\n            add[at] = 1;\n            add[next] = 0;\n            index[at] = counter;\n            index[next] = counter;\n            counter++;\n        };\n\n        if (slice === null) {\n            for (var i = 0; i < n; i++) {\n                fillIndex(i);                                \n            }\n        } else {\n            for (const i of slice) {\n                fillIndex(i);\n            }\n        }\n    }\n\n    let order = utils.createSequence(positions.length);\n    order.sort((i, j) => positions[i] - positions[j]);\n\n    let rank2position = [];\n    let new_starts = new Int32Array(n);\n    let new_ends = new Int32Array(n);\n\n    let last = null;\n    for (const i of order) {\n        let pos = positions[i];\n        let idx = index[i];\n\n        if (pos !== last) {\n            rank2position.push(pos);\n            last = pos;\n        }\n\n        if (add[i]) {\n            new_starts[idx] = rank2position.length - 1;\n        } else {\n            new_ends[idx] = rank2position.length - 1;\n        }\n    }\n\n    return { rank2position, startRanks: new_starts, endRanks: new_ends };\n}\n\nexport function buildIntervalTree(start, end, { slice = null } = {}) {\n    let { rank2position, startRanks, endRanks } = convertPositionToRank(start, end, { slice });\n\n    // Now, building an nicely balanced interval tree based on the ranks.\n    let tree = [ create_node(0, rank2position.length) ];\n    if (slice === null) {\n        for (var i = 0; i < startRanks.length; i++) {\n            recursive_build_tree(startRanks[i], endRanks[i], i, tree, 0);\n        }\n    } else {\n        for (var i = 0; i < startRanks.length; i++) {\n            recursive_build_tree(startRanks[i], endRanks[i], slice[i], tree, 0);\n        }\n    }\n\n    // Running a clean-up operation to convert ranks back to positions.\n    let one_past_the_end = (rank2position.length > 0 ? rank2position[rank2position.length - 1] + 1 : 1);\n    rank2position.push(one_past_the_end);\n\n    for (const x of tree) {\n        x.left_bound = rank2position[x.left_bound];\n        x.right_bound = rank2position[x.right_bound];\n        x.center = rank2position[x.center];\n\n        // Also sorting ranges by increasing start and DECREASING end positions.\n        let start_overlaps_sorted = x.overlaps.slice().sort((a, b) => start[a] - start[b]);\n        let end_overlaps_sorted = x.overlaps.sort((a, b) => end[b] - end[a]) // reversed order - deliberate!\n        x.overlaps = {\n            start: start_overlaps_sorted.map(i => [start[i], i]),\n            end: end_overlaps_sorted.map(i => [end[i], i])\n        };\n    }\n\n    return tree;\n}\n\nfunction create_node(left_bound, right_bound) {\n    return { \n        left_bound: left_bound,\n        right_bound: right_bound,\n        center: left_bound + Math.floor((right_bound - left_bound) / 2),\n        left_node: null,\n        right_node: null,\n        overlaps: []\n    };\n}\n\nfunction recursive_build_tree(start, end, index, tree, node) {\n    let current = tree[node];\n\n    if (start > current.center) {\n        if (current.right_node === null) {\n            current.right_node = tree.length;\n            tree.push(create_node(current.center, current.right_bound));\n        }\n        recursive_build_tree(start, end, index, tree, current.right_node);\n\n    } else if (end < current.center || (end == current.center && end > start)) { // Let 0-length ranges fall through to the next clause if they lie exactly on the center.\n        if (current.left_node === null) {\n            current.left_node = tree.length;\n            tree.push(create_node(current.left_bound, current.center));\n        }\n        recursive_build_tree(start, end, index, tree, current.left_node);\n\n    } else {\n        // At some point, every range ends up here. This is because left_bound\n        // == center upon successive halving to create new nodes, so every\n        // range will eventually overlap a center at its own start position.\n        current.overlaps.push(index);\n    }\n}\n\nexport function queryIntervalTree(start, end, tree) {\n    let results = [];\n    if (start > tree.right_bound) {\n        return results;\n    }\n\n    if (end < tree.left_bound || (end == tree.left_bound && end > start)) { // Still allow 0-length ranges to fall through for search.\n        return results;\n    }\n\n    recursive_query_tree(start, end, tree, 0, results); \n    return results;\n}\n\nfunction recursive_query_tree(start, end, tree, node, results) {\n    let current = tree[node];\n\n    if (start > current.center) {\n        for (const overlap of current.overlaps.end) {\n            if (overlap[0] > start) {\n                results.push(overlap[1]);\n            } else {\n                break;\n            }\n        }\n        if (current.right_node !== null) {\n            recursive_query_tree(start, end, tree, current.right_node, results);\n        }\n\n    } else if (end < current.center || (end == current.center && end > start)) { // Again, let zero-length ranges fall through if they lie directly on the center.\n        for (const overlap of current.overlaps.start) {\n            if (overlap[0] < end || (overlap[0] == end && start == end)) { // handle zero-length ranges directly on the start position of the center-overlapping range.\n                results.push(overlap[1]);\n            } else {\n                break;\n            }\n        }\n        if (current.left_node !== null) {\n            recursive_query_tree(start, end, tree, current.left_node, results);\n        }\n\n    } else {\n        for (const overlap of current.overlaps.start) {\n            results.push(overlap[1]);\n        }\n\n        if (end > current.center) {\n            if (current.right_node !== null) {\n                recursive_query_tree(start, end, tree, current.right_node, results);\n            }\n        }\n        if (start < current.center) {\n            if (current.left_node !== null) {\n                recursive_query_tree(start, end, tree, current.left_node, results);\n            }\n        }\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as vec from \"./Vector.js\";\nimport * as olap from \"./overlap-utils.js\";\n\n/**\n * An IRanges object is a collection of integer ranges, inspired by the class of the same name from the Bioconductor ecosystem.\n * Each range consists of a start position and a width, and may be associated with arbitrary range-level metadata in a {@linkplain DataFrame}.\n * The IRanges defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @extends Vector\n */\nexport class IRanges extends vec.Vector {\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array|TypedArray} start - Array of start positions for each range.\n     * This should be coercible into an Int32Array.\n     * @param {Array|TypedArray} width - Array of widths for each range.\n     * This should be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(start, width, { names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(start.length, { names, elementMetadata, metadata });\n\n        this._start = utils.convertToInt32Array(start);\n        utils.checkNonNegative(this._start, \"start\");\n\n        this._width = utils.convertToInt32Array(width);\n        utils.checkNonNegative(this._width, \"width\");\n\n        let n = this._start.length;\n        if (n !== this._width.length) {\n            throw new Error(\"'start' and 'width' should have the same length\");\n        }\n    }\n\n    static className = \"IRanges\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Int32Array} Array of integers containing the start position for each range.\n     */\n    start() {\n        return this._start;\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the end position (specifically, one-past-the-end) for each range.\n     */\n    end() {\n        return this._start.map((x, i) => x + this._width[i]);\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the width of each range.\n     */\n    width() {\n        return this._width;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array|TypedArray} value - Array of start positions for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this IRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {IRanges} The IRanges object after setting the start positions to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setStart(value, { inPlace = false } = {}) {\n        let candidate = utils.convertToInt32Array(value);\n        if (candidate.length !== generics.LENGTH(this)) {\n            throw new Error(\"'start' should be replaced by array of the same length\");\n        }\n        utils.checkNonNegative(candidate, \"start\");\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._start = candidate;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of start positions for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @return {IRanges} A reference to this IRanges object after setting the start positions to `value`.\n     */\n    $setStart(value) {\n        return this.setStart(value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of widths for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this IRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {IRanges} The IRanges object after setting the widths to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setWidth(value, { inPlace = false } = {}) {\n        let candidate = utils.convertToInt32Array(value);\n        if (candidate.length !== generics.LENGTH(this)) {\n            throw new Error(\"'width' should be replaced by array of the same length\");\n        }\n        utils.checkNonNegative(candidate, \"width\");\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._width = candidate;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of widths for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @return {IRanges} A reference to this IRanges object after setting the widths to `value`.\n     */\n    $setWidth(value) {\n        return this.setWidth(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {IRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain IRanges} instances.\n     */\n    buildOverlapIndex() {\n        let tree = olap.buildIntervalTree(this._start, this.end());\n        return new IRangesOverlapIndex(tree);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._start.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        output._start = generics.SLICE(this._start, i, { allowView });\n        output._width = generics.SLICE(this._width, i, { allowView });\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        let all_s = [];\n        let all_w = [];\n        for (const x of objects) {\n            all_s.push(x._start);\n            all_w.push(x._width);\n        }\n\n        output._start = generics.COMBINE(all_s);\n        output._width = generics.COMBINE(all_w);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._start = cutils.cloneField(this._start, deepCopy);\n        output._width = cutils.cloneField(this._width, deepCopy);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {IRanges} A zero-length IRanges object.\n     */\n    static empty() {\n        return new IRanges(new Int32Array, new Int32Array);\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain IRanges} objects.\n * This is typically constructed using the {@linkcode IRanges#buildOverlapIndex IRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query IRanges to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class IRangesOverlapIndex {\n    constructor(tree) {\n        this._tree = tree;\n    }\n\n    /**\n     * @param {IRanges} query - The query object, containing ranges to be overlapped with those in the reference IRanges (that was used to construct this IRangesOverlapIndex object).\n     * @return {Array} An array of length equal to the number of ranges in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain IRanges} object.\n     */\n    overlap(query) {\n        let n = generics.LENGTH(query);\n        let output = new Array(n);\n        for (var i = 0; i < n; i++) {\n            output[i] = olap.queryIntervalTree(query._start[i], query._start[i] + query._width[i], this._tree);\n        }\n        return output;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as ir from \"./IRanges.js\";\nimport * as vec from \"./Vector.js\";\nimport * as olap from \"./overlap-utils.js\";\n\n/**\n * A GRanges object is a collection of genomic ranges, inspired by the class of the same name from the Bioconductor ecosystem.\n * Each range consists of a sequence name, a start position on that sequence, and a width.\n * Each range may also be associated with arbitrary range-level metadata in a {@linkplain DataFrame}.\n * The GRanges defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @extends Vector\n */\nexport class GRanges extends vec.Vector {\n    static #convertToInt8Array(x) {\n        if (x instanceof Int8Array) {\n            return x;\n        } else {\n            return new Int8Array(x);\n        }\n    }\n\n    static #checkStrandedness(strand) {\n        for (const y of strand) {\n            if (y < -1 || y > 1) {\n                throw new Error(\"'strand' must be -1, 0 or 1\");\n            }\n        }\n    }\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @param {IRanges} ranges - Position and width of the range on its specified sequence.\n     * This should have the same length as `seqnames`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.strand=null] - Array containing the strandedness of each genomic range.\n     * This should be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     * If `null`, this is assumed to be 0 for all genomic ranges.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each genomic range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(seqnames, ranges, { strand = null, names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(seqnames.length, { names, elementMetadata, metadata });\n\n        utils.checkStringArray(seqnames, \"seqnames\");\n        this._seqnames = seqnames;\n\n        let n = seqnames.length;\n        if (n !== generics.LENGTH(ranges)) {\n            throw utils.formatLengthError(\"'ranges'\", \"'seqnames'\");\n        }\n        this._ranges = ranges;\n\n        if (strand !== null) {\n            if (n !== strand.length) {\n                throw utils.formatLengthError(\"'strand'\", \"'seqnames'\");\n            }\n            strand = GRanges.#convertToInt8Array(strand);\n            GRanges.#checkStrandedness(strand);\n        } else {\n            strand = new Int8Array(n);\n            strand.fill(0);\n        }\n        this._strand = strand;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Int32Array} Array of integers containing the start position for each genomic range.\n     */\n    start() {\n        return this._ranges.start();\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the end position (specifically, one-past-the-end) for each genomic range.\n     */\n    end() {\n        return this._ranges.end();\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the width of each genomic range.\n     */\n    width() {\n        return this._ranges.width();\n    }\n\n    /**\n     * @return {Array} Array of strings containing the sequence name for each genomic range.\n     */\n    seqnames() {\n        return this._seqnames;\n    }\n\n    /**\n     * @return {IRanges} Start positions and widths for all ranges on their specified sequence names.\n     */\n    ranges() {\n        return this._ranges;\n    }\n\n    /**\n     * @return {Int8Array} Array containing the strandedness for each genomic range - 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     */\n    strand() {\n        return this._strand;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the sequence names to `seqnames`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setSeqnames(seqnames, { inPlace = false } = {}) {\n        utils.checkNamesArray(seqnames, \"replacement 'seqnames'\", generics.LENGTH(this), \"'LENGTH(<GRanges>)'\");\n        let target = cutils.setterTarget(this, inPlace); \n        target._seqnames = seqnames;\n        return target;\n    }\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @return {GRanges} A reference to this GRanges object after setting the sequence names to `seqnames`.\n     */\n    $setSeqnames(seqnames) {\n        return this.setSeqnames(seqnames, { inPlace: true });\n    }\n\n    /**\n     * @param {IRanges} ranges - Start positions and widths for each genomic range.\n     * This should have length equal to the number of ranges. \n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the ranges to `ranges`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRanges(ranges, { inPlace = false } = {}) {\n        if (!(ranges instanceof ir.IRanges)) {\n            throw new Error(\"'ranges' should be an IRanges object\");\n        }\n\n        if (generics.LENGTH(ranges) !== generics.LENGTH(this._ranges)) {\n            throw utils.formatLengthError(\"replacement 'ranges'\", \"'LENGTH(<GRanges>)'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace); \n        target._ranges = ranges;\n        return target;\n    }\n\n    /**\n     * @param {IRanges} ranges - Start positions and widths for each genomic range.\n     * This should have length equal to the number of ranges. \n     * @return {GRanges} A reference to this GRanges object after setting the ranges to `ranges`.\n     */\n    $setRanges(ranges) {\n        return this.setRanges(ranges, { inPlace: true });\n    }\n\n    /**\n     * @param {Array|TypedArray} strand - Array of strands for each genomic range.\n     * This should have length equal to the number of ranges. \n     * Entries may be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the strands to `strand`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setStrand(strand, { inPlace = false } = {}) {\n        if (this._strand.length !== strand.length) {\n            throw utils.formatLengthError(\"'strand'\", \"'seqnames'\");\n        }\n        strand = GRanges.#convertToInt8Array(strand);\n        GRanges.#checkStrandedness(strand);\n\n        let target = cutils.setterTarget(this, inPlace); \n        target._strand = strand;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} strand - Array of strands for each genomic range.\n     * This should have length equal to the number of ranges. \n     * Entries may be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     *\n     * @return {GRanges} A reference to this GRanges object after setting the strands to `strand`.\n     */\n    $setStrand(strand) {\n        return this.setStrand(strand, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|Set)} [options.restrictToSeqnames=null] - Array or Set containing the sequence names to use in the index.\n     * If `null`, all available sequence names are used.\n     * @param {?(Array|Set)} [options.restrictToStrand=null] - Array or Set containing the strands to use in the index.\n     * If `null`, all available strands are used.\n     *\n     * @return {GRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain GRanges} instances.\n     */\n    buildOverlapIndex({ restrictToSeqnames = null, restrictToStrand = null } = {}) {\n        let indices = utils.createSequence(generics.LENGTH(this));\n        let by_seqname = generics.SPLIT(indices, this._seqnames);\n        let starts = this.start();\n        let ends = this.end();\n\n        if (restrictToSeqnames !== null && restrictToSeqnames instanceof Array) {\n            restrictToSeqnames = new Set(restrictToSeqnames);\n        }\n        if (restrictToStrand !== null && restrictToStrand instanceof Array) {\n            restrictToStrand = new Set(restrictToStrand);\n        }\n\n        for (const name of Object.keys(by_seqname)) {\n            if (restrictToSeqnames !== null && !restrictToSeqnames.has(name)) {\n                delete by_seqname[name];\n                continue;\n            }\n            let seqname_indices = by_seqname[name];\n            let seqname_strand = generics.SLICE(this._strand, seqname_indices);\n            let by_strand = generics.SPLIT(seqname_indices, seqname_strand);\n\n            for (const str of Object.keys(by_strand)) {\n                if (restrictToStrand !== null && !restrictToStrand.has(Number(str))) {\n                    delete by_strand[str];\n                    continue;\n                }\n                let str_indices = by_strand[str];\n                by_strand[str] = olap.buildIntervalTree(starts, ends, { slice: str_indices });\n            }\n            by_seqname[name] = by_strand;\n        }\n\n        return new GRangesOverlapIndex(by_seqname);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._seqnames.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        output._seqnames = generics.SLICE(this._seqnames, i, { allowView });\n        output._ranges = generics.SLICE(this._ranges, i, { allowView });\n        output._strand = generics.SLICE(this._strand, i, { allowView });\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        let all_sn = [];\n        let all_rr = [];\n        let all_st = [];\n        for (const x of objects) {\n            all_sn.push(x._seqnames);\n            all_rr.push(x._ranges);\n            all_st.push(x._strand);\n        }\n\n        output._seqnames = generics.COMBINE(all_sn);\n        output._ranges = generics.COMBINE(all_rr);\n        output._strand = generics.COMBINE(all_st);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._seqnames = cutils.cloneField(this._seqnames, deepCopy);\n        output._ranges = cutils.cloneField(this._ranges, deepCopy);\n        output._strand = cutils.cloneField(this._strand, deepCopy);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} A zero-length GRanges object.\n     */\n    static empty() {\n        return new GRanges([], ir.IRanges.empty());\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain GRanges} objects.\n * This is typically constructed using the {@linkcode GRanges#buildOverlapIndex GRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query GRanges to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class GRangesOverlapIndex {\n    constructor(index) {\n        this._index = index;\n    }\n\n    /**\n     * @param {GRanges} query - The query object, containing ranges to be overlapped with those in the reference GRanges (that was used to construct this GRangesOverlapIndex object).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.ignoreStrand=true] - Whether to ignore differences in strandedness between the ranges in `query` and the reference object.\n     *\n     * @return {Array} An array of length equal to the number of ranges in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain GRanges} object.\n     */\n    overlap(query, { ignoreStrand = true } = {}) {\n        let n = generics.LENGTH(query);\n        let results = new Array(n);\n        let starts = query.start();\n        let ends = query.end();\n\n        for (var i = 0; i < n; i++) {\n            results[i] = [];\n            let my_results = results[i];\n\n            let name = query._seqnames[i];\n            if (!(name in this._index)) {\n                continue;\n            }\n            let seq_index = this._index[name];\n\n            let strand = query._strand[i];\n            let allowed_strands;\n            if (ignoreStrand || strand == 0) {\n                allowed_strands = Object.keys(seq_index);\n            } else {\n                let sstr = String(strand);\n                if (!(sstr in seq_index)) {\n                    continue;\n                }\n                allowed_strands = [ sstr ];\n            }\n\n            let start = starts[i];\n            let end = ends[i];\n            for (const str of allowed_strands) {\n                let str_results = olap.queryIntervalTree(start, end, seq_index[str]);\n                str_results.forEach(x => my_results.push(x));\n            }\n        }\n\n        return results;\n    }\n}\n","import * as vec from \"./Vector.js\";\nimport * as gr from \"./GRanges.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as generics from \"./AllGenerics.js\";\n\n/**\n * A GroupedGRanges object is a collection of groups of genomic ranges, inspired by the `GRangesList` class from the Bioconductor ecosystem.\n * Each group consists of a {@linkplain GRanges} object of arbitrary length, which is most often used to represent a multi-exon gene.\n * The GroupedGRanges can be considered a vector of groups, and defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * Our implementation re-uses Bioconductor's strategy of storing the groups in a single concatenated GRanges.\n * This improves efficiency for large numbers of small GRanges, especially in placeholder objects where all the GRanges are zero-length.\n * \n * @extends Vector\n */\nexport class GroupedGRanges extends vec.Vector {\n    static #computeStarts(lengths) {\n        let starts = new Int32Array(lengths.length);\n        let last = 0;\n        for (var i = 0; i < lengths.length; i++) {\n            starts[i] = last;\n            last += lengths[i];\n        }\n        return { starts: starts, total: last };\n    }\n\n    #staged_setGroup = null;\n\n    /**\n     * @param {Array|GRanges} ranges - An array of {@linkplain GRanges} objects, where each element represents a group of genomic ranges.\n     * All objects should have compatible columns in their {@linkplain Vector#elementMetadata elementMetadata}.\n     * \n     * Alternatively, a single GRanges containing a concatenation of ranges from all groups.\n     * In this case, `rangeLengths` must be supplied.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(TypedArray|Array)} [options.rangeLengths=null] - Length of the ranges within each group.\n     * This should be coercible to an Int32Array, contain non-negative values, and have a sum equal to the length of `ranges`.\n     * Only used if `ranges` is a single {@linkplain GRanges} object, where each group's ranges are assumed to form contiguous intervals along `ranges`.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each genomic range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(ranges, { rangeLengths = null, names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        if (ranges.constructor == Array) {\n            super(ranges.length, { names, elementMetadata, metadata });\n            rangeLengths = new Int32Array(ranges.length);\n            for (var i = 0; i < rangeLengths.length; i++) {\n                if (!(ranges[i] instanceof gr.GRanges)) {\n                    throw new Error(\"'ranges' must either be a 'GRanges' or an array of 'GRanges'\");\n                }\n                rangeLengths[i] = generics.LENGTH(ranges[i]);\n            }\n            ranges = generics.COMBINE(ranges);\n\n        } else {\n            if (!(ranges instanceof gr.GRanges)) {\n                throw new Error(\"'ranges' must either be a 'GRanges' or an array of 'GRanges'\");\n            }\n            if (rangeLengths == null) {\n                throw new Error(\"'rangeLengths' must be specified when 'ranges' is a 'GRanges'\");\n            }\n            super(rangeLengths.length, { names, elementMetadata, metadata });\n            rangeLengths = utils.convertToInt32Array(rangeLengths);\n            utils.checkNonNegative(rangeLengths);\n        }\n\n        this._ranges = ranges;\n        this._rangeLengths = rangeLengths;\n\n        let accumulated = GroupedGRanges.#computeStarts(rangeLengths);\n        this._rangeStarts = accumulated.starts;\n\n        if (accumulated.total !== generics.LENGTH(ranges)) {\n            throw new Error(\"sum of 'rangeLengths' must be equal to the length of 'ranges'\");\n        }\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} The concatenated set of ranges across all groups. \n     */\n    ranges() {\n        this.#flush_staged_setGroup();\n        return this._ranges;\n    }\n\n    /**\n     * @return {Int32Array} The start indices for each group's ranges along the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     */\n    rangeStarts() {\n        this.#flush_staged_setGroup();\n        return this._rangeStarts;\n    }\n\n    /**\n     * @return {Int32Array} The length of each group's ranges along the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     */\n    rangeLengths() {\n        this.#flush_staged_setGroup();\n        return this._rangeLengths;\n    }\n\n    /**\n     * @param {number} i - Index of the group of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether a view can be created in any internal slicing operations.\n     *\n     * @return {GRanges} The genomic ranges for group `i`.\n     */\n    group(i, { allowView = false } = {}) {\n        this.#flush_staged_setGroup();\n        let s = this._rangeStarts[i];\n        return generics.SLICE(this._ranges, { start: s, end: s + this._rangeLengths[i] }, { allowView });\n    }\n\n    /**\n     * @return {number} Number of groups in this object.\n     */\n    numberOfGroups() {\n        return this._rangeStarts.length;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {GRanges} ranges - Genomic ranges of length equal to the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GroupedGRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GroupedGRanges} The GroupedGRanges object after modifying the internal ranges.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRanges(ranges, { inPlace = false } = {}) {\n        if (!(ranges instanceof gr.GRanges)) {\n            throw new Error(\"'ranges' must be a 'GRanges'\");\n        }\n\n        this.#flush_staged_setGroup();\n        if (generics.LENGTH(ranges) !== generics.LENGTH(this._ranges)) {\n            throw utils.formatLengthError(\"'ranges'\", \"number of ranges\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._ranges = ranges;\n        return target;\n    }\n\n    /**\n     * @param {GRanges} ranges - Genomic ranges of length equal to the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     * @return {GroupedGRanges} A reference to this GroupedGRanges object after modifying the internal ranges.\n     */\n    $setRanges(ranges) {\n        return this.setRanges(ranges, { inPlace: true });\n    }\n\n    #flush_staged_setGroup() {\n        let staged = this.#staged_setGroup;\n        if (staged === null) {\n            return;\n        }\n\n        staged.sort((a, b) => {\n            let diff = a[0] - b[0];\n            return (diff === 0 ? a[1] - b[1] : diff);\n        });\n\n        let counter = 0;\n        let accumulated = 0;\n        let last_start = 0;\n        let more_ranges = [];\n\n        let ngroups = this.numberOfGroups();\n        for (var g = 0; g < ngroups; g++) {\n            if (counter < staged.length && g == staged[counter][0]) { \n                let current_start = this._rangeStarts[g];\n                if (last_start < current_start) {\n                    more_ranges.push(generics.SLICE(this._ranges, { start: last_start, end: current_start }));\n                }\n                last_start = current_start + this._rangeLengths[g];\n\n                let replacement;\n                do {\n                    replacement = staged[counter][2];\n                    counter++;\n                } while (counter < staged.length && g == staged[counter][0]);\n\n                more_ranges.push(replacement);\n                this._rangeLengths[g] = generics.LENGTH(replacement);\n            }\n\n            this._rangeStarts[g] = accumulated;\n            accumulated += this._rangeLengths[g];\n        }\n\n        let nranges = generics.LENGTH(this._ranges);\n        if (last_start < nranges) {\n            more_ranges.push(generics.SLICE(this._ranges, { start: last_start, end: nranges }));\n        }\n\n        try {\n            this._ranges = generics.COMBINE(more_ranges);\n        } catch (e) {\n            throw new Error(\"failed to combine staged '$setGroup' operations; \" + e.message);\n        }\n\n        this.#staged_setGroup = null;\n        return;\n    }\n\n    /**\n     * Multiple consecutive calls to `$setGroup` are not executed immediately.\n     * Rather, the operations are staged and executed in batch once the modified GroupedGRanges is used in other methods.\n     * This enables efficient setting of individual groups inside a single concatenated {@linkplain GRanges}. \n     *\n     * @param {number} i - Index of the group of interest.\n     * @param {GRanges} ranges - Genomic ranges for group `i`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GroupedGRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GroupedGRanges} The GroupedGRanges object after setting group `i`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setGroup(i, ranges, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (target.#staged_setGroup === null) {\n            target.#staged_setGroup = [];\n        } else if (!inPlace) {\n            target.#staged_setGroup = target.#staged_setGroup.slice();\n        }\n\n        if (!inPlace) {\n            target._rangeStarts = target._rangeStarts.slice();\n            target._rangeLengths = target._rangeLengths.slice();\n        }\n\n        let nops = target.#staged_setGroup.length;\n        target.#staged_setGroup.push([i, nops, ranges]);\n        return target;\n    }\n\n    /**\n     * See comments for {@linkcode GroupedGRanges#$setGroup $setGroup}.\n     *\n     * @param {number} i - Index of the group of interest.\n     * @param {GRanges} ranges - Genomic ranges for group `i`.\n     *\n     * @return {GroupedGRanges} A reference to this GroupedGRanges object after setting group `i`.\n     */\n    $setGroup(i, ranges) {\n        return this.setGroup(i, ranges, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|Set)} [options.restrictToSeqnames=null] - Array or Set containing the sequence names to use in the index.\n     * If `null`, all available sequence names are used.\n     * @param {?(Array|Set)} [options.restrictToStrand=null] - Array or Set containing the strands to use in the index.\n     * If `null`, all available strands are used.\n     *\n     * @return {GroupedGRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain GRanges} instances.\n     */\n    buildOverlapIndex({ restrictToSeqnames = null, restrictToStrand = null } = {}) {\n        this.#flush_staged_setGroup();\n        return new GroupedGRangesOverlapIndex(\n            this._ranges.buildOverlapIndex({ restrictToSeqnames, restrictToStrand }),\n            generics.LENGTH(this._ranges),\n            this._rangeStarts,\n            this._rangeLengths\n        );\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._rangeStarts.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false } = {}) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        this.#flush_staged_setGroup();\n\n        output._rangeLengths = generics.SLICE(this._rangeLengths, i, { allowView });\n        let accumulated = GroupedGRanges.#computeStarts(output._rangeLengths);\n        output._rangeStarts = accumulated.starts;\n\n        if (i.constructor == Object) {\n            // Handle this specially for optimizing allowView = true.\n            let s = this._rangeStarts[i.start];\n            output._ranges = generics.SLICE(this._ranges, { start: s, end: s + accumulated.total }, { allowView });\n        } else {\n            let keep = new Int32Array(accumulated.total);\n\n            let counter = 0;\n            for (const j of i) {\n                let start = this._rangeStarts[j];\n                let end = start + this._rangeLengths[j];\n                for (var k = start; k < end; k++) {\n                    keep[counter] = k;\n                    counter++;\n                }\n            }\n\n            output._ranges = generics.SLICE(this._ranges, keep, { allowView });\n        }\n\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        // We need to flush the staged operations in each object.\n        for (const o of objects) {\n            o.#flush_staged_setGroup();\n        }\n\n        output._rangeLengths = generics.COMBINE(objects.map(x => x.rangeLengths()));\n        let accumulated = GroupedGRanges.#computeStarts(output._rangeLengths);\n        output._rangeStarts = accumulated.starts;\n        output._ranges = generics.COMBINE(objects.map(x => x._ranges));\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output.#staged_setGroup = cutils.cloneField(this.#staged_setGroup, deepCopy);\n        output._rangeLengths = cutils.cloneField(this._rangeLengths, deepCopy);\n        output._rangeStarts = cutils.cloneField(this._rangeStarts, deepCopy);\n        output._ranges = cutils.cloneField(this._ranges, deepCopy);\n\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {number} [numberOfGroups=0] - Numbe of empty groups to create.\n     * @return {GroupedGRanges} A GroupedGRanges object of length equal to `numberOfGroups`,\n     * where each group is of zero length.\n     */\n    static empty(numberOfGroups) {\n        let runs = new Int32Array(numberOfGroups);\n        runs.fill(0);\n        return new GroupedGRanges(gr.GRanges.empty(), { rangeLengths: runs });\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain GroupedGRanges} objects.\n * This is typically constructed using the {@linkcode GroupedGRanges#buildOverlapIndex GroupedGRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query GroupedGRanges or {@linkplain GRanges} to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class GroupedGRangesOverlapIndex {\n    constructor(index, fullLength, rangeStarts, rangeLengths) {\n        this._index = index;\n        this._rangeStarts = rangeStarts;\n        this._rangeLengths = rangeLengths;\n\n        let rev_map = new Int32Array(fullLength);\n        for (var i = 0; i < rangeStarts.length; i++) {\n            let start = rangeStarts[i];\n            let end = start + rangeLengths[i];\n            for (var s = start; s < end; s++) {\n                rev_map[s] = i;\n            }\n        }\n        this._reverseMapping = rev_map;\n    }\n\n    /**\n     * @param {GroupedGRanges|GRanges} query - The query object, containing ranges to be overlapped with those in the reference GroupedGRanges (that was used to construct this GroupedGRangesOverlapIndex object).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.ignoreStrand=true] - Whether to ignore differences in strandedness between the ranges in `query` and the reference object.\n     *\n     * @return {Array} An array of length equal to the number of ranges or groups in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain GRanges} object.\n     */\n    overlap(query, { ignoreStrand = true } = {}) {\n        let output = new Array(this._rangeStarts.length);\n        let rev_map = this._reverseMapping;\n\n        if (query instanceof GroupedGRanges) {\n            let overlaps = this._index.overlap(query._ranges);\n            for (var i = 0; i < query._rangeStarts.length; i++) {\n                let start = query._rangeStarts[i];\n                let end = start + query._rangeLengths[i];\n\n                let results = new Set;\n                for (var s = start; s < end; s++) {\n                    overlaps[s].forEach(x => results.add(rev_map[x]));\n                }\n                output[i] = Array.from(results);\n            }\n\n        } else {\n            let overlaps = this._index.overlap(query);\n            for (var i = 0; i < overlaps.length; i++) {\n                let results = new Set;\n                overlaps[i].forEach(x => results.add(rev_map[x]));\n                output[i] = Array.from(results);\n            }\n        }\n\n        return output;\n    }\n\n}\n","import * as cutils from \"./clone-utils.js\";\n\n/**\n * Dense matrix of numbers.\n * Not really a Bioconductor-exclusive data structure, but we need this at a minimum for the {@linkplain SummarizedExperiment} to be useful.\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n */\nexport class DenseMatrix {\n    /**\n     * @param {number} numberOfRows - Number of rows, duh.\n     * @param {number} numberOfColumns - Number of columns.\n     * @param {TypedArray} values - 1-dimensional array of the matrix contents.\n     * This should have length equal to the product of `numberOfRows` and `numberOfColumns`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.columnMajor=true] - Whether `values` represents a column-major layout.\n     */\n    constructor(numberOfRows, numberOfColumns, values, { columnMajor = true } = {}) {\n        if (arguments.length == 0) {\n            return;\n        }\n\n        this._numberOfRows = numberOfRows;\n        this._numberOfColumns = numberOfColumns;\n        this._values = values;\n        this._columnMajor = columnMajor;\n        if (numberOfRows * numberOfColumns != values.length) {\n            throw new Error(\"length of 'values' should be equal to the product of 'dimensions'\");\n        }\n    }\n\n    static name = \"DenseMatrix\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {number} Number of rows.\n     */\n    numberOfRows() {\n        return this._numberOfRows;\n    }\n\n    /**\n     * @return {number} Number of columns.\n     */\n    numberOfColumns() {\n        return this._numberOfColumns;\n    }\n\n    /**\n     * @return {boolean} Whether the matrix is column-major.\n     */\n    isColumnMajor() {\n        return this._columnMajor;\n    }\n\n    /**\n     * @return {TypedArray} Matrix contents as a 1-dimensional array.\n     */\n    values() {\n        return this._values;\n    }\n\n    #extractor(i, nprimary, nsecondary, allowView, primaryMajor) {\n        if (!primaryMajor) {\n            let output = new this._values.constructor(nsecondary);\n            let offset = i;\n            for (var s = 0; s < nsecondary; s++) {\n                output[s] = this._values[offset];\n                offset += nprimary;\n            }\n            return output;\n\n        } else {\n            let start = i * nsecondary;\n            let end = start + nsecondary;\n            if (allowView) {\n                return this._values.subarray(start, end);\n            } else {\n                return this._values.slice(start, end);\n            }\n        }\n    }\n\n    /**\n     * Retrieve the contents of a particular row.\n     *\n     * @param {number} i - Index of the row of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether to allow a view to be returned, if possible.\n     *\n     * @return {TypedArray} Contents of the row `i`.\n     * This may be a view on the array returned by {@linkcode DenseMatrix#values values}, if permitted by the layout.\n     */\n    row(i, { allowView = false } = {}) {\n        return this.#extractor(i, this._numberOfRows, this._numberOfColumns, allowView, !this._columnMajor);\n    }\n\n    /**\n     * Retrieve the contents of a particular column.\n     *\n     * @param {number} i - Index of the column of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether to allow a view to be returned, if possible.\n     *\n     * @return {TypedArray} Contents of the column `i`.\n     * This may be a view on the array returned by {@linkcode DenseMatrix#values values}, if permitted by the layout.\n     */\n    column(i, { allowView = false } = {}) {\n        return this.#extractor(i, this._numberOfColumns, this._numberOfRows, allowView, this._columnMajor);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {TypedArray} values - 1-dimensional array of matrix contents,\n     * of the same length as the array returned by {@linkcode DenseMatrix#values values}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setValues(values, { inPlace = false } = {}) {\n        if (values.length !== this._values.length) {\n            throw new Error(\"replacement 'values' should have length equal to 'values()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._values = values;\n        return target;\n    }\n\n    /**\n     * @param {TypedArray} values - 1-dimensional array of matrix contents,\n     * of the same length as the array returned by {@linkcode DenseMatrix#values values}.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setValues(values) {\n        return this.setValues(values, { inPlace: true });\n    }\n\n    #inserter(i, nprimary, nsecondary, primaryMajor, replacement) {\n        if (!primaryMajor) {\n            let output = new this._values.constructor(nsecondary);\n            let offset = i;\n            for (var s = 0; s < nsecondary; s++) {\n                this._values[offset] = replacement[s];\n                offset += nprimary;\n            }\n        } else {\n            let start = i * nsecondary;\n            this._values.set(replacement, start);\n        }\n    }\n\n    /**\n     * @param {number} i - Row index to set.\n     * @param {TypedArray} values - Row contents, of length equal to the number of columns in this DenseMatrix.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRow(i, values, { inPlace = false } = {}) {\n        if (values.length !== this._numberOfColumns) {\n            throw new Error(\"replacement row should have length equal to 'numberOfColumns()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            target._values = target._values.slice();\n        }\n\n        target.#inserter(i, target._numberOfRows, target._numberOfColumns, !target._columnMajor, values);\n        return target;\n    }\n\n    /**\n     * @param {number} i - Row index to set.\n     * @param {TypedArray} values - Row contents, of length equal to the number of columns in this DenseMatrix.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setRow(i, value) {\n        return this.setRow(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {number} i - Column index to set.\n     * @param {TypedArray} values - Column contents, of length equal to the number of rows in this DenseMatrix.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumn(i, values, { inPlace = false } = {}) {\n        if (values.length !== this._numberOfRows) {\n            throw new Error(\"replacement column should have length equal to 'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            target._values = target._values.slice();\n        }\n\n        target.#inserter(i, target._numberOfColumns, target._numberOfRows, target._columnMajor, values);\n        return target;\n    }\n\n    /**\n     * @param {number} i - Column index to set.\n     * @param {TypedArray} values - Column contents, of length equal to the number of columns in this DenseMatrix.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setColumn(i, value) {\n        return this.setColumn(i, value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_NUMBER_OF_ROWS() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_NUMBER_OF_COLUMNS() {\n        return this.numberOfColumns();\n    }\n\n    _bioconductor_SLICE_2D(output, rows, columns, {}) {\n        let full_rows = (rows === null);\n        let is_row_range = (!full_rows && rows.constructor == Object);\n        let new_rows = full_rows ? this._numberOfRows : (is_row_range ? rows.end - rows.start : rows.length);\n        output._numberOfRows = new_rows;\n\n        let full_columns = (columns === null);\n        let is_column_range = (!full_columns && columns.constructor == Object);\n        let new_columns = full_columns ? this._numberOfColumns : (is_column_range ? columns.end - columns.start : columns.length);\n        output._numberOfColumns = new_columns;\n\n        let new_values = new this._values.constructor(new_rows * new_columns);\n        output._values = new_values;\n\n        if (this._columnMajor) {\n            this.#primarySlicer(columns, full_columns, is_column_range, this._numberOfColumns, rows, full_rows, is_row_range, this._numberOfRows, new_rows, new_values);\n        } else {\n            this.#primarySlicer(rows, full_rows, is_row_range, this._numberOfRows, columns, full_columns, is_column_range, this._numberOfColumns, new_columns, new_values);\n        }\n        output._columnMajor = this._columnMajor;\n        return;\n    }\n\n    #primarySlicer(primarySlice, fullPrimary, isPrimaryRange, primaryDim, secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues) {\n        if (fullPrimary) {\n            for (var p = 0; p < primaryDim; p++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, p, p);\n            }\n        } else if (isPrimaryRange) {\n            for (var p = primarySlice.start; p < primarySlice.end; p++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, p, p - primarySlice.start);\n            }\n        } else {\n            for (var pi = 0; pi < primarySlice.length; pi++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, primarySlice[pi], pi);\n            }\n        }\n    }\n\n    #secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, inPrimary, outPrimary) {\n        let in_offset = inPrimary * inSecondaryDim;\n        let out_offset = outPrimary * outSecondaryDim;\n\n        if (fullSecondary) {\n            let view = this._values.subarray(in_offset, in_offset + inSecondaryDim);\n            outputValues.set(view, out_offset);\n        } else if (isSecondaryRange) {\n            for (var s = secondarySlice.start; s < secondarySlice.end; s++) {\n                outputValues[out_offset + s - secondarySlice.start] = this._values[in_offset + s];\n            }\n        } else {\n            for (var si = 0; si < secondarySlice.length; si++) {\n                outputValues[out_offset + si] = this._values[in_offset + secondarySlice[si]];\n            }\n        }\n    }\n\n    _combiner(objects, primaryFun, secondaryFun, isPrimaryMajor, secondaryName) {\n        let num_primary = primaryFun(objects[0]);\n        let num_secondary = secondaryFun(objects[0]);\n        for (var i = 1; i < objects.length; i++) {\n            if (secondaryFun(objects[i]) !== num_secondary) {\n                throw new Error(\"all objects must have the same number of \" + secondaryName);\n            }\n            num_primary += primaryFun(objects[i]);\n        }\n\n        let primary_major = isPrimaryMajor(objects[0]);\n        let values = new objects[0]._values.constructor(num_primary * num_secondary);\n\n        if (primary_major) {\n            let used_primary = 0;\n            for (var i = 0; i < objects.length; i++) {\n                let current = objects[i];\n                let cur_primary = primaryFun(current);\n                let out_offset = used_primary * num_secondary;\n\n                if (isPrimaryMajor(current)) {\n                    values.set(current._values, out_offset);\n                } else {\n                    for (var s = 0; s < num_secondary; s++) {\n                        let in_offset = s * cur_primary;\n                        let out_offset2 = out_offset + s;\n                        for (var p = 0; p < cur_primary; p++) {\n                            values[out_offset2 + p * num_secondary] = current._values[in_offset + p];\n                        }\n                    }\n                }\n\n                used_primary += cur_primary;\n            }\n        } else {\n            let used_primary = 0;\n            for (var i = 0; i < objects.length; i++) {\n                let current = objects[i];\n                let cur_primary = primaryFun(current);\n\n                if (!isPrimaryMajor(current)) {\n                    for (var s = 0; s < num_secondary; s++) {\n                        let view_offset = s * cur_primary;\n                        let view = current._values.subarray(view_offset, view_offset + cur_primary);\n                        values.set(view, used_primary + s * num_primary);\n                    }\n                } else {\n                    for (var p = 0; p < cur_primary; p++) {\n                        let in_offset = p * num_secondary;\n                        let out_offset = used_primary + p;\n                        for (var s = 0; s < num_secondary; s++) {\n                            values[out_offset + s * num_primary] = current._values[in_offset + s];\n                        }\n                    }\n                }\n\n                used_primary += cur_primary;\n            }\n        }\n\n        return { num_primary, num_secondary, values, primary_major };\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        let combined = this._combiner(objects,\n            x => x._numberOfRows,\n            x => x._numberOfColumns,\n            x => !(x._columnMajor),\n            \"columns\"\n        );\n\n        output._numberOfRows = combined.num_primary;\n        output._numberOfColumns = combined.num_secondary;\n        output._values = combined.values;\n        output._columnMajor = !(combined.primary_major);\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        let combined = this._combiner(objects,\n            x => x._numberOfColumns,\n            x => x._numberOfRows,\n            x => x._columnMajor,\n            \"rows\"\n        );\n\n        output._numberOfColumns = combined.num_primary;\n        output._numberOfRows = combined.num_secondary;\n        output._values = combined.values;\n        output._columnMajor = combined.primary_major;\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true } = {}) {\n        output._values = (deepCopy ? this._values.slice() : this._values);\n        output._numberOfRows = this._numberOfRows;\n        output._numberOfColumns = this._numberOfColumns;\n        output._columnMajor = this._columnMajor;\n        return;\n    }\n}\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}","import * as generics from \"./AllGenerics.js\";\nimport * as ann from \"./Annotated.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A SummarizedExperiment contains zero or more assays, consisting of multi-dimensional arrays (usually matrices) of experimental data,\n * as well as {@linkplain DataFrame}s containing further annotations on the rows or columns of those arrays.\n * The SummarizedExperiment class defines methods for the following generics:\n * \n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n *\n * Assays are expected to provide methods for the following generics:\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n *\n * @extends Annotated\n */\nexport class SummarizedExperiment extends ann.Annotated {\n    /**\n     * @param {Object|Map} assays - Object or Map where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * All arrays should have the same number of rows and columns.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?Array} [options.assayOrder=null] - Array of strings specifying the ordering of the assays.\n     * If non-`null`, this should have the same values as the keys of `assays`.\n     * If `null`, an arbitrary ordering is obtained from `assays`.\n     * @param {?DataFrame} [options.rowData=null] - Data frame of row annotations.\n     * If non-`null`, this should have a number of rows equal to the number of rows in each entry of `assays`.\n     * If `null`, an empty {@linkplain DataFrame} is automatically created.\n     * @param {?DataFrame} [options.columnData=null] - Data frame of column annotations.\n     * If non-`null`, this should have a number of columns equal to the number of columns in each entry of `assays`.\n     * If `null`, an empty {@linkplain DataFrame} is automatically created.\n     * @param {?Array} [options.rowNames=null] - Array of strings of length equal to the number of rows in the `assays`, containing row names.\n     * Alternatively `null`, if no row names are present.\n     * @param {?Array} [options.columnNames=null] - Array of strings of length equal to the number of columns in the `assays`, containing column names.\n     * Alternatively `null`, if no column names are present.\n     * @param {Object|Map} [options.metadata={}] - Object or Map containing arbitrary metadata as key-value pairs.\n     */\n    constructor(assays, { assayOrder = null, rowData = null, columnData = null, rowNames = null, columnNames = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n\n        // Check the assays.\n        try {\n            this._assays = new il.InternalList(assays, assayOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize assay list for this SummarizedExperiment; \" + e.message, { cause: e });\n        }\n\n        let nrows = null;\n        let ncols = null;\n        for (const k of this._assays.names()) {\n            let current = this._assays.entry(k);\n            let nr = generics.NUMBER_OF_ROWS(current);\n            let nc = generics.NUMBER_OF_COLUMNS(current);\n            if (nrows == null) {\n                nrows = nr;\n                ncols = nc;\n            } else if (nrows !== nr || ncols !== nc) {\n                throw new Error(\"expected all assays in 'assays' to have the same number of rows and columns\");\n            }\n        }\n\n        // Check the rowData.\n        if (rowData === null) {\n            if (nrows == null){\n                throw new Error(\"'rowData' must be specified if 'assays' is empty\");\n            }\n            rowData = new df.DataFrame({}, { numberOfRows: nrows });\n        } else {\n            if (nrows !== null && nrows !== generics.LENGTH(rowData)) {\n                throw new Error(\"'rowData' should be equal to the number of rows in each 'assays'\");\n            }\n        }\n        this._rowData = rowData;\n\n        // Check the columnData.\n        if (columnData === null) {\n            if (ncols == null){\n                throw new Error(\"'columnData' must be specified if 'assays' is empty\");\n            }\n            columnData = new df.DataFrame({}, { numberOfRows: ncols });\n        } else {\n            if (ncols !== null && ncols !== generics.LENGTH(columnData)) {\n                throw new Error(\"'columnData' should be equal to the number of columns in each 'assays'\");\n            }\n        }\n        this._columnData = columnData;\n\n        // Checking the names.\n        if (rowNames != null) {\n            utils.checkNamesArray(rowNames, \"'rowNames'\", this._rowData.numberOfRows(), \"the number of rows in each 'assays'\");\n        }\n        this._rowNames = rowNames;\n\n        if (columnNames != null) {\n            utils.checkNamesArray(columnNames, \"'columnNames'\", this._columnData.numberOfRows(), \"the number of columns in each 'assays'\");\n        }\n        this._columnNames = columnNames;\n    }\n\n    static className = \"SummarizedExperiment\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Array} Array of assay names.\n     */\n    assayNames() {\n        return this._assays.names();\n    }\n\n    /**\n     * @return {number} Number of assays.\n     */\n    numberOfAssays() {\n        return this._assays.numberOfEntries();\n    }\n\n    /**\n     * @param {string|number} i - Assay to retrieve, either by name or index.\n     * @return {*} The contents of assay `i` as an multi-dimensional array-like object.\n     */\n    assay(i) {\n        let output;\n        try {\n            output = this._assays.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified assay from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**\n     * @return {DataFrame} Data frame of row data, with one row per row in this SummarizedExperiment.\n     */\n    rowData() {\n        return this._rowData;\n    }\n\n    /**\n     * @return {number} Number of rows in this SummarizedExperiment.\n     */\n    numberOfRows() {\n        return this._rowData.numberOfRows();\n    }\n\n    /**\n     * @return {?Array} Array of strings containing row names, or `null` if no row names are available.\n     */\n    rowNames() {\n        return this._rowNames;\n    }\n\n    /**\n     * @return {DataFrame} Data frame of column data, with one row per column in this SummarizedExperiment.\n     */\n    columnData() {\n        return this._columnData;\n    }\n\n    /**\n     * @return {number} Number of columns in this SummarizedExperiment.\n     */\n    numberOfColumns() {\n        return this._columnData.numberOfRows();\n    }\n\n    /**\n     * @return {?Array} Array of strings containing column names, or `null` if no column names are available.\n     */\n    columnNames() {\n        return this._columnNames;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeAssay(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = target._assays.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove assay \" + (typeof i == \"string\" ? \"'\" + i + \"'\" : String(i)) + \" from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment after removing the specified assay.\n     */\n    $removeAssay(i) {\n        return this.removeAssay(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * - If `i` is a number, the assay at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of assays.\n     * - If `i` is a string, any assay with the same name is replaced.\n     *   If no such assay exists, a new assay is appended to the list of assays.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the assay.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} A SummarizedExperiment with modified assays.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAssay(i, value, { inPlace = false } = {}) {\n        if (generics.NUMBER_OF_ROWS(value) !== this.numberOfRows() || generics.NUMBER_OF_COLUMNS(value) !== this.numberOfColumns()) {\n            throw new Error(\"expected 'value' to have the same dimensions as this 'SummarizedExperiment'\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._assays = target._assays.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * - If `i` is a number, the assay at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of assays.\n     * - If `i` is a string, any assay with the same name is replaced.\n     *   If no such assay exists, a new assay is appended to the list of assays.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the assay.\n     *\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified assays.\n     */\n    $setAssay(i, value) {\n        return this.setAssay(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the assay names.\n     * This should be of the same length as the number of assays and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified assay names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAssayNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = target._assays.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the assay names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the assay names.\n     * This should be of the same length as the number of assays and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified assay names.\n     */\n    $setAssayNames(names) {\n        return this.setAssayNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the assays to retain in the slice.\n     * This should refer to unique assay names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced assays.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceAssays(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = this._assays.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the assays for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the assays to retain in the slice.\n     * This should refer to unique assay names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced assays.\n     */\n    $sliceAssays(i) {\n        return this.sliceAssays(i, { inPlace: true });\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the row annotations.\n     * This should have one row for each row of this SummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified row data.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowData(value, { inPlace = false } = {}) {\n        if (!(value instanceof df.DataFrame)) {\n            throw new Error(\"'value' should be a DataFrame\");\n        }\n\n        if (value.numberOfRows() !== this.numberOfRows()) {\n            throw new Error(\"expected 'value' to have the same number of rows as this 'SummarizedExperiment'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowData = value;\n        return target;\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the row annotations.\n     * This should have one row for each row of this SummarizedExperiment.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified row data.\n     */\n    $setRowData(value) {\n        return this.setRowData(value, { inPlace: true });\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the column annotations.\n     * This should have one row for each columns of this SummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column data.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnData(value, { inPlace = false } = {}) {\n        if (!(value instanceof df.DataFrame)) {\n            throw new Error(\"'value' should be a DataFrame\");\n        }\n\n        if (value.numberOfRows() !== this.numberOfColumns()) {\n            throw new Error(\"expected 'value' to have the same number of rows as the number of columns of this 'SummarizedExperiment'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columnData = value;\n        return target;\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the column annotations.\n     * This should have one row for each columns of this SummarizedExperiment.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified column data.\n     */\n    $setColumnData(value) {\n        return this.setColumnData(value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of rows in this SummarizedExperiment, containing row names.\n     * Alternatively `null`, to remove all row names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified row names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this.numberOfRows(), \"'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowNames = names;\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of rows in this SummarizedExperiment, containing row names.\n     * Alternatively `null`, to remove all row names.\n     *\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified row names.\n     */\n    $setRowNames(names) {\n        return this.setRowNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of columns in this SummarizedExperiment, containing column names.\n     * Alternatively `null`, to remove all column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this.numberOfColumns(), \"'numberOfColumns()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columnNames = names;\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of columns in this SummarizedExperiment, containing column names.\n     * Alternatively `null`, to remove all column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    $setColumnNames(names) {\n        return this.setColumnNames(names, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_NUMBER_OF_ROWS() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_NUMBER_OF_COLUMNS() {\n        return this.numberOfColumns();\n    }\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        output._assays = this._assays.apply(v => generics.SLICE_2D(v, rows, columns, { allowView }));\n\n        if (rows !== null) {\n            output._rowData = generics.SLICE(this._rowData, rows, { allowView });\n            output._rowNames = (this._rowNames == null ? null : generics.SLICE(this._rowNames, rows, { allowView }));\n        } else {\n            output._rowData = this._rowData;\n            output._rowNames = this._rowNames;\n        }\n\n        if (columns !== null) {\n            output._columnData = generics.SLICE(this._columnData, columns, { allowView });\n            output._columnNames = (this._columnNames == null ? null : generics.SLICE(this._columnNames, columns, { allowView }));\n        } else {\n            output._columnData = this._columnData;\n            output._columnNames = this._columnNames;\n        }\n\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        output._assays = il.InternalList.parallelCombine(objects.map(x => x._assays), generics.COMBINE_ROWS);\n\n        let all_dfs = objects.map(x => x._rowData);\n        output._rowData = generics.COMBINE(all_dfs);\n\n        let all_n = objects.map(x => x._rowNames);\n        let all_l = objects.map(x => x.numberOfRows());\n        output._rowNames = utils.combineNames(all_n, all_l);\n\n        output._columnData = this._columnData;\n        output._columnNames = this._columnNames;\n        output._metadata = this._metadata;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        output._assays = il.InternalList.parallelCombine(objects.map(x => x._assays), generics.COMBINE_COLUMNS);\n\n        let all_dfs = objects.map(x => x._columnData);\n        output._columnData = generics.COMBINE(all_dfs);\n\n        let all_n = objects.map(x => x._columnNames);\n        let all_l = objects.map(x => x.numberOfColumns());\n        output._columnNames = utils.combineNames(all_n, all_l);\n\n        output._rowData = this._rowData;\n        output._rowNames = this._rowNames;\n        output._metadata = this._metadata;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._assays = cutils.cloneField(this._assays, deepCopy);\n        output._rowData = cutils.cloneField(this._rowData, deepCopy);\n        output._rowNames = cutils.cloneField(this._rowNames, deepCopy);\n\n        output._columnData = cutils.cloneField(this._columnData, deepCopy);\n        output._columnNames = cutils.cloneField(this._columnNames, deepCopy);\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as gr from \"./GRanges.js\";\nimport * as ggr from \"./GroupedGRanges.js\";\nimport * as se from \"./SummarizedExperiment.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\n\n/**\n * A RangedSummarizedExperiment is a {@linkplain SummarizedExperiment} subclass where each row represents a genomic interval.\n * As such, it stores an additional {@linkplain GRanges} or {@linkplain GroupedGRanges} of length equal to the number of rows,\n * where each element represents the genomic range(s) for the corresponding row of the SummarizedExperiment.\n *\n * The RangedSummarizedExperiment supports the same set of generics as the {@linkplain SummarizedExperiment}.\n * Each method will call the base method, with the following extensions:\n *\n * - {@linkcode SLICE_2D} will additionally slice the supplied genomic ranges by the desired `rows`.\n * - {@linkcode COMBINE_ROWS} will combine genomic ranges across objects.\n *   If some objects contain a GroupedGRanges and other objects contain GRanges, the latter will be coerced to a GroupedGRanges (where each group contains one range) before combining.\n *   If any object is a base SummarizedExperiment, a GroupedGRanges containing zero-length groups will be automatically constructed to attempt combining.\n * - {@linkcode COMBINE_COLUMNS} will use the genomic ranges from the first object.\n *\n * @extends SummarizedExperiment\n */\nexport class RangedSummarizedExperiment extends se.SummarizedExperiment {\n    #check_rowRanges(x) {\n        if (!(x instanceof gr.GRanges) && !(x instanceof ggr.GroupedGRanges)) {\n            throw new Error(\"'rowRanges' should be a 'GRanges' or 'GroupedGRanges' instance\");\n        }\n        if (generics.LENGTH(x) !== this._rowData.numberOfRows()) {\n            throw utils.formatLengthError(\"'rowRanges'\", \"the number of rows\");\n        }\n    }\n\n    /**\n     * @param {Object} assays - Object where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * All arrays should have the same number of rows and columns.\n     * @param {?(GRanges|GroupedGRanges)} rowRanges - Genomic ranges corresponding to each row.\n     *\n     * Alternatively, each row may correspond to a group of genomic ranges.\n     *\n     * If `null`, a {@linkplain GroupedGRanges} is constructed where each row corresponds to one group of ranges of zero length.\n     * @param {Object} [options={}] - Optional parameters, including those used in the {@linkplain SummarizedExperiment} constructor.\n     */\n    constructor(assays, rowRanges, options = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(assays, options);\n\n        if (rowRanges === null) {\n            rowRanges = ggr.GroupedGRanges.empty(this.numberOfRows());\n        } else {\n            this.#check_rowRanges(rowRanges);\n        }\n        this._rowRanges = rowRanges;\n\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} Genomic ranges corresponding to each row.\n     */\n    rowRanges() {\n        return this._rowRanges;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {GRanges} value - Genomic ranges corresponding to each row.\n     * This should have length equal to the number of rows in this RangedSummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Annotated instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {RangedSummarizedExperiment} The RangedSummarizedExperiment after modifying its `rowRanges`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowRanges(value, { inPlace = false } = {}) {\n        this.#check_rowRanges(value);\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowRanges = value;\n        return target;\n    }\n\n    /**\n     * @param {GRanges} value - Genomic ranges corresponding to each row.\n     * This should have length equal to the number of rows in this RangedSummarizedExperiment.\n     * @return {RangedSummarizedExperiment} A reference to this RangedSummarizedExperiment after modifying its `rowRanges`.\n     */\n    $setRowRanges(value) {\n        return this.setRowRanges(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        super._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n        if (rows !== null) {\n            output._rowRanges = generics.SLICE(this._rowRanges, rows);\n        } else {\n            output._rowRanges = this._rowRanges;\n        }\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        super._bioconductor_COMBINE_ROWS(output, objects);\n\n        let collected = [];\n        let has_empty = false;\n        let has_ggr = false;\n\n        for (var i = 0; i < objects.length; i++) {\n            let x = objects[i];\n            if (x instanceof RangedSummarizedExperiment) {\n                let y = x._rowRanges;\n                if (y instanceof ggr.GroupedGRanges) {\n                    has_ggr = true;\n                }\n                collected.push(y);\n            } else if (x instanceof se.SummarizedExperiment) {\n                has_empty = true;\n                collected.push(null);\n            } else {\n                throw new Error(\"objects to be combined must be SummarizedExperiments (failing for object \" + String(i) + \")\");\n            }\n        }\n\n        // Promoting nulls and GRanges to GroupedGRanges, if necessary.\n        if (has_empty || has_ggr) {\n            for (var i = 0; i < collected.length; i++) {\n                let current = collected[i];\n\n                if (current instanceof gr.GRanges) {\n                    let widths = new Int32Array(generics.LENGTH(current));\n                    widths.fill(1);\n\n                    let options = { \n                        rangeLengths: widths,\n                        names: current.names(),\n                        elementMetadata: current.elementMetadata(),\n                        metadata: current.metadata()\n                    };\n\n                    if (options.names !== null) {\n                        current = current.setNames(null);\n                    } \n\n                    if (options.elementMetadata.metadata().size > 0 || options.elementMetadata.numberOfColumns() > 0) {\n                        current = current.setElementMetadata(null);\n                    }\n\n                    if (options.metadata.size > 0) {\n                        current = current.setMetadata(new Map);\n                    }\n\n                    collected[i] = new ggr.GroupedGRanges(current, options);\n\n                } else if (current === null){\n                    collected[i] = ggr.GroupedGRanges.empty(objects[i].numberOfRows());\n                }\n            }\n        }\n\n        output._rowRanges = generics.COMBINE(collected);\n\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        super._bioconductor_COMBINE_COLUMNS(output, objects);\n\n        output._rowRanges = objects[0]._rowRanges;\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._rowRanges = cutils.cloneField(this._rowRanges, deepCopy);\n\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as rse from \"./RangedSummarizedExperiment.js\";\nimport * as se from \"./SummarizedExperiment.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A SingleCellExperiment is a {@linkplain RangedSummarizedExperiment} subclass that contains additional fields for storing reduced dimensions and alternative experiments.\n * It supports the same set of generics as the {@linkplain SummarizedExperiment}.\n *\n * Each reduced dimension instance should have number of rows equal to the number of columns of the SingleCellExperiment.\n * Each instance is expected to provide methods for the following generics:\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode CLONE}\n *\n * Each alternative experiment should be a {@linkplain SummarizedExperiment} with number of columns equal to that of the SingleCellExperiment.\n *\n * @extends RangedSummarizedExperiment\n */\nexport class SingleCellExperiment extends rse.RangedSummarizedExperiment {\n    /**\n     * @param {Object} assays - Object where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * @param {Object} [options={}] - Optional parameters, including those used in the {@linkplain RangedSummarizedExperiment} constructor.\n     * @param {?(GRanges|GroupedGRanges)} [options.rowRanges=null] - Genomic ranges corresponding to each row, see the {@linkplain RangedSummarizedExperiment} constructor.\n     * @param {Object|Map} [options.reducedDimensions={}] - Object containing named reduced dimensions.\n     * Each value should be a 2-dimensional object with number of rows equal to the number of columns of the assays.\n     * @param {?Array} [options.reducedDimensionOrder=null] - Array containing the order of the reduced dimensions.\n     * This should have the same values as the keys of `reducedDimensions`, and defaults to those keys if `null`.\n     * @param {Object|Map} [options.alternativeExperiments={}] - Object containing named alternative experiments.\n     * Each value should be a 2-dimensional object with number of columns equal to that of the assays.\n     * @param {?Array} [options.alternativeExperimentOrder=null] - Array containing the order of the alternative experiments.\n     * This should have the same values as the keys of `alternativeExperiments`, and defaults to those keys if `null`.\n     */\n    constructor(assays, options={}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        let { reducedDimensions = {}, reducedDimensionOrder = null, alternativeExperiments = {}, alternativeExperimentOrder = null, rowRanges = null } = options;\n        super(assays, rowRanges, options);\n        let ncols = this.numberOfColumns();\n\n        try {\n            this._reducedDimensions = new il.InternalList(reducedDimensions, reducedDimensionOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize reduced dimension list for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        for (const k of this._reducedDimensions.names()) {\n            let v = this._reducedDimensions.entry(k);\n            if (generics.NUMBER_OF_ROWS(v) !== ncols) {\n                throw new Error(\"number of rows for reduced dimension '\" + k + \"' is not equal to number of columns for this \" + this.constructor.className);\n            }\n        }\n\n        try {\n            this._alternativeExperiments = new il.InternalList(alternativeExperiments, alternativeExperimentOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize alternative experiment list for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        for (const k of this._alternativeExperiments.names()) {\n            let v = this._alternativeExperiments.entry(k);\n            if (!(v instanceof se.SummarizedExperiment)) {\n                throw new Error(\"alternative experiment '\" + k + \"' is not a SummarizedExperiment\");\n            }\n            if (v.numberOfColumns(v) !== ncols) {\n                throw new Error(\"number of columns for alternative experiment '\" + k + \"' is not equal to number of columns for this \" + this.constructor.className);\n            }\n        }\n\n        return;\n    }\n\n    static className = \"SingleCellExperiment\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Array} Array of strings containing the (ordered) names of the reduced dimensions.\n     */\n    reducedDimensionNames() {\n        return this._reducedDimensions.names();\n    }\n\n    /**\n     * @param {string|number} i - Reduced dimension to retrieve, either by name or index.\n     * @return {*} The contents of reduced dimension `i` as an multi-dimensional array-like object.\n     */\n    reducedDimension(i) {\n        let output;\n        try {\n            output = this._reducedDimensions.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified reduced dimension from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**\n     * @return {Array} Array of strings containing the (ordered) names of the alternative experiments.\n     */\n    alternativeExperimentNames() {\n        return this._alternativeExperiments.names();\n    }\n\n    /**\n     * @param {string|number} i - Alternative experiment to retrieve, either by name or index.\n     * @return {SummarizedExperiment} The specified alternative experiment `i`. \n     */\n    alternativeExperiment(i) {\n        let output;\n        try {\n            output = this._alternativeExperiments.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified alternative experiment from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeReducedDimension(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = target._reducedDimensions.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove the specified reduced dimension from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment after removing the specified assay.\n     */\n    $removeReducedDimension(i) {\n        return this.removeReducedDimension(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to add, either by name or index.\n     * - If `i` is a number, the reduced dimension at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of reduced dimensions.\n     * - If `i` is a string, any reduced dimension with the same name is replaced.\n     *   If no such reduced dimension exists, a new reduced dimension is appended to the list of reduced dimensions.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the reduced dimension.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment with modified reduced dimensions.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setReducedDimension(i, value, { inPlace = false } = {}) {\n        if (generics.NUMBER_OF_ROWS(value) != this.numberOfColumns()) {\n            throw new Error(\"number of rows of 'value' should be the same as the number of columns of this SingleCellExperiment\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._reducedDimensions = target._reducedDimensions.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to add, either by name or index.\n     * - If `i` is a number, the reduced dimension at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of reduced dimensions.\n     * - If `i` is a string, any reduced dimension with the same name is replaced.\n     *   If no such reduced dimension exists, a new reduced dimension is appended to the list of reduced dimensions.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the reduced dimension.\n     *\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment with modified reduced dimensions.\n     */\n    $setReducedDimension(i, value) {\n        return this.setReducedDimension(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the reduced dimension names.\n     * This should be of the same length as the number of reduced dimensions and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified reduced dimension names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setReducedDimensionNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = target._reducedDimensions.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the reduced dimension names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the reduced dimension names.\n     * This should be of the same length as the number of reduced dimensions and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified reduced dimension names.\n     */\n    $setReducedDimensionNames(names) {\n        return this.setReducedDimensionNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the reduced dimensions to retain in the slice.\n     * This should refer to unique reduced dimension names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced reduced dimensions.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceReducedDimensions(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = this._reducedDimensions.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the reduced dimensions for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the reduced dimensions to retain in the slice.\n     * This should refer to unique reduced dimension names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced reduced dimensions.\n     */\n    $sliceReducedDimensions(i) {\n        return this.sliceReducedDimensions(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeAlternativeExperiment(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = target._alternativeExperiments.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove the specified alternative experiment from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment after removing the specified assay.\n     */\n    $removeAlternativeExperiment(i) {\n        return this.removeAlternativeExperiment(i, { inPlace: true });;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the alternative experiment to add, either by name or index.\n     * - If `i` is a number, the alternative experiment at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of alternative experiments.\n     * - If `i` is a string, any alternative experiment with the same name is replaced.\n     *   If no such alternative experiment exists, a new alternative experiment is appended to the list of alternative experiments.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the alternative experiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment with modified alternative experiments.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAlternativeExperiment(i, value, { inPlace = false } = {}) {\n        if (!(value instanceof se.SummarizedExperiment) || generics.NUMBER_OF_COLUMNS(value) != this.numberOfColumns()) {\n            throw new Error(\"'value' should be a SummarizedExperiment with the same number of columns as this SingleCellExperiment\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._alternativeExperiments = target._alternativeExperiments.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the alternative experiment to add, either by name or index.\n     * - If `i` is a number, the alternative experiment at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of alternative experiments.\n     * - If `i` is a string, any alternative experiment with the same name is replaced.\n     *   If no such alternative experiment exists, a new alternative experiment is appended to the list of alternative experiments.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the alternative experiment.\n     *\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment with modified alternative experiments.\n     */\n    $setAlternativeExperiment(i, value) {\n        return this.setAlternativeExperiment(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the alternative experiment names.\n     * This should be of the same length as the number of alternative experiments and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified alternative experiment names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAlternativeExperimentNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = target._alternativeExperiments.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the alternative experiment names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the alternative experiment names.\n     * This should be of the same length as the number of alternative experiments and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified alternative experiment names.\n     */\n    $setAlternativeExperimentNames(names) {\n        return this.setAlternativeExperimentNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the alternative experiments to retain in the slice.\n     * This should refer to unique alternative experiment names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced alternative experiments.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceAlternativeExperiments(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = this._alternativeExperiments.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the alternative experiments for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the alternative experiments to retain in the slice.\n     * This should refer to unique alternative experiment names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced alternative experiments.\n     */\n    $sliceAlternativeExperiments(i) {\n        return this.sliceAlternativeExperiments(i, { inPlace: true });\n    }\n\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        super._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n\n        if (columns !== null) {\n            output._reducedDimensions = this._reducedDimensions.apply(v => generics.SLICE_2D(v, columns, null, { allowView }));\n            output._alternativeExperiments = this._alternativeExperiments.apply(v => generics.SLICE_2D(v, null, columns, { allowView }));\n        } else {\n            output._reducedDimensions = this._reducedDimensions;\n            output._alternativeExperiments = this._alternativeExperiments;\n        }\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        super._bioconductor_COMBINE_ROWS(output, objects);\n\n        output._reducedDimensions = this._reducedDimensions;\n        output._alternativeExperiments = this._alternativeExperiments;\n\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        super._bioconductor_COMBINE_COLUMNS(output, objects);\n\n        try {\n            output._reducedDimensions = il.InternalList.parallelCombine(objects.map(x => x._reducedDimensions), generics.COMBINE_ROWS);\n        } catch (e) {\n            throw new Error(\"failed to combine reduced dimensions for \" + this.constructor.className + \" objects; \" + e.message, { cause: e });\n        }\n\n        try {\n            output._alternativeExperiments = il.InternalList.parallelCombine(objects.map(x => x._alternativeExperiments), generics.COMBINE_COLUMNS);\n        } catch (e) {\n            throw new Error(\"failed to combine alternative experiments for \" + this.constructor.className + \" objects; \" + e.message, { cause: e });\n        }\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._reducedDimensions = cutils.cloneField(this._reducedDimensions, deepCopy);\n        output._alternativeExperiments = cutils.cloneField(this._alternativeExperiments, deepCopy);\n\n        return;\n    }\n}\n","import * as pako from \"pako\";\n\nexport var default_download = (base, file, start, end) => {\n    let url = base + \"/\" + file;\n    if (start == null || end == null) {\n        return fetch(url);\n    } else {\n        return fetch(url, { headers: { Range: \"bytes=\" + String(start) + \"-\" + String(end) } }); \n    }\n}\n\nvar reference_base_url = \"https://github.com/LTLA/gesel-feedstock/releases/download/indices-v0.2.1\";\n\n/**\n * Get or set the base URL for the pre-built references.\n * By default, it uses the `indices-*` release files from [the feedstock repository](https://github.com/LTLA/gesel-feedstock).\n * Setters should call this function before calling any **gesel** functions that might fetch resources.\n *\n * @param {string} [url] - Base URL to use for the prebuilt references.\n *\n * @return {string} If `url` is not supplied, the current base URL is returned.\n *\n * If `url` is supplied, it is set as the base URL, and the previous base URL is returned.\n */\nexport function referenceBaseUrl(url) {\n    if (typeof url == \"undefined\") {\n        return reference_base_url;\n    } else {\n        let old = reference_base_url;\n        reference_base_url == url;\n        return old;\n    }\n}\n\nexport var reference_download = (file, start = null, end = null) => default_download(reference_base_url, file, start, end);\n\n/**\n * Get or set the global download function to fetch pre-built references.\n * By default, it uses the global `fetch` in browsers and later versions of Node.js.\n * Applications may specify a different function, e.g., to handle authentication or caching; \n * this should be done before calling any other **gesel** functions that might fetch resources.\n *\n * @param {function} [fun] - Function that performs a GET request to an index file, returning a Response object containing the file contents.\n * This accepts three arguments:\n *\n * - The base name of the pre-built index file of interest (e.g., `\"10090_collections.tsv.gz\"`).\n * - The starting byte of the request.\n * - The ending byte of the request.\n *\n * If all three arguments are specified, the function should perform a HTTP range request to obtain the specified range of bytes.\n * If only the first argument is supplied, the function should download the entire file.\n *\n * @return {function} If `fun` is not supplied, the current global downloader is returned.\n *\n * If `fun` is supplied, it is used to set the global downloader, and the previous global value of the function is returned.\n */\nexport function referenceDownload(fun) {\n    let prev = reference_download;\n    if (typeof fun !== \"undefined\") {\n        reference_download = fun;\n    }\n    return prev;\n}\n\n// For back-compatibility.\nexport function setReferenceDownload(fun) {\n    return referenceDownload(fun);\n}\n\nvar gene_base_url = \"https://github.com/LTLA/gesel-feedstock/releases/download/genes-v1.0.0\";\n\n/**\n * Get or set the base URL for the gene information.\n * By default, it uses the `genes-*` release files from [the feedstock repository](https://github.com/LTLA/gesel-feedstock).\n * Setters should call this function before calling any other **gesel** functions that might fetch resources.\n *\n * @param {string} [url] - Base URL to use for the gene informatin.\n *\n * @return {string} If `url` is not supplied, the current base URL is returned.\n *\n * If `url` is supplied, it is set as the base URL, and the previous base URL is returned.\n */\nexport function geneBaseUrl(url) {\n    if (typeof url == \"undefined\") {\n        return gene_base_url;\n    } else {\n        let old = gene_base_url;\n        gene_base_url == url;\n        return old;\n    }\n}\n\nexport var gene_download = (file) => default_download(gene_base_url, file, null, null);\n\n/**\n * Set the global download function to fetch gene information.\n * By default, it uses the global `fetch` in browsers and later versions of Node.js.\n * Applications may specify a different function, e.g., to handle authentication or caching; \n * this should be done before calling any other **gesel** functions that might fetch resources.\n *\n * @param {function} [fun] - Function that performs a GET request to an index file, returning a Response object containing the file contents.\n * This should accept the base name of the pre-built index file of interest (e.g., `\"9606_symbol.tsv.gz\"`).\n *\n * @return {function} If `fun` is not supplied, the current global downloader is returned.\n *\n * If `fun` is supplied, it is used to set the global downloader, and the previous global value of the function is returned.\n */\nexport function geneDownload(fun) {\n    let prev = gene_download;\n    if (typeof fun !== \"undefined\") {\n        gene_download = fun;\n    }\n    return prev;\n}\n\n// For back-compatibility.\nexport function setGeneDownload(fun) {\n    return geneDownload(fun);\n}\n\nexport function decompressLines(buffer) {\n    var contents = pako.inflate(new Uint8Array(buffer));\n    const txt = new TextDecoder();\n    var lines = txt.decode(contents).split(\"\\n\");\n\n    if (lines[lines.length - 1] == \"\") {\n        return lines.slice(0, lines.length - 1); // remove empty string at trailing newline.\n    } else {\n        return lines;\n    }\n}\n\nexport async function retrieveRanges(resource) {\n    var res = await reference_download(resource + \".ranges.gz\");\n    if (!res.ok) {\n        throw \"failed to fetch ranges for '\" + resource + \"'\";\n    }\n\n    var buffer = await res.arrayBuffer();\n    var lengths = decompressLines(buffer);\n\n    var ranges = [0];\n    for (var i = 0; i < lengths.length; i++) { \n        ranges.push(ranges[i] + Number(lengths[i]) + 1);\n    }\n    return ranges;\n}\n\nexport async function retrieveNamedRanges(resource) {\n    var res = await reference_download(resource + \".ranges.gz\");\n    if (!res.ok) {\n        throw \"failed to fetch ranges for '\" + resource + \"'\";\n    }\n\n    var buffer = await res.arrayBuffer();\n    var lines = decompressLines(buffer);\n\n    var last = 0;\n    var ranges = new Map; \n    var order = [];\n    for (var i = 0; i < lines.length; i++) { \n        let split = lines[i].split(\"\\t\");\n        let next = last + Number(split[1]) + 1; // +1 for the newline.\n        ranges.set(split[0], [last, next]);\n        order.push(split[0]);\n        last = next;\n    }\n\n    return { ranges, order };\n}\n\nexport async function retrieveRangesWithExtras(resource) {\n    var res = await reference_download(resource + \".ranges.gz\");\n    if (!res.ok) {\n        throw \"failed to fetch ranges for '\" + resource + \"'\";\n    }\n\n    var buffer = await res.arrayBuffer();\n    var lines = decompressLines(buffer);\n\n    var ranges = [0];\n    var extra = [];\n    for (var i = 0; i < lines.length; i++) {\n        let split = lines[i].split(\"\\t\");\n        ranges.push(ranges[i] + Number(split[0]) + 1); // +1 for the newline.\n        extra.push(Number(split[1]));\n    }\n\n    return { ranges, extra };\n}\n\nexport function retrieveBytesByIndex(resource, ranges, index) {\n    var start = ranges[index];\n    var end = ranges[index + 1];\n    return retrieveBytes(resource, start, end);\n}\n\nexport async function retrieveBytes(resource, start, end) {\n    end--; // ignore the newline.\n\n    var res = await reference_download(resource, start, end);\n    if (!res.ok) {\n        throw \"failed to fetch ranges for '\" + resource + \"'\";\n    }\n\n    var txt = await res.text();\n    return txt.slice(0, end - start); // make sure we limit it to the requested length.\n}\n\nexport function convertToUint32Array(txt) { // Building back the indices from the diffs.\n    var output = [];\n\n    if (txt !== \"\") {\n        var last = 0;\n        txt.split(\"\\t\").forEach(x => {\n            var y = Number(x) + last;\n            output.push(y);\n            last = y;\n        });\n    }\n\n    return new Uint32Array(output);\n}\n\n/**\n * @param {Array} arrays - Array of arrays over which to compute the intersection.\n * @return {Array} Intersection of all arrays in `arrays`.\n */\nexport function intersect(arrays) {\n    if (arrays.length == 0) {\n        return [];\n    } else if (arrays.length == 1) {\n        return arrays[0];\n    }\n\n    let ref = new Set(arrays[0]);\n    for (var i = 1; i < arrays.length; i++) {\n        let running = new Set;\n        for (const x of arrays[i]) {\n            if (ref.has(x)) {\n                running.add(x);\n            }\n        }\n        ref = running;\n    }\n\n    return Array.from(ref);\n}\n\nasync function fetch_sizes_internal(species, _sizes, full, initialize, funSizes, funFound) {\n    let sizes = _sizes.get(species);\n    if (typeof sizes == \"undefined\") {\n        let found = await full(species, { download: false });\n\n        if (found !== null) {\n            // Pulling it from the full info instead, if we already got it.\n            return funFound(found);\n        }\n\n        await initialize(species);\n        sizes = _sizes.get(species);\n    }\n\n    return funSizes(sizes);\n}\n\nexport function fetchSizes(species, _sizes, full, initialize) {\n    return fetch_sizes_internal(\n        species, \n        _sizes, \n        full, \n        initialize, \n        x => x, \n        y => {\n            let tmp_sizes = [];\n            for (const x of y) {\n                tmp_sizes.push(x.size);\n            }\n            _sizes.set(species, tmp_sizes);\n            return tmp_sizes;\n        }\n    );\n}\n\nexport function fetchNumber(species, _sizes, full, initialize) {\n    return fetch_sizes_internal(\n        species,\n        _sizes,\n        full,\n        initialize,\n        x => x.length,\n        x => x.length\n    );\n}\n","import { gene_download, decompressLines } from \"./utils.js\";\n\nvar _genes = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Array} [options.types=null] - Array of strings specifying the identifier types to be retrieved.\n * The exact choice of strings depends on how the references were constructed.\n * If `null`, it defaults to an array containing `\"symbol\"`, `\"entrez\"` and `\"ensembl\"`.\n *\n * @return {Map} Object where each key is named after an identifier type in `types`.\n * Each value is an array where each element corresponds to a gene and is itself an array of strings containing all identifiers of the current type for that gene.\n *\n * The arrays for different identifier types are all of the same length, and corresponding elements across these arrays describe the same gene.\n * **gesel**'s identifier for each gene (i.e., the \"gene ID\") is defined as the index of that gene in any of these arrays.\n *\n * @async\n */\nexport async function fetchAllGenes(species, { types = null } = {}) {\n    if (types == null) {\n        types = [ \"symbol\", \"entrez\", \"ensembl\" ];\n    }\n\n    let target = _genes.get(species);\n    if (typeof target == \"undefined\") {\n        target = new Map;\n        _genes.set(species, target);\n    }\n\n    let output = new Map;\n    let promises = [];\n    let processing = [];\n\n    for (const t of types) {\n        let found = target.get(t);\n        if (typeof found == \"undefined\") {\n            promises.push(gene_download(species + \"_\" + t + \".tsv.gz\"));\n            processing.push(t);\n        } else {\n            output.set(t, found);\n        }\n    }\n\n    if (promises.length > 0) {\n        let resolved = await Promise.all(promises);\n        for (var i = 0; i < resolved.length; i++) {\n            let res = resolved[i];\n            if (!res.ok) {\n                throw \"failed to fetch symbol information for genes\";\n            }\n            var buffer = await res.arrayBuffer();\n\n            let gene_data = decompressLines(buffer);\n            let processed = [];\n            for (const x of gene_data) {\n                if (x == \"\") {\n                    processed.push([]);\n                } else {\n                    processed.push(x.split(\"\\t\"));\n                }\n            }\n\n            let t = processing[i];\n            target.set(t, processed);\n            output.set(t, processed);\n        }\n    }\n\n    return output;\n}\n","import { fetchAllGenes } from \"./fetchAllGenes.js\";\n\nvar by_symbol = new Map;\nvar by_symbol_lower = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {string} type - Type of the identifier to use as the key of the map, e.g., `\"ensembl\"`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.lowerCase=false] - Whether to use lower-case keys in the map.\n *\n * @return {Map} Map where each key is a string containing a (possibly lower-cased) identifier of the specified `type` and each value is an array.\n * Each array contains the **gesel** gene IDs associated with the `type` identifier, see {@linkcode fetchAllGenes} for ore details.\n *\n * @async\n */\nexport async function mapGenesByIdentifier(species, type, { lowerCase = false } = {}) {\n    let host = (lowerCase ? by_symbol_lower : by_symbol);\n\n    let sfound = host.get(species);\n    if (typeof sfound === \"undefined\") {\n        sfound = new Map;\n        host.set(species, sfound);\n    }\n\n    let tfound = sfound.get(type);\n    if (typeof tfound === \"undefined\") {\n        tfound = new Map;\n        sfound.set(type, tfound);\n\n        let _genes = (await fetchAllGenes(species, { types: [ type ] })).get(type);\n        for (var i = 0; i < _genes.length; i++) {\n            for (let y of _genes[i]) {\n                if (lowerCase) {\n                    y = y.toLowerCase();\n                }\n\n                let current = tfound.get(y);\n                if (typeof current !== \"undefined\") {\n                    current.add(i);\n                } else {\n                    tfound.set(y, new Set([i]));\n                }\n            }\n        }\n\n        for (const [key, val] of tfound) {\n            tfound.set(key, Array.from(val));\n        }\n    }\n\n    return tfound;\n}\n","import { fetchAllGenes } from \"./fetchAllGenes.js\";\nimport { mapGenesByIdentifier } from \"./mapGenesByIdentifier.js\";\n\n/**\n * @param {string} species - Taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {Array} queries - Array of strings containing gene identifiers of some kind (e.g., Ensembl, symbol, Entrez).\n * @param {object} [options={}] - Optional parameters.\n * @param {?Array} [options.types=null] - Array of strings specifying the identifier types to use for searching.\n * The exact choice of strings depends on how the references were constructed.\n * If `null`, it defaults to an array containing `\"entrez\"`, `\"ensembl\"` and `\"symbol\"`.\n * @param {boolean} [options.ignoreCase=true] - Whether to perform case-insensitive matching.\n *\n * @return {Array} An array of length equal to `queries`.\n * Each element of the array is an array containing the **gesel** gene IDs with any identifiers that match the corresponding search string.\n * See {@linkcode fetchAllGenes} for more details on the interpretation of these IDs.\n *\n * @async\n */\nexport async function searchGenes(species, queries, { types = null, ignoreCase = true } ={}) {\n    if (types === null) {\n        types = [ \"entrez\", \"ensembl\", \"symbol\" ];\n    }\n\n    let promises = [];\n    for (const t of types) {\n        promises.push(mapGenesByIdentifier(species, t, { lowerCase: ignoreCase }));\n    }\n    let resolved = await Promise.all(promises);\n\n    let mapping = [];\n    for (var i = 0; i < queries.length; i++) {\n        let current = queries[i];\n        if (current.length == 0) {\n            mapping.push([]);\n            continue;\n        }\n\n        if (ignoreCase) {\n            current = current.toLowerCase();\n        }\n\n        let findings = [];\n        for (var j = 0; j < types.length; j++) {\n            let val = resolved[j].get(current);\n            if (typeof val !== \"undefined\") {\n                for (const v of val) {\n                    findings.push(v);\n                }\n            }\n        }\n\n        mapping.push(findings);\n    }\n\n    return mapping;\n}\n\n","import { reference_download, decompressLines } from \"./utils.js\";\n\nvar _collections = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the collection details if they are not already available.\n * If `false`, `null` is returned if the collection details have not already been loaded into memory.\n *\n * @return {?Array} Array of objects where each entry corresponds to a set collection and contains details about that collection.\n * Each object can be expected to contain:\n * \n * - `title`, the title for the collection.\n * - `description`, the description for the collection.\n * - `species`, the species for all gene identifiers in the collection.\n *   This should contain the full scientific name, e.g., `\"Homo sapiens\"`, `\"Mus musculus\"`.\n * - `maintainer`, the maintainer of this collection.\n * - `source`, the source of this set, usually a link to some external resource.\n * - `start`, the index for the first set in the collection in the output of {@linkcode sets}.\n *   All sets from the same collection are stored contiguously.\n * - `size`, the number of sets in the collection.\n *\n * In a **gesel** context, the identifier for a collection (i.e., the \"collection ID\") is defined as the index of the collection in this array.\n *\n * If the collection details have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchAllCollections(species, { download = true } = {}) {\n    let target = _collections.get(species);\n    if (typeof target !== \"undefined\") {\n        return target;\n    } else if (!download) {\n        return null;\n    }\n\n    target = [];\n    _collections.set(species, target);\n\n    var cres = await reference_download(species + \"_collections.tsv.gz\");\n    if (!cres.ok) {\n        throw new Error(\"failed to fetch collection information for species '\" + species + \"'\");\n    }\n    var coll_data = decompressLines(await cres.arrayBuffer());\n\n    var start = 0;\n    for (var i = 0; i < coll_data.length; i++) {\n        let x = coll_data[i];\n        var details = x.split(\"\\t\");\n        var len = Number(details[5]);\n        target.push({\n            \"title\": details[0],\n            \"description\": details[1],\n            \"species\": details[2],\n            \"maintainer\": details[3],\n            \"source\": details[4],\n            \"start\": start,\n            \"size\": len\n        });\n        start += len;\n    }\n\n    return target;\n}\n","import { reference_download, decompressLines } from \"./utils.js\";\nimport { fetchAllCollections } from \"./fetchAllCollections.js\";\n\nvar _sets = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the set details if they are not already available.\n * If `false`, `null` is returned if the set details have not already been loaded into memory.\n *\n * @return {Array} Array of objects where each entry corresponds to a set and contains the details about that set.\n * Each object can be expected to contain:\n * \n * - `name`, the name of the set.\n * - `description`, the description of the set.\n * - `size`, the number of genes in the set.\n * - `collection`, the index of the collection containing the set.\n * - `number`, the number of the set within the collection.\n *\n * In a **gesel** context, the identifier for a set (i.e., the \"set ID\") is defined as the index of the set in this array.\n *\n * If the set details have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchAllSets(species, { download = true } = {}) {\n    let found = _sets.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    found = [];\n    _sets.set(species, found);\n\n    var [ sres, _collections ] = await Promise.all([reference_download(species + \"_sets.tsv.gz\"), fetchAllCollections(species)]);\n    if (!sres.ok) {\n        throw new Error(\"failed to fetch set information for species '\" + species + \"'\");\n    }\n    var set_data = decompressLines(await sres.arrayBuffer());\n\n    for (var i = 0; i < set_data.length; i++) {\n        let x = set_data[i];\n        var details = x.split(\"\\t\");\n        found.push({\n            \"name\": details[0],\n            \"description\": details[1],\n            \"size\": Number(details[2])\n        });\n    }\n\n    let start = 0;\n    for (var i = 0; i < _collections.length; i++) {\n        let len = _collections[i].size;\n\n        // For easier access going the other way.\n        for (var j = 0; j < len; j++) {\n            found[j + start].collection = i;\n            found[j + start].number = j;\n        }\n\n        start += len;\n    }\n\n    return found;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchAllCollections.js\";\n\nconst _cache = new Map;\nconst _ranges = new Map;\nconst _sizes = new Map;\nconst _starts = new Map;\n\nasync function initialize(species) {\n    let res = await utils.retrieveRangesWithExtras(species + \"_collections.tsv\");\n    _ranges.set(species, res.ranges);\n    _sizes.set(species, res.extra);\n\n    let first = 0;\n    let starts = [];\n    for (const s of res.extra) {\n        starts.push(first);\n        first += s;\n    }\n    _starts.set(species, starts);\n\n    _cache.set(species, new Map);\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {Array} Number of sets in each collection.\n * Each value corresponds to a collection in {@linkcode fetchAllCollections}.\n * @async\n */\nexport async function fetchCollectionSizes(species) {\n    return utils.fetchSizes(species, _sizes, full.fetchAllCollections, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {number} Total number of collections for this species.\n * @async\n */\nexport async function numberOfCollections(species) {\n    return utils.fetchNumber(species, _sizes, full.fetchAllCollections, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} collection - Collection ID, see {@linkcode fetchAllCollections} for details.\n * \n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a request to the server.\n * By default, the return value is extracted from the full collection details if {@linkcode fetchAllCollections} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all collection details up-front to avoid range requests.\n * This is done by calling {@linkcode fetchAllCollections}.\n * Ignored if `forceRequest = true`.\n *\n * @return {object} Object containing the details of the collection.\n * This should be identical to the corresponding entry of the array returned by {@linkcode fetchAllCollections}.\n *\n * If `collection = null`, no return value is provided.\n * @async\n */\nexport async function fetchSingleCollection(species, collection, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchAllCollections(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (collection !== null) {\n                return ffound[collection];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let cached = _cache.get(species);\n    if (typeof cached === \"undefined\") {\n        await initialize(species);\n        cached = _cache.get(species);\n    }\n\n    if (collection == null) {\n        return;\n    }\n\n    let cfound = cached.get(collection);\n    if (typeof cfound !== \"undefined\") {\n        return cfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_collections.tsv\", _ranges.get(species), collection);\n    let split = text.split(\"\\t\");\n    let output = {\n        title: split[0],\n        description: split[1],\n        species: split[2],\n        maintainer: split[3],\n        source: split[4],\n        start: _starts.get(species)[collection],\n        size: _sizes.get(species)[collection]\n    };\n\n    cached.set(collection, output);\n    return output;\n}\n\n\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchAllSets.js\";\nimport { fetchCollectionSizes } from \"./fetchSingleCollection.js\";\n\nconst _cache = new Map;\nconst _ranges = new Map;\nconst _sizes = new Map;\nconst _starts = new Map;\nconst _parents = new Map;\nconst _internal_number = new Map;\n\nasync function initialize(species) {\n    const [ sres, csizes ] = await Promise.all([ \n        utils.retrieveRangesWithExtras(species + \"_sets.tsv\"), \n        fetchCollectionSizes(species) \n    ]);\n    _ranges.set(species, sres.ranges);\n    _sizes.set(species, sres.extra);\n\n    let parents = [];\n    let internal_number = [];\n    var totals = 0;\n    for (var i = 0; i < csizes.length; i++) {\n        let colsize = csizes[i];\n        for (var j = 0; j < colsize; j++) {\n            parents.push(i);\n            internal_number.push(j);\n        }\n        totals += colsize;\n    }\n\n    if (totals != sres.extra.length) {\n        throw new Error(\"discrepancy between number of sets and sum of collection sizes\");\n    }\n\n    _parents.set(species, parents);\n    _internal_number.set(species, internal_number);\n    _cache.set(species, new Map);\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {Array} Number of genes in each set.\n * Each value corresponds to a set in {@linkcode fetchAllSets}.\n * @async\n */\nexport async function fetchSetSizes(species) {\n    return utils.fetchSizes(species, _sizes, full.fetchAllSets, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {number} Total number of sets for this species.\n * @async\n */\nexport async function numberOfSets(species) {\n    return utils.fetchNumber(species, _sizes, full.fetchAllSets, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} set - Set ID, see {@linkcode fetchAllSets} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a request to the server.\n * By default, the return value is extracted from the full set details if {@linkcode fetchAllSets} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all set details up-front to avoid range requests.\n * This is done by calling {@linkcode fetchAllSets}.\n * Ignored if `forceRequest = true`.\n *\n * @return {object} Object containing the details of the set.\n * This should be identical to the corresponding entry of the array returned by {@linkcode fetchAllSets}.\n *\n * If `set = null`, no return value is provided.\n * @async\n */\nexport async function fetchSingleSet(species, set, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchAllSets(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (set !== null) {\n                return ffound[set];\n            } else {\n                console.log(set);\n                return;\n            }\n        }\n    }\n\n    let cached = _cache.get(species);\n    if (typeof cached === \"undefined\") {\n        await initialize(species);\n        cached = _cache.get(species);\n    }\n\n    if (set == null) {\n        return;\n    }\n\n    let sfound = cached.get(set);\n    if (typeof sfound !== \"undefined\") {\n        return sfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_sets.tsv\", _ranges.get(species), set);\n    let split = text.split(\"\\t\");\n    let output = {\n        name: split[0],\n        description: split[1],\n        size: _sizes.get(species)[set],\n        collection: _parents.get(species)[set],\n        number: _internal_number.get(species)[set]\n    };\n\n    cached.set(set, output);\n    return output;\n}\n\n\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the set-to-gene mappings if they are not already available.\n * If `false`, `null` is returned if the set-to-gene mappings have not already been loaded into memory.\n *\n * @return {?Array} Array of length equal to the total number of sets for this `species`.\n * Each element corresponds to an entry in {@linkcode fetchAllSets} and is an array of integers containing the IDs for all genes belonging to that set.\n * Gene IDs refer to indices in {@linkcode fetchAllGenes}.\n *\n * If the set-to-gene mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchGenesForAllSets(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_set2gene.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch full set-to-gene information for species '\" + species + \"'\");\n    }\n\n    var set_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = set_data.map(utils.convertToUint32Array);\n    _cache.set(species, loaded);\n    return loaded;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchGenesForAllSets.js\";\n\nconst _ranges = new Map;\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} set - Set ID, see {@linkcode fetchAllSets} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a range request to the server.\n * By default, the return value is extracted from the full set-to-gene mappings if {@linkcode fetchGenesForAllSets} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all set-to-gene information up-front to avoid range requests.\n * This is done by calling {@linkcode fetchGenesForAllSets}.\n * Ignored if `forceRequest = true`.\n *\n * @return {Uint32Array} Array of integers containing the IDs for all genes belonging to the set.\n * Gene IDs refer to indices in {@linkcode fetchAllGenes}.\n *\n * If `set = null`, no return value is provided.\n * @async\n */\nexport async function fetchGenesForSet(species, set, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchGenesForAllSets(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (set !== null) {\n                return ffound[set];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let spfound = _cache.get(species);\n    if (typeof spfound == \"undefined\") {\n        spfound = new Map;\n        _cache.set(species, spfound);\n        _ranges.set(species, await utils.retrieveRanges(species + \"_set2gene.tsv\"));\n    }\n\n    if (set == null) {\n        return;\n    }\n\n    let sefound = spfound.get(set);\n    if (typeof sefound !== \"undefined\") {\n        return sefound;\n    }\n\n    let ranges = _ranges.get(species);\n    let text = await utils.retrieveBytesByIndex(species + \"_set2gene.tsv\", ranges, set);\n    let output = utils.convertToUint32Array(text);\n    spfound.set(set, output);\n    return output;\n}\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the gene-to-set mappings if they are not already available.\n * If `false`, `null` is returned if the gene-to-set mappings have not already been loaded into memory.\n *\n * @return {?Array} Array of length equal to the total number of genes for this `species`.\n * Each element corresponds to an entry in {@linkcode fetchAllGenes} and is an array of integers containing the IDs for all sets containing that gene.\n * Set IDs refer to indices in {@linkcode fetchAllSets}.\n *\n * If the gene-to-set mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchSetsForAllGenes(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_gene2set.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch full gene-to-set information for species '\" + species + \"'\");\n    }\n\n    var gene_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = gene_data.map(utils.convertToUint32Array);\n    _cache.set(species, loaded);\n    return loaded;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchSetsForAllGenes.js\";\n\nconst _ranges = new Map;\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n *\n * @return {number} Number of genes that belong to at least one set for `species`.\n * This can be used as a more appropriate universe size in {@linkcode testEnrichment}.\n */\nexport async function effectiveNumberOfGenes(species) {\n    let ffound = await full.fetchSetsForAllGenes(species, { download: false });\n    if (ffound !== null) {\n        let okay = 0;\n        for (const x of ffound) {\n            okay += x.length > 0;\n        }\n        return okay;\n    }\n\n    let ranged = _ranges.get(species);\n    if (typeof ranged === \"undefined\") {\n        _cache.set(species, new Map);\n        ranged = await utils.retrieveRanges(species + \"_gene2set.tsv\")\n        _ranges.set(species, ranged);\n    }\n\n    let okay = 0;\n    for (var i = 1; i < ranged.length; i++) {\n        if (ranged[i] > ranged[i-1] + 1) {\n            okay++;\n        }\n    }\n\n    return okay;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} gene - Gene ID, see {@linkcode fetchAllGenes} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a range request to the server.\n * By default, the return value is extracted from the full gene-to-set mappings if {@linkcode fetchSetsForAllGenes} was called before this function. \n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all gene-to-set mappings up-front to avoid range requests.\n * This is done by calling {@linkcode fetchSetsForAllGenes}\n * Ignored if `forceRequest = true`.\n *\n * @return {Uint32Array} Array of integers containing the IDs of all sets containing the gene.\n * IDs are treated as indices into the return value of {@linkcode fetchAllSets} or as input to {@linkcode fetchSingleSet}.\n *\n * If `gene = null`, no return value is provided.\n * \n * @async\n */\nexport async function fetchSetsForGene(species, gene, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchSetsForAllGenes(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (gene !== null) {\n                return ffound[gene];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let spfound = _cache.get(species);\n    if (typeof spfound === \"undefined\") {\n        spfound = new Map;\n        _cache.set(species, spfound);\n        _ranges.set(species, await utils.retrieveRanges(species + \"_gene2set.tsv\"));\n    }\n    if (gene == null) {\n        return;\n    }\n\n    let gfound = spfound.get(gene);\n    if (typeof gfound !== \"undefined\") {\n        return gfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_gene2set.tsv\", _ranges.get(species), gene);\n    let output = utils.convertToUint32Array(text);\n    spfound.set(gene, output);\n    return output;\n}\n","import * as utils from \"./utils.js\";\n\nexport function binarySearch(query, vector) {\n    let left = 0;\n    let right = vector.length;\n\n    while (left < right) {\n        let mid = Math.trunc((left + right) / 2);\n        if (vector[mid] < query) {\n            left = mid + 1;\n        } else if (vector[mid] > query) {\n            right = mid;\n        } else {\n            return mid;\n        }\n    }\n\n    return left;\n}\n\nasync function fetchSetsByToken(species, token, file, all_ranges, all_ordered, all_cache) {\n    let actual_file = species + \"_\" + file;\n\n    let cached = all_cache.get(species);\n    if (typeof cached === \"undefined\") {\n        const { ranges, order } = await utils.retrieveNamedRanges(actual_file);\n        all_ranges.set(species, ranges);\n        all_ordered.set(species, order);\n        cached = new Map;\n        all_cache.set(species, cached);\n    }\n\n    if (token == null) {\n        return;\n    }\n\n    let tfound = cached.get(token);\n    if (typeof tfound !== \"undefined\") {\n        return tfound;\n    }\n\n    let ranges = all_ranges.get(species);\n    let output;\n    if (token.includes(\"*\") || token.includes(\"?\")) {\n        let ordered = all_ordered.get(species);\n\n        // Wildcard handling.\n        let initstub = token.replace(/[*?].*/, \"\")\n        let pos = (initstub == \"\" ? 0 : binarySearch(initstub, ordered));\n        let regex = new RegExp(token.replace(/[*]/g, \".*\").replace(/[?]/g, \".\"));\n\n        let collected = [];\n        let to_cache = [];\n        let union = new Set;\n\n        while (pos < ordered.length) {\n            let candidate = ordered[pos];\n            if (initstub != \"\" && !candidate.startsWith(initstub)) {\n                break;\n            }\n\n            let cfound = cached.get(candidate);\n            if (typeof cfound === \"undefined\") {\n                let rr = ranges.get(candidate);\n                collected.push(utils.retrieveBytes(actual_file, rr[0], rr[1]).then(utils.convertToUint32Array));\n                to_cache.push(candidate);\n            } else {\n                for (const y of cfound) {\n                    union.add(y);\n                }\n            }\n\n            pos++;\n        }\n\n        let resolved = await Promise.all(collected);\n        for (var i = 0; i < resolved.length; i++) {\n            let x = resolved[i];\n            cached.set(to_cache[i], x);\n            for (const y of x) {\n                union.add(y);\n            }\n        }\n\n        output = new Uint32Array(union);\n\n    } else {\n        // Direct handling.\n        let rr = ranges.get(token);\n        if (typeof rr === \"undefined\") {\n            return new Uint32Array;\n        }\n        let text = await utils.retrieveBytes(actual_file, rr[0], rr[1]);\n        output = utils.convertToUint32Array(text);\n    }\n\n    cached.set(token, output);\n    return output;\n}\n\nconst n_cache = new Map;\nconst n_ranges = new Map;\nconst n_ordered = new Map;\n\nasync function fetchSetsByNameToken(species, token) {\n    return fetchSetsByToken(species, token, \"tokens-names.tsv\", n_ranges, n_ordered, n_cache);\n}\n\nconst d_cache = new Map;\nconst d_ranges = new Map;\nconst d_ordered = new Map;\n\nasync function fetchSetsByDescriptionToken(species, token) {\n    return fetchSetsByToken(species, token, \"tokens-descriptions.tsv\", d_ranges, d_ordered, d_cache);\n}\n\nexport async function preloadTokens(species, resp, ordered, cache, msg) {\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch full set of \" + msg + \" tokens for species '\" + species + \"'\");\n    }\n\n    let lines = utils.decompressLines(await resp.arrayBuffer());\n    if (lines.length !== ordered.length) {\n        throw new Error(\"mismatch in lengths between token names and set indices for species '\" + species + \"'\");\n    }\n\n    for (var i = 0; i < lines.length; i++) {\n        cache.set(ordered[i], utils.convertToUint32Array(lines[i]));\n    }\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n *\n * @return Preloads the search indices for use in {@linkcode searchSetText}.\n * This performs a one-off download of the indices such that further calls to {@linkcode searchSetText} do not need to perform HTTP range requests.\n */\nexport async function preloadSearchSetText(species) {\n    let full = await Promise.all([ \n        utils.reference_download(species + \"_tokens-names.tsv.gz\"),\n        utils.reference_download(species + \"_tokens-descriptions.tsv.gz\"),\n        fetchSetsByNameToken(species, null),\n        fetchSetsByDescriptionToken(species, null)\n    ]);\n    await preloadTokens(species, full[0], n_ordered.get(species), n_cache.get(species), \"name\");\n    await preloadTokens(species, full[1], d_ordered.get(species), d_cache.get(species), \"description\");\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {string} query - Query string containing multiple words to search in the names and/or descriptions of each set.\n *\n * Each stretch of alphanumeric characters and dashes is treated as a single word.\n * All other characters are treated as punctuation between words, except for the following wildcards:\n *\n * - `*`: match zero or more alphanumeric or dash characters.\n * - `?`: match exactly one alphanumeric or dash character.\n *\n * A set's name and/or description must contain all words in `query` to be considered a match.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inName=true] - Whether to search the name of the set for matching words.\n * @param {boolean} [options.inDescription=true] - Whether to search the description of the set for matching words.\n *\n * @return {Array} Array of indices of the sets with names and/or descriptions that match `query`.\n * @async\n */\nexport async function searchSetText(species, query, { inName = true, inDescription = true } = {}) {\n    // Tokenizing the query using the same logic as in the feedstock repository,\n    // but preserving our wildcards for special handling later.\n    let processed = query.toLowerCase().replace(/[^a-zA-Z0-9-?*]/g, \" \");\n    let tokens = processed.split(/\\s+/);\n    tokens = tokens.filter(x => x !== \"\" || x !== \"-\");\n\n    let init = [];\n    if (inName) {\n        init.push(fetchSetsByNameToken(species, null));\n    }\n    if (inDescription) {\n        init.push(fetchSetsByDescriptionToken(species, null));\n    }\n    await Promise.all(init); // force initialization of all caches.\n\n    let gathered_names = [];\n    if (inName) {\n        let already_queried = new Set;\n        for (const tok of tokens) {\n            if (!already_queried.has(tok)) {\n                gathered_names.push(fetchSetsByNameToken(species, tok));\n                already_queried.add(tok);\n            }\n        }\n    }\n\n    let gathered_descriptions = [];\n    if (inDescription) {\n        let already_queried = new Set;\n        for (const tok of tokens) {\n            if (!already_queried.has(tok)) {\n                gathered_descriptions.push(fetchSetsByDescriptionToken(species, tok));\n                already_queried.add(tok);\n            }\n        }\n    }\n\n    let resolved_names = await Promise.all(gathered_names);\n    let resolved_descriptions = await Promise.all(gathered_descriptions);\n\n    let gathered = [];\n    for (var i = 0; i < tokens.length; i++) {\n        let n = (inName ? resolved_names[i] : []);\n        let d = (inDescription ? resolved_descriptions[i] : []);\n\n        let combined = new Uint32Array(n.length + d.length);\n        combined.set(n);\n        combined.set(d, n.length);\n        gathered.push(combined);\n    }\n\n    return utils.intersect(gathered);\n}\n","import { fetchSetSizes } from \"./fetchSingleSet.js\";\nimport { fetchSetsForGene, effectiveNumberOfGenes } from \"./fetchSetsForGene.js\";\nimport * as enrich from \"./testEnrichment.js\";\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {Array} genes - Array of unique integers containing user-supplied gene IDs, see {@linkcode fetchAllGenes} for details.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.includeSize=true] - Whether to include the size of each set in the output.\n * @param {boolean} [options.testEnrichment=true] - Whether to compute the enrichment p-value for each set with {@linkcode testEnrichment}.\n * The list and universe sizes will only count genes that are involved in at least one set, by checking {@linkcode fetchSetsForGene} and {@linkcode effectiveNumberOfGenes} respectively.\n * @param {boolean} [options.forceDownload=false] - See {@linkcode fetchSetsForGene}.\n *\n * @return {Array} An array of objects, where each object corresponds to a set that has non-zero overlaps with `genes`.\n * Each object contains:\n *\n * - `id`: the ID of the set in {@linkcode fetchAllSets}.\n * - `count`: the number of genes in the set that overlap with genes in `genes`.\n * - `size`: the size of each set.\n *   Only included if `includeSize = true`.\n * - `pvalue`: the enrichment p-value.\n *   Only included if `testEnrichment = true`.\n *\n * @async\n */\nexport async function findOverlappingSets(species, genes, { includeSize = true, testEnrichment = true, forceDownload = false } = {}) {\n    await fetchSetsForGene(species, null, { forceDownload });\n\n    let promises = [];\n    let queried = new Set;\n    for (const g of genes) {\n        if (!queried.has(g)) {\n            promises.push(fetchSetsForGene(species, g));\n            queried.add(g);\n        }\n    }\n\n    let collected = await Promise.all(promises);\n    let output = countSetOverlaps(collected);\n\n    let sets_sizes = (includeSize || testEnrichment ? await fetchSetSizes(species) : null);\n    if (includeSize) {\n        for (const details of output) {\n            details.size = sets_sizes[details.id];\n        }\n    }\n    if (testEnrichment) {\n        let effective_list = 0; // only considering genes involved in at least one set.\n        for (const v of collected) {\n            effective_list += (v.length > 0);\n        }\n        let universe = await effectiveNumberOfGenes(species);\n        for (const details of output) {\n            details.pvalue = enrich.testEnrichment(details.count, effective_list, sets_sizes[details.id], universe);\n        }\n    }\n\n    return output;\n}\n\n/**\n * This is a utility function that is called internally by {@linkcode findOverlappingSets}.\n * However, it can be used directly to obtain overlap counts if the gene-to-set mappings are manually obtained.\n *\n * @param {Array} setsForSomeGenes - Array where each entry corresponds to a gene and contains an array of the set IDs containing that gene.\n * Each inner array is typically the result of calling {@linkcode fetchSetsForGene}.\n *\n * @return {Array} An array of objects, where each object corresponds to a set that is present in at least one entry of `setsForSomeGenes`.\n * Each object contains:\n *\n * - `id`: the ID of the set in {@linkcode fetchAllSets}.\n * - `count`: the number of genes in the set that overlap with genes in `genes`.\n */\nexport function countSetOverlaps(setsForSomeGenes) {\n    var set_count = new Map;\n    for (const found of setsForSomeGenes) {\n        for (const set of found) {\n            let current = set_count.get(set);\n            if (typeof current == \"undefined\") {\n                set_count.set(set, 1);\n            } else {\n                set_count.set(set, current + 1);\n            }\n        }\n    }\n\n    let output = [];\n    for (const [id, count] of set_count) {\n        let id0 = Number(id);\n        let details = { \n            \"id\": id0,\n            \"count\": count\n        };\n        output.push(details);\n    }\n\n    return output;\n}\n\n","/**\n * Reindex the gene sets for a user-defined gene universe.\n * This is helpful for applications that know their own gene universe and want to convert the gesel gene IDs to indices within that universe.\n *\n * @param {Array} geneMapping - Array of length equal to the number of genes in a user-defined gene universe.\n * Each entry corresponds to one gene in the user's universe and contains the corresponding gesel gene ID(s) (see {@linkcode fetchAllGenes} for details).\n * Each entry can be either a number, for a 1:1 mapping; NaN, for a gene that has no matching gesel gene ID; or an array of gesel gene IDs, like that returned by {@linkcode searchGenes}.\n * @param {Array} genesForSets - Array of length equal to the number of reference gene sets.\n * Each entry corresponds to a set and is an array containing gesel gene IDs for all genes in that set.\n * This is typically obtained from {@linkcode fetchGenesForAllSets}.\n *\n * @return {Array} Array of length equal to `genesForSets`. \n * Each entry corresponds to a reference gene set and is a Uint32Array where the elements are indices into `geneMapping`, specifying the genes in the user's universe that belong to that set.\n * If a gene in `geneMapping` maps to multiple gesel IDs, it is considered to belong to all sets containing any of its mapped gesel gene IDs.\n */\nexport function reindexGenesForAllSets(geneMapping, genesForSets) {\n    let reverse_mapping = new Map;\n    for (var i = 0; i < geneMapping.length; i++) {\n        for (const gesel_gene of geneMapping[i]) {\n            let found = reverse_mapping.get(gesel_gene);\n            if (typeof found == \"undefined\") {\n                found = new Set;\n                reverse_mapping.set(gesel_gene, found);\n            }\n            found.add(i);\n        }\n    }\n\n    // Converting everything to an array for easier iteration. \n    for (const [k, v] of reverse_mapping) {\n        reverse_mapping[k] = new Uint32Array(v);\n    }\n\n    let new_sets = new Array(genesForSets.length);\n    for (var i = 0; i < genesForSets.length; i++) {\n        let subset = new Set;\n        for (const gesel_gene of genesForSets[i]) {\n            let found = reverse_mapping.get(gesel_gene);\n            if (typeof found !== \"undefined\") {\n                for (const gene of found) {\n                    subset.add(gene);\n                }\n            }\n        }\n        new_sets[i] = (new Uint32Array(subset)).sort();\n    }\n\n    return new_sets;\n}\n\n","/**\n * Reindex the gene-to-set mappings for a user-defined gene universe.\n * This is helpful for applications that know their own gene universe and want to create a mapping of all sets containing each of their own genes.\n *\n * @param {Array} geneMapping - Array of length equal to the number of genes in a user-defined gene universe.\n * Each entry corresponds to one gene in the user's universe and contains the corresponding gesel gene ID(s) (see {@linkcode fetchAllGenes} for details).\n * Each entry can be either a number, for a 1:1 mapping; NaN, for a gene that has no matching gesel gene ID; or an array of gesel gene IDs, like that returned by {@linkcode searchGenes}.\n * @param {Array} setsForGenes - Array of length equal to the number of gesel gene IDs.\n * Each entry corresponds to a gesel gene ID and is an array containing the set IDs for all sets containing that gene.\n * This is typically obtained from {@linkcode fetchSetsForAllGenes}.\n *\n * @return {Array} Array of length equal to `geneMapping`.\n * Each entry corresponds to a gene in the user-supplied universe and is a Uint32Array where the elements are the gesel set IDs containing that gene.\n * If a gene in `geneMapping` maps to multiple gesel IDs, we report all sets containing any of its mapped gesel gene IDs.\n */\nexport function reindexSetsForAllGenes(geneMapping, setsForGenes) {\n    let remapped = new Array(geneMapping.length);\n    for (var i = 0; i < geneMapping.length; i++) {\n        let collected = new Set;\n        for (const gesel_gene of geneMapping[i]) {\n            for (const set of setsForGenes[gesel_gene]) {\n                collected.add(set);\n            }\n        }\n        remapped[i] = (new Uint32Array(collected)).sort();\n    }\n    return remapped;\n}\n","import * as utils from \"./utils.js\";\n\n/**\n * Helper class for handling matrix data from multiple modalities.\n * In particular, it simplifies memory management of the assorted {@linkplain ScranMatrix} instances containing data for different features in the same set of cells.\n */\nexport class MultiMatrix {\n    #store;\n    #ncols;\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {object} [options.store={}] - Existing store of {@linkplain ScranMatrix} objects.\n     * Each matrix should correspond to a different modality, named according to its key.\n     * All matrices should have data for the same set of cells, i.e., same number of columns.\n     */\n    constructor({ store = {} } = {}) {\n        this.#store = store;\n        this.#ncols = null;\n\n        let keys = Object.keys(store);\n        if (keys.length) {\n            // We ignore numberOfColumns here, as everyone should have the same number of cells.\n            for (var k = 0; k < keys.length; k++) {\n                let current = store[keys[k]];\n                if (k == 0) {\n                    this.#ncols = current.numberOfColumns();\n                } else if (current.numberOfColumns() != this.#ncols) {\n                    throw new Error(\"all matrices should have the same number of columns\");\n                }\n            }\n        }\n    }\n\n    /**\n     * @return {?number} Number of columns in the matrices.\n     * If no matrices are available, `null` is returned.\n     */\n    numberOfColumns() {\n        return this.#ncols;\n    }\n\n    /**\n     * @return {Array} Names of the available modalities.\n     */\n    available() {\n        return Object.keys(this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {boolean} Whether modality `i` is available.\n     */\n    has(i) {\n        return (i in this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {ScranMatrix} The matrix data for modality `i`.\n     */\n    get(i) {\n        return this.#store[i];\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @param {ScranMatrix} matrix - The matrix data for modality `i`.\n     *\n     * @return `matrix` is added to the MultiMatrix with name `i`.\n     */\n    add(i, matrix) {\n        if (this.#ncols === null) {\n            this.#ncols = matrix.numberOfColumns();\n        } else if (matrix.numberOfColumns() != this.#ncols) {\n            throw new Error(\"all matrices should have the same number of columns\");\n        }\n\n        if (i in this.#store) {\n            let old = this.#store[i];\n            utils.free(old);\n        }\n\n        this.#store[i] = matrix;\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return Modality `i` is removed from the MultiMatrix.\n     */\n    remove(i) {\n        utils.free(this.#store[i]);\n        delete this.#store[i];\n        if (Object.keys(this.#store).length == 0) {\n            this.#ncols = null;\n        }\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {MultiMatrix} A deep copy of the current object. \n     */\n    clone() {\n        let new_matrix = new MultiMatrix;\n        try {\n            for (const [k, v] of Object.entries(this.#store)) {\n                new_matrix.add(k, v.clone());\n            }\n        } catch (e) {\n            new_matrix.free();\n            throw e;\n        }\n        return new_matrix;\n    }\n\n    /**\n     * @param {string} from - Old name of the modality.\n     * @param {string} to - New name for the modality.\n     *\n     * @return The modality `from` is renamed to `to`, possibly replacing any existing modality at `to`.\n     */\n    rename(from, to) {\n        if (from !== to) {\n            if (to in this.#store) {\n                utils.free(this.#store[to]);\n            }\n            this.#store[to] = this.#store[from];\n            delete this.#store[from];\n        }\n    }\n\n    /**\n     * @return Frees memory for all modalities in this MultiMatrix.\n     */\n    free() {\n        for (const [x, v] of Object.entries(this.#store)) {\n            utils.free(v);\n        }\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\n\n/**\n * Wrapper around a matrix allocated on the Wasm heap.\n * @hideconstructor\n */\nexport class ScranMatrix {\n    #id;\n    #matrix;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#matrix = raw;\n        return;\n    }\n\n    /**\n     * @return {ScranMatrix} A clone of the current ScranMatrix instance.\n     * This can be freed independently of the current instance.\n     */\n    clone() {\n        return gc.call(\n            module => this.#matrix.clone(),\n            ScranMatrix\n        );\n    }\n\n    // Internal use only, not documented.\n    get matrix() {\n        return this.#matrix;\n    }\n\n    /**\n     * @return {number} Number of rows in the matrix.\n     */\n    numberOfRows() {\n        return this.#matrix.nrow();\n    }\n\n    /**\n     * @return {number} Number of columns in the matrix.\n     */\n    numberOfColumns() {\n        return this.#matrix.ncol();\n    }\n\n    /**\n     * @param {number} i - Index of the row to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     *\n     * @return {Float64Array} An array containing the contents of row `i`.\n     *\n     * If `buffer` was supplied, the returned array is a view into it.\n     * Note that this may be invalidated on the next allocation on the Wasm heap.\n     */\n    row(i, { buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.row(i, buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createFloat64WasmArray(this.#matrix.ncol());\n            try {\n                this.#matrix.row(i, buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    /**\n     * @param {number} i - Index of the column to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     *\n     * @return {Float64Array} An array containing the contents of column `i`.\n     *\n     * If `buffer` was supplied, the returned array is a view into it.\n     * Note that this may be invalidated on the next allocation on the Wasm heap.\n     */\n    column(i, { buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.column(i, buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createFloat64WasmArray(this.#matrix.nrow());\n            try {\n                this.#matrix.column(i, buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    /** \n     * Free the memory on the Wasm heap for this.#matrix.\n     * This invalidates this object and all of its references.\n     */\n    free() {\n        if (this.#matrix !== null) {\n            gc.release(this.#id);\n            this.#matrix = null;\n        }\n        return;\n    }\n\n    /**\n     * @return {boolean} Whether the matrix is sparse.\n     */\n    isSparse() {\n        return this.#matrix.sparse();\n    }\n\n    // Internal use only, by initialize* functions.\n    isReorganized() {\n        return this.#matrix.reorganized();\n    }\n\n    // Internal use only, by initialize* functions.\n    identities({ buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.identities(buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createInt32WasmArray(this.#matrix.nrow());\n            try {\n                this.#matrix.identities(buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    // Internal use only, by initialize* functions.\n    wipeIdentities() {\n        this.#matrix.wipe_identities();\n        return;\n    }\n}\n","import * as methods from \"../file.js\";\n\nexport function temp(prefix, extension) {\n    let tmppath;\n    do {\n        tmppath = prefix + String(Number(new Date())) + \"_\" + String(Math.round(Math.random() * 10000)) + extension;\n    } while (methods.existsFile(tmppath));\n    return tmppath;\n}\n\nexport function handleString(file) {\n    throw new Error(\"cannot access the file system in a browser context\");\n}\n","import * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as fac from \"./factorize.js\";\n\n/**\n * Create a blocking factor for a set of contiguous blocks, usually to accompany the output of {@linkcode cbind} on matrices representing different batches.\n * This can be used as the blocking factor in functions such as {@linkcode modelGeneVar} or {@linkcode scoreMarkers}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n *\n * @param {(Array|TypedArray)} ncells - Array of integers specifying the number of cells in each block.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to the sum of `ncells`.\n *\n * @return {Int32WasmArray} Array containing the blocking factor.\n * Each value specifies the block of origin for each cell.\n *\n * If `buffer` was supplied, it is used as the return value. \n */\nexport function createBlock(ncells, { buffer = null } = {}) {\n    let total = 0;\n    ncells.forEach(x => { total += x; });\n\n    let local_buffer;\n    try {\n        if (buffer == null) {\n            local_buffer = utils.createInt32WasmArray(total);\n            buffer = local_buffer;\n        } else if (buffer.length !== total) {\n            throw new Error(\"'buffer' should have length equal to sum of 'ncells'\");\n        }\n\n        let barr = buffer.array();\n        let sofar = 0;\n        for (var i = 0; i < ncells.length; i++) {\n            let old = sofar;\n            sofar += ncells[i];\n            barr.fill(i, old, sofar);\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return buffer;\n}\n\n// Soft-deprecated in favor of the more general factorize().\nexport function convertBlock(x, { buffer = null } = {}) {\n    let output = fac.factorize(x, { buffer, action: \"warn\", placeholder: 0 });\n    output.levels = output.levels.map(String);\n    return output;\n}\n\n/**\n * Filter the blocking factor, typically based on the same filtering vector as {@linkcode filterCells}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n * \n * @param {Int32WasmArray} x - A blocking factor, typically produced by {@linkcode convertBlock} or {@linkcode createBlock}.\n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n * \n * If `filter = null`, the array is expected to contain integer indices specifying the entries in `x` to retain.\n * The ordering of indices in `subset` will be respected in the subsetted array.\n *\n * If `filter = true`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * If `filter = false`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be retained.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?boolean} [options.filter=null] - Whether to retain truthy or falsey values in a `subset` boolean filter.\n * If `null`, `subset` should instead contain the indices of elements to retain.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to `subset`, if `filter = null`; \n * the number of falsey elements in `subset`, if `filter = false`;\n * or the number of truthy elements in `subset`, if `filter = true`.\n *\n * @return {Int32WasmArray} Array containing the desired subset of `x`. \n * If `buffer` is supplied, the returned array will be a view into `buffer`.\n */\nexport function subsetBlock(x, subset, { filter = null, buffer = null } = {}) {\n    let len = 0;\n    if (filter === null) {\n        len = subset.length;\n    } else {\n        if (subset.length != x.length) {\n            throw new Error(\"'x' and 'filter' should have the same length\");\n        }\n\n        let sum = 0;\n        subset.forEach(x => { sum += (x != 0); });\n        if (filter) {\n            len = subset.length - sum;\n        } else {\n            len = sum;\n        }\n    }\n\n    let local_buffer;\n    try {\n        if (buffer == null) {\n            local_buffer = utils.createInt32WasmArray(len);\n            buffer = local_buffer;\n        } else if (buffer.length !== len) {\n            throw new Error(\"length of 'buffer' is not consistent with 'subset'\");\n        }\n\n        let barr = buffer.array();\n        let xarr = x.array();\n\n        if (filter == null) {\n            subset.forEach((s, i) => {\n                barr[i] = xarr[s];\n            });\n        } else if (filter) {\n            let j = 0;\n            subset.forEach((y, i) => {\n                if (y == 0) {\n                    barr[j] = xarr[i];\n                    j++;\n                }\n            });\n        } else {\n            let j = 0;\n            subset.forEach((y, i) => {\n                if (y !== 0) {\n                    barr[j] = xarr[i];\n                    j++;\n                }\n            });\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return buffer;\n}\n\n/**\n * Filter the blocking factor, typically based on the same filtering vector as {@linkcode filterCells}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n * \n * @param {Int32WasmArray} x - A blocking factor, typically produced by {@linkcode convertBlock} or {@linkcode createBlock}.\n * @param {(Array|TypedArray|Uint8WasmArray)} filter - Array of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to the number of falsey elements in `filter`.\n *\n * @return {Int32WasmArray} Array of length equal to `x`, containing all entries of `x` for which `filter` is `false`.\n *\n * If `buffer` is supplied, it is used as the return value.\n */\nexport function filterBlock(x, filter, { buffer = null } = {}) {\n    return subsetBlock(x, filter, { buffer: buffer, filter: true });\n}\n\n/**\n * Reindex the blocking factor to remove unused levels.\n * This is done by adjusting the blocking IDs so that every ID from `[0, N)` is represented at least once, where `N` is the number of levels.\n *\n * @param {Int32WasmArray|Array} x - A blocking factor, typically produced by {@linkcode convertBlock} or {@link createBlock}.\n *\n * @return {Array} `x` is modified in place to remove unused levels.\n *\n * An array (denoted here as `y`) is returned that represents the mapping between the original and modified IDs,\n * i.e., running `x.map(i => y[i])` will recover the input `x`.\n * This is most commonly used to create a new array of levels, i.e., `y.map(i => old_levels[i])` will drop the unused levels. \n */\nexport function dropUnusedBlock(x) {\n    if (x instanceof wa.WasmArray) {\n        // No more wasm allocations past this point!\n        x = x.array();\n    }\n\n    let uniq = new Set(x);\n    let uniq_arr = Array.from(uniq).sort();\n    let mapping = {};\n    uniq_arr.forEach((y, i) => { mapping[y] = i; });\n\n    x.forEach((y, i) => {\n        x[i] = mapping[y];\n    });\n\n    return uniq_arr;\n}\n","import * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as gc from \"./gc.js\";\n\nfunction harvest_matrices(x) {\n    let output = utils.createBigUint64WasmArray(x.length);\n    let arr = output.array();\n    for (var i = 0; i < x.length; i++) {\n        arr[i] = BigInt(x[i].matrix.$$.ptr);\n    }\n    return output;\n}\n\n/**\n * Combine matrices by column, where all matrices contain data for the same features, in the same order.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * All of these should have the same number and order of features.\n *\n * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrices after combining them by column.\n */\nexport function cbind(inputs) {\n    let mat_ptrs;\n    let output;\n\n    try {\n        mat_ptrs = harvest_matrices(inputs);\n        output = gc.call(\n            module => module.cbind(mat_ptrs.length, mat_ptrs.offset),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(mat_ptrs);\n    }\n\n    return output;\n}\n\n/**\n * Combine matrices by row, where all matrices contain data for the same cells, in the same order.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * All of these should have the same number and order of cells.\n *\n * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrices after combining them by row.\n */\nexport function rbind(inputs) {\n    let mat_ptrs;\n    let output;\n\n    try {\n        mat_ptrs = harvest_matrices(inputs);\n        output = gc.call(\n            module => module.rbind(mat_ptrs.length, mat_ptrs.offset),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(mat_ptrs);\n    }\n\n    return output;\n}\n\n/**\n * Combine matrices by column, after subsetting each matrix to the intersection of common features.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * @param {Array} names - Array of length equal to `inputs`.\n * Each entry should be an Array containing the row names of the corresponding entry of `inputs`.\n * Names should correspond to the rows of that entry of `inputs`.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the combined matrices.\n * - `indices`, an Int32WasmArray of length equal to the number of rows in `matrix`.\n *    This contains the index of the row in the first entry of `inputs` corresponding to each row of `matrix`,\n *    i.e., the gene at the `i`-th row of `matrix` is the same as the gene at the `indices[i]`-th row of `inputs[0]`.\n * - `names`, an array of names identifying the rows of `matrix`.\n *    This is constructed by indexing the first entry of `names` with `indices`.\n */\nexport function cbindWithNames(x, names) {\n    let mat_ptrs;\n    let renamed = [];\n    let name_ptrs;\n    let indices;\n    let output = {};\n\n    try {\n        // Building a common set of rownames.\n        if (names.length !== x.length) {\n            throw new Error(\"length of 'names' should be equal to length of 'x'\");\n        }\n\n        let common = {};\n        let universe = [];\n        for (var i = 0; i < names.length; i++) {\n            if (x[i].numberOfRows() !== names[i].length) {\n                throw new Error(\"length of each 'names' must equal number of rows of its corresponding 'x'\");\n            }\n            names[i].forEach(x => {\n                if (!(x in common)) {\n                    common[x] = universe.length;\n                    universe.push(x);\n                }\n            });\n        }\n\n        name_ptrs = utils.createBigUint64WasmArray(x.length);\n        {\n            let names_arr = name_ptrs.array();\n            for (var i = 0; i < names.length; i++) {\n                let current = names[i];\n                let replacement = utils.createInt32WasmArray(current.length);\n                let replacement_arr = replacement.array();\n                current.forEach((x, i) => {\n                    replacement_arr[i] = common[x];\n                });\n                renamed.push(replacement);\n                names_arr[i] = BigInt(replacement.offset);\n            }\n        }\n\n        mat_ptrs = harvest_matrices(x);\n        indices = utils.createInt32WasmArray(x[0].numberOfRows());\n        output.matrix = gc.call(\n            module => module.cbind_with_rownames(x.length, mat_ptrs.offset, name_ptrs.offset, indices.offset),\n            ScranMatrix\n        );\n\n        output.indices = indices.slice(0, output.matrix.numberOfRows());\n        let internames = [];\n        for (const i of output.indices) {\n            internames.push(names[0][i]);\n        }\n        output.names = internames;\n\n    } catch (e) {\n        utils.free(output.matrix);\n        throw e;\n\n    } finally {\n        utils.free(mat_ptrs);\n        utils.free(name_ptrs);\n        utils.free(indices);\n        for (const x of renamed) {\n            utils.free(x);\n        }\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport { ModelGeneVarResults } from \"./modelGeneVar.js\";\n\n/**\n * Compute the filter threshold required to retain the top `number` values.\n *\n * @param {Array|TypedArray} x - Array of numeric values, typically per-gene statistics.\n * @param {number} number - Number of top values to retain after filtering on the returned threshold.\n * This may be approximate in the presence of ties.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.largest=true] - Whether the top values in `x` are defined as the largest numeric values.\n * If `false`, the top values are considered to be the smallest.\n * @param {boolean} [options.copy=true] - Whether to copy `x` before sorting.\n * If `false`, `x` may be modified in-place.\n *\n * @return {number} Threshold to be applied to `x` to obtain the top (approximately) `number` values.\n * If `largest = true`, filtering is performed by taking all values in `x` that are greater than or equal to the returned threshold;\n * if `false`, filtering is performed by taking all values in `x` that are less than or equal to the returned threshold.\n * If `x` is zero-length, NaN is returned.\n */\nexport function computeTopThreshold(x, number, { copy = true, largest = true } = {}) {\n    if (copy) {\n        x = x.slice();\n    }\n\n    if (x instanceof Array) {\n        x.sort((a, b) => a - b); // just in case...\n    } else {\n        x.sort();\n    }\n\n    if (x.length == 0) {\n        return Number.NaN;\n    }\n\n    if (largest) {\n        return x[Math.max(0, x.length - number)]; \n    } else {\n        return x[Math.min(number, x.length) - 1]; \n    }\n}\n\n/**\n * Choose the highly variable genes from variance modelling statistics.\n *\n * @param {(TypedArray|ModelGeneVarResults)} x -\n * A TypedArray of statistics, where larger values correspond to higher variability;\n * or a {@linkplain ModelGeneVarResults} object, in which case the residuals are used as the statistics.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.number=4000] - Number of highly variable genes to select.\n * @param {number} [options.minimum=0] - Minimum value of the residual to consider for a highly variable gene.\n * By default, a highly variable gene must have a non-negative residual.\n *\n * @return {Uint8WasmArray} Array of length equal to the total number of genes,\n * where the chosen highly variable genes are marked with a value of 1 and all other genes have values of zero.\n */\nexport function chooseHVGs(x, { number = 4000, minimum = 0 } = {}) {\n    let stat; \n    if (x instanceof ModelGeneVarResults) {\n        stat = x.residuals();\n    } else {\n        stat = x.slice();\n    }\n\n    let threshold = computeTopThreshold(stat, number, { largest: true, copy: false });\n    if (threshold < minimum) {\n        threshold = minimum;\n    }\n\n    let features = utils.createUint8WasmArray(stat.length);\n    try {\n        // Do this AFTER the features allocation, so that\n        // we can set copy = false for the input array.\n        if (x instanceof ModelGeneVarResults) {\n            stat = x.residuals({ copy: false });\n        } else {\n            stat = x;\n        }\n\n        let farr = features.array();\n        stat.forEach((x, i) => {\n            farr[i] = x >= threshold;\n        });\n\n    } catch (e) {\n        features.free();\n        throw e;\n    }\n\n    return features;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\n\n/**\n * Wrapper around the k-means clustering results on the Wasm heap, produced by {@linkcode clusterKmeans}.\n * @hideconstructor\n */\nexport class ClusterKmeansResults {\n    #id;\n    #results;\n\n    #filledClusters;\n    #filledSizes;\n    #filledCenters;\n    #filledWcss;\n    #filledIterations;\n    #filledStatus;\n\n    constructor(id, raw, filled = true) {\n        this.#results = raw;\n        this.#id = id;\n\n        this.#filledClusters = filled;\n        this.#filledSizes = filled;\n        this.#filledCenters = filled;\n        this.#filledWcss = filled;\n        this.#filledIterations = filled;\n        this.#filledStatus = filled;\n\n        return;\n    }\n\n    /**\n     * @return {number} Number of cells in the results.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    /**\n     * @return {number} Number of clusters in the results.\n     */\n    numberOfClusters() {\n        return this.#results.num_clusters();\n    }\n\n    /**\n     * @param {number} iterations - Number of iterations.\n     * @return The specified number of iterations is set in this object.\n     * Typically only used after {@linkcode emptyClusterKmeansResults}.\n     */\n    setIterations(iterations) {\n        if (!this.#filledIterations) {\n            this.#filledIterations = true;\n        }\n        this.#results.set_iterations(iterations);\n        return;\n    }\n\n    /**\n     * @param {number} status - Status of the k-means clustering.\n     * @return The status is set in this object.\n     * Typically only used after {@linkcode emptyClusterKmeansResults}.\n     */\n    setStatus(status) {\n        if (!this.#filledStatus) {\n            this.#filledStatus = true;\n        }\n        this.#results.set_status(status);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster assignment for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusters({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledClusters, \n            () => { this.#filledClusters = true }, \n            COPY => utils.possibleCopy(this.#results.clusters(), COPY),\n            \"clusters\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the number of cells in each cluster.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusterSizes({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSizes, \n            () => { this.#filledSizes = true }, \n            COPY => utils.possibleCopy(this.#results.cluster_sizes(), COPY),\n            \"clusterSizes\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the within-cluster sum of squares in each cluster.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    withinClusterSumSquares({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledWcss, \n            () => { this.#filledWcss = true }, \n            COPY => utils.possibleCopy(this.#results.wcss(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the cluster centers in column-major format,\n     * where rows are dimensions and columns are the clusters.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusterCenters({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledCenters, \n            () => { this.#filledCenters = true }, \n            COPY => utils.possibleCopy(this.#results.centers(), COPY)\n        );\n    }\n\n    /**\n     * @return {?number} Number of refinement iterations performed by the algorithm.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setIterations setIterations}.\n     */\n    iterations() {\n        if (!this.#filledIterations) {\n            return null;\n        } else {\n            return this.#results.iterations();\n        }\n    }\n\n    /**\n     * @return {?number} Status of the algorithm - anything other than zero usually indicates a problem with convergence.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setStatus setStatus}.\n     */\n    status() {\n        if (!this.#filledStatus) {\n            return null;\n        } else {\n            return this.#results.status();\n        }\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using k-means.\n *\n* @param {(RunPCAResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPCAResults} input, we extract the principal components.\n * @param {number} clusters Number of clusters to create.\n * This should not be greater than the number of cells.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {?number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {string} [options.initMethod=\"pca-part\"] - Initialization method.\n * Setting `\"random\"` will randomly select `clusters` cells as centers.\n * Setting `\"kmeans++\"` will use the weighted sampling approach of Arthur and Vassilvitskii (2007).\n * Setting `\"pca-part\"` will use PCA partitioning.\n * @param {number} [options.initSeed=5768] - Seed to use for random number generation during initialization.\n * @param {number} [options.initPCASizeAdjust=1] - Adjustment factor for the cluster sizes, used when `initMethod = \"pca-part\"`.\n * Larger values (up to 1) will prioritize partitioning of clusters with more cells.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {ClusterKmeansResults} Object containing the clustering results.\n */\nexport function clusterKmeans(x, clusters, { numberOfDims = null, numberOfCells = null, initMethod = \"pca-part\", initSeed = 5768, initPCASizeAdjust = 1, numberOfThreads = null } = {}) {\n    var buffer;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.cluster_kmeans(pptr, numberOfDims, numberOfCells, clusters, initMethod, initSeed, initPCASizeAdjust, nthreads),\n            ClusterKmeansResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ClusterKmeansResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfClusters - Number of clusters in the dataset.\n * @param {number} numberOfDimensions - Number of dimensions of the embedding used for clustering.\n *\n * @return {ClusterKmeansResults} Object with allocated memory to store variance modelling statistics, but no actual values.\n */\nexport function emptyClusterKmeansResults(numberOfCells, numberOfClusters, numberOfDimensions) {\n    return gc.call(\n        module => new module.ClusterKmeans_Result(numberOfCells, numberOfClusters, numberOfDimensions),\n        ClusterKmeansResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { FindNearestNeighborsResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the SNN graph object on the Wasm heap, produced by {@linkcode buildSNNGraph}.\n * @hideconstructor\n */\nexport class BuildSNNGraphResults {\n    #id;\n    #graph;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#graph = raw;\n        return;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#graph !== null) {\n            gc.release(this.#id);\n            this.#graph = null;\n        }\n        return;\n    }\n\n    // Not documented, internal use only.\n    get graph() {\n        return this.#graph;\n    }\n}\n\n/**\n * Build a shared nearest graph.\n *\n * @param {(BuildNeighborSearchIndexResults|FindNearestNeighborsResults)} x \n * Either a pre-built neighbor search index for the dataset (see {@linkcode buildNeighborSearchIndex}),\n * or a pre-computed set of neighbor search results for all cells (see {@linkcode findNearestNeighbors}).\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.scheme=\"rank\"] - Weighting scheme for the edges between cells.\n * This can be based on the top ranks of the shared neighbors (`\"rank\"`),\n * the number of shared neighbors (`\"number\"`) \n * or the Jaccard index of the neighbor sets between cells (`\"jaccard\"`).\n * @param {number} [options.neighbors=10] - Number of nearest neighbors to use to construct the graph.\n * Ignored if `x` is a {@linkplain FindNearestNeighborsResults} object.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {BuildSNNGraphResults} Object containing the graph.\n */\nexport function buildSNNGraph(x, { scheme = \"rank\", neighbors = 10, numberOfThreads = null } = {}) {\n    var output;\n    var my_neighbors;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    utils.matchOptions(\"scheme\", scheme, [ \"rank\", \"number\", \"jaccard\" ]);\n\n    try {\n        let ref;\n        if (x instanceof FindNearestNeighborsResults) {\n            ref = x;\n        } else {\n            my_neighbors = findNearestNeighbors(x, neighbors, { numberOfThreads: nthreads }); \n            ref = my_neighbors ; // separate assignment is necessary for only 'my_neighbors' but not 'x' to be freed.\n        }\n\n        output = gc.call(\n            module => module.build_snn_graph(ref.results, scheme, nthreads),\n            BuildSNNGraphResults\n        );\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around the SNN multi-level clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphMultiLevelResults {\n    #id;\n    #results;\n\n    #filledBest;\n    #filledModularity;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledBest = filled;\n        this.#filledModularity = utils.spawnArray(this.numberOfLevels(), filled);\n        this.#filledMembership = utils.spawnArray(this.numberOfLevels(), filled);\n\n        return;\n    }\n\n    /**\n     * @return {?number} The clustering level with the highest modularity.\n     * Alternatively `null`, if this has not been previously set via {@linkcode ClusterSNNGraphMultiLevelResults#setBest setBest}.\n     */\n    best() {\n        if (!this.#filledBest) {\n            return null;\n        } else {\n            return this.#results.best();\n        }\n    }\n\n    #chooseLevel(level) {\n        if (level === null) {\n            level = this.best();\n            if (level == null) {\n                throw new Error(\"'best' has not yet been set via 'setBest'\");\n            }\n        }\n        return level;\n    }\n\n    /**\n     * @param {number} best - Clustering level with the highest modularity.\n     * @return `best` is set as the best clustering level.\n     * This is typically only used after {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setBest(best) {\n        if (!this.#filledBest) {\n            this.#filledBest = true;\n        }\n        this.#results.set_best(best);\n        return;\n    }\n\n    /**\n     * @return {number} Number of levels in the results.\n     */\n    numberOfLevels() {\n        return this.#results.number();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the modularity.\n     * Defaults to the best clustering level from {@linkcode ClusterSNNGraphMultiLevelResults#best best}.\n     *\n     * @return {?number} The modularity at the specified level.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphMultiLevelResults#setModularity setModularity}.\n     */\n    modularity({ level = null } = {}) {\n        level = this.#chooseLevel(level);\n        if (!this.#filledModularity[level]) {\n            return null;\n        } else {\n            return this.#results.modularity(level);\n        }\n    }\n\n    /**\n     * @param {number} level - The clustering level at which to set the modularity.\n     * @param {number} modularity - Modularity value.\n     *\n     * @return `modularity` is set as the modularity at the specified level.\n     * This is typically only used after {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(level, modularity) {\n        if (!this.#filledModularity[level]) {\n            this.#filledModularity[level] = true;\n        }\n        this.#results.set_modularity(level, modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the cluster membership.\n     * Defaults to the best clustering level from {@linkcode ClusterSNNGraphMultiLevelResults#best best}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ level = null, copy = true, fillable = false } = {}) {\n        level = this.#chooseLevel(level);\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership[level], \n            () => { this.#filledMembership[level] = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(level), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the SNN walktrap clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphWalktrapResults {\n    #id;\n    #results;\n\n    #filledModularity;\n    #filledModularityDetails;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledModularity = filled;\n        this.#filledMembership = filled;\n        if (!filled) {\n            let n = this.numberOfMergeSteps() + 1;\n            this.#filledModularityDetails = { which: utils.spawnArray(n, false), remaining: n };\n        }\n\n        return;\n    }\n\n    /**\n     * @return {number} Number of merge steps used by the Walktrap algorithm.\n     */\n    numberOfMergeSteps() {\n        return this.#results.num_merge_steps();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.at=null] - Index at which to extract the modularity.\n     * This can be any value from 0 to {@linkcode ClusterSNNGraphWalktrapResults#numberOfMergeSteps numberOfMergeSteps} plus 1.\n     * Set to `null` to obtain the largest modularity across all merge steps.\n     *\n     * @return {?number} The modularity at the specified merge step, or the maximum modularity across all merge steps.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphWalktrapResults#setModularity setModularity}.\n     */\n    modularity({ at = null } = {}) {\n        let fail = false;\n        if (at === null) {\n            if (!this.#filledModularity) {\n                return null;\n            }\n            at = -1;\n        } else if (!this.#filledModularity && !this.#filledModularityDetails[at]) {\n            return null;\n        }\n\n        return this.#results.modularity(at);\n    }\n\n    /**\n     * @param {number} at - Index at which to set the modularity.\n     * This can be any value from 0 to {@linkcode ClusterSNNGraphWalktrapResults#numberOfMergeSteps numberOfMergeSteps} plus 1.\n     * @param {number} modularity - Modularity value.\n     *\n     * @return Modularity value is set in this object.\n     * This is typically used after calling {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(at, modularity) {\n        if (!this.#filledModularity) {\n            this.#filledModularityDetails.which[at] = true;\n            this.#filledModularityDetails.remaining--;\n            if (this.#filledModularityDetails.remaining == 0) {\n                this.#filledModularity = true;\n            }\n        }\n        this.#results.set_modularity(at, modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership, \n            () => { this.#filledMembership = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the SNN Leiden clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphLeidenResults {\n    #id;\n    #results;\n\n    #filledModularity;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledModularity = filled;\n        this.#filledMembership = filled;\n        return;\n    }\n\n    /**\n     * @return {?number} The quality of the Leiden clustering.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphLeidenResults#setModularity setModularity}.\n     *\n     * Note that Leiden's quality score is technically a different measure from modularity.\n     * Nonetheless, we use `modularity` for consistency with the other SNN clustering result classes.\n     */\n    modularity() {\n        if (!this.#filledModularity) {\n            return null;\n        } else {\n            return this.#results.modularity();\n        }\n    }\n\n    /**\n     * @param {number} modularity - Modularity value.\n     * @return Modularity value is set in this object.\n     * This is typically used after calling {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(modularity) {\n        if (!this.#filledModularity) {\n            this.#filledModularity = true;\n        }\n        this.#results.set_modularity(modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership, \n            () => { this.#filledMembership = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using community detection on the SNN graph.\n *\n * @param {BuildSNNGraphResults} x - The shared nearest neighbor graph constructed by {@linkcode buildSNNGraph}.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.method=\"multilevel\"] - Community detection method to use.\n * This should be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n * @param {number} [options.multiLevelResolution=1] - The resolution of the multi-level clustering, when `method = \"multilevel\"`.\n * Larger values result in more fine-grained clusters.\n * @param {number} [options.leidenResolution=1] - The resolution of the Leiden clustering, when `method = \"leiden\"`.\n * Larger values result in more fine-grained clusters.\n * @param {boolean} [options.leidenModularityObjective=false] - Whether to use the modularity as the objective function when `method = \"leiden\"`.\n * By default, the Constant-Potts Model is used instead.\n * Set to `true` to get an interpretation of the resolution on par with that of `method = \"multilevel\"`.\n * @param {number} [options.walktrapSteps=4] - Number of steps for the Walktrap algorithm, when `method = \"walktrap\"`.\n *\n * @return {ClusterSNNGraphMultiLevelResults|ClusterSNNGraphWalktrapResults|ClusterSNNGraphLeidenResults} Object containing the clustering results.\n * The class of this object depends on the choice of `method`.\n */\nexport function clusterSNNGraph(x, { \n    method = \"multilevel\", \n    multiLevelResolution = 1, \n    leidenResolution = 1, \n    leidenModularityObjective = false,\n    walktrapSteps = 4\n} = {}) {\n    var output;\n\n    try {\n        if (method == \"multilevel\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_multilevel(x.graph, multiLevelResolution),\n                ClusterSNNGraphMultiLevelResults\n            );\n        } else if (method == \"walktrap\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_walktrap(x.graph, walktrapSteps),\n                ClusterSNNGraphWalktrapResults\n            );\n        } else if (method == \"leiden\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_leiden(x.graph, leidenResolution, leidenModularityObjective),\n                ClusterSNNGraphLeidenResults\n            );\n        } else {\n            throw new Error(\"unknown method '\" + method + \"'\")\n        }\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ClusterSNNGraphMultiLevelResults} object (or one of its counterparts), to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.method=\"multilevel\"] - Community detection method to use.\n * This should be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n * @param {number} [options.numberOfLevels=1] - Number of levels for which to allocate space when `method=\"multilevel\"`.\n * @param {number} [options.numberOfMergeSteps=1] - Number of merge steps for which to allocate space when `method=\"walktrap\"`.\n *\n * @return {ClusterSNNGraphMultiLevelResults|ClusterSNNGraphWalktrapResults|ClusterSNNGraphLeidenResults} \n * Object with space allocated to store the clustering results.\n */\nexport function emptyClusterSNNGraphResults(numberOfCells, { method = \"multilevel\", numberOfLevels = 1, numberOfMergeSteps = 1 } = {}) {\n    if (method == \"multilevel\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphMultiLevel_Result(numberOfCells, numberOfLevels),\n            ClusterSNNGraphMultiLevelResults,\n            /* filled = */ false\n        );\n    } else if (method == \"walktrap\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphWalktrap_Result(numberOfCells, numberOfMergeSteps),\n            ClusterSNNGraphWalktrapResults,\n            /* filled = */ false\n        );\n    } else if (method == \"leiden\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphLeiden_Result(numberOfCells),\n            ClusterSNNGraphLeidenResults,\n            /* filled = */ false\n        );\n    } else {\n        throw new Error(\"unknown method '\" + method + \"'\")\n    }\n}\n","import * as wa from \"wasmarrays.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Convert an arbitrary array into a R-style factor, with integer indices into an array of levels.\n * This is useful for formatting grouping or blocking vectors for {@linkcode scoreMarkers}, {@linkcode modelGeneVar}, etc.\n *\n * @param {Array|TypedArray} x - Array of values to be converted into a factor.\n * \n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.asWasmArray=true] - Whether to return an Int32WasmArray instance for the indices.\n * If `false`, an Int32Array is returned instead.\n * Only used if `buffer` is not supplied.\n * @param {?(Int32WasmArray|Int32Array)} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to that of `x`.\n * @param {string} [options.action=\"warn\"] - Action to take when invalid values (i.e., null, NaNs) are detected in `x`.\n *\n * - `\"none\"`: the index is silently set to `placeholder`.\n * - `\"warn\"`: a warning is raised on the first occurrence of an invalid value, and the index is set to `placeholder`.\n * - `\"error\"`: an error is raised.\n * \n * @param {number} [options.placeholder=-1] - Placeholder index to use upon detecting invalid values in `x`.\n *\n * @return {object} Object containing:\n *\n * - `ids`: an Int32WasmArray or Int32Array of length equal to `x`, containing the index into `levels` for each cell.\n * - `levels`: an array of unique levels, such that `Array.from(ids).map(i => levels[i])` returns the same contents as `x` (aside from invalid values).\n *\n * If `buffer` was supplied, it is used as the value of the `ids` property.\n */\nexport function factorize(x, { asWasmArray = true, buffer = null, action = \"error\", placeholder = -1 } = {}) {\n    let levels = [];\n    let local_buffer;\n\n    let failure;\n    if (action == \"warn\") {\n        let warned = false;\n        failure = () => {\n            if (warned) {\n                console.warn (\"replacing invalid values with the placeholder index '\" + String(placeholder) + \"'\");\n                warned = true;\n            }\n        };\n    } else if (action == \"none\") {\n        failure = () => {};\n    } else if (action == \"error\") {\n        failure = () => {\n            throw new Error(\"detected invalid value (e.g., null, NaN) in 'x'\");\n        };\n    } else {\n        throw new Error(\"unknown action '\" + action + \"' for handling invalid entries\");\n    }\n\n    try {\n        if (buffer == null) {\n            local_buffer = (asWasmArray ? utils.createInt32WasmArray(x.length) : new Int32Array(x.length));\n            buffer = local_buffer;\n        } else {\n            if (buffer.length !== x.length) {\n                throw new Error(\"'buffer' should have length equal to that of 'x'\");\n            }\n            asWasmArray = buffer instanceof wa.Int32WasmArray;\n        }\n\n        let barr = (asWasmArray ? buffer.array() : buffer); // no allocations from this point onwards!\n        let mapping = new Map;\n\n        for (var i = 0; i < x.length; i++) {\n            let y = x[i];\n            if (y == null || (typeof y == \"number\" && !Number.isFinite(y))) {\n                failure();\n                barr[i] = placeholder;\n                continue;\n            }\n\n            let existing = mapping.get(y);\n            if (typeof existing == \"undefined\") {\n                let n = levels.length;\n                mapping.set(y, n);\n                levels.push(y);\n                barr[i] = n;\n            } else {\n                barr[i] = existing;\n            }\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return {\n        ids: buffer,\n        levels: levels\n    };\n}\n\n\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Filter out low-quality cells.\n *\n * @param {ScranMatrix} x The count matrix.\n * @param {(Uint8WasmArray|Array|TypedArray)} filters \n * An array of length equal to the number of columns in `x`, where truthy elements specify the cells to be discarded.\n *\n * @return {ScranMatrix} A matrix of the same type as `x`, filtered by column to remove all cells specified in `filters`. \n */\nexport function filterCells(x, filters) {\n    var filter_data;\n    var output;\n\n    try {\n        filter_data = utils.wasmifyArray(filters, \"Uint8WasmArray\");\n        if (filter_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'filters' must be equal to number of columns in 'x'\");\n        }\n        var ptr = filter_data.offset;\n\n        output = gc.call(\n            module => module.filter_cells(x.matrix, ptr, false),\n            x.constructor\n        );\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(filter_data);\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\n\n/** \n * Wrapper for the neighbor search index on the Wasm heap, typically produced by {@linkcode buildNeighborSearchIndex}.\n * @hideconstructor\n */\nexport class BuildNeighborSearchIndexResults {\n    #id;\n    #index; \n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#index = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of cells in the index.\n     */\n    numberOfCells() {\n        return this.#index.num_obs();\n    }\n\n    /**\n     * @return {number} Number of dimensions in the index.\n     */\n    numberOfDims() {\n        return this.#index.num_dim();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#index !== null) {\n            gc.release(this.#id);\n            this.#index = null;\n        }\n        return;\n    }\n\n    // Internal only, not documented.\n    get index() {\n        return this.#index;\n    }\n}\n\n/**\n * Build the nearest neighbor search index.\n *\n * @param {(RunPCAResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPCAResults} input, we extract the principal components.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {?number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {boolean} [options.approximate=true] - Whether to build an index for an approximate neighbor search.\n *\n * @return {BuildNeighborSearchIndexResults} Index object to use for neighbor searches.\n */\nexport function buildNeighborSearchIndex(x, { numberOfDims = null, numberOfCells = null, approximate = true } = {}) {\n    var buffer;\n    var output;\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.build_neighbor_index(pptr, numberOfDims, numberOfCells, approximate),\n            BuildNeighborSearchIndexResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n\n/** \n * Wrapper for the neighbor search results on the Wasm heap, typically produced by {@linkcode findNearestNeighbors}.\n * @hideconstructor\n */\nexport class FindNearestNeighborsResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} The total number of neighbors across all cells.\n     * This is usually the product of the number of neighbors and the number of cells.\n     */\n    size() {\n        return this.#results.size();\n    }\n\n    /**\n     * @return {number} The number of cells used in the search.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Int32WasmArray} [options.runs=null] - A Wasm-allocated array of length equal to `numberOfCells()`,\n     * to be used to store the number of neighbors per cell.\n     * @param {?Int32WasmArray} [options.indices=null] - A Wasm-allocated array of length equal to `size()`,\n     * to be used to store the indices of the neighbors of each cell.\n     * @param {?Float64WasmArray} [options.distances=null] - A Wasm-allocated array of length equal to `size()`,\n     * to be used to store the distances to the neighbors of each cell.\n     *\n     * @return {object} \n     * An object is returned with the `runs`, `indices` and `distances` keys, each with an appropriate TypedArray as the value.\n     *\n     * If all of the arguments are non-`null`, the TypedArrays in the returned object are views on the corresponding input WasmArrays.\n     * Note that these views may be invalidated on the next allocation on the Wasm heap.\n     *\n     * If only some of the arguments are non-`null`, an error is raised.\n     */\n    serialize({ runs = null, indices = null, distances = null } = {}) {\n        var copy = (runs === null) + (indices === null) + (distances === null);\n        if (copy != 3 && copy != 0) {\n            throw new Error(\"either all or none of 'runs', 'indices' and 'distances' can be 'null'\");\n        }\n\n        var output;\n\n        if (copy === 3) {\n            var run_data;\n            var ind_data;\n            var dist_data;\n            \n            try {\n                run_data = utils.createInt32WasmArray(this.numberOfCells());\n                let s = this.size();\n                ind_data = utils.createInt32WasmArray(s);\n                dist_data = utils.createFloat64WasmArray(s);\n                this.#results.serialize(run_data.offset, ind_data.offset, dist_data.offset);\n\n                output = { \n                    \"runs\": run_data.slice(), \n                    \"indices\": ind_data.slice(), \n                    \"distances\": dist_data.slice() \n                };\n            } finally {\n                utils.free(run_data);\n                utils.free(ind_data);\n                utils.free(dist_data);\n            }\n\n        } else {\n            this.#results.serialize(runs.offset, indices.offset, distances.offset);\n            output = {\n                \"runs\": runs.array(),\n                \"indices\": indices.array(),\n                \"distances\": distances.array()\n            };\n        }\n\n        return output;\n    }\n\n    /**\n     * @param {Int32WasmArray|Array|TypedArray} runs An array of length equal to `numberOfCells()`,\n     * containing the number of neighbors per cell.\n     * @param {Int32WasmArray|Array|TypedArray} indices An array of length equal to `size()`,\n     * containing the indices of the neighbors of each cell.\n     * @param {Float64WasmArray|Array|TypedArray} indices An array of length equal to `size()`,\n     * containing the distances to the neighbors of each cell.\n     *\n     * @return {FindNearestNeighborsResults} Object containing the unserialized search results.\n     */\n    static unserialize(runs, indices, distances) {\n        var output;\n        var run_data;\n        var ind_data;\n        var dist_data;\n\n        try {\n            run_data = utils.wasmifyArray(runs, \"Int32WasmArray\");\n            ind_data = utils.wasmifyArray(indices, \"Int32WasmArray\");\n            dist_data = utils.wasmifyArray(distances, \"Float64WasmArray\");\n            output = gc.call(\n                module => new module.NeighborResults(runs.length, run_data.offset, ind_data.offset, dist_data.offset),\n                FindNearestNeighborsResults\n            );\n\n        } catch (e) {\n            utils.free(output);\n            throw e;\n\n        } finally { \n            utils.free(run_data);\n            utils.free(ind_data);\n            utils.free(dist_data);\n        }\n\n        return output;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Find the nearest neighbors for each cell.\n *\n * @param {NeighborSearchIndex} x The neighbor search index built by {@linkcode buildNeighborSearchIndex}.\n * @param {number} k Number of neighbors to find.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {FindNearestNeighborsResults} Object containing the search results.\n */\nexport function findNearestNeighbors(x, k, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return gc.call(\n        module => module.find_nearest_neighbors(x.index, k, nthreads),\n        FindNearestNeighborsResults\n    );\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Compute group-based size factors, where composition biases are removed between groups and library size normalization is performed within groups.\n * This allows us to generate per-cell size factors in spite of the sparsity.\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {(Int32WasmArray|Array|TypedArray)} groups - Array containing the group assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.center=true] - Whether to return centered size factors.\n * If `false`, the size factors can be interpreted as the scaling to match `reference`.\n * @param {?Float64WasmArray} [options.buffer=null] - Output buffer for the size factors.\n * This should have length equal to the number of columns in `x`.\n * @param {number} [options.priorCount=10] - Prior count to use for shrinking size factors towards the relative library size.\n * Larger values result in stronger shrinkage when the coverage is low.\n * @param {?number} [options.reference=null] - Group to use as a reference.\n * This should be an entry in `groups`. \n * If `null`, it is automatically determined.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array of length equal to the number of columns in `x`, containing the size factors for all cells.\n *\n * If `buffer` was supplied, it is used as the return value.\n */\nexport function groupedSizeFactors(x, groups, { center = true, buffer = null, priorCount = 10, reference = null, numberOfThreads = null } = {}) {\n    var local_buffer;\n    var group_arr;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        if (!(buffer instanceof wa.Float64WasmArray)) {\n            local_buffer = utils.createFloat64WasmArray(x.numberOfColumns());\n            buffer = local_buffer;\n        } else if (buffer.length !== x.numberOfColumns()) {\n            throw new Error(\"length of 'buffer' must be equal to the number of columns in 'x'\");\n        }\n\n        group_arr = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (reference == null) {\n            reference = -1;\n        }\n\n        wasm.call(module => module.grouped_size_factors(x.matrix, group_arr.offset, center, priorCount, reference, buffer.offset, nthreads));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(group_arr);\n    }\n    \n    return buffer;\n}\n","/**\n * Guess the identity of the features from their names.\n *\n * @param {Array} features - Array of strings containing feature identifiers, typically Ensembl IDs or gene symbols.\n * Elements may also be `null` or undefined if an identifier is missing.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceTaxonomy=false] - Whether to force the use of taxonomy IDs for human and mouse.\n * This is `false` for back compatibility.\n *\n * @return {object} An object containing:\n *\n * - `species`, the inferred species as a string.\n *   This can be either `\"human\"` or `\"mouse\"`, or an NCBI taxonomy ID (one of 6239, 10116, 9541, 7227, 7955, 9598).\n *   If `forceTaxonomy = true`, human and mouse are replaced with 9606 and 10090, respectively.\n * - `type`: the feature identifier type.\n *   This can either be `\"ensembl\"` or `\"symbol\"`.\n * - `confidence`: the percentage of entries in `x` that are consistent with the inferred identity.\n */\nexport function guessFeatures(features, { forceTaxonomy = false } = {}) {\n    let ntotal = features.length;\n    let early_threshold = Math.ceil(ntotal / 2);\n    let format = payload => {\n        payload.confidence /= ntotal;\n        return payload;\n    };\n\n    // Duplicated entries only count as one match, so as to avoid problems with\n    // chromosome positions, feature type specifications, etc. Note that we\n    // still need to use the full length to compute 'ntotal', otherwise we\n    // wouldn't be penalizing the duplicates properly.\n    features = new Set(features); \n\n    let ensembl_human = 0;\n    let ensembl_mouse = 0;\n    let ensembl_6239 = 0;\n    let ensembl_10116 = 0; // Ensembl only, Rat symbols are indistiguishable from mice.\n    let ensembl_9541 = 0; // Ensembl only, Mfac symbols are indistiguishable from human.\n    let ensembl_7227 = 0; // Ensembl only, fly symbols are crazy.\n    let ensembl_7955 = 0;\n    let ensembl_9598 = 0; // Ensembl only, Chimp symbols are indistinguishable from human.\n\n    let symbol_human = 0;\n    let symbol_mouse = 0;\n    let symbol_6239 = 0;\n    let symbol_7955 = 0;\n\n    let hsid = (forceTaxonomy ? \"9606\" : \"human\");\n    let mmid = (forceTaxonomy ? \"10090\" : \"mouse\");\n    let collected = [];\n\n    // Checking if it's any type of Ensembl.\n    let any_ens = 0;\n    features.forEach(x => {\n        if (x && x.match(/^ENS[A-Z]*G[0-9]{11}$/)) {\n            any_ens++;\n        }\n    });\n\n    if (any_ens) {\n        features.forEach(x => {\n            if (x) {\n                if (x.startsWith(\"ENSG\")) {\n                    ensembl_human++;\n                } else if (x.startsWith(\"ENSMUSG\")) {\n                    ensembl_mouse++;\n                } else if (x.startsWith(\"ENSRNOG\")) {\n                    ensembl_10116++;\n                } else if (x.startsWith(\"ENSMFAG\")) {\n                    ensembl_9541++;\n                } else if (x.startsWith(\"ENSDARG\")) {\n                    ensembl_7955++;\n                } else if (x.startsWith(\"ENSPTRG\")) {\n                    ensembl_9598++;\n                }\n            }\n        });\n\n        collected.push({ species: hsid, type: \"ensembl\", confidence: ensembl_human });\n        collected.push({ species: mmid, type: \"ensembl\", confidence: ensembl_mouse });\n        collected.push({ species: \"10116\", type: \"ensembl\", confidence: ensembl_10116 });\n        collected.push({ species: \"9541\", type: \"ensembl\", confidence: ensembl_9541 });\n        collected.push({ species: \"7955\", type: \"ensembl\", confidence: ensembl_7955 });\n        collected.push({ species: \"9598\", type: \"ensembl\", confidence: ensembl_9598 });\n\n        // See if we can quit early and avoid the other checks.\n        for (const x of collected) {\n            if (x.confidence >= early_threshold) {\n                return format(x);\n            }\n        }\n    }\n\n    // Human symbol; starts with upper case, no lower case, and not an Ensembl of any kind.\n    features.forEach(x => {\n        if (x && x.match(/^[A-Z][^a-z]+$/) && !x.match(/^ENS[A-Z]+[0-9]{11}/)) {\n            symbol_human++;\n        }\n    });\n    {\n        let payload = { species: hsid, type: \"symbol\", confidence: symbol_human };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Mouse symbol; starts with upper case, but no upper case after that.\n    features.forEach(x => {\n        if (x && x.match(/^[A-Z][^A-Z]+$/)) {\n            symbol_mouse++;\n        }\n    });\n    {\n        let payload = { species: mmid, type: \"symbol\", confidence: symbol_mouse };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Worm Ensembl (WormBase).\n    features.forEach(x => {\n        if (x && x.match(/^WBGene[0-9]+$/)) {\n            ensembl_6239++;\n        }\n    });\n    {\n        let payload = { species: \"6239\", type: \"ensembl\", confidence: ensembl_6239 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Fly Ensembl (FlyBase).\n    features.forEach(x => {\n        if (x && x.match(/^FBgn[0-9]+$/)) {\n            ensembl_7227++;\n        }\n    });\n    {\n        let payload = { species: \"7227\", type: \"ensembl\", confidence: ensembl_7227 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Worm symbols; at least three lower case with a dash and numbers.\n    features.forEach(x => {\n        if (x && x.match(/^[a-z]{3,}-[0-9]+$/)) {\n            symbol_6239++;\n        }\n    });\n    {\n        let payload = { species: \"6239\", type: \"symbol\", confidence: symbol_6239 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Zebrafish symbols; at least three lower case letters, no dash, followed by numbers and/or more lower case.\n    features.forEach(x => {\n        if (x && x.match(/^[a-z]{3,}[0-9a-z]+$/)) {\n            symbol_7955++;\n        }\n    });\n    {\n        let payload = { species: \"7955\", type: \"symbol\", confidence: symbol_7955 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Picking the best.\n    let highest = collected[0];\n    for (var i = 1; i < collected.length; i++) {\n        if (collected[i].confidence > highest.confidence) {\n            highest = collected[i];\n        }\n    }\n\n    return format(highest);\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\n\n/** \n * Perform a hypergeometric test, typically for over-enrichment of markers across feature sets.\n * This can be computed for multiple feature sets by providing arrays as some or all of the arguments.\n * If multiple arrays are supplied, they must be of the same length.\n *\n * @param {number|Array|TypedArray|WasmArray} markersInSet - Number of detected markers that are also in the feature set.\n * @param {number|Array|TypedArray|WasmArray} numberOfMarkers - Total number of detected markers.\n * @param {number|Array|TypedArray|WasmArray} featureSetSize - Size of the feature set.\n * @param {number|Array|TypedArray|WasmArray} numberOfFeatures - Total number of features.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * @param {boolean} [options.assumeSorted=false] - Whether the input arrays are already sorted such that `markersInSet` is the slowest-changing value.\n * Setting this to `true` can avoid an extra sorting step for greater efficiency.\n *\n * @return {Float64Array} An array of length equal to that of the supplied arrays (or 1, if no arrays are supplied).\n * The i-th entry contains the p-value for enrichment computed using the i-th entry of each supplied array. \n */\nexport function hypergeometricTest(markersInSet, numberOfMarkers, featureSetSize, numberOfFeatures, { numberOfThreads = null, assumeSorted = false } = {}) {\n    let markersInSet_data;\n    let numberOfMarkers_data;\n    let featureSetSize_data;\n    let numberOfFeatures_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    let ntests = null;\n    let check_length = (candidate, name, sofar) => {\n        if (sofar !== null && candidate.length !== sofar) {\n            throw new Error(\"array inputs must have the same length (failing for '\" + name + \"')\");\n        }\n        return candidate.length;\n    }\n\n    if (typeof markersInSet == \"number\") {\n        markersInSet = [markersInSet];\n    } else { \n        ntests = check_length(markersInSet, \"markersInSet\", ntests);\n    }\n\n    if (typeof numberOfMarkers == \"number\") {\n        numberOfMarkers = [numberOfMarkers];\n    } else {\n        ntests = check_length(numberOfMarkers, \"numberOfMarkers\", ntests);\n    }\n\n    if (typeof featureSetSize == \"number\") {\n        featureSetSize = [featureSetSize];\n    } else {\n        ntests = check_length(featureSetSize, \"featureSetSize\", ntests);\n    }\n\n    if (typeof numberOfFeatures == \"number\") {\n        numberOfFeatures = [numberOfFeatures];\n    } else {\n        ntests = check_length(numberOfFeatures, \"numberOfFeatures\", ntests);\n    }\n\n    if (ntests == null) {\n        ntests = 1;\n    }\n\n    let output;\n    let output_data;\n\n    try {\n        markersInSet_data = utils.wasmifyArray(markersInSet, \"Int32WasmArray\");\n        numberOfMarkers_data = utils.wasmifyArray(numberOfMarkers, \"Int32WasmArray\");\n        featureSetSize_data = utils.wasmifyArray(featureSetSize, \"Int32WasmArray\");\n        numberOfFeatures_data = utils.wasmifyArray(numberOfFeatures, \"Int32WasmArray\");\n        output_data = utils.createFloat64WasmArray(ntests);\n\n        wasm.call(module => module.hypergeometric_test(\n            ntests, \n            markersInSet_data.length != 1,\n            markersInSet_data.offset,\n            featureSetSize_data.length != 1,\n            featureSetSize_data.offset,\n            numberOfMarkers_data.length != 1,\n            numberOfMarkers_data.offset,\n            numberOfFeatures_data.length != 1,\n            numberOfFeatures_data.offset,\n            assumeSorted,\n            output_data.offset,\n            nthreads\n        ));\n\n        output = output_data.slice();\n\n    } finally {\n        utils.free(markersInSet_data);\n        utils.free(numberOfMarkers_data);\n        utils.free(featureSetSize_data);\n        utils.free(numberOfFeatures_data);\n        utils.free(output_data);\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\"; \nimport { ScranMatrix } from \"./ScranMatrix.js\";\n\n/**\n * Initialize a sparse matrix from a dense array.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray|Array|TypedArray} values Values of all elements in the matrix, stored in column-major order.\n * This is generally expected to contain non-negative integers; otherwise, users should set `forceInteger = false`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if `values` contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that `values` contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`.\n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromDenseArray(numberOfRows, numberOfColumns, values, { forceInteger = true, layered = true } = {}) {\n    var val_data; \n    var output;\n    var ids = null; \n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        if (val_data.length !== numberOfRows * numberOfColumns) {\n            throw new Error(\"length of 'values' is not consistent with supplied dimensions\");\n        }\n\n        output = gc.call(\n            module => module.initialize_sparse_matrix_from_dense_vector(\n                numberOfRows, \n                numberOfColumns, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"),\n                forceInteger,\n                layered\n            ),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/**\n * Initialize a sparse matrix from its compressed components.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray} values Values of the non-zero elements.\n * This is generally expected to contain non-negative integers; otherwise, users should set `forceInteger = false`.\n * @param {WasmArray} indices Row indices of the non-zero elements.\n * This should be of the same length as `values`.\n * @param {WasmArray} pointers Pointers specifying the start of each column in `indices`.\n * This should have length equal to `numberOfColumns + 1`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.byColumn=true] - Whether the input arrays are supplied in the compressed sparse column format.\n * If `true`, `indices` should contain column indices and `pointers` should specify the start of each row in `indices`.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if `values` contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that `values` contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n * \n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */ \nexport function initializeSparseMatrixFromCompressedVectors(numberOfRows, numberOfColumns, values, indices, pointers, { byColumn = true, forceInteger = true, layered = true } = {}) {\n    var val_data;\n    var ind_data;\n    var indp_data;\n    var output;\n    var ids = null;\n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        ind_data = utils.wasmifyArray(indices, null);\n        indp_data = utils.wasmifyArray(pointers, null);\n        if (val_data.length != ind_data.length) {\n            throw new Error(\"'values' and 'indices' should have the same length\");\n        }\n        if (indp_data.length != (byColumn ? numberOfColumns : numberOfRows) + 1) {\n            throw new Error(\"'pointers' does not have an appropriate length\");\n        }\n\n        output = gc.call(\n            module => module.initialize_sparse_matrix(\n                numberOfRows, \n                numberOfColumns, \n                val_data.length, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"), \n                ind_data.offset, \n                ind_data.constructor.className.replace(\"Wasm\", \"\"), \n                indp_data.offset, \n                indp_data.constructor.className.replace(\"Wasm\", \"\"), \n                byColumn,\n                forceInteger,\n                layered\n            ),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n        utils.free(ind_data);\n        utils.free(indp_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/** \n * Initialize a sparse matrix from a buffer containing a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options={}] - Optional parameters.\n * @param {?boolean} [options.compressed=null] - Whether the buffer is Gzip-compressed.\n * If `null`, we detect this automatically from the magic number in the header.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If `layered = true`, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If `layered = false`, this is `null`.\n */\nexport function initializeSparseMatrixFromMatrixMarket(x, { compressed = null, layered = true } = {}) {\n    var buf_data;\n    var output;\n    var ids = null;\n\n    try {\n        compressed = convert_compressed(compressed);\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            output = gc.call(\n                module => module.read_matrix_market_from_buffer(buf_data.offset, buf_data.length, compressed, layered),\n                ScranMatrix\n            );\n        } else {\n            output = gc.call(\n                module => module.read_matrix_market_from_file(x, compressed, layered),\n                ScranMatrix\n            );\n        }\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buf_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\nfunction convert_compressed(compressed) {\n    if (compressed === null) {\n        return -1;\n    } else if (compressed) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n/** \n * Extract dimensions and other details from a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.compressed=null] - Whether the buffer is Gzip-compressed.\n * If `null`, we detect this automatically from the magic number in the header.\n *\n * @return {object} An object containing the number of `rows`, `columns` and `lines` in the matrix.\n */\nexport function extractMatrixMarketDimensions(x, { compressed = null } = {}) {\n    var buf_data;\n    var stats = utils.createFloat64WasmArray(3);\n    let output = {};\n\n    try {\n        compressed = convert_compressed(compressed);\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            wasm.call(module => module.read_matrix_market_header_from_buffer(buf_data.offset, buf_data.length, compressed, stats.offset));\n        } else {\n            wasm.call(module => module.read_matrix_market_header_from_file(x, compressed, stats.offset));\n        }\n\n        let sarr = stats.array();\n        output.rows = sarr[0];\n        output.columns = sarr[1];\n        output.lines = sarr[2];\n\n    } finally {\n        utils.free(buf_data);\n        utils.free(stats);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a layered sparse matrix from a HDF5 file.\n *\n * @param {string} file Path to the HDF5 file.\n * For browsers, the file should have been saved to the virtual filesystem.\n * @param {string} name Name of the dataset inside the file.\n * This can be a HDF5 Dataset for dense matrices or a HDF5 Group for sparse matrices.\n * For the latter, both H5AD and 10X-style sparse formats are supported.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce all elements to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if the relevant HDF5 dataset contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that the matrix contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromHDF5(file, name, { forceInteger = true, layered = true } = {}) {\n    var ids = null;\n    var output;\n\n    try {\n        output = gc.call(\n            module => module.read_hdf5_matrix(file, name, forceInteger, layered),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/**\n * Extract the format and dimensions of a HDF5 matrix.\n *\n * @param {string} file Path to the HDF5 file.\n * For browsers, the file should have been saved to the virtual filesystem.\n * @param {string} name Name of the dataset inside the file.\n * This can be a HDF5 Dataset for dense matrices or a HDF5 Group for sparse matrices.\n * For the latter, both H5AD and 10X-style sparse formats are supported.\n *\n * @return {object} An object containing:\n * - `rows`, the number of rows in the matrix.\n * - `columns`, the number of columns.\n * - `format`, whether the matrix is dense, CSR or CSC.\n * - `integer`, whether the matrix data is stored as integers or doubles.\n */\nexport function extractHDF5MatrixDetails(file, name) { \n    let output = {};\n    let arr = utils.createInt32WasmArray(5);\n    try {\n        wasm.call(module => module.extract_hdf5_matrix_details(file, name, arr.offset));\n\n        let vals = arr.array();\n        if (vals[0] > 0) {\n            output.format = \"dense\";\n        } else if (vals[1] > 0) {\n            output.format = \"csc\";\n        } else {\n            output.format = \"csr\";\n        }\n\n        output.rows = vals[2];\n        output.columns = vals[3];\n        output.integer = vals[4] > 0;\n    } finally {\n        arr.free();\n    }\n    return output;\n}\n\n/**\n * Initialize a dense matrix from a column-major array.\n *\n * @param {number} numberOfRows - Number of rows.\n * @param {number} numberOfColumns - Number of columns.\n * @param {(WasmArray|TypedArray|Array)} values - Array of length equal to the product of `numberOfRows` and `numberOfColumns`,\n * containing the values to store in the array.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n *\n * @return {ScranMatrix} A dense matrix, filled by column with the contents of `values`.\n */\nexport function initializeDenseMatrixFromDenseArray(numberOfRows, numberOfColumns, values, { forceInteger = false } = {}) {\n    var tmp;\n    var output;\n\n    try {\n        tmp = utils.wasmifyArray(values, null);\n        output = gc.call(\n            module => module.initialize_dense_matrix(\n                numberOfRows, \n                numberOfColumns, \n                tmp.offset, \n                tmp.constructor.className.replace(\"Wasm\", \"\"),\n                forceInteger\n            ),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(tmp);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a layered sparse matrix from an RDS file.\n *\n * @param {RdsObject} x - Handle to an object inside an RDS file.\n * This should be an integer/numeric matrix, `dgCMatrix` or `dgTMatrix` object.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.consume=false] - Whether to consume the values in `x` when creating the output sparse matrix.\n * Setting this to `true` improves memory efficiency at the cost of preventing any further use of `x`.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce all elements to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if the R matrix is of an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that the matrix contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromRds(x, { consume = false, forceInteger = true, layered = true } = {}) {\n    var ids = null;\n    var output;\n\n    try {\n        output = gc.call(\n            module => module.initialize_sparse_matrix_from_rds(x.object.$$.ptr, forceInteger, layered, consume),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n","import * as utils from \"./../utils.js\";\nimport * as wasm from \"../wasm.js\";\n\nexport function computePerCellQcFilters(metrics, block, run) {\n    var block_data;\n    var output;\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != metrics.numberOfCells()) {\n                throw new Error(\"'block' must be of length equal to the number of cells in 'metrics'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = run(metrics, use_blocks, bptr);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n\n    return output;\n}\n\nexport function applyFilter(thresholds, metrics, block, buffer) {\n    var block_data;\n    var rebuffer;\n    var output;\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != metrics.numberOfCells()) {\n                throw new Error(\"'block' must be of length equal to the number of cells in 'metrics'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        let optr;\n        if (buffer == null) {\n            rebuffer = utils.createUint8WasmArray(metrics.numberOfCells());\n            optr = rebuffer.offset;\n        } else {\n            if (buffer.length != metrics.numberOfCells()) {\n                throw new Error(\"'buffer' must be of length equal to the number of cells in 'metrics'\");\n            }\n            optr = buffer.offset;\n        }\n\n        wasm.call(module => thresholds.filter(metrics.results.$$.ptr, use_blocks, bptr, optr));\n        if (buffer == null) {\n            output = rebuffer.slice();\n        } else {\n            output = buffer.array();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n        utils.free(rebuffer);\n    }\n\n    return output;\n}\n\n","import * as wasm from \"../wasm.js\";\nimport * as utils from \"../utils.js\"; \nimport * as wa from \"wasmarrays.js\";\n\nexport function computePerCellQcMetrics(x, subsets, run) {\n    var output;\n    var tmp_subsets = [];\n    var subset_offsets;\n\n    try {\n        let nsubsets = 0;\n        let offset_offset = 0;\n\n        if (subsets != null) {\n            nsubsets = subsets.length;\n            subset_offsets = utils.createBigUint64WasmArray(nsubsets);\n            offset_offset = subset_offsets.offset;\n            let offset_arr = subset_offsets.array();\n\n            for (var i = 0; i < nsubsets; i++) {\n                // This will either create a cheap view, or it'll clone\n                // 'subsets' into the appropriate memory space.\n                let current = utils.wasmifyArray(subsets[i], \"Uint8WasmArray\");\n                if (current.length != x.numberOfRows()) {\n                    throw new Error(\"length of each array in 'subsets' should be equal to the matrix rows\");\n                }\n                tmp_subsets.push(current);\n                offset_arr[i] = BigInt(current.offset);\n            }\n        }\n\n        output = run(x.matrix, nsubsets, offset_offset);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(subset_offsets);\n        for (const y of tmp_subsets) {\n            utils.free(y);\n        }\n    }\n\n    return output;\n}\n","import * as utils from \"../utils.js\";\n\nexport function unpack_strings(buffer, lengths) {\n    let dec = new TextDecoder();\n    let names = [];\n    let sofar = 0;\n    for (const l of lengths) {\n        let view = buffer.slice(sofar, sofar + l);\n        names.push(dec.decode(view));\n        sofar += l;\n    }\n    return names;\n}\n\nexport function repack_strings(x) {\n    let buffer;\n    let lengths;\n\n    for (const y of x) {\n        if (!(typeof y == \"string\")) {\n            throw new Error(\"all entries of 'x' should be strings for a string HDF5 dataset\");\n        }\n    }\n\n    try {\n        lengths = utils.createInt32WasmArray(x.length);\n        let lengths_arr = lengths.array();\n\n        let total = 0;\n        const enc = new TextEncoder;\n        let contents = new Array(x.length);\n\n        x.forEach((y, i) => {\n            let e = enc.encode(y);\n            lengths_arr[i] = e.length;\n            contents[i] = e;\n            total += e.length;\n        });\n\n        buffer = utils.createUint8WasmArray(total);\n        let buffer_arr = buffer.array();\n        total = 0;\n\n        contents.forEach(y => {\n            buffer_arr.set(y, total);\n            total += y.length;\n        });\n    } catch (e) {\n        utils.free(buffer);\n        utils.free(lengths);\n        throw e;\n    }\n\n    return [lengths, buffer];\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as init from \"./initializeSparseMatrix.js\";\n\n/**\n * Wrapper around a labelled reference dataset on the Wasm heap, typically produced by {@linkcode loadLabelledReferenceFromBuffers}.\n * @hideconstructor\n */\nclass LoadLabelledReferenceResults {\n    #id;\n    #reference;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#reference = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of samples in this dataset.\n     */\n    numberOfSamples() {\n        return this.#reference.num_samples();\n    }\n\n    /**\n     * @return {number} Number of features in this dataset.\n     */\n    numberOfFeatures() {\n        return this.#reference.num_features();\n    }\n\n    /**\n     * @return {number} Number of labels in this dataset.\n     */\n    numberOfLabels() {\n        return this.#reference.num_labels();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\n/**\n * Load a reference dataset for annotation.\n * \n * @param {Uint8Array} ranks - Buffer containing the Gzipped CSV file containing a matrix of ranks.\n * Each line corresponds to a sample and contains a comma-separated vector of ranks across all features.\n * All lines should contain the same number of entries.\n * This is effectively a row-major matrix where rows are samples and columns are features.\n * (Advanced users may note that this is transposed in C++.) \n * @param {Uint8Array} markers - Buffer containing the Gzipped GMT file containing the markers for each pairwise comparison between labels.\n * For `markers`, the GMT format is a tab-separated file with possibly variable numbers of fields for each line.\n * Each line corresponds to a pairwise comparison between labels, defined by the first two fields.\n * The remaining fields should contain indices of marker features (referring to columns of `matrix`) that are upregulated in the first label when compared to the second.\n * Markers should be sorted in order of decreasing strength.\n * @param {Uint8Array} labels - Buffer containing the Gzipped text file containing the label for each sample.\n * Each line should contain an integer representing a particular label, from `[0, N)` where `N` is the number of unique labels.\n * The number of lines should be equal to the number of rows in `matrix`.\n * The actual names of the labels are usually held elsewhere.\n * \n * @return {LoadLabelledReferenceResults} Object containing the reference dataset.\n */\nexport function loadLabelledReferenceFromBuffers(ranks, markers, labels) {\n    var output;\n    var matbuf;\n    var markbuf;\n    var labbuf;\n\n    try {\n        matbuf = utils.wasmifyArray(ranks, \"Uint8WasmArray\");\n        markbuf = utils.wasmifyArray(markers, \"Uint8WasmArray\");\n        labbuf = utils.wasmifyArray(labels, \"Uint8WasmArray\");\n        output = gc.call(\n            module => module.load_singlepp_reference(labbuf.offset, labbuf.length, markbuf.offset, markbuf.length, matbuf.offset, matbuf.length),\n            LoadLabelledReferenceResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(matbuf);\n        utils.free(markbuf);\n        utils.free(labbuf);\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around a built labelled reference dataset on the Wasm heap, typically produced by {@linkcode buildLabelledReference}.\n * @hideconstructor\n */\nclass BuildLabelledReferenceResults {\n    #id;\n    #reference;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#reference = raw;\n        return;\n    }\n\n    // internal use only.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of shared features between the test and reference datasets.\n     */\n    sharedFeatures() {\n        return this.#reference.shared_features();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\nfunction create_feature_availability(features, mat_id_buffer) {\n    let mat_id_array = mat_id_buffer.array();\n    let available = {};\n    let counter = 0;\n\n    features.forEach(y => {\n        // Nulls get incremented but they don't fall into the 'available' \n        // dictionary. The strategy is that each null is unique and can \n        // never match anything else.\n        if (y !== null) {\n            available[y] = counter;\n        }\n        mat_id_array[counter] = counter;\n        counter++;\n    });\n\n    return available;\n}\n\nfunction convert_reference_features(referenceFeatures, available, ref_id_buffer) {  \n    let ref_id_array = ref_id_buffer.array();\n    let counter = Object.keys(available).length;\n    referenceFeatures.forEach((y, i) => {\n        // If y is null, we force it to be incremented so that it's always unique.\n        if (y !== null && y in available) {\n            ref_id_array[i] = available[y];\n        } else {\n            ref_id_array[i] = counter;\n            counter++;\n        }\n    });\n    return;\n}\n\n/**\n * Build the reference dataset for annotation.\n * The build process involves harmonizing the identities of the features available in the test dataset compared to the reference.\n * Specifically, a feature must be present in both datasets in order to be retained. \n * Of those features in the intersection, only the `top` markers from each pairwise comparison are ultimately used for classification.\n *\n * Needless to say, `features` should match up to the rows of the {@linkplain ScranMatrix} that is actually used for annotation in {@linkcode labelCells}.\n *\n * @param {Array} features - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain the identifier for the corresponding row of the test matrix.\n * Any `null` entries are considered to be incomparable.\n * @param {LoadLabelledReferenceResults} loaded - A reference dataset, typically loaded with {@linkcode loadLabelledReferenceFromBuffers}.\n * @param {Array} referenceFeatures - An array of feature identifiers (usually strings) of length equal to the number of features in `reference`.\n * This is expected to exhibit some overlap with those in `features`.\n * Any `null` entries are considered to be incomparable.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.top=20] - Number of top marker features to use.\n * These features are taken from each pairwise comparison between labels.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {BuildLabelledReferenceResults} Object containing the built reference dataset.\n */\nexport function buildLabelledReference(features, loaded, referenceFeatures, { top = 20, numberOfThreads = null } = {}) {\n    var mat_id_buffer;\n    var ref_id_buffer;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var nfeat = features.length;\n        mat_id_buffer = utils.createInt32WasmArray(nfeat);\n        ref_id_buffer = utils.createInt32WasmArray(loaded.numberOfFeatures());\n        if (referenceFeatures.length != ref_id_buffer.length) {\n            throw new Error(\"length of 'referenceFeatures' should be equal to the number of features in 'reference'\");\n        }\n\n        let available = create_feature_availability(features, mat_id_buffer);\n        convert_reference_features(referenceFeatures, available, ref_id_buffer);\n\n        output = gc.call(\n            module => module.build_singlepp_reference(nfeat, mat_id_buffer.offset, loaded.reference, ref_id_buffer.offset, top, nthreads),\n            BuildLabelledReferenceResults\n        );\n\n        output.expectedNumberOfFeatures = nfeat;\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(mat_id_buffer);\n        utils.free(ref_id_buffer);\n    }\n\n    return output;\n}\n\nfunction label_cells(x, expectedNumberOfFeatures, buffer, numberOfFeatures, numberOfCells, FUN, msg) {\n    var output = null;\n    var matbuf;\n    var tempmat;\n    var tempbuf;\n    let use_buffer = (buffer instanceof wa.Int32WasmArray);\n\n    try {\n        let target;\n        if (x instanceof ScranMatrix) {\n            target = x.matrix;\n        } else if (x instanceof wa.Float64WasmArray) {\n            tempmat = init.initializeDenseMatrixFromDenseArray(numberOfFeatures, numberOfCells, x, { forceInteger: false });\n            target = tempmat.matrix;\n        } else {\n            throw new Error(\"unknown type for 'x'\");\n        }\n\n        if (target.nrow() != expectedNumberOfFeatures) {\n            throw new Error(\"number of rows in 'x' should be equal to length of 'features' used to build '\" + msg + \"'\");\n        }\n\n        let ptr;\n        if (!use_buffer) {\n            tempbuf = utils.createInt32WasmArray(target.ncol());\n            ptr = tempbuf.offset;\n        } else {\n            ptr = buffer.offset;\n        }\n\n        FUN(target, ptr);\n        if (!use_buffer) {\n            output = tempbuf.slice();\n        }\n\n    } finally {\n        utils.free(matbuf);\n        utils.free(tempmat);\n        utils.free(tempbuf);\n    }\n\n    return output;\n}\n\n/**\n * Label cells based on similarity in expression to a reference dataset.\n *\n * @param {(ScranMatrix|Float64WasmArray)} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * If a Float64WasmArray is supplied, it is assumed to contain a column-major dense matrix.\n * @param {BuildLabelledReferenceResults} reference - A built reference dataset, typically generated by {@linkcode buildLabelledReference}.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - An existing buffer to store the output labels, of length equal to the number of columns in `x`.\n * @param {?number} [options.numberOfFeatures=null] - Number of features, used when `x` is a Float64WasmArray.\n * @param {?number} [options.numberOfCells=null] - Number of cells, used when `x` is a Float64WasmArray.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Int32Array} Array containing the labels for each cell in `x`.\n *\n * If `buffer` was supplied, the returned array is a view into it.\n * Note that this may be invalidated on the next allocation on the Wasm heap.\n */\nexport function labelCells(x, reference, { buffer = null, numberOfFeatures = null, numberOfCells = null, quantile = 0.8, numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    let FUN = (target, ptr) => {\n        wasm.call(module => module.run_singlepp(target, reference.reference, quantile, ptr, nthreads));\n    };\n\n    let output = label_cells(x, reference.expectedNumberOfFeatures, buffer, numberOfFeatures, numberOfCells, FUN, \"reference\");\n\n    // This is done as the final step to avoid invalidation upon any touching\n    // of the Wasm heap, anywhere... even upon freeing.\n    if (output === null) {\n        output = buffer.array();\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around integrated reference datasets on the Wasm heap, typically produced by {@linkcode integrateLabelledReferences}.\n * @hideconstructor\n */\nclass IntegrateLabelledReferencesResults {\n    #id;\n    #integrated;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#integrated = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get integrated() {\n        return this.#integrated;\n    }\n\n    /**\n     * @return {number} Number of reference datasets.\n     */\n    numberOfReferences() {\n        return this.#integrated.num_references();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#integrated !== null) {\n            gc.release(this.#id);\n            this.#integrated = null;\n        }\n    }\n}\n\n/**\n * Integrate multiple reference datasets.\n *\n * @param {Array} features - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain the identifier for the corresponding row of the test matrix.\n * Any `null` entries are considered to be incomparable.\n * @param {Array} loaded - Array of {@linkplain LabelledReference} objects, typically created with {@linkcode loadLabelledReferenceFromBuffers}.\n * @param {Array} referenceFeatures - Array of length equal to `loaded`, \n * containing arrays of feature identifiers (usually strings) of length equal to the number of features the corresponding entry of `loaded`.\n * This is expected to exhibit some overlap with those in `features`.\n * Any `null` entries are considered to be incomparable.\n * @param {Array} reference - Array of {@linkplain BuildLabelledReferenceResults} objects, typically generated by calling {@linkcode buildLabelledReference} \n * on the same `features` and the corresponding entries of `loaded` and `referenceFeatures`.\n * This should have length equal to that of `loaded`.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {IntegrateLabelledReferencesResults} Object containing the integrated references.\n */\nexport function integrateLabelledReferences(features, loaded, referenceFeatures, built, { numberOfThreads = null } = {}) {\n    let id_arr;\n    let loaded_arr2;\n    let ref_arr2;\n    let built_arr2;\n    let output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    // Checking the inputs.\n    let nrefs = loaded.length;\n    if (referenceFeatures.length != nrefs) {\n        throw new Error(\"'loaded' and 'referenceFeatures' should be of the same length\");\n    }\n    if (built.length != nrefs) {\n        throw new Error(\"'loaded' and 'built' should be of the same length\");\n    }\n    for (var i = 0; i < nrefs; i++) {\n        if (loaded[i].numberOfFeatures() != referenceFeatures[i].length) {\n            throw new Error(\"length of each 'referenceFeatures' should be equal to the number of features in the corresponding 'loaded'\");\n        }\n    }\n\n    let ref_arr = new Array(nrefs);\n\n    try {\n        id_arr = utils.createInt32WasmArray(features.length);\n        let available = create_feature_availability(features, id_arr);\n\n        loaded_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let la2 = loaded_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            la2[i] = BigInt(loaded[i].reference.$$.ptr);\n        }\n\n        ref_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let ra2 = ref_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            let current = referenceFeatures[i];\n            if (current instanceof wa.Int32WasmArray) {\n                ra2[i] = BigInt(current.offset);\n            } else {\n                ref_arr[i] = utils.createInt32WasmArray(current.length);\n                convert_reference_features(current, available, ref_arr[i]);\n                ra2[i] = BigInt(ref_arr[i].offset);\n            }\n        }\n\n        built_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let ba2 = built_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            ba2[i] = BigInt(built[i].reference.$$.ptr);\n        }\n        \n        output = gc.call(\n            module => module.integrate_singlepp_references(\n                features.length,\n                id_arr.offset,\n                nrefs,\n                loaded_arr2.offset,\n                ref_arr2.offset,\n                built_arr2.offset,\n                nthreads\n            ),\n            IntegrateLabelledReferencesResults\n        );\n\n        output.expectedNumberOfFeatures = features.length;\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(id_arr);\n        utils.free(loaded_arr2);\n        utils.free(built_arr2);\n        utils.free(ref_arr2);\n        for (const x of ref_arr) {\n            utils.free(x);\n        }\n    }\n\n    return output;\n}\n\n/**\n * Label cells based on similarity in expression to a reference dataset.\n *\n * @param {(ScranMatrix|Float64WasmArray)} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * If a Float64WasmArray is supplied, it is assumed to contain a column-major dense matrix.\n * @param {IntegratedLabelledReferences} integrated - An integrated set of reference datasets, typically generated by {@linkcode integrateLabelledReferences}.\n * @param {Array} assigned - An array of length equal to the number of references in `integrated`.\n * This should contain the result of classification of `x` with each individual reference via {@linkcode labelCells}.\n * Each element should be an Array, TypedArray or Int32WasmArray of length equal to the number of cells in `x`.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - An existing buffer to store the output labels, of length equal to the number of columns in `x`.\n * @param {?number} [options.numberOfFeatures=null] - Number of features, used when `x` is a Float64WasmArray.\n * @param {?number} [options.numberOfCells=null] - Number of cells, used when `x` is a Float64WasmArray.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Int32Array} Array containing the best reference for each cell in `x`.\n *\n * If `buffer` was supplied, the returned array is a view into it.\n * Note that this may be invalidated on the next allocation on the Wasm heap.\n */\nexport function integrateCellLabels(x, assigned, integrated, { buffer = null, numberOfFeatures = null, numberOfCells = null, quantile = 0.8, numberOfThreads = null } = {}) { \n    let nrefs = integrated.numberOfReferences();\n    if (assigned.length != nrefs) {\n        throw new Error(\"length of 'assigned' should be equal to the number of references in 'integrated'\");\n    }\n\n    let output;\n    let aptrs;\n    let assigned_arrs = new Array(nrefs);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        aptrs = utils.createBigUint64WasmArray(nrefs);\n        let aptrs_arr = aptrs.array();\n        for (var i = 0; i < assigned.length; i++) {\n            let current = assigned[i];\n\n            let fail = false;\n            if (x instanceof ScranMatrix) {\n                if (current.length != x.numberOfColumns()) {\n                    fail = true;\n                }\n            } else if (current.length != numberOfCells) {\n                fail = true;\n            }\n            if (fail) {\n                throw new Error(\"length of each element 'assigned' should be equal to number of columns in 'x'\");\n            }\n\n            assigned_arrs[i] = utils.wasmifyArray(current, \"Int32WasmArray\");\n            aptrs_arr[i] = BigInt(assigned_arrs[i].offset);\n        }\n    \n        let FUN = (target, ptr) => {\n            wasm.call(module => module.integrate_singlepp(target, aptrs_arr.offset, integrated.integrated, quantile, ptr, nthreads));\n        };\n        output = label_cells(x, integrated.expectedNumberOfFeatures, buffer, numberOfFeatures, numberOfCells, FUN, \"integrated\");\n\n    } finally{\n        utils.free(aptrs);\n        for (const x of assigned_arrs) {\n            utils.free(x);\n        }\n    }\n\n    // This is done as the final step to avoid invalidation upon any touching\n    // of the Wasm heap, anywhere... even upon freeing.\n    if (output === null) {\n        output = buffer.array();\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Compute log-transformed normalized expression values.\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Float64WasmArray|Array|TypedArray)} [options.sizeFactors=null] - Array of positive numbers containing the size factor for each cell in `x`.\n * This should have length equal to the number of columns in `x`.\n * If `null`, size factors are computed from the column sums of `x`.\n * @param {boolean} [options.center=true] - Whether to center the size factors so that the normalized expression values are comparable in magnitude to the input counts.\n * Set this to `false` if `sizeFactors` are provided and already centered, e.g., with {@linkcode centerSizeFactors}.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to adjust the scaling of cells in different blocks, to avoid excessive up-scaling of low-coverage blocks.\n *\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * This option is ignored if `center = false`, in which case it is assumed that scaling has already been provided in the input `sizeFactors`.\n * @param {boolean} [options.allowZeros=false] - Whether size factors of zero should be allowed.\n * If `true`, no scaling normalization is performed for the corresponding cells, under the assumption they are all-zero libraries.\n * If `false`, an error is raised instead.\n *\n * @return {ScranMatrix} A matrix of the same type as `x` containing log-transformed normalized expression values.\n */\nexport function logNormCounts(x, { sizeFactors = null, center = true, block = null, allowZeros = false } = {}) {\n    var sf_data;\n    var block_data;\n    var output;\n\n    try {\n        var sfptr = 0;\n        var use_sf = false;\n\n        if (sizeFactors !== null) {\n            sf_data = utils.wasmifyArray(sizeFactors, \"Float64WasmArray\");\n            if (sf_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'sizeFactors' must be equal to number of columns in 'x'\");\n            }\n            sfptr = sf_data.offset;\n            use_sf = true;\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.log_norm_counts(x.matrix, use_sf, sfptr, use_blocks, bptr, center, allowZeros),\n            x.constructor\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(sf_data);\n        utils.free(block_data);\n    }\n    \n    return output;\n}\n\n/**\n * Center size factors in preparation for log-transformation.\n * This is usually called by {@linkcode logNormCounts} internally, but can also be directly called by users to reconstitute the size factors used in the log-normalized matrix.\n *\n * @param {TypedArray|WasmArray} sizeFactors - Array of non-negative size factors, one per cell.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell, see {@linkcode logNormCounts}.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to that of `sizeFactors`.\n * If `null`, an array is allocated by the function.\n *\n * @return {Float64WasmArray} Array containing the centered size factors.\n * If `buffer` is provided, it is returned directly.\n */\nexport function centerSizeFactors(sizeFactors, { block = null, buffer = null } = {}) {\n    let local_buffer;\n    let block_data;\n\n    try {\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(sizeFactors.length);\n            buffer = local_buffer;\n        }\n\n        if (buffer !== sizeFactors) {\n            buffer.set(sizeFactors instanceof wa.WasmArray ? sizeFactors.array() : sizeFactors);\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != buffer.length) {\n                throw new Error(\"'block' must be of length equal to that of 'sizeFactors'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        wasm.call(module => module.center_size_factors(buffer.length, buffer.offset, use_blocks, bptr));\n\n    } catch(e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n\n    return buffer;\n}\n","import * as utils from \"./utils.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Perform mutual nearest neighbor (MNN) correction on a low-dimensional representation.\n * This is primarily used to remove batch effects.\n *\n * @param {(RunPCAResults|TypedArray|Array|Float64WasmArray)} x - A matrix of low-dimensional results where rows are dimensions and columns are cells.\n * If this is a {@linkplain RunPCAResults} object, the PCs are automatically extracted.\n * Otherwise, the matrix should be provided as an array in column-major form, with specification of `numberOfDims` and `numberOfCells`.\n * @param {(Int32WasmArray|Array|TypedArray)} block - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform normalization within each block.\n * @param {object} [options={}] - Further optional parameters.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer of length equal to the product of the number of cells and dimensions,\n * to be used to store the corrected coordinates for each cell.\n * If `null`, this is allocated and returned by the function.\n * @param {?number} [options.numberOfDims=null] - Number of dimensions in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {?number} [options.numberOfCells=null] - Number of cells in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {number} [options.k=15] - Number of neighbors to use in the MNN search. \n * @param {number} [options.numberOfMADs=3] - Number of MADs to use to define the threshold on the distances to the neighbors,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustIterations=2] - Number of robustness iterations to use for computing the center of mass,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustTrim=0.25] - Proportion of furthest observations to remove during robustness iterations, \n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {string} [options.referencePolicy=\"max-rss\"] - What policy to use to choose the first reference batch.\n * This can be the largest batch (`\"max-size\"`), the most variable batch (`\"max-variance\"`), the batch with the highest RSS (`\"max-rss\"`) or batch 0 in `block` (`\"input\"`).\n * @param {boolean} [options.approximate=true] - Whether to perform an approximate nearest neighbor search.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array of length equal to `x`, containing the batch-corrected low-dimensional coordinates for all cells.\n * Values are organized using the column-major layout.\n * This is equal to `buffer` if provided.\n */\nexport function mnnCorrect(x, block, { \n    buffer = null, \n    numberOfDims = null,\n    numberOfCells = null,\n    k = 15,\n    numberOfMADs = 3, \n    robustIterations = 2, \n    robustTrim = 0.25,\n    referencePolicy = \"max-rss\",\n    approximate = true,\n    numberOfThreads = null\n} = {}) {\n\n    let local_buffer;\n    let x_data;\n    let block_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            x = x.principalComponents({ copy: \"view\" });\n        } else {\n            if (numberOfDims === null || numberOfCells === null || numberOfDims * numberOfCells !== x.length) {\n                throw new Error(\"length of 'x' must be equal to the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n            x_data = utils.wasmifyArray(x, \"Float64WasmArray\");\n            x = x_data;\n        }\n\n        if (buffer == null) {\n            local_buffer = utils.createFloat64WasmArray(numberOfCells * numberOfDims);\n            buffer = local_buffer;\n        } else if (buffer.length !== x.length) {\n            throw new Error(\"length of 'buffer' must be equal to the product of the number of dimensions and cells\");\n        }\n\n        block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n        if (block_data.length != numberOfCells) {\n            throw new Error(\"'block' must be of length equal to the number of cells in 'x'\");\n        }\n\n        wasm.call(module => module.mnn_correct(\n            numberOfDims, \n            numberOfCells,\n            x.offset,\n            block_data.offset,\n            buffer.offset,\n            k,\n            numberOfMADs,\n            robustIterations,\n            robustTrim,\n            referencePolicy,\n            approximate,\n            nthreads\n        ));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n        \n    } finally {\n        utils.free(x_data);\n    }\n\n    return buffer; \n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Wrapper for the variance modelling results, produced by {@linkcode modelGeneVar}.\n * @hideconstructor\n */\nexport class ModelGeneVarResults {\n    #id;\n    #results;\n\n    #filledMeans;\n    #filledVariances;\n    #filledFitted;\n    #filledResiduals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledMeans = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledVariances = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledFitted = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledResiduals = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n\n        return;\n    }\n\n    #extract(block, copy, fillable, fillcheck, method) {\n        let fillindex = block;\n        if (block == null) {\n            let nblocks = this.numberOfBlocks();\n            fillindex = (nblocks > 1 ? nblocks : 0);\n            block = -1;\n        }\n\n        return utils.checkFillness(\n            fillable, \n            copy, \n            fillcheck[fillindex], \n            () => { fillcheck[fillindex] = true }, \n            COPY => utils.possibleCopy(this.#results[method](block), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the mean log-expression across all cells in the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    means({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledMeans, \"means\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the variance of log-expression across all cells in the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    variances({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledVariances, \"variances\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the fitted value of the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    fitted({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledFitted, \"fitted\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the residuals from the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    residuals({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledResiduals, \"residuals\");\n    }\n\n    /**\n     * @return {number} Number of blocks used.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Model the mean-variance trend across genes.\n *\n * @param {ScranMatrix} x - The normalized log-expression matrix.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to fit the mean-variance trend within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {number} [options.span=0.3] - Span to use for the LOWESS trend fitting.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {ModelGeneVarResults} Object containing the variance modelling results.\n */\nexport function modelGeneVar(x, { block = null, span = 0.3, numberOfThreads = null } = {}) {\n    var block_data;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.model_gene_var(x.matrix, use_blocks, bptr, span, nthreads),\n            ModelGeneVarResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n    \n    return output;\n}\n\n/**\n * Create an empty {@linkplain ModelGeneVarResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode chooseHVGs} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfGenes - Number of genes in the dataset.\n * @param {number} numberOfBlocks - Number of blocks in the dataset.\n *\n * @return {ModelGeneVarResults} Object with allocated memory to store variance modelling statistics, but no actual values.\n */\nexport function emptyModelGeneVarResults(numberOfGenes, numberOfBlocks) {\n    return gc.call(\n        module => new module.ModelGeneVar_Results(numberOfGenes, numberOfBlocks),\n        ModelGeneVarResults,\n        /* filled = */ false\n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the ADT-based metrics allocated on the Wasm heap, typically produced by {@linkcode computePerCellAdtQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellAdtQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetTotals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetTotals = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total ADT count for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected ADT features for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {?boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count in the ADT subset `i` for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    subsetTotals(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetTotals[i], \n            () => { this.#filledSubsetTotals[i] = true }, \n            COPY => utils.possibleCopy(this.#results.subset_totals(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute the per-cell QC metrics from an ADT count matrix.\n *\n * @param {ScranMatrix} x - The ADT count matrix.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellAdtQcMetricsResults} Object containing the ADT-based QC metrics.\n */\nexport function perCellAdtQcMetrics(x, subsets, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.per_cell_adt_qc_metrics(matrix, nsubsets, subset_offset, nthreads),\n            PerCellAdtQcMetricsResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellAdtQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode computePerCellAdtQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfSubsets - Number of feature subsets.\n *\n * @return {PerCellAdtQcMetricsResults} Object with allocated memory but no actual values.\n */\nexport function emptyPerCellAdtQcMetricsResults(numberOfCells, numberOfSubsets) {\n    return gc.call(\n        module => new module.PerCellAdtQcMetrics_Results(numberOfCells, numberOfSubsets),\n        PerCellAdtQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \n\n/**\n * Wrapper for the CRISPR-based metrics allocated on the Wasm heap, produced by {@linkcode perCellCrisprQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellCrisprQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledMaxProportions;\n    #filledMaxIndex;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledMaxProportions = filled;\n        this.#filledMaxIndex = filled;\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count across guides for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected guides for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY),\n            \"detected\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the proportion of counts in the most abundant guide for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    maxProportions({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxProportions, \n            () => { this.#filledMaxProportions = true }, \n            COPY => utils.possibleCopy(this.#results.max_proportion(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the index of the most abundant guide for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    maxIndex({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxIndex, \n            () => { this.#filledMaxIndex = true }, \n            COPY => utils.possibleCopy(this.#results.max_index(), COPY),\n            \"maxIndex\"\n        );\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute per-cell QC metrics from the CRISPR guide count matrix.\n *\n * @param {ScranMatrix} x - The count matrix for CRISPR guides.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellCrisprQcMetricsResults} Object containing the QC metrics.\n */\nexport function perCellCrisprQcMetrics(x, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return gc.call(\n        module => module.per_cell_crispr_qc_metrics(x.matrix, nthreads),\n        PerCellCrisprQcMetricsResults\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellCrisprQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode suggestCrisprQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n *\n * @return {PerCellCrisprQcMetricsResults} Object with allocated memory to store QC metrics, but no actual values.\n */\nexport function emptyPerCellCrisprQcMetricsResults(numberOfCells) {\n    return gc.call(\n        module => new module.PerCellCrisprQcMetrics_Results(numberOfCells),\n        PerCellCrisprQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the RNA-based metrics allocated on the Wasm heap, produced by {@linkcode perCellRnaQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellRnaQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetProportions;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetProportions = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count across genes for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected genes for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the proportion of counts in the subset `i` for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    subsetProportions(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetProportions[i], \n            () => { this.#filledSubsetProportions[i] = true }, \n            COPY => utils.possibleCopy(this.#results.subset_proportions(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute per-cell QC metrics from the RNA count matrix.\n *\n * @param {ScranMatrix} x - The RNA count matrix for genes.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellRnaQcMetricsResults} Object containing the QC metrics.\n */\nexport function perCellRnaQcMetrics(x, subsets, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n     return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.per_cell_rna_qc_metrics(matrix, nsubsets, subset_offset, nthreads),\n            PerCellRnaQcMetricsResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellRnaQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode suggestRnaQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfSubsets - Number of feature subsets.\n *\n * @return {PerCellRnaQcMetricsResults} Object with allocated memory to store QC metrics, but no actual values.\n */\nexport function emptyPerCellRnaQcMetricsResults(numberOfCells, numberOfSubsets) {\n    return gc.call(\n        module => new module.PerCellRnaQcMetrics_Results(numberOfCells, numberOfSubsets),\n        PerCellRnaQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import { clusterKmeans } from \"./clusterKmeans.js\";\nimport { logNormCounts } from \"./logNormCounts.js\";\nimport { groupedSizeFactors } from \"./groupedSizeFactors.js\";\nimport { runPCA } from \"./runPCA.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Quickly compute size factors for an ADT count matrix.\n * This generates k-means clusters from a matrix of PCs before calling {@linkcode groupedSizeFactors}.\n * The aim is to account for composition biases that are common in ADT-based data, while avoiding problems with per-cell sparsity.\n *\n * @param {ScranMatrix} x - An ADT count matrix.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfClusters=20] - Number of clusters to create.\n * More clusters improves the accuracy of the size factors at the cost of precision.\n * @param {number} [options.numberOfPCs=25] - Number of PCs to use.\n * More PCs captures more biological signal at the cost of increasing noise.\n * @param {?(Float64WasmArray|Array|TypedArray)} [options.totals=null] - Array containing the total count for each column in `x`, to speed up the initial normalization.\n * If `null`, this is computed from `x`.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Blocking level for each column in `x`, see {@linkcode logNormCounts} and {@linkcode runPCA}.\n * For PCA, this is used to equalize the contribution of blocks of differing size.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to the number of columns in `x`.\n * If `null`, an array is allocated by the function.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * \n * @return {Float64WasmArray} Per-cell size factors for each column of `x`.\n *\n * If `buffer` is supplied, it is directly used as the return value.\n */\nexport function quickAdtSizeFactors(x, { numberOfClusters = 20, numberOfPCs = 25, totals = null, block = null, buffer = null, numberOfThreads = null } = {}) {\n    let norm, pcs;\n    try {\n        norm = logNormCounts(x, { sizeFactors: totals, block: block });\n        pcs = runPCA(norm, { numberOfPCs: Math.min(norm.numberOfRows() - 1, numberOfPCs), numberOfThreads: numberOfThreads, block: block, blockMethod: \"weight\" });\n    } finally {\n        utils.free(norm);\n    }\n\n    let clust;\n    try {\n        clust = clusterKmeans(pcs, numberOfClusters, { numberOfThreads: numberOfThreads });\n    } finally {\n        utils.free(pcs);\n    }\n\n    let local_buffer;\n    try {\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(x.numberOfColumns());\n            buffer = local_buffer;\n        } else if (buffer.length !== x.numberOfColumns()) {\n            throw new Error(\"length of 'buffer' should be equal to the number of columns in 'x'\");\n        }\n        groupedSizeFactors(x, clust.clusters({ copy: \"view\" }), { buffer: buffer, numberOfThreads: numberOfThreads });\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(clust);\n    }\n\n    return buffer;\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\nimport * as packer from \"./internal/pack_strings.js\";\n\n/**\n * Base class for RDS objects.\n * @hideconstructor\n */\nexport class RdsObject {\n    constructor(id, raw, par) {\n        this.id = id;\n        this.object = raw;\n        this.parent = par;\n    }\n\n    /**\n     * @return {string} Type of the object.\n     */\n    type() {\n        return this.object.type();\n    }\n\n    /**\n     * Free the memory on the Wasm heap for this object.\n     */\n    free() {\n        if (this.object !== null) {\n            gc.release(this.id);\n            this.object = null;\n        }\n    }\n}\n\n/**\n * Vector-like R object.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsVector extends RdsObject {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @return{number} Length of the vector.\n     */\n    length() {\n        return this.object.size();\n    }\n\n    /**\n     * @return {Array} Names of all attributes.\n     */\n    attributeNames() {\n        return wasm.call(mod => {\n            this.object.fill_attribute_names();\n            let anames_buf = this.object.attribute_names_buffer();\n            let anames_len = this.object.attribute_names_length();\n            return packer.unpack_strings(anames_buf, anames_len);\n        });\n    }\n\n    /**\n     * @param {string} name - Name of the attribute of interest.\n     * @return {number} Index of `name` in the array of attributes from {@linkcode RdsVector#attributeNames attributeNames}.\n     * If `name` is not present, -1 is returned.\n     */\n    findAttribute(name) {\n        return wasm.call(mod => this.object.find_attribute(name));\n    }\n\n    /**\n     * @param {number|string} i - Index or name of the attribute of interest.\n     * @return {RdsObject} Value of the attribute.\n     */\n    attribute(i) {\n        if (typeof i == \"number\") {\n            return dispatch(mod => this.object.load_attribute_by_index(i), this.parent);\n        } else {\n            return dispatch(mod => this.object.load_attribute_by_name(i), this.parent);\n        }\n    }\n}\n\n/**\n * Integer vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsIntegerVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Values of the integer vector.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * Boolean (i.e., boolean) vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsBooleanVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Values of the logical vector.\n     * Zero values are falsey and values of 1 are truthy.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * Double-precision vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsDoubleVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Values of the double vector.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * String vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsStringVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @return {Array} Values of the string vector.\n     */\n    values() {\n        return wasm.call(mod => {\n            this.object.fill_string_vector();\n            let buf = this.object.string_vector_buffer();\n            let len = this.object.string_vector_length();\n            return packer.unpack_strings(buf, len);\n        });\n    }\n}\n\n/**\n * Generic vector from R, typically known as a \"list\".\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsGenericVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {number} index - Index of the list element of interest.\n     * @return {RdsObject} Value of the list element.\n     */\n    load(index) {\n        return dispatch(mod => this.object.load_list_element(index), this.parent);\n    }\n}\n\n/**\n * S4 object from R, containing slot data in its attributes.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsS4Object extends RdsObject {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * Name of the R class.\n     */\n    className() {\n        return wasm.call(mod => this.object.class_name());\n    }\n\n    /**\n     * Name of the package that defines the class.\n     */\n    packageName() {\n        return wasm.call(mod => this.object.package_name());\n    }\n\n    /**\n     * @return {Array} Names of all attributes.\n     */\n    attributeNames() {\n        return wasm.call(mod => {\n            this.object.fill_attribute_names();\n            let anames_buf = this.object.attribute_names_buffer();\n            let anames_len = this.object.attribute_names_length();\n            return packer.unpack_strings(anames_buf, anames_len);\n        });\n    }\n\n    /**\n     * @param {string} name - Name of the attribute of interest.\n     * @return {number} Index of `name` in the array of attributes from {@linkcode RdsVector#attributeNames attributeNames}.\n     * If `name` is not present, -1 is returned.\n     */\n    findAttribute(name) {\n        return wasm.call(mod => this.object.find_attribute(name));\n    }\n\n    /**\n     * @param {number|string} i - Index or name of the attribute of interest.\n     * @return {RdsObject} Value of the attribute.\n     */\n    attribute(i) {\n        if (typeof i == \"number\") {\n            return dispatch(mod => this.object.load_attribute_by_index(i), this.parent);\n        } else {\n            return dispatch(mod => this.object.load_attribute_by_name(i), this.parent);\n        }\n    }\n}\n\n/**\n * NULL type in R.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsNull extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n};\n\nfunction dispatch(fun, par) {\n    let obj = wasm.call(fun);\n\n    let tt = null;\n    try {\n        tt = obj.type();\n    } catch (e) {\n        obj.delete();\n        throw e;\n    }\n\n    // Remaining steps until gc.call() should be no-throw!\n    let cons;\n    if (tt == \"integer\") {\n        cons = RdsIntegerVector;\n    } else if (tt == \"double\") {\n        cons = RdsDoubleVector;\n    } else if (tt == \"boolean\") {\n        cons = RdsBooleanVector;\n    } else if (tt == \"string\") {\n        cons = RdsStringVector;\n    } else if (tt == \"vector\") {\n        cons = RdsGenericVector;\n    } else if (tt == \"S4\") {\n        cons = RdsS4Object;\n    } else if (tt == \"null\") {\n        cons = RdsNull;\n    } else {\n        cons = RdsObject;\n    }\n\n    return gc.call(mod => obj, cons, par);\n}\n\n/**\n * Details of the RDS file.\n * @hideconstructor\n */\nexport class RdsDetails {\n    #id;\n    #obj;\n\n    constructor(id, obj) {\n        this.#id = id;\n        this.#obj = obj;\n    }\n\n    /**\n     * @return {number} Version of the RDS format. This should be 3.\n     */\n    formatVersion() {\n        return this.#obj.format_version();\n    }\n\n    /**\n     * @return {string} The R version used to create the file.\n     */\n    writerVersion() {\n        let info = this.#obj.writer_version();\n        return String(info[0]) + \".\" + String(info[1]) + \".\" + String(info[2]);\n    }\n\n    /**\n     * @return {string} The minimum R version that can read the file.\n     */\n    readerVersion() {\n        let info = this.#obj.reader_version();\n        return String(info[0]) + \".\" + String(info[1]) + \".\" + String(info[2]);\n    }\n\n    /**\n     * @return {RdsObject} Interface into the underlying R object.\n     */\n    value() {\n        return dispatch(mod => this.#obj.load(), this); \n    }\n\n    /**\n     * Free the memory on the Wasm heap for this object.\n     * Doing so will invalidate all {@linkplain RdsObject} instances derived from this object, \n     * directly via {@linkcode RdsDetails#load} or indirectly \n     * (e.g., from further {@linkcode RdsVector#attribute RdsVector.attribute} or {@linkcode RdsGenericVector#load RdsGenericVector.load} calls).\n     */\n    free() {\n        if (this.#obj !== null) {\n            gc.release(this.#id);\n            this.#obj = null;\n        }\n    }\n}\n\n/**\n * Read the contents of an RDS file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of an RDS file.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n *\n * @return {RdsDetails} Details of the file.\n */\nexport function readRds(x) {\n    let tmp;\n    let output;\n\n    try {\n        if (typeof x == \"string\") {\n            output = gc.call(module => module.parse_rds_from_file(x), RdsDetails)\n        } else {\n            tmp = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            output = gc.call(module => module.parse_rds_from_buffer(tmp.offset, tmp.length), RdsDetails);\n        }\n    } finally {\n        utils.free(tmp);\n    }\n\n    return output;\n}\n\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/** \n * Wrapper for the PCA results on the Wasm heap, typically created by {@linkcode runPCA}.\n * @hideconstructor\n */\nexport class RunPCAResults {\n    #id;\n    #results;\n\n    #filledComponents;\n    #filledVariances;\n    #filledTotalVariance;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledComponents = filled;\n        this.#filledVariances = filled;\n        this.#filledTotalVariance = filled;\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     * \n     * @return {?(Float64Array|Float64Wasmarray)} Array containing the principal components for all cells.\n     * This should be treated as a column-major array where the rows are the PCs and columns are the cells.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    principalComponents({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledComponents, \n            () => { this.#filledComponents = true }, \n            COPY => utils.possibleCopy(this.#results.pcs(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} total - Total variance in the dataset,\n     * equal to the sum of the variances across all PCs (including those that were not explicitly computed).\n     *\n     * @return Total varaiance in this object is set to `total`.\n     * This is primarily intended for use with {@linkcode emptyRunPCAResults}.\n     */\n    setTotalVariance(total) {\n        if (!this.#filledTotalVariance) {\n            this.#filledTotalVariance = true;\n        }\n        this.#results.set_total_variance(total);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     * \n     * @return {?(Float64Array|Float64WasmArray)} Array containing the variance explained for each requested PC.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    varianceExplained({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledVariances, \n            () => { this.#filledVariances = true }, \n            COPY => utils.possibleCopy(this.#results.variance_explained(), COPY)\n        );\n    }\n\n    /**\n     * @return {?number} The total variance in the dataset,\n     * typically used with {@linkcode PCAResults#varianceExplained varianceExplained} to compute the proportion of variance explained.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setTotalVariance setTotalVariance}.\n     */\n    totalVariance() {\n        if (!this.#filledTotalVariance) {\n            return null;\n        } else {\n            return this.#results.total_variance();\n        }\n    }\n\n    /**\n     * @return {number} Number of PCs available in these results.\n     */\n    numberOfPCs() {\n        return this.#results.num_pcs();\n    }\n\n    /**\n     * @return {number} Number of cells used to compute these results.\n     */\n    numberOfCells() {\n        // TODO: switch to this.#results.num_cells();\n        return this.principalComponents({ copy: false }).length / this.numberOfPCs();\n\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Run a principal components analysis on the log-expression matrix.\n * This is usually done on a subset of features, and possibly with some kind of blocking on a per-cell batch factor.\n *\n * @param {ScranMatrix} x - The log-normalized expression matrix.\n * @param {object} [options={}] - Optional parameters. \n * @param {?(Uint8WasmArray|Array|TypedArray)} [options.features=null] - Array specifying which features should be retained (e.g., HVGs).\n * This should be of length equal to the number of rows in `x`; elements should be `true` to retain each row.\n * If `null`, all features are retained.\n * @param {number} [options.numberOfPCs=25] - Number of top principal components to compute.\n * @param {boolean} [options.scale=false] - Whether to scale each feature to unit variance.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {string} [options.blockMethod=\"regress\"] - How to modify the PCA for the blocking factor.\n *\n * - `\"regress\"` will regress out the factor, effectively performing a PCA on the residuals.\n * - `\"weight\"` will weight the contribution of each blocking level equally so that larger blocks do not dominate the PCA.\n * - `\"none\"` will ignore any blocking factor, i.e., as if `block = null`.\n *\n * This option is only used if `block` is not `null`.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {RunPCAResults} Object containing the computed PCs.\n */\nexport function runPCA(x, { features = null, numberOfPCs = 25, scale = false, block = null, blockMethod = \"regress\", numberOfThreads = null } = {}) {\n    var feat_data;\n    var block_data;\n    var output;\n\n    utils.matchOptions(\"blockMethod\", blockMethod, [\"none\", \"regress\", \"weight\" ]);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var use_feat = false;\n        var fptr = 0;\n\n        if (features !== null) {\n            feat_data = utils.wasmifyArray(features, \"Uint8WasmArray\");\n            if (feat_data.length != x.numberOfRows()) {\n                throw new Error(\"length of 'features' should be equal to number of rows in 'x'\");\n            }\n            use_feat = true;\n            fptr = feat_data.offset;\n        }\n\n        // Avoid asking for more PCs than is possible.\n        // Remember that centering removes one df, so we subtract 1 from the dimensions.\n        numberOfPCs = Math.min(numberOfPCs, x.numberOfRows() - 1, x.numberOfColumns() - 1);\n\n        if (block === null || blockMethod == 'none') {\n            output = gc.call(\n                module => module.run_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, nthreads),\n                RunPCAResults\n            );\n\n        } else {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'block' should be equal to the number of columns in 'x'\");\n            }\n            if (blockMethod == \"regress\") {\n                output = gc.call(\n                    module => module.run_blocked_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, block_data.offset, nthreads),\n                    RunPCAResults\n                );\n            } else if (blockMethod == \"weight\") {\n                output = gc.call(\n                    module => module.run_multibatch_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, block_data.offset, nthreads),\n                    RunPCAResults\n                );\n            } else {\n                throw new Error(\"unknown value '\" + blockMethod + \"' for 'blockMethod='\");\n            }\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(feat_data);\n        utils.free(block_data);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain RunPCAResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode clusterKmeans} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset, usually after QC filtering.\n * @param {number} numberOfPCs - Number of PCs to be computed.\n *\n * @return {RunPCAResults} Object with allocated memory to store the PCs, but no actual values.\n */\nexport function emptyRunPCAResults(numberOfCells, numberOfPCs) {\n    return gc.call(\n        module => new module.RunPCA_Results(numberOfCells, numberOfPCs),\n        RunPCAResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\nimport { BuildNeighborSearchIndexResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the t-SNE status object on the Wasm heap, typically created by {@linkcode initializeTSNE}.\n * @hideconstructor\n */\nexport class InitializeTSNEResults {\n    #id;\n    #status;\n    #coordinates;\n\n    constructor(id, raw_status, raw_coordinates) {\n        this.#id = id;\n        this.#status = raw_status;\n        this.#coordinates = raw_coordinates;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get status() {\n        return this.#status;\n    }\n\n    // Internal use only, not documented.\n    get coordinates() {\n        return this.#coordinates;\n    }\n\n    /**\n     * @return {InitializeTSNEResults} A deep copy of this object.\n     */\n    clone() {\n        return gc.call(\n            module => this.#status.deepcopy(), \n            InitializeTSNEResults, \n            this.#coordinates.clone()\n        );\n    }\n\n    /**\n     * @return {number} Number of cells in the dataset.\n     */\n    numberOfCells () {\n        return this.#status.num_obs();\n    }\n\n    /**\n     * @return {number} Number of iterations processed so far.\n     * This will change with repeated invocations of {@linkcode runTSNE} on this object.\n     */\n    iterations () {\n        return this.#status.iterations();\n    }\n\n    /**\n     * @return {object} Object with `x` and `y` keys.\n     * The corresponding values are Float64Array objects of length equal to the number of cells,\n     * containing the x- and  y- coordinates for each cell at the current state of the algorithm.\n     */\n    extractCoordinates() {\n        return utils.extractXY(this.numberOfCells(), this.#coordinates.array()); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */   \n    free() {\n        if (this.#status !== null) {\n            gc.release(this.#id);\n            this.#status = null;\n        }\n        if (this.#coordinates !== null) {\n            this.#coordinates.free();\n            this.#coordinates = null;\n        }\n        return;\n    }\n}\n\n/**\n * @param {number} perplexity - Perplexity to use in the t-SNE algorithm.\n * @return {number} Appropriate number of neighbors to use in the nearest neighbor search.\n */\nexport function perplexityToNeighbors(perplexity) {\n    return wasm.call(module => module.perplexity_to_k(perplexity));\n}\n\n/**\n * @param {(BuildNeighborSearchIndexResults|FindNearestNeighborsResults)} x \n * Either a pre-built neighbor search index for the dataset (see {@linkcode buildNeighborSearchIndex}),\n * or a pre-computed set of neighbor search results for all cells (see {@linkcode findNearestNeighbors}).\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.perplexity=30] - Perplexity to use when computing neighbor probabilities in the t-SNE.\n * @param {boolean} [options.checkMismatch=true] - Whether to check for a mismatch between the perplexity and the number of searched neighbors.\n * Only relevant if `x` is a {@linkplain FindNearestNeighborsResults} object.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {InitializeTSNEResults} Object containing the initial status of the t-SNE algorithm.\n */\nexport function initializeTSNE(x, { perplexity = 30, checkMismatch = true, numberOfThreads = null } = {}) {\n    var my_neighbors;\n    var raw_coords;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let neighbors;\n\n        if (x instanceof BuildNeighborSearchIndexResults) {\n            let k = perplexityToNeighbors(perplexity);\n            my_neighbors = findNearestNeighbors(x, k, { numberOfThreads: nthreads });\n            neighbors = my_neighbors;\n\n        } else {\n            if (checkMismatch) {\n                let k = perplexityToNeighbors(perplexity);\n                if (k * x.numberOfCells() != x.size()) {\n                    throw new Error(\"number of neighbors in 'x' does not match '3 * perplexity'\");\n                }\n            }\n            neighbors = x;\n        }\n\n        raw_coords = utils.createFloat64WasmArray(2 * neighbors.numberOfCells());\n        wasm.call(module => module.randomize_tsne_start(neighbors.numberOfCells(), raw_coords.offset, 42));\n        output = gc.call(\n            module => module.initialize_tsne(neighbors.results, perplexity, nthreads),\n            InitializeTSNEResults,\n            raw_coords\n        );\n\n    } catch(e) {\n        utils.free(output);\n        utils.free(raw_coords);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Run the t-SNE algorithm on an initialized {@linkplain InitializeTSNEResults}.\n *\n * @param {InitializeTSNEResults} x A previously initialized status object from {@linkcode initializeTSNE}.\n * This may be passed through {@linkcode runTSNE} any number of times.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.maxIterations=1000] - Maximum number of iterations to perform.\n * This number includes all existing iterations that were already performed in `x` from previous calls to {@linkcode runTSNE}.\n * @param {?number} [options.runTime=null] - Number of milliseconds for which the algorithm is allowed to run before returning.\n * If `null`, no limit is imposed on the runtime.\n *\n * @return The algorithm status in `x` is advanced up to the requested number of iterations,\n * or until the requested run time is exceeded, whichever comes first.\n */\nexport function runTSNE(x, { maxIterations = 1000, runTime = null } = {}) {\n    if (runTime === null) {\n        runTime = -1;\n    }\n    wasm.call(module => module.run_tsne(x.status, runTime, maxIterations, x.coordinates.offset));\n    return;\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { buildNeighborSearchIndex, BuildNeighborSearchIndexResults } from \"./findNearestNeighbors.js\"; \n\n/**\n * Scale embeddings based on the variation between neighboring cells.\n * This aims to equalize the noise across embeddings for the same population of cells across different data modalities,\n * allowing them to be combined into a single embedding for coordinated downstream analyses.\n *\n * @param {Array} embeddings - Array of Float64WasmArrays containing column-major matrices where rows are dimensions and columns are cells.\n * All entries of this array should contain data for the same number and ordering of cells.\n * @param {number} numberOfCells - Number of cells in all embeddings.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.neighbors=20] - Number of neighbors to use for quantifying variation.\n * Larger values provide a more stable calculation but assume larger subpopulations.\n * @param {?Array} [options.indices=null] - Array of {@linkplain BuildNeighborSearchIndexResults} objects, \n * where each entry is constructed from the corresponding entry of `embeddings` (see {@linkcode buildNeighborSearchIndex}).\n * This can be used to avoid redundant calculation of indices if they are already available.\n * @param {?Float64WasmArray} [options.buffer=null] - Array in which to store the combined embedding.\n * This should have length equal to the product of `numberOfCells` and the sum of dimensions of all embeddings.\n * @param {boolean} [options.approximate=true] - Should we construct an approximate search index if `indices` is not supplied?\n * @param {?(Array|TypedArray|Float64WasmArray)} [options.weights=null] - Array of length equal to the number of embeddings, containing a non-enegative relative weight for each embedding.\n * This is used to scale each embedding if non-equal noise is desired in the combined embedding.\n * If `null`, all embeddings receive the same weight.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array containing the combined embeddings in column-major format, i.e., dimensions in rows and cells in columns.\n *\n * If `buffer` was supplied, it is used as the return value.\n */\nexport function scaleByNeighbors(embeddings, numberOfCells, { neighbors = 20, indices = null, buffer = null, approximate = true, weights = null, numberOfThreads = null } = {}) {\n    let nembed = embeddings.length;\n    let embed_ptrs, index_ptrs;\n    let holding_ndims;\n    let holding_weights;\n    let local_buffer;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    let deletable = [];\n    try {\n        // Fetching the pointers.\n        embed_ptrs = utils.createBigUint64WasmArray(nembed);\n        let embed_arr = embed_ptrs.array();\n        for (var i = 0; i < nembed; i++) {\n            embed_arr[i] = BigInt(embeddings[i].offset);\n        }\n\n        let weight_offset = 0;\n        let use_weights = false;\n        if (weights !== null) {\n            use_weights = true;\n            holding_weights = utils.wasmifyArray(weights, \"Float64WasmArray\");\n            if (holding_weights.length != nembed) {\n                throw new Error(\"length of 'weights' should be equal to the number of embeddings\");\n            }\n            weight_offset = holding_weights.offset;\n        }\n\n        // Allocating output space, if necessary; and then scaling.\n        let allocator = (total_ndim) => {\n            let total_len = total_ndim * numberOfCells;\n            if (buffer === null) {\n                local_buffer = utils.createFloat64WasmArray(total_len);\n                buffer = local_buffer;\n            } else if (total_len !== buffer.length) {\n                throw new Error(\"length of 'buffer' should be equal to the product of 'numberOfCells' and the total number of dimensions\");\n            }\n        }\n\n        if (indices !== null) {\n            if (nembed !== indices.length) {\n                throw new Error(\"'indices' and 'embeddings' should have the same length\");\n            }\n\n            index_ptrs = utils.createBigUint64WasmArray(nembed);\n            let index_arr = index_ptrs.array();\n            let total_ndim = 0;\n\n            for (var i = 0; i < nembed; i++) {\n                let index = indices[i];\n                if (numberOfCells != index.numberOfCells()) {\n                    throw new Error(\"each element of 'indices' should have the same number of cells as 'numberOfCells'\");\n                }\n                if (embeddings[i].length != index.numberOfCells() * index.numberOfDims()) {\n                    throw new Error(\"length of arrays in 'embeddings' should equal the length of arrays used to build 'indices'\");\n                }\n\n                index_arr[i] = BigInt(indices[i].index.$$.ptr);\n                total_ndim += indices[i].numberOfDims();\n            }\n\n            allocator(total_ndim);\n            wasm.call(module => module.scale_by_neighbors_indices(\n                numberOfCells, \n                nembed, \n                embed_ptrs.offset, \n                index_ptrs.offset, \n                buffer.offset, \n                neighbors, \n                use_weights, \n                weight_offset,\n                nthreads\n            ));\n\n        } else {\n            holding_ndims = utils.createInt32WasmArray(nembed);\n            let ndims_arr = holding_ndims.array();\n            let total_ndim = 0;\n\n            for (var i = 0; i < nembed; i++) {\n                let n = embeddings[i].length;\n                ndims_arr[i] = Math.floor(n / numberOfCells);\n                if (numberOfCells * ndims_arr[i] !== n) {\n                    throw new Error(\"length of arrays in 'embeddings' should be a multiple of 'numberOfCells'\");\n                }\n                total_ndim += ndims_arr[i];\n            }\n\n            allocator(total_ndim);\n            wasm.call(module => module.scale_by_neighbors_matrices(\n                numberOfCells, \n                nembed, \n                holding_ndims.offset, \n                embed_ptrs.offset, \n                buffer.offset, \n                neighbors, \n                use_weights, \n                weight_offset,\n                approximate,\n                nthreads\n            ));\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        for (const x of deletable) {\n            x.free();\n        }\n        utils.free(embed_ptrs);\n        utils.free(index_ptrs);\n        utils.free(holding_weights);\n        utils.free(holding_ndims);\n    }\n\n    return buffer;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Compute per-cell scores for the activity of a feature set.\n *\n * @param {ScranMatrix} x - Log-normalized expression matrix.\n * @param {Uint8Array|Uint8WasmArray|TypedArray|Array} features - An array of length equal to the number of rows in `x`, indicating which features belong to the set.\n * A non-zero value for any entry indicates that the corresponding row of `x` is part of the feature set.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {boolean} [options.scale=false] - Whether to scale the expression matrix to unit variance for each feature before computing the per-feature weights.\n * Setting to `true` improves robustness (or reduces sensitivity) to the behavior of highly variable features in the set.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {object} Object containing:\n *\n * - `weights`, a Float64Array containing per-gene weights for each feature in the set.\n * - `scores`, a Float64Array containing the per-cell scores for each column of `x`.\n */\nexport function scoreFeatureSet(x, features, { block = null, scale = false, numberOfThreads = null } = {}) {\n    let temp;\n    let output = {};\n    let feature_data, block_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        // Setting up the features.\n        if (features.length !== x.numberOfRows()) {\n            throw new Error(\"Uint8Array 'features' must be of length equal to the number of rows in 'x'\");\n        }\n        feature_data = utils.wasmifyArray(features, \"Uint8WasmArray\");\n\n        // Setting up the blocks.\n        var bptr = 0;\n        var use_blocks = false;\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        temp = wasm.call(module => module.score_feature_set(x.matrix, feature_data.offset, use_blocks, bptr, scale, nthreads));\n        output.weights = temp.weights().slice();\n        output.scores = temp.scores().slice();\n\n    } finally {\n        utils.free(block_data);\n        utils.free(feature_data);\n        if (temp) {\n            temp.delete();\n        }\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\n\nfunction checkFillness2(group, summary, fillable, copy, fillcheck, getfun) {\n    return utils.checkFillness(\n        fillable, \n        copy, \n        fillcheck.filled || fillcheck.details[group][summary] || false, \n        () => { fillcheck.details[group][summary] = true }, \n        getfun  \n    );\n}\n\nfunction intifySummary(summary) {\n    if (typeof summary == \"number\") {\n        return summary; // for back-compatibility with numeric summaries.\n    }\n    let output;\n    switch (summary) {\n        case \"minimum\": \n            output = 0;\n            break;\n        case \"mean\": \n            output = 1;\n            break;\n        case \"median\":\n            output = 2;\n            break;\n        case \"maximum\": \n            output = 3;\n            break;\n        case \"min-rank\":\n            output = 4;\n            break;\n        default:\n            throw new Error(\"unknown summary type '\" + summary + \"'\");\n    }\n    return output;\n}\n\n/**\n * Wrapper around the marker scoring results on the Wasm heap, typically produced by {@linkcode scoreMarkers}.\n * @hideconstructor\n */\nexport class ScoreMarkersResults {\n    #id;\n    #results;\n\n    #filledMeans;\n    #filledDetected;\n    #filledCohen;\n    #filledLfc;\n    #filledAuc;\n    #filledDeltaDetected;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        let n = this.numberOfGroups();\n        let b = this.numberOfBlocks();\n\n        function createBlockedStatsFilled(filled) {\n            let output = { filled };\n            if (!filled) {\n                output.details = new Array(n);\n                for (var g = 0; g < n; g++) {\n                    output.details[g] = utils.spawnArray(b + 1, filled);\n                }\n            }\n            return output;\n        }\n\n        this.#filledMeans = createBlockedStatsFilled(filled);\n        this.#filledDetected = createBlockedStatsFilled(filled);\n\n        function createEffectsFilled(filled) {\n            let output = { filled };\n            if (!filled) {\n                output.details = new Array(n);\n                for (var g = 0; g < n; g++) {\n                    output.details[g] = {};\n                }\n            }\n            return output;\n        }\n\n        this.#filledCohen = createEffectsFilled(filled); \n        this.#filledLfc = createEffectsFilled(filled); \n        this.#filledAuc = createEffectsFilled(filled); \n        this.#filledDeltaDetected = createEffectsFilled(filled); \n\n        return;\n    }\n\n    #extractBlockedStat(group, block, copy, fillable, fillcheck, method) {\n        let index = block;\n        if (block == null) {\n            let nblocks = this.numberOfBlocks();\n            index = (nblocks > 1 ? nblocks : 0);\n            block = -1;\n        }\n\n        return utils.checkFillness(\n            fillable, \n            copy, \n            fillcheck.filled || fillcheck.details[group][index] || false, \n            () => { fillcheck.details[group][index] = true }, \n            COPY => utils.possibleCopy(this.#results[method](group, block), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of blocks used to compute the results.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return {number} Number of groups in the results.\n     */\n    numberOfGroups() {\n        return this.#results.num_groups();\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the mean expression for the requested group in the requested block.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    means(group, { block = null, copy = true, fillable = false } = {}) {\n        return this.#extractBlockedStat(group, block, copy, fillable, this.#filledMeans, \"means\");\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the proportion of cells with detectable expression for the requested group in the requested block.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected(group, { block = null, copy = true, fillable = false } = {}) {\n        return this.#extractBlockedStat(group, block, copy, fillable, this.#filledDetected, \"detected\");\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the Cohen's d values of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized Cohen's d for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    cohen(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledCohen,\n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.cohen(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * AUCs are only computed if `computeAuc = true` in {@linkcode scoreMarkers}.\n     * If `false`, this method will throw an error.\n     *\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the AUCs of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized AUC for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    auc(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledAuc, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.auc(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the log-fold changes of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized log-fold change for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    lfc(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledLfc, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.lfc(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the delta-detected values of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the summarized delta-detected for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    deltaDetected(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledDeltaDetected, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.delta_detected(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Score genes as potential markers for each group of cells.\n *\n * @param {ScranMatrix} x - Log-normalized expression matrix.\n * @param {(Int32WasmArray|Array|TypedArray)} groups - Array containing the group assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform comparisons within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * @param {number} [options.lfcThreshold=0] - Log-fold change threshold to use for computing Cohen's d and AUC.\n * Large positive values favor markers with large log-fold changes over those with low variance.\n * @param {boolean} [options.computeAuc=true] - Whether to compute the AUCs as an effect size.\n * This can be set to `false` for greater speed and memory efficiency.\n * @param {boolean} [options.computeMedian=false] - Whether to compute the median effect sizes across all pairwise comparisons for each group.\n * This can be used as a more robust/less sensitive alternative to the mean.\n * @param {boolean} [options.computeMaximum=false] - Whether to compute the maximum effect size across all pairwise comparisons for each group.\n * This could be used to find uniquely downregulated genes.\n *\n * @return {ScoreMarkersResults} Object containing the marker scoring results.\n */\nexport function scoreMarkers(x, groups, { block = null, numberOfThreads = null, lfcThreshold = 0, computeAuc = true, computeMedian = false, computeMaximum = false } = {}) {\n    var output;\n    var block_data;\n    var group_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        group_data = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (group_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'groups' should be equal to number of columns in 'x'\");\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.score_markers(x.matrix, group_data.offset, use_blocks, bptr, lfcThreshold, computeAuc, computeMedian, computeMaximum, nthreads),\n            ScoreMarkersResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n        utils.free(group_data);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ScoreMarkersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfGenes - Number of genes in the dataset.\n * @param {number} numberOfGroups - Number of groups for which to store marker detection statistics.\n * @param {number} numberOfBlocks - Number of blocks in the dataset.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.computeAuc=true] - Whether to allocate memory for storing AUCs.\n * @param {boolean} [options.computeMedian=false] - Whether to allocate memory for storing median effect sizes.\n * @param {boolean} [options.computeMaximum=false] - Whether to allocate memory for storing maximum effect sizes.\n *\n * @return {ScoreMarkersResults} Object with memory allocated to store marker statistics, but not containing any actual values.\n */\nexport function emptyScoreMarkersResults(numberOfGenes, numberOfGroups, numberOfBlocks, { computeAuc = true, computeMedian = false, computeMaximum = false } = {}) {\n    return gc.call(\n        module => new module.ScoreMarkers_Results(numberOfGenes, numberOfGroups, numberOfBlocks, computeAuc, computeMedian, computeMaximum),\n        ScoreMarkersResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport { MultiMatrix } from \"./MultiMatrix.js\";\n\n/**\n * Slice a {@linkplain ScranMatrix} by its rows.\n * \n * @param {ScranMatrix} x - The matrix of interest.\n * @param {Array} indices - Row indices to extract.\n * All indices must be non-negative integers less than `mat.numberOfRows()`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix}\n * A ScranMatrix containing the subset of rows from `mat` specified by `indices`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function subsetRows(x, indices, { inPlace = false } = {}) {\n    let xcopy;\n    let target;\n    let wasm_indices;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        wasm.call(module => module.row_subset(target.matrix, wasm_indices.offset, wasm_indices.length));\n\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return target;\n}\n\n/**\n * Slice a ScranMatrix by its columns.\n * \n * @param {ScranMatrix} x - The matrix of interest.\n * @param {Array} indices - Column indices to extract.\n * Al indices must be a non-negative integer less than `mat.numberOfColumns()`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix}\n * A new ScranMatrix containing the subset of columns from `mat` specified by `indices`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function subsetColumns(x, indices, { inPlace = false } = {}) {\n    let xcopy;\n    let target;\n    let wasm_indices;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        wasm.call(module => module.column_subset(target.matrix, wasm_indices.offset, wasm_indices.length));\n\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return target;\n}\n\n/**\n * Split a {@linkplain ScranMatrix} by row.\n *\n * @param {ScranMatrix} matrix - A ScranMatrix object.\n * @param {object} split - Object specifying how rows should be split.\n * Each value should be an Array/TypedArray of 0-based row indices.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.singleNull=false] - Whether `null` should be returned if `split` only contains one level and all rows are represented exactly once.\n * This can be used to avoid the creation of a redundant {@linkplain ScranMatrix} object.\n * @param {boolean} [options.createMultiMatrix=false] - Whether the output should be returned as a {@linkplain MultiMatrix}.\n *\n * @return {object|MultiMatrix} Object with the same keys as `split` where each value is a ScranMatrix for the corresponding subset of rows.\n * Alternatively, this is wrapped in a MultiMatrix if `createMultiMatrix = true`.\n */\nexport function splitRows(matrix, split, { singleNull = false, createMultiMatrix = false } = {}) { \n    let output = {};\n    let tkeys = Object.keys(split);\n\n    if (tkeys.length == 1) {\n        let chosen = split[tkeys[0]];\n        let consec = (chosen.length == matrix.numberOfRows());\n        if (consec) {\n            for (var i = 0; i < chosen.length; i++) {\n                if (i != chosen[i]) {\n                    consec = false;\n                    break;\n                }\n            }\n        }\n\n        if (consec) {\n            if (singleNull) {\n                return null;\n            } else {\n                output[tkeys[0]] = matrix.clone();\n                return output;\n            }\n        }\n    }\n\n    let stuff;\n    try {\n        for (const k of tkeys) {\n            output[k] = subsetRows(matrix, split[k]);\n        }\n\n        // Sticking this inside the trycatch, so that\n        // memory is released if the constructor fails. \n        if (createMultiMatrix) {\n            stuff = new MultiMatrix({ store: output });\n        }\n    } catch (e) {\n        for (const v of Object.values(output)) {\n            v.free();\n        }\n        throw e;\n    }\n\n    if (createMultiMatrix) {\n        return stuff;\n    } else {\n        return output;\n    }\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellAdtQcMetricsResults } from \"./perCellAdtQcMetrics.js\";\n\n/**\n * Wrapper class for the ADT-based QC filtering results, produced by {@linkcode suggestAdtQcFilters}.\n * @hideconstructor\n */\nexport class SuggestAdtQcFiltersResults {\n    #results;\n    #id;\n\n    #filledDetected;\n    #filledSubsetTotals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledDetected = filled;\n        this.#filledSubsetTotals = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the number of detected ADTs for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsDetected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the total counts for subset `i` in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSubsetTotals(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetTotals[i], \n            () => { this.#filledSubsetTotals[i] = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_subset_totals(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellAdtQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellAdtQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestAdtQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellAdtQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellAdtQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics from the ADT count matrix.\n *\n * @param {PerCellAdtQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellAdtQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {number} [options.minDetectedDrop=0.1] - Minimum relative drop in the number of detected ADTs before a cell is to be considered a low-quality cell.\n * By default, cells must exhibit at least a 10% decrease from the median before filtering is applied.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestAdtQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestAdtQcFilters(metrics, { numberOfMADs = 3, minDetectedDrop = 0.1, block = null } = {}) {\n    if (!(metrics instanceof PerCellAdtQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellAdtQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics, \n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_adt_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs, minDetectedDrop),\n            SuggestAdtQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestAdtQcFiltersResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode filterCells} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfSubsets Number of feature subsets.\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestAdtQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestAdtQcFiltersResults(numberOfSubsets, numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestAdtQcFilters_Results(numberOfSubsets, numberOfBlocks),\n        SuggestAdtQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellCrisprQcMetricsResults } from \"./perCellCrisprQcMetrics.js\";\n\n/**\n * Wrapper class for the filtering results, produced by {@linkcode computeSuggestCrisprQcFilters}.\n * @hideconstructor\n */\nexport class SuggestCrisprQcFiltersResults {\n    #id;\n    #results;\n\n    #filledMaxCount;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledMaxCount = filled;\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the maximum count in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsMaxCount({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxCount, \n            () => { this.#filledMaxCount = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_max_count(), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellCrisprQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellCrisprQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestCrisprQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellCrisprQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellCrisprQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics for CRISPR guide counts.\n *\n * @param {PerCellCrisprQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellCrisprQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestCrisprQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestCrisprQcFilters(metrics, { numberOfMADs = 3, block = null } = {}) {\n    if (!(metrics instanceof PerCellCrisprQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellCrisprQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics,\n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_crispr_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs),\n            SuggestCrisprQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestCrisprQcFiltersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestCrisprQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestCrisprQcFiltersResults(numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestCrisprQcFilters_Results(numberOfBlocks),\n        SuggestCrisprQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellRnaQcMetricsResults } from \"./perCellRnaQcMetrics.js\";\n\n/**\n * Wrapper class for the filtering results, produced by {@linkcode computeSuggestRnaQcFilters}.\n * @hideconstructor\n */\nexport class SuggestRnaQcFiltersResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetProportions;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetProportions = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the sums for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the number of detected genes for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsDetected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the proportions for subset `i` in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSubsetProportions(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetProportions[i], \n            () => { this.#filledSubsetProportions[i] = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_proportions(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellRnaQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellRnaQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestRnaQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellRnaQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellRnaQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics computed from an RNA count matrix.\n *\n * @param {PerCellRnaQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellRnaQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestRnaQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestRnaQcFilters(metrics, { numberOfMADs = 3, block = null } = {}) {\n    if (!(metrics instanceof PerCellRnaQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellRnaQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics,\n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_rna_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs),\n            SuggestRnaQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestRnaQcFiltersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfSubsets Number of feature subsets.\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestRnaQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestRnaQcFiltersResults(numberOfSubsets, numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestRnaQcFilters_Results(numberOfSubsets, numberOfBlocks),\n        SuggestRnaQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import { buffer, wasmArraySpace, maximumThreads } from \"./wasm.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Helper function to create a Uint8WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Uint8WasmArray} Uint8WasmArray on the **scran.js** Wasm heap.\n */\nexport function createUint8WasmArray(length) {\n    return wa.createUint8WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Int32WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Int32WasmArray} Int32WasmArray on the **scran.js** Wasm heap.\n */\nexport function createInt32WasmArray(length) {\n    return wa.createInt32WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a BigUint64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {BigUint64WasmArray} BigUint64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createBigUint64WasmArray (length) {\n    return wa.createBigUint64WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Float64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Float64WasmArray} Float64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createFloat64WasmArray(length) {\n    return wa.createFloat64WasmArray(wasmArraySpace(), length);\n}\n\nexport function wasmifyArray(x, expected) {\n    if (x instanceof wa.WasmArray) {\n        if (expected !== null && expected != x.constructor.className) {\n            throw new Error(\"expected '\" + expected + \"', got '\" + x.constructor.className + \"'\");\n        }\n\n        if (x.space === wasmArraySpace()) {\n            // Creating a view. This ensures that callers can always call\n            // free() on the output of this function without worrying about\n            // whether they are breaking something else that was using 'x'.\n            if (x.owner === null) {\n                return x.view();\n            } else {\n                return x; // it's already a view, so we just pass it along.\n            }\n        } else {\n            // If it's a different space, then we have to make a copy.\n            return x.clone(wasmArraySpace());\n        }\n    }\n\n    let y = null;\n    if (expected !== null) {\n        y = wa.convertToWasmArray(wasmArraySpace(), x, wa.stringToClass(expected));\n    } else {\n        y = wa.convertToWasmArray(wasmArraySpace(), x);\n    }\n\n    return y;\n}\n\nexport function chooseNumberOfThreads(threads) {\n    if (threads == null) {\n        return maximumThreads();\n    } else {\n        return threads;\n    }\n}\n\n/**\n * Try to free a **scran.js** object's memory (typically involving some memory allocated on the Wasm heap) by calling its `free` method.\n *\n * @param {?object} x - Instance of a **scran.js** or **wasmarrays.js** class to be freed.\n * May also be `null` or undefined.\n * \n * @return The output of `x.free()` - unless `x` is undefined or `null`, in which case nothing is performed.\n */\nexport function free(x) {\n    if (typeof x == \"undefined\" || x == null) {\n        return;\n    }\n    return x.free();\n}\n\nexport function extractXY(ncells, coordinates) {\n    let x = new Float64Array(ncells);\n    let y = new Float64Array(ncells);\n\n    for (var i = 0; i < ncells; i++) {\n        x[i] = coordinates[2 * i];\n        y[i] = coordinates[2 * i + 1];\n    }\n\n    return { \"x\": x, \"y\": y };\n}\n\n/**\n * Possibly copy an array out of the Wasm heap, avoiding potential invalidation at the cost of some efficiency.\n *\n * @param {TypedArray} x - Array of data, possibly on the **scran.js** Wasm heap.\n * @param {(string|boolean)} copy - Copying mode to use.\n *\n * @return {TypedArray|WasmArray} The return value depends on the value of `copy`:\n * - If `copy = true`, a TypedArray copy of `x` is created with `x.slice()` and returned.\n *   This is a good default to avoid invalidation of TypedArray views on the heap upon reallocation, by creating a Javascript-owned copy for downstream use.\n * - If `copy = false`, `x` is returned directly.\n *   This avoids making any copy but runs the risk of invalidation when the Wasm heap is resized;\n *   it should only be used when no further Wasm allocations are performed within the lifetime of `x`.\n * - If `copy = \"view\"`, a WasmArray view is created from `x` and returned.\n *   This avoids any copy and is robust to invalidation but requires an extra `WasmArray.array()` call to create a TypedArray.\n */\nexport function possibleCopy(x, copy) {\n    if (copy === \"view\") {\n        if (x.buffer !== buffer()) {\n            throw new Error(\"cannot use copy = \\\"view\\\" for non-Wasm TypedArrays\");\n        }\n\n        let view_class = x.constructor.name.replace(\"Array\", \"WasmArray\");\n\n        // This function should only be used for objects generated in the\n        // buffer owned by scran.js, so we can assume that x's space is the\n        // same as that of the wasmArraySpace().\n        return wa.createWasmArrayView(wasmArraySpace(), x.length, x.byteOffset, wa.stringToClass(view_class));\n\n    } else if (copy) {\n        return x.slice();\n\n    } else {\n        return x;\n    }\n}\n\nexport function matchOptions(name, value, choices) {\n    if (choices.indexOf(value) == -1) {\n        throw new Error(\"'\" + name + \"=' should be one of '\" + choices.join(\"', '\") + \"'\");\n    }\n}\n\nexport function spawnArray(n, fill) {\n    let output = new Array(n);\n    output.fill(fill);\n    return output;\n}\n\nexport function checkFillness(fill, copy, check, setFilledFun, getFun) {\n    if (!check) {\n        if (fill) {\n            setFilledFun();\n            if (copy) {\n                copy = false;\n            }\n        } else {\n            return null;\n        }\n    }\n    return getFun(copy);\n}\n","import loadScran from \"./wasm/scran.js\";\nimport { register } from \"wasmarrays.js\";\nimport * as afile from \"./abstract/file.js\";\n\nconst cache = {};\n\n/**\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfThreads=4] - Number of threads to use for calculations.\n * This will spin up the requested number of Web Workers during module initialization.\n * @param {boolean} [options.localFile=false] - Whether or not to look for the Wasm and worker scripts locally.\n * This should only be `true` when using old versions of Node.js where file URLs are not supported, \n * and is ignored completely outside of Node.js contexts.\n *\n * @return {boolean}\n * The Wasm bindings are initialized and `true` is returned.\n * If the bindings were already initialized (e.g., by a previous call), nothing is done and `false` is returned.\n */\nexport async function initialize({ numberOfThreads = 4, localFile = false } = {}) {\n    if (\"module\" in cache) {\n        return false;\n    }\n\n    let options = {\n        scran_custom_nthreads: numberOfThreads\n    };\n\n    if (localFile) {                                                                /** NODE ONLY **/  \n        options.locateFile = (x) => import.meta.url.substring(7) + \"/../wasm/\" + x; /** NODE ONLY **/\n    }                                                                               /** NODE ONLY **/\n\n    cache.module = await loadScran(options);\n    cache.space = register(cache.module);\n\n    return true;\n}\n\n/**\n * Maximum number of threads available for computation.\n * This depends on the value specified during module initialization in {@linkcode initialize}. \n *\n * @return {number} Maximum number of available threads.\n */\nexport function maximumThreads() {\n    return cache.module.scran_custom_nthreads;\n}\n\nexport function call(func) {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n\n    var output;\n    try {\n        output = func(cache.module);    \n    } catch (e) {\n        if (typeof e == \"number\") {\n            throw new Error(cache.module.get_error_message(e));\n        } else {\n            throw e;\n        }\n    }\n    return output;\n}\n\nexport function buffer() {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n    return cache.module.wasmMemory.buffer;\n}\n\n/**\n * @return {number} Integer containing the **wasmarrays.js** identifier for **scran.js**'s memory space.\n * This can be used with `createWasmArray()` and related functions from **wasmarrays.js**.\n */\nexport function wasmArraySpace() {\n    return cache.space;\n}\n\n/**\n * @return All worker threads are terminated and the module is deleted from the cache.\n * This is useful for cleaning up at the end of the analysis,\n * otherwise the workers will be shut done ungracefully on program exit.\n */\nexport function terminate() {\n    cache.module.PThread.terminateAllThreads();\n    delete cache.module;\n    return;\n}\n\n/**\n * @return {number} The current size of the Wasm heap, typically used for diagnostic reporting.\n */\nexport function heapSize() {\n    return buffer().byteLength;\n}\n","import { buffer } from \"./globals.js\";\nimport { WasmArray } from \"./base.js\";\n\n/** \n * Wrapper around an unsigned 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint8WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Uint8WasmArray extends WasmArray {\n    /**\n     * @return A Uint8Array view of the allocated memory.\n     */\n    array() {\n        return new Uint8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Uint8WasmArray\";\n    // We're returning the name explicitly here instead of relying\n    // on the constructor.name trick, as the name of the class can\n    // change during minification.\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around a signed 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt8WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Int8WasmArray extends WasmArray {\n    /**\n     * @return An Int8Array view of the allocated memory.\n     */\n    array() {\n        return new Int8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Int8WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around an unsigned 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint16WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Uint16WasmArray extends WasmArray {\n    /**\n     * @return A Uint16Array view of the allocated memory.\n     */\n    array() {\n        return new Uint16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Uint16WasmArray\";\n\n    /**\n     * Size of the each data value, in bytes.\n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage a signed 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt16WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Int16WasmArray extends WasmArray {\n    /**\n     * @return An `Int16Array` view of the allocated memory.\n     */\n    array() {\n        return new Int16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Int16WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage an unsigned 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint32WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Uint32WasmArray extends WasmArray {\n    /**\n     * @return A Uint32Array view of the allocated memory.\n     */\n    array() {\n        return new Uint32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Uint32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a signed 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt32WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Int32WasmArray extends WasmArray {\n    /**\n     * @return An Int32Array view of the allocated memory.\n     */\n    array() {\n        return new Int32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"Int32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage an unsigned 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigUint64WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class BigUint64WasmArray extends WasmArray {\n    /**\n     * @return A BigUint64Array view of the allocated memory.\n     */\n    array() {\n        return new BigUint64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"BigUint64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a signed 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigInt64WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class BigInt64WasmArray extends WasmArray {\n    /**\n     * @return An BigInt64Array view of the allocated memory.\n     */\n    array() {\n        return new BigInt64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"BigInt64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a 32-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat32WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Float32WasmArray extends WasmArray {\n    /**\n     * @return A Float32Array view of the allocated memory.\n     */\n    array() {\n        return new Float32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"Float32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a 64-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat64WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Float64WasmArray extends WasmArray {\n    /**\n     * @return A Float64Array view of the allocated memory.\n     */\n    array() {\n        return new Float64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"Float64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 8;\n}\n\nconst choices = {\n    \"Uint8WasmArray\": Uint8WasmArray,\n    \"Int8WasmArray\": Int8WasmArray,\n    \"Uint16WasmArray\": Uint16WasmArray,\n    \"Int16WasmArray\": Int16WasmArray,\n    \"Uint32WasmArray\": Uint32WasmArray,\n    \"Int32WasmArray\": Int32WasmArray,\n    \"BigUint64WasmArray\": BigUint64WasmArray,\n    \"BigInt64WasmArray\": BigInt64WasmArray,\n    \"Float32WasmArray\": Float32WasmArray,\n    \"Float64WasmArray\": Float64WasmArray\n};\n\n/**\n * Retrieve class from its name.\n *\n * @param {string} name - Name of the {@linkplain WasmArray} class.\n *\n * @return Class object corresponding to `name`.\n */\nexport function stringToClass(name) {\n    if (!(name in choices)){ \n        throw new Error(\"unknown WasmArray class '\" + name + \"'\");\n    }\n    return choices[name];\n}\n","import { allocate } from \"./globals.js\";\nimport { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} of the specified subclass.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return Instance of a {@linkplain WasmArray} subclass.\n */\nexport function createWasmArray(space, length, arrayClass) {\n    return allocate(space, length, arrayClass);\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Uint8WasmArray}.\n */\nexport function createUint8WasmArray(space, length) { \n    return createWasmArray(space, length, Uint8WasmArray); \n}\n\n/**\n * Create a {@linkplain Int8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Int8WasmArray}.\n */\nexport function createInt8WasmArray(space, length) { \n    return createWasmArray(space, length, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Uint16WasmArray}.\n */\nexport function createUint16WasmArray(space, length) { \n    return createWasmArray(space, length, Uint16WasmArray); \n}\n\n/**\n * Create a {@linkplain Int16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Int16WasmArray}.\n */\nexport function createInt16WasmArray(space, length) { \n    return createWasmArray(space, length, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Uint32WasmArray}.\n */\nexport function createUint32WasmArray(space, length) { \n    return createWasmArray(space, length, Uint32WasmArray); \n}\n\n/**\n * Create a {@linkplain Int32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Int32WasmArray}.\n */\nexport function createInt32WasmArray(space, length) { \n    return createWasmArray(space, length, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain BigUint64WasmArray}.\n */\nexport function createBigUint64WasmArray(space, length) { \n    return createWasmArray(space, length, BigUint64WasmArray); \n}\n\n/**\n * Create a {@linkplain BigInt64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain BigInt64WasmArray}.\n */\nexport function createBigInt64WasmArray(space, length) { \n    return createWasmArray(space, length, BigInt64WasmArray); \n}\n\n/**\n * Create a {@linkplain Float32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Float32WasmArray}.\n */\nexport function createFloat32WasmArray(space, length) { \n    return createWasmArray(space, length, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Float64WasmArray}.\n */\nexport function createFloat64WasmArray(space, length) { \n    return createWasmArray(space, length, Float64WasmArray); \n}\n","import { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} view of the specified subclass.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * This may need to be a certain multiple of 2, 4 or 8, depending on `arrayClass`.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return Instance of a {@linkplain WasmArray} subclass containing a view on the heap.\n */\nexport function createWasmArrayView(space, length, offset, arrayClass) {\n    return new arrayClass(space, -1, length, offset, {});\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Uint8WasmArray} view.\n */\nexport function createUint8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint8WasmArray); \n}\n\n/**\n * Create an {@linkplain Int8WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain Int8WasmArray} view.\n */\nexport function createInt8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Uint16WasmArray} view.\n */\nexport function createUint16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint16WasmArray); \n}\n\n/**\n * Create an {@linkplain Int16WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain Int16WasmArray} view.\n */\nexport function createInt16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Uint32WasmArray} view.\n */\nexport function createUint32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint32WasmArray); \n}\n\n/**\n * Create an {@linkplain Int32WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain Int32WasmArray} view.\n */\nexport function createInt32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain BigUint64WasmArray} view.\n */\nexport function createBigUint64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigUint64WasmArray); \n}\n\n/**\n * Create an {@linkplain BigInt64WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain BigInt64WasmArray} view.\n */\nexport function createBigInt64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigInt64WasmArray); \n}\n\n\n/**\n * Create a {@linkplain Float32WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Float32WasmArray} view.\n */\nexport function createFloat32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Float64WasmArray} view.\n */\nexport function createFloat64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float64WasmArray); \n}\n"],"names":["module","exports","s","a","o","h","u","r","e","l","n","Error","code","i","call","length","t","d","c","p","encode","f","getTypeOf","charCodeAt","push","charAt","join","decode","substr","replace","uint8array","Uint8Array","Array","indexOf","this","compressedSize","uncompressedSize","crc32","compression","compressedContent","prototype","getContentWorker","Promise","resolve","pipe","uncompressWorker","on","streamInfo","data_length","getCompressedWorker","withStreamInfo","createWorkerFrom","compressWorker","STORE","magic","DEFLATE","base64","binary","dir","createFolders","date","compressionOptions","comment","unixPermissions","dosPermissions","lie","Uint16Array","Uint32Array","_pako","_pakoAction","_pakoOptions","meta","inherits","processChunk","_createPako","transformTo","data","flush","cleanUp","raw","level","onData","pako","A","String","fromCharCode","file","O","utf8encode","I","name","m","_","g","b","v","y","w","k","x","S","z","C","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCFullYear","getUTCMonth","getUTCDate","B","E","fileRecord","R","LOCAL_FILE_HEADER","dirRecord","CENTRAL_FILE_HEADER","bytesWritten","zipComment","zipPlatform","encodeFileName","streamFiles","accumulate","contentBuffer","dirRecords","currentSourceOffset","entriesCount","currentFile","_sources","percent","openedSource","closedSource","DATA_DESCRIPTOR","shift","CENTRAL_DIRECTORY_END","prepareNextSource","previous","isPaused","pause","resume","registerPrevious","end","error","generatedError","lock","generateWorker","platform","forEach","options","_compressWorker","arguments","files","Object","create","root","clone","loadAsync","support","defaults","version","external","decompressed","extend","checkCRC32","optimizedBinaryString","decodeFileName","utf8decode","isNode","isStream","reject","prepareContent","then","load","all","fileNameStr","fileCommentStr","unsafeOriginalName","_upstreamEnded","_bindStream","_stream","Readable","_helper","emit","_read","Buffer","newBufferFrom","from","allocBuffer","alloc","fill","isBuffer","Date","toUpperCase","parseInt","slice","substring","lastIndexOf","toString","filter","test","folder","remove","generate","generateInternalStream","type","mimeType","toLowerCase","checkSupport","generateAsync","generateNodeStream","toNodejsStream","stream","byteAt","zero","lastIndexOfSignature","readAndCheckSignature","readData","checkOffset","index","checkIndex","setIndex","skip","readInt","readString","readDate","UTC","subarray","ZIP64_CENTRAL_DIRECTORY_LOCATOR","ZIP64_CENTRAL_DIRECTORY_END","destType","propName","dataIsReady","max","_tickScheduled","_tickAndRepeat","delay","isFinished","_tick","Math","min","extraStreamInfo","isLocked","_listeners","mergeStreamInfo","hasOwnProperty","nodestream","_internalType","_outputType","_mimeType","newBlob","concat","apply","set","_worker","objectMode","array","string","arraybuffer","ArrayBuffer","nodebuffer","blob","Blob","size","self","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","append","getBlob","leftOver","applyFromCharCode","Utf8DecodeWorker","Utf8EncodeWorker","stringifyByChunk","stringifyByChar","applyCanBeUsed","floor","buffer","byteLength","split","pop","MAX_VALUE_16BITS","MAX_VALUE_32BITS","pretty","setImmediate","FileReader","onload","target","result","onerror","readAsArrayBuffer","setimmediate","loadOptions","checkSignature","reader","isSignature","readBlockEndOfCentral","diskNumber","diskWithCentralDirStart","centralDirRecordsOnThisDisk","centralDirRecords","centralDirSize","centralDirOffset","zipCommentLength","readBlockZip64EndOfCentral","zip64EndOfCentralSize","zip64ExtensibleData","id","value","readBlockZip64EndOfCentralLocator","diskWithZip64CentralDirStart","relativeOffsetEndOfZip64CentralDir","disksCount","readLocalFiles","localHeaderOffset","readLocalPart","handleUTF8","processAttributes","readCentralDir","zip64","readCentralPart","readEndOfCentral","abs","prepareReader","isEncrypted","bitFlag","useUTF8","fileNameLength","fileName","compressionMethod","versionMadeBy","extraFieldsLength","fileCommentLength","diskNumberStart","internalFileAttributes","externalFileAttributes","readExtraFields","parseZIP64ExtraField","fileComment","extraFields","findExtraFieldUnicodePath","findExtraFieldUnicodeComment","_data","_dataBinary","internalStream","_decompressWorker","async","nodeStream","MutationObserver","WebKitMutationObserver","document","createTextNode","observe","characterData","MessageChannel","createElement","onreadystatechange","parentNode","removeChild","documentElement","appendChild","setTimeout","port1","onmessage","port2","postMessage","global","window","TypeError","state","queue","outcome","promise","onFulfilled","callFulfilled","otherCallFulfilled","onRejected","callRejected","otherCallRejected","status","finally","constructor","catch","race","immediate","assign","method","chunkSize","windowBits","memLevel","strategy","to","gzip","err","msg","ended","chunks","strm","avail_out","deflateInit2","header","deflateSetHeader","dictionary","string2buf","deflateSetDictionary","_dict_set","input","next_in","avail_in","output","Buf8","next_out","deflate","onEnd","buf2binstring","shrinkBuf","deflateEnd","flattenChunks","Deflate","deflateRaw","inflateInit2","Z_OK","inflateGetHeader","Z_FINISH","Z_NO_FLUSH","binstring2buf","inflate","Z_NEED_DICT","inflateSetDictionary","Z_BUF_ERROR","Z_STREAM_END","Z_SYNC_FLUSH","utf8border","buf2string","arraySet","inflateEnd","Inflate","inflateRaw","ungzip","Int32Array","setTyped","Buf16","Buf32","Z_PARTIAL_FLUSH","Z_FULL_FLUSH","Z_BLOCK","Z_TREES","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","T","D","F","pending","pending_buf","pending_out","total_out","N","_tr_flush_block","block_start","strstart","U","P","L","max_chain_length","prev_length","nice_match","w_size","w_mask","prev","good_match","lookahead","match_start","j","window_size","hash_size","head","wrap","adler","total_in","insert","ins_h","hash_shift","hash_mask","Z","match_length","_tr_tally","max_lazy_match","last_lit","W","prev_match","match_available","M","good_length","max_lazy","nice_length","max_chain","func","H","pending_buf_size","gzhead","gzindex","last_flush","w_bits","hash_bits","dyn_ltree","dyn_dtree","bl_tree","l_desc","d_desc","bl_desc","bl_count","heap","heap_len","heap_max","depth","l_buf","lit_bufsize","d_buf","opt_len","static_len","matches","bi_buf","bi_valid","G","data_type","_tr_init","K","Y","deflateInit","deflateReset","deflateResetKeep","text","hcrc","extra","time","os","_tr_align","_tr_stored_block","deflateInfo","xflags","extra_len","done","dmax","wsize","whave","wnext","hold","bits","lencode","distcode","lenbits","distbits","mode","sane","last","havedict","flags","check","total","wbits","offset","ncode","nlen","ndist","have","next","lens","work","lendyn","distdyn","back","was","inflateReset","inflateReset2","inflateResetKeep","inflateInit","inflateInfo","static_tree","extra_bits","extra_base","elems","max_length","has_stree","dyn_tree","max_code","stat_desc","X","V","q","J","getPrototypeOf","process","nextTick","importScripts","random","addEventListener","attachEvent","Function","callback","args","clearImmediate","source","define","IS_PAPA_WORKER","parse","dynamicTyping","dynamicTypingFunction","transform","worker","WORKERS_SUPPORTED","URL","webkitURL","BLOB_URL","createObjectURL","Worker","userStep","step","userChunk","chunk","userComplete","complete","userError","config","workerId","NODE_STREAM_INPUT","download","readable","read","File","unparse","delimiter","BAD_DELIMITERS","quotes","isArray","skipEmptyLines","newline","quoteChar","columns","escapeChar","escapeFormulae","RegExp","Q","JSON","keys","fields","trim","stringify","RECORD_SEP","UNIT_SEP","BYTE_ORDER_MARK","LocalChunkSize","RemoteChunkSize","DefaultDelimiter","Parser","ParserHandle","NetworkStreamer","FileStreamer","StringStreamer","ReadableStreamStreamer","jQuery","fn","each","prop","attr","inputElem","instanceConfig","before","action","reason","splice","_handle","_finished","_completed","_halted","_input","_baseIndex","_partialLine","_rowCount","_start","_nextChunk","isFirstChunk","_completeResults","errors","streamer","_config","parseChunk","beforeFirstChunk","paused","aborted","cursor","preview","results","WORKER_ID","finished","_sendError","_readChunk","_chunkLoaded","XMLHttpRequest","withCredentials","_chunkError","open","downloadRequestBody","downloadRequestHeaders","setRequestHeader","send","message","readyState","responseText","getResponseHeader","statusText","webkitSlice","mozSlice","FileReaderSync","readAsText","encoding","_streamData","_streamEnd","_streamError","_checkIsFinished","_streamCleanUp","removeListener","pow","abort","transformHeader","map","parseFloat","row","comments","successful","bestDelimiter","delimitersToGuess","getCharIndex","fastMode","linebreak","truncated","terminate","factory","randomColor","seed","colorDictionary","loadColorBounds","colorRanges","undefined","stringToInteger","count","totalColors","colors","color","setFormat","pickHue","pickSaturation","pickBrightness","hue","randomWithin","hueRange","getRealHueRange","getHueRange","luminosity","saturationRange","getSaturationRange","sMin","sMax","bMin","getMinimumBrightness","bMax","hsv","format","HSVtoHSL","hsl","hslColor","alpha","HSVtoRGB","rgbColor","HSVtoHex","lowerBounds","getColorInfo","s1","v1","s2","v2","colorInput","number","match","HexToHSB","colorName","range","golden_ratio","rnd","rgb","componentToHex","hex","defineColor","brightnessRange","h_i","red","green","blue","cMax","delta","saturation","round","Number","MAX_SAFE_INTEGER","colorHue","isNaN","_arrayLikeToArray","arr","len","arr2","_arrayWithHoles","_arrayWithoutHoles","_classCheckPrivateStaticAccess","receiver","classConstructor","_classCheckPrivateStaticFieldDescriptor","descriptor","_classPrivateMethodGet","privateSet","has","_classPrivateMethodInitSpec","obj","add","_classStaticPrivateFieldSpecGet","_classStaticPrivateFieldSpecSet","_classStaticPrivateMethodGet","_createForOfIteratorHelper","allowArrayLike","it","Symbol","iterator","_e","normalCompletion","didErr","_e2","_iterableToArray","iter","_iterableToArrayLimit","_i","_s","_x","_r","_arr","_n","_d","_nonIterableRest","_nonIterableSpread","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","_objectSpread2","key","getOwnPropertyDescriptors","defineProperties","defineProperty","_slicedToArray","_toConsumableArray","_unsupportedIterableToArray","minLen","_h5_file","WeakMap","_h5_path","_h5_flush","_raw_features","_raw_cells","_featureTypeRnaName","_featureTypeAdtName","_featureTypeCrisprName","_primaryRnaFeatureIdColumn","_primaryAdtFeatureIdColumn","_primaryCrisprFeatureIdColumn","_dump_summary","WeakSet","_instantiate","_features","_cells","TenxHdf5Dataset","h5File","_ref","_ref$featureTypeRnaNa","featureTypeRnaName","_ref$featureTypeAdtNa","featureTypeAdtName","_ref$featureTypeCrisp","featureTypeCrisprName","_ref$primaryRnaFeatur","primaryRnaFeatureIdColumn","_ref$primaryAdtFeatur","primaryAdtFeatureIdColumn","_ref$primaryCrisprFea","primaryCrisprFeatureIdColumn","_classCallCheck","_classPrivateFieldInitSpec","writable","afile","_classPrivateFieldSet","clear","_createClass","_classPrivateFieldGet","_dump_summary2","_ref2$cache","cache","_features2","_cells2","futils","_ref3$cache","loaded","scran","mappings","RNA","ADT","CRISPR","cells","primaries","primary_ids","features","_unserialize","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_context","abrupt","stop","_x2","fun","_instantiate2","info","content","path","handle","children","mhandle","fhandle","ids","eutils","feats","bioc","names","$setColumn","ftype","details","numberOfRows","load_data_frame","_load_data_frame","_callee6","navigator","contents","colnames","rownames","parsed","current","_iterator7","_step7","out","ghandle","chandle","dhandle","_current","_type","replacement","placeholder","new_columns","new_colnames","nest_meta","_context6","metadata","sent","startsWith","delim","data_frame","row_names","Float64Array","hdf5_data_frame","group","values","Float32Array","attributes","readAttribute","finish","resource","t0","console","warn","columnOrder","rowNames","dimensions","main_experiment_name","extract_all_features","_x3","_x4","_extract_all_features","_callee8","extract_features","full_meta","_iterator8","_step8","alt","alt_meta","_context8","_ref7","_callee7","se_meta","row_path","_context7","summarized_experiment","row_data","_x19","single_cell_experiment","alternative_experiments","t1","extract_all_assay_names","_x5","_x6","_extract_all_assay_names","_callee9","extract_assay_names","assays","_iterator10","_step10","_context9","_step9","_iterator9","ass","extract_logcounts","_x7","_x8","_extract_logcounts","_callee10","ghandle2","ghandle3","sf","ahandle","mat","_context10","log","extract_assay_raw","matrix","sizeFactors","center","row_ids","extract_assay","_x9","_x10","_x11","_x12","_extract_assay","_callee11","assay","forceInteger","counter","_iterator11","_step11","asspath","_context11","_x13","_x14","_x15","_extract_assay_raw","_callee12","assmeta","schema","is_dense","is_sparse","stuff","_stuff","_context12","hdf5_sparse_matrix","hdf5_dense_array","dataset","hdf5_delayed_array","extract_other_data","_x16","_x17","_extract_other_data","_callee13","other_path","othermeta","ofile","unpacked","_context13","json_simple_list","extract_list_data_internal","NaN","_navigator","_metadata_cache","MetadataCacheWrapper","nav","_metadata","_x18","_path","_navigator2","_rnaCountAssay","_adtCountAssay","_crisprCountAssay","_rnaExperiment","_adtExperiment","_crisprExperiment","_reset_local_caches","AbstractArtifactdbDataset","_ref$rnaCountAssay","rnaCountAssay","_ref$adtCountAssay","adtCountAssay","_ref$crisprCountAssay","crisprCountAssay","_ref$rnaExperiment","rnaExperiment","_ref$adtExperiment","adtExperiment","_ref$crisprExperiment","crisprExperiment","_reset_local_caches2","_summary","_callee2","_args2","_context2","t2","modality_features","modality_assay_names","_load","_callee3","mapping","altmap","alts","_iterator","_step","_Object$entries","_Object$entries$_i","out_ids","_args3","_context3","exp","entries","_features5","_callee14","_context14","t3","_cells5","_callee15","col_path","_context15","column_data","_path2","_navigator3","_raw_features2","_raw_cells2","_raw_other","_primaryAssay","_isPrimaryNormalized","_reducedDimensionNames","_reset_local_caches3","_features3","_cells3","_other","AbstractArtifactdbResult","_ref4","_ref4$primaryAssay","primaryAssay","_ref4$isPrimaryNormal","isPrimaryNormalized","_ref4$reducedDimensio","reducedDimensionNames","_reset_local_caches4","primary","normalized","_summary2","_callee4","_ref5$cache","_iterator2","_step2","redmeta","_args4","_context4","_features4","_cells4","_other2","t4","reduced_dimension_names","other_metadata","reduced_dimensions","t5","_load2","_callee5","_ref6$cache","reddims","_iterator3","_step3","redmap","_iterator4","_step4","_red","_iterator5","_step5","dims","redcontents","realized","acquired","_iterator6","_step6","_i2","_Object$entries2","_Object$entries2$_i","_k","curassay","curnormalized","normed","_args5","_context5","allowZeros","_features6","_callee16","_context16","_cells6","_callee17","_context17","_other3","_callee18","_context18","other_data","_zipfile","_ziphandle","ZippedProjectNavigator","zipfile","ziphandle","_file","JSZip","endsWith","redirection","targets","location","_zipfile2","_name","adb","opt","datasetName","SimpleFile","_ref$name","_mode","_buffer","_ref2$copy","copy","_ref3$copy","_matrix_file","_feature_file","_barcode_file","_dimensions","_fetch_dimensions","TenxMatrixMarketDataset","matrixFile","featureFile","barcodeFile","_args","is_gz","_serialize","feat","barcode","genes","annotations","mtx","_fetch_dimensions2","headers","rows","NR","fname","_output","symb","types","bname","diff","conv","extractHDF5Strings","summarizeArray","_ref$limit","limit","chosen","Set","sort","POSITIVE_INFINITY","NEGATIVE_INFINITY","guess_compression","astream","unpackText","_ref2$compression","txt","TextDecoder","merge_bytes","leftovers","decoder","combined","stream_callback","_stream_callback","gz","readLines2","_readLines","_ref4$compression","_ref4$chunkSize","dec","lines","readTable2","_readTable","_ref6","_ref6$compression","_ref6$delim","_ref6$chunkSize","size_left","str","ppp","promoteToNumber","as_num","opt1","opt2","create_solo_default_object","modality","reportFeatures","rawFeatures","typeField","hasColumn","by_type","column","deepCopy","$removeColumn","splitScranMatrixAndFeatures","featureTypeMapping","featureTypeDefault","current_features","out_mat","selected","type_keys","skip_subset","indices","full_length","is_subset_noop","store","rename","extractPrimaryIds","_Object$keys","curfeat","numberOfColumns","createTsneWorker","createUmapWorker","step_name","_qc","_filter","_parameters","_cache","_raw_compute","AdtNormalizationState","qc","parameters","qc_module","filter_module","changed","utils","total_buffer","sf_buffer","centered_sf_buffer","fetchFilteredMatrix","_raw_compute2","buff","block","fetchFilteredBlock","_objectSpread","num_pcs","num_clusters","remove_bias","valid","get","nutils","totals","numberOfPCs","numberOfClusters","_norm","AdtPcaState","norm","norm_module","pcs","block_method","fetchNormalizedMatrix","blockMethod","_inputs","AdtQualityControlState","inputs","inputs_module","metrics","filters","metrics_buffer","discard_buffer","fetchCountMatrix","automatic","tag_id_column","igg_prefix","nmads","min_detected_drop","tag_info","fetchFeatureAnnotations","subsets","lower_igg","configureFeatureParameters","val","sub_arr","fetchBlock","numberOfMADs","minDetectedDrop","discard","numberOfCells","best_key","best","rn","columnNames","latest","_combined","BatchCorrectionState","combine_module","corrected","fetchNumberOfCells","fetchNumberOfDimensions","num_neighbors","approximate","needs_correction","fetchCombined","numberOfDims","view","find_usable_upstream_states","qc_states","in_use","tmp","to_use","_qc_states","_raw_compute_matrix","_raw_compute_block","CellFilteringState","rna_qc_module","adt_qc_module","crispr_qc_module","block_buffer","_raw_compute_matrix2","_raw_compute_block2","use_rna","use_adt","use_crispr","first","fetchDiscards","disc_buffer","disc_arr","max_index","keep","available","src","sub","filtered_ncols","bcache","baseUrl","_markers","_flush_prepared","_load_reference","_build_reference","CellLabellingState","markers","markers_module","_flush_prepared2","references","species","perref","integrated","integrated_results","prepared","built","sharedFeatures","_compute","gene_id_column","gene_id_type","def","species2","gene_id_column2","gene_id_type2","guesses","auto","allowable","gene_ids","ref","used_refs","_feats","marker_results","ngroups","ngenes","cluster_means","means","_valid","_i3","labels","_key","as_names","_this","human_references","mouse_references","guessRnaFeatureTypes","availableReferences","_load_reference2","_build_reference2","fetchResults","numberOfGroups","numberOfFeatures","confidence","_i4","_Object$entries3","_Object$entries3$_i","_i5","_Object$entries4","_all_loaded","_Object$entries4$_i","free","_downloadFun","_i7","_Object$values","_load_reference3","all_loaded","suffixes","gene_lines","ensembl","symbol","entrez","empty2null","_ref2","suffix","full","rutils","chosen_ids","_defineProperty","_snn_cluster","_kmeans_cluster","ChooseClusteringState","snn","kmeans","snn_module","kmeans_module","fetchClusters","find_nonzero_upstream_states","pca_states","weights","_pca_states","CombineEmbeddingsState","rna_pca_module","adt_pca_module","crispr_pca_module","combined_buffer","num_cells","total_dims","rna_weight","adt_weight","crispr_weight","weight_arr","collected","ncells","curpcs","fetchPCs","principalComponents","createPcsView","upstream","CrisprNormalizationState","centered_buffer","sum_buffer","createGroup","CrisprPcaState","CrisprQualityControlState","FeatureSelectionState","sorted_residuals","span","residuals","_correct","KmeansClusterState","correct","correct_module","_valid2","clusters","run_me","fetchCorrected","initMethod","_free","versus","_computeVersus","left","right","matrices","_ref$cache","_ref$block","_ref$lfc_threshold","lfc_threshold","_ref$compute_auc","compute_auc","cache_info","left_index","left_small","right_index","run","new_clusters","leftfound","rightfound","cached","_norm_states","_choice","MarkerDetectionState","norm_states","choice","rna_norm_module","adt_norm_module","crispr_norm_module","choice_module","changed_params","lfcThreshold","computeAuc","_ref2$block","_ref2$lfc_threshold","_ref2$compute_auc","computeVersus","_matrices","_groups","_group_levels","_block","_block_levels","_cache2","_parameters2","MarkerDetectionStandalone","groups","_ref3$block","arrays","new_matrices","dump","retain","temp","levels","init","_ref4$copy","ret","_ref5$copy","_classPrivateFieldGet2","NeighborIndexState","RnaNormalizationState","_feat","RnaPcaState","feat_module","hvg_buffer","num_hvgs","choose_hvgs","sorted_resids","fetchSortedResiduals","threshold_at","unsorted_resids","element","_automatic","_acquire_reference","RnaQualityControlState","mito_prefix","use_reference_mito","backcomp","gene_info","lists","lower_mito","use_mito_default","_acquire_reference2","_mito_lists","_acquire_reference3","feature_type","mito_lists","_index","_compute_neighbors","_compute_graph","_compute_clusters","SnnGraphClusterState","neighbor_module","neighbors","graph","membership","scheme","algorithm","multilevel_resolution","leiden_resolution","walktrap_steps","_compute_neighbors2","_compute_graph2","_compute_clusters2","fetchIndex","multiLevelResolution","leidenResolution","leidenModularityObjective","walktrapSteps","_reloaded","_worker_id","_ready","_run","_core","TsneState","reloaded","aworkers","_vizutils$initializeW","vizutils","worker_id","ready","_fetchResults","_ref$copy","iterations","perplexity","animate","same_neighbors","_core2","reneighbor","nn_out","UmapState","num_epochs","min_dist","registerCallback","sendMessage","transfer","terminateWorker","freeCache","changedParametersIllegal","xskip","yskip","isView","changedParameters","xnull","ynull","xarr","yarr","xkeys","ykeys","_xkeys","allocateCachedArray","reallocate","candidate","className","owner","findValidUpstreamStates","states","checkIndices","defaultDownload","_defaultDownload","url","resp","fetch","ok","arrayBuffer","guessFeatureTypes","forceTaxonomy","subsetInvalidFactors","invalid","transformed","num_invalid","_loop","new_ids","new_levels","summaries2int","formatMarkerResults","rankEffect","ordering","ranking","increasing","cohen","summary","auc","lfc","deltaDetected","reorder","stats","thing","stat_detected","detected","stat_mean","stat_lfc","stat_delta_d","locateVersusCache","bigg","biggversus","smal","rerun","freeVersusResults","_i8","_i9","_Object$values2","_i10","_Object$values3","_i11","_Object$keys2","computeVersusResults","new_block","modmat","subsetSums","discards","sums","fetchMetrics","oarr","_get","Reflect","bind","property","base","desc","areArraysEqual","isArrayLike","formatLengthError","checkStringArray","typeMessage","checkNamesArray","numExpected","lengthMessage","sum","combineNames","all_names","all_lengths","total_n","all_null","createSequence","convertToInt32Array","checkNonNegative","object2map","Map","presplitFactor","factor","by","LENGTH","_bioconductor_LENGTH","SLICE","_ref$allowView","allowView","_bioconductor_SLICE","start","COMBINE","objects","_bioconductor_COMBINE","con1","con2","total_LENGTH","BigInt64Array","BigUint64Array","position","CLONE","_ref2$deepCopy","_bioconductor_CLONE","_step3$value","SPLIT","misc","_bioconductor_SPLIT","NUMBER_OF_ROWS","_bioconductor_NUMBER_OF_ROWS","NUMBER_OF_COLUMNS","_bioconductor_NUMBER_OF_COLUMNS","SLICE_2D","_ref3$allowView","_bioconductor_SLICE_2D","COMBINE_ROWS","_bioconductor_COMBINE_ROWS","COMBINE_COLUMNS","_bioconductor_COMBINE_COLUMNS","setterTarget","inPlace","generics","cloneField","Annotated","_ref$inPlace","cutils","setMetadata","_check_entry_index","InternalList","order","expected","observed","_entries","_order","_check_entry_index2","ii","delete","_ref2$inPlace","_ref3$inPlace","new_entries","_ref4$inPlace","new_order","_ref5$inPlace","_ref6$deepCopy","FUN","_ref7$inPlace","combiner","first_order","found","DataFrame","_ann$Annotated","_inherits","_super","_createSuper","_ref$numberOfRows","_ref$rowNames","_ref$columnOrder","_ref$metadata","_possibleConstructorReturn","_numberOfRows","_rowNames","_columns","il","cause","entry","numberOfEntries","removeColumn","setColumn","setNames","setColumnNames","setRowNames","_ref6$inPlace","sliceColumns","new_numberOfRows","_ref7$allowView","new_rowNames","all_n","all_l","yi","_ref8","_ref8$deepCopy","_getPrototypeOf","ann","flexibleCombineRows","ckeys","corder","cnames","copies","dummy","verifyElementMetadata","elementMetadata","df","Vector","_ref$names","_ref$elementMetadata","_elementMetadata","_names","setElementMetadata","_ref4$allowView","all_em","_ref5","_ref5$deepCopy","buildIntervalTree","_ref2$slice","_convertPositionToRan","_ref$slice","positions","fillIndex","at","rank2position","new_starts","new_ends","pos","idx","startRanks","endRanks","convertPositionToRank","tree","create_node","recursive_build_tree","one_past_the_end","_tree","left_bound","right_bound","start_overlaps_sorted","overlaps","end_overlaps_sorted","left_node","right_node","node","queryIntervalTree","recursive_query_tree","overlap","IRanges","_vec$Vector","width","_width","_this2","setStart","setWidth","olap","IRangesOverlapIndex","all_s","all_w","vec","query","GRanges","seqnames","ranges","_ref$strand","strand","_seqnames","_ranges","_convertToInt8Array","_checkStrandedness","Int8Array","_strand","setSeqnames","ir","setRanges","setStrand","_ref5$restrictToSeqna","restrictToSeqnames","_ref5$restrictToStran","restrictToStrand","by_seqname","starts","ends","seqname_indices","by_strand","str_indices","GRangesOverlapIndex","_ref6$allowView","all_sn","all_rr","all_st","_ref7$deepCopy","_ref8$ignoreStrand","ignoreStrand","my_results","allowed_strands","seq_index","sstr","_staged_setGroup","_flush_staged_setGroup","GroupedGRanges","_ref$rangeLengths","rangeLengths","_assertThisInitialized","gr","_rangeLengths","accumulated","_computeStarts","_rangeStarts","_flush_staged_setGroup2","_ref2$allowView","nops","setGroup","GroupedGRangesOverlapIndex","buildOverlapIndex","runs","lengths","staged","last_start","more_ranges","current_start","nranges","fullLength","rangeStarts","rev_map","_reverseMapping","_loop2","_extractor","_inserter","_primarySlicer","_secondarySlicer","DenseMatrix","_ref$columnMajor","columnMajor","_numberOfColumns","_values","_columnMajor","_extractor2","setValues","_inserter2","setRow","_objectDestructuringEmpty","full_rows","is_row_range","new_rows","full_columns","is_column_range","new_values","_primarySlicer2","primaryFun","secondaryFun","isPrimaryMajor","secondaryName","num_primary","num_secondary","primary_major","used_primary","cur_primary","out_offset","in_offset","out_offset2","view_offset","_combiner","nprimary","nsecondary","primaryMajor","primarySlice","fullPrimary","isPrimaryRange","primaryDim","secondarySlice","fullSecondary","isSecondaryRange","inSecondaryDim","outSecondaryDim","outputValues","_secondarySlicer2","pi","inPrimary","outPrimary","si","SummarizedExperiment","_ref$assayOrder","assayOrder","_ref$rowData","rowData","_ref$columnData","columnData","_ref$columnNames","_assays","nrows","ncols","nr","nc","_rowData","_columnData","_columnNames","removeAssay","setAssay","setAssayNames","sliceAssays","setRowData","setColumnData","_ref8$inPlace","_ref9$inPlace","_ref10","_ref10$allowView","all_dfs","_ref11","_ref11$deepCopy","_check_rowRanges","RangedSummarizedExperiment","_se$SummarizedExperim","rowRanges","ggr","_check_rowRanges2","_rowRanges","setRowRanges","has_empty","has_ggr","se","widths","_ref3","SingleCellExperiment","_rse$RangedSummarized","_options$reducedDimen","reducedDimensions","_options$reducedDimen2","reducedDimensionOrder","_options$alternativeE","alternativeExperiments","_options$alternativeE2","alternativeExperimentOrder","_options$rowRanges","_reducedDimensions","_alternativeExperiments","removeReducedDimension","setReducedDimension","setReducedDimensionNames","sliceReducedDimensions","removeAlternativeExperiment","setAlternativeExperiment","setAlternativeExperimentNames","sliceAlternativeExperiments","_ref9","_ref9$allowView","rse","default_download","Range","reference_base_url","referenceBaseUrl","reference_download","referenceDownload","setReferenceDownload","gene_base_url","geneBaseUrl","gene_download","geneDownload","setGeneDownload","decompressLines","retrieveRanges","_retrieveRanges","res","retrieveNamedRanges","_retrieveNamedRanges","retrieveRangesWithExtras","_retrieveRangesWithExtras","retrieveBytesByIndex","retrieveBytes","_retrieveBytes","convertToUint32Array","intersect","running","fetch_sizes_internal","_fetch_sizes_internal","_sizes","initialize","funSizes","funFound","sizes","fetchSizes","tmp_sizes","fetchNumber","_genes","fetchAllGenes","_fetchAllGenes","_ref$types","promises","processing","_t","resolved","gene_data","processed","by_symbol","by_symbol_lower","mapGenesByIdentifier","_mapGenesByIdentifier","_ref$lowerCase","lowerCase","host","sfound","tfound","_step2$value","searchGenes","_searchGenes","queries","_ref$ignoreCase","ignoreCase","findings","_collections","fetchAllCollections","_fetchAllCollections","_ref$download","cres","coll_data","_sets","fetchAllSets","_fetchAllSets","_yield$Promise$all","_yield$Promise$all2","sres","set_data","collection","fetchGenesForAllSets","_fetchGenesForAllSets","fetchSetsForAllGenes","_fetchSetsForAllGenes","countSetOverlaps","setsForSomeGenes","set_count","reindexGenesForAllSets","geneMapping","genesForSets","reverse_mapping","gesel_gene","new_sets","subset","gene","reindexSetsForAllGenes","setsForGenes","remapped","_store","_ncols","MultiMatrix","_ref$store","old","new_matrix","_id","_matrix","ScranMatrix","gc","nrow","ncol","_ref$buffer","_ref2$buffer","sparse","reorganized","_ref3$buffer","identities","wipe_identities","prefix","extension","tmppath","methods","handleString","createBlock","local_buffer","barr","sofar","subsetBlock","_ref3$filter","filterBlock","_ref4$buffer","dropUnusedBlock","wa","uniq","uniq_arr","harvest_matrices","BigInt","$$","ptr","cbindWithNames","mat_ptrs","name_ptrs","renamed","common","universe","names_arr","replacement_arr","cbind_with_rownames","internames","_renamed","computeTopThreshold","_ref$largest","largest","_results","_filledClusters","_filledSizes","_filledCenters","_filledWcss","_filledIterations","_filledStatus","ClusterKmeansResults","filled","num_obs","set_iterations","set_status","_ref$fillable","fillable","COPY","_ref2$fillable","cluster_sizes","_this3","_ref3$fillable","wcss","_this4","_ref4$fillable","centers","clusterKmeans","_ref5$numberOfDims","_ref5$numberOfCells","_ref5$initMethod","_ref5$initSeed","initSeed","_ref5$initPCASizeAdju","initPCASizeAdjust","_ref5$numberOfThreads","numberOfThreads","nthreads","pptr","RunPCAResults","byteOffset","cluster_kmeans","_graph","BuildSNNGraphResults","buildSNNGraph","my_neighbors","_ref$scheme","_ref$neighbors","_ref$numberOfThreads","FindNearestNeighborsResults","findNearestNeighbors","build_snn_graph","_id2","_filledBest","_filledModularity","_filledMembership","_chooseLevel","ClusterSNNGraphMultiLevelResults","numberOfLevels","set_best","_ref2$level","_chooseLevel2","modularity","set_modularity","_ref3$level","_id3","_results2","_filledModularity2","_filledModularityDetails","_filledMembership2","ClusterSNNGraphWalktrapResults","numberOfMergeSteps","which","remaining","num_merge_steps","_ref4$at","_ref5$fillable","_id4","_results3","_filledModularity3","_filledMembership3","ClusterSNNGraphLeidenResults","_ref6$copy","_ref6$fillable","clusterSNNGraph","_ref7$method","_ref7$multiLevelResol","_ref7$leidenResolutio","_ref7$leidenModularit","_ref7$walktrapSteps","cluster_snn_graph_multilevel","cluster_snn_graph_walktrap","cluster_snn_graph_leiden","factorize","failure","_ref$asWasmArray","asWasmArray","_ref$action","_ref$placeholder","warned","isFinite","existing","filterCells","filter_data","filter_cells","BuildNeighborSearchIndexResults","num_dim","buildNeighborSearchIndex","_ref$numberOfDims","_ref$numberOfCells","_ref$approximate","build_neighbor_index","run_data","ind_data","dist_data","_ref2$runs","_ref2$indices","_ref2$distances","distances","serialize","NeighborResults","_ref3$numberOfThreads","find_nearest_neighbors","groupedSizeFactors","group_arr","_ref$center","_ref$priorCount","priorCount","_ref$reference","reference","wasm","grouped_size_factors","guessFeatures","_ref$forceTaxonomy","ntotal","early_threshold","ceil","payload","ensembl_human","ensembl_mouse","ensembl_6239","ensembl_10116","ensembl_9541","ensembl_7227","ensembl_7955","ensembl_9598","symbol_human","symbol_mouse","symbol_6239","symbol_7955","hsid","mmid","any_ens","highest","hypergeometricTest","markersInSet","numberOfMarkers","featureSetSize","markersInSet_data","numberOfMarkers_data","featureSetSize_data","numberOfFeatures_data","output_data","_ref$assumeSorted","assumeSorted","ntests","check_length","hypergeometric_test","initializeSparseMatrixFromMatrixMarket","buf_data","_ref3$compressed","compressed","_ref3$layered","layered","convert_compressed","read_matrix_market_from_buffer","read_matrix_market_from_file","isReorganized","wipeIdentities","extractMatrixMarketDimensions","_ref4$compressed","read_matrix_market_header_from_buffer","read_matrix_market_header_from_file","sarr","initializeSparseMatrixFromHDF5","_ref5$forceInteger","_ref5$layered","read_hdf5_matrix","extractHDF5MatrixDetails","extract_hdf5_matrix_details","vals","integer","initializeDenseMatrixFromDenseArray","_ref6$forceInteger","initialize_dense_matrix","initializeSparseMatrixFromRds","_ref7$consume","consume","_ref7$forceInteger","_ref7$layered","initialize_sparse_matrix_from_rds","computePerCellQcFilters","block_data","bptr","use_blocks","applyFilter","thresholds","rebuffer","optr","computePerCellQcMetrics","subset_offsets","tmp_subsets","nsubsets","offset_offset","offset_arr","_tmp_subsets","unpack_strings","repack_strings","lengths_arr","enc","TextEncoder","buffer_arr","_reference","LoadLabelledReferenceResults","num_samples","num_features","num_labels","loadLabelledReferenceFromBuffers","ranks","matbuf","markbuf","labbuf","load_singlepp_reference","_reference2","BuildLabelledReferenceResults","shared_features","create_feature_availability","mat_id_buffer","mat_id_array","convert_reference_features","referenceFeatures","ref_id_buffer","ref_id_array","buildLabelledReference","_ref$top","top","nfeat","build_singlepp_reference","expectedNumberOfFeatures","label_cells","tempmat","tempbuf","use_buffer","labelCells","_ref2$numberOfFeature","_ref2$numberOfCells","_ref2$quantile","quantile","_ref2$numberOfThreads","run_singlepp","_integrated","IntegrateLabelledReferencesResults","num_references","integrateLabelledReferences","id_arr","loaded_arr2","ref_arr2","built_arr2","nrefs","ref_arr","la2","ra2","ba2","integrate_singlepp_references","_ref_arr","integrateCellLabels","assigned","aptrs","_ref4$numberOfFeature","_ref4$numberOfCells","_ref4$quantile","_ref4$numberOfThreads","numberOfReferences","assigned_arrs","aptrs_arr","fail","integrate_singlepp","_assigned_arrs","logNormCounts","sf_data","_ref$sizeFactors","_ref$allowZeros","sfptr","use_sf","log_norm_counts","centerSizeFactors","center_size_factors","mnnCorrect","x_data","_ref$k","_ref$numberOfMADs","_ref$robustIterations","robustIterations","_ref$robustTrim","robustTrim","_ref$referencePolicy","referencePolicy","mnn_correct","_filledMeans","_filledVariances","_filledFitted","_filledResiduals","_extract","ModelGeneVarResults","numberOfBlocks","_extract2","_ref4$block","num_blocks","fillcheck","fillindex","nblocks","modelGeneVar","_ref5$block","_ref5$span","model_gene_var","_filledSums","_filledDetected","_filledSubsetTotals","PerCellAdtQcMetricsResults","numberOfSubsets","subset_totals","num_subsets","perCellAdtQcMetrics","internal","subset_offset","per_cell_adt_qc_metrics","_filledMaxProportions","_filledMaxIndex","PerCellCrisprQcMetricsResults","max_proportion","perCellCrisprQcMetrics","per_cell_crispr_qc_metrics","_filledSubsetProportions","PerCellRnaQcMetricsResults","subset_proportions","perCellRnaQcMetrics","per_cell_rna_qc_metrics","quickAdtSizeFactors","clust","_ref$numberOfClusters","_ref$numberOfPCs","_ref$totals","runPCA","RdsObject","par","parent","RdsVector","_RdsObject","mod","fill_attribute_names","anames_buf","attribute_names_buffer","anames_len","attribute_names_length","packer","find_attribute","dispatch","load_attribute_by_index","load_attribute_by_name","RdsIntegerVector","_RdsVector","_super2","numeric_vector","RdsBooleanVector","_RdsVector2","_super3","RdsDoubleVector","_RdsVector3","_super4","RdsStringVector","_RdsVector4","_super5","fill_string_vector","buf","string_vector_buffer","string_vector_length","RdsGenericVector","_RdsVector5","_super6","_this5","load_list_element","RdsS4Object","_RdsObject2","_super7","_this6","class_name","_this7","package_name","_this8","_this9","_this10","RdsNull","_RdsVector6","_super8","cons","tt","_obj","RdsDetails","format_version","writer_version","reader_version","_this11","readRds","parse_rds_from_file","parse_rds_from_buffer","_filledComponents","_filledTotalVariance","set_total_variance","variance_explained","total_variance","feat_data","_ref3$features","_ref3$numberOfPCs","_ref3$scale","scale","_ref3$blockMethod","use_feat","fptr","run_pca","run_blocked_pca","run_multibatch_pca","perplexityToNeighbors","perplexity_to_k","scaleByNeighbors","embeddings","embed_ptrs","index_ptrs","holding_ndims","holding_weights","_ref$indices","_ref$weights","nembed","embed_arr","weight_offset","use_weights","allocator","total_ndim","total_len","index_arr","scale_by_neighbors_indices","ndims_arr","scale_by_neighbors_matrices","_deletable","scoreFeatureSet","feature_data","_ref$scale","score_feature_set","scores","checkFillness2","getfun","intifySummary","_filledCohen","_filledLfc","_filledAuc","_filledDeltaDetected","_extractBlockedStat","ScoreMarkersResults","createBlockedStatsFilled","createEffectsFilled","num_groups","_extractBlockedStat2","_ref3$summary","_ref4$summary","_ref5$summary","_ref6$summary","delta_detected","scoreMarkers","group_data","_ref7$block","_ref7$numberOfThreads","_ref7$lfcThreshold","_ref7$computeAuc","_ref7$computeMedian","computeMedian","_ref7$computeMaximum","computeMaximum","score_markers","subsetRows","xcopy","wasm_indices","row_subset","subsetColumns","column_subset","splitRows","_ref3$singleNull","singleNull","_ref3$createMultiMatr","createMultiMatrix","tkeys","consec","_tkeys","SuggestAdtQcFiltersResults","thresholds_detected","thresholds_subset_totals","suggestAdtQcFilters","_ref4$numberOfMADs","_ref4$minDetectedDrop","suggest_adt_qc_filters","_filledMaxCount","SuggestCrisprQcFiltersResults","thresholds_max_count","suggestCrisprQcFilters","_ref3$numberOfMADs","suggest_crispr_qc_filters","SuggestRnaQcFiltersResults","thresholds_sums","thresholds_proportions","suggestRnaQcFilters","_ref5$numberOfMADs","suggest_rna_qc_filters","createUint8WasmArray","wasmArraySpace","createInt32WasmArray","createBigUint64WasmArray","createFloat64WasmArray","wasmifyArray","space","chooseNumberOfThreads","threads","maximumThreads","possibleCopy","view_class","matchOptions","choices","spawnArray","checkFillness","setFilledFun","getFun","_initialize","_ref$localFile","localFile","scran_custom_nthreads","locateFile","import","loadScran","register","get_error_message","wasmMemory","Uint8WasmArray","_WasmArray","WasmArray","Int8WasmArray","_WasmArray2","Uint16WasmArray","_WasmArray3","Int16WasmArray","_WasmArray4","Int16Array","Uint32WasmArray","_WasmArray5","Int32WasmArray","_WasmArray6","BigUint64WasmArray","_WasmArray7","BigInt64WasmArray","_WasmArray8","Float32WasmArray","_WasmArray9","_super9","Float64WasmArray","_WasmArray10","_super10","stringToClass","createWasmArray","arrayClass","allocate","createWasmArrayView"],"sourceRoot":""}