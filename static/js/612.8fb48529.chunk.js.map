{"version":3,"file":"static/js/612.8fb48529.chunk.js","mappings":"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","sources":["workers/KanaDBHandler.js","workers/DownloadsDBHandler.js","workers/helpers.js","utils/utils.js","workers/scran.worker.js","workers/translate.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/compat get default export","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/make namespace object","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["var kanaDB;\nvar init = null;\n\nexport function initialize() {\n  init = new Promise((resolve) => {\n    // initialize database on worker creation\n    kanaDB = indexedDB.open(\"KanaDB\", 2);\n\n    kanaDB.onupgradeneeded = (e) => {\n      var kanaDBClient = e.target.result;\n\n      // Currently purging all existing stores when the version is updated.\n      // At some point we may add a more sophisticated upgrade mechanism.\n      try {\n        kanaDBClient.deleteObjectStore(\"analysis\");\n      } catch (e) {}\n      try {\n        kanaDBClient.deleteObjectStore(\"analysis_meta\");\n      } catch (e) {}\n      try {\n        kanaDBClient.deleteObjectStore(\"file\");\n      } catch (e) {}\n      try {\n        kanaDBClient.deleteObjectStore(\"file_meta\");\n      } catch (e) {}\n\n      kanaDBClient.createObjectStore(\"analysis\", { keyPath: \"id\" });\n      kanaDBClient.createObjectStore(\"analysis_meta\", { keyPath: \"id\" });\n      kanaDBClient.createObjectStore(\"file\", { keyPath: \"id\" });\n      kanaDBClient.createObjectStore(\"file_meta\", { keyPath: \"id\" });\n    };\n\n    // Send existing stored analyses, if available.\n    kanaDB.onsuccess = () => {\n      getRecordsResolver(resolve);\n    };\n\n    kanaDB.onerror = () => {\n      resolve(null);\n    };\n  });\n\n  return init;\n}\n\nfunction getRecordsResolver(resolve, store = null) {\n  if (store === null) {\n    store = kanaDB.result\n      .transaction([\"analysis_meta\"], \"readonly\")\n      .objectStore(\"analysis_meta\");\n  }\n\n  var allAnalysis = store.getAll();\n\n  allAnalysis.onsuccess = function () {\n    let vals = allAnalysis.result;\n    vals.forEach((x) => {\n      delete x.files;\n    }); // no need to transfer that.\n    resolve(vals);\n  };\n  allAnalysis.onerror = function () {\n    resolve(null);\n  };\n}\n\n/** Helper functions **/\nasync function loadContent(id, store) {\n  return new Promise((resolve) => {\n    let request = store.get(id);\n    request.onsuccess = function () {\n      if (request.result !== undefined) {\n        resolve(request.result);\n      } else {\n        resolve(null);\n      }\n    };\n    request.onerror = function () {\n      resolve(null);\n    };\n  });\n}\n\nfunction allOK(promises) {\n  return Promise.allSettled(promises).then((vals) => {\n    for (const x of vals) {\n      if (!x) {\n        return false;\n      }\n    }\n    return true;\n  });\n}\n\nexport async function getRecords() {\n  await init;\n  return new Promise((resolve) => {\n    getRecordsResolver(resolve);\n  });\n}\n\n/** Functions to save content **/\nexport async function saveFile(id, buffer) {\n  await init;\n  let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n  let file_store = trans.objectStore(\"file\");\n  let meta_store = trans.objectStore(\"file_meta\");\n\n  var meta = await loadContent(id, meta_store);\n  var refcount;\n  if (meta === null) {\n    refcount = 0;\n  } else {\n    refcount = meta[\"count\"];\n  }\n  refcount++;\n\n  var data_saving = new Promise((resolve) => {\n    var putrequest = file_store.put({ id: id, payload: buffer.buffer });\n    putrequest.onsuccess = function (event) {\n      resolve(true);\n    };\n    putrequest.onerror = function (event) {\n      resolve(false);\n    };\n  });\n\n  var ref_saving = new Promise((resolve) => {\n    meta.count = refcount;\n    var putrequest = meta_store.put(meta);\n    putrequest.onsuccess = function (event) {\n      resolve(true);\n    };\n    putrequest.onerror = function (event) {\n      resolve(false);\n    };\n  });\n\n  return allOK([data_saving, ref_saving]);\n}\n\nexport async function saveAnalysis(id, state, files, title) {\n  await init;\n  let trans = kanaDB.result.transaction(\n    [\"analysis\", \"analysis_meta\"],\n    \"readwrite\"\n  );\n  let analysis_store = trans.objectStore(\"analysis\");\n  let meta_store = trans.objectStore(\"analysis_meta\");\n\n  if (id == null) {\n    let already = await new Promise((resolve) =>\n      getRecordsResolver(resolve, meta_store)\n    );\n    id = String(already.length);\n  }\n\n  var data_saving = new Promise((resolve) => {\n    var putrequest = analysis_store.put({ id: id, payload: state.buffer });\n    putrequest.onsuccess = function (event) {\n      resolve(true);\n    };\n    putrequest.onerror = function (event) {\n      resolve(false);\n    };\n  });\n\n  var id_saving = new Promise((resolve) => {\n    var putrequest = meta_store.put({\n      id: id,\n      files: files,\n      time: Number(new Date()),\n      title: title,\n    });\n    putrequest.onsuccess = function (event) {\n      resolve(true);\n    };\n    putrequest.onerror = function (event) {\n      resolve(false);\n    };\n  });\n\n  if (await allOK([data_saving, id_saving])) {\n    return id;\n  } else {\n    return null;\n  }\n}\n\n/** Functions to load content **/\nexport async function loadFile(id) {\n  await init;\n  let file_store = kanaDB.result\n    .transaction([\"file\"], \"readonly\")\n    .objectStore(\"file\");\n\n  var meta = await loadContent(id, file_store);\n  return new Uint8Array(meta[\"payload\"]);\n}\n\nexport async function loadAnalysis(id) {\n  await init;\n  let analysis_store = kanaDB.result\n    .transaction([\"analysis\"], \"readonly\")\n    .objectStore(\"analysis\");\n  var meta = await loadContent(id, analysis_store);\n  return new Uint8Array(meta[\"payload\"]);\n}\n\n/** Functions to load content **/\nexport async function removeFile(id) {\n  await init;\n  let trans = kanaDB.result.transaction([\"file\", \"file_meta\"], \"readwrite\");\n  let file_store = trans.objectStore(\"file\");\n  let meta_store = trans.objectStore(\"file_meta\");\n\n  var meta = await loadContent(id, meta_store);\n  var refcount = meta[\"count\"];\n  refcount--;\n  var promises = [];\n\n  if (refcount == 0) {\n    promises.push(\n      new Promise((resolve) => {\n        let request = file_store.remove(id);\n        request.onerror = function (event) {\n          resolve(false);\n        };\n        request.onsuccess = function (event) {\n          resolve(true);\n        };\n      })\n    );\n    promises.push(\n      new Promise((resolve) => {\n        let request = meta_store.delete(id);\n        request.onerror = function (event) {\n          resolve(false);\n        };\n        request.onsuccess = function (event) {\n          resolve(true);\n        };\n      })\n    );\n  } else {\n    promises.push(\n      new Promise((resolve) => {\n        meta.count = refcount;\n        let request = meta_store.put(meta);\n        request.onsuccess = function (event) {\n          resolve(true);\n        };\n        request.onerror = function (event) {\n          resolve(false);\n        };\n      })\n    );\n  }\n\n  return allOK(promises);\n}\n\nexport async function removeAnalysis(id) {\n  await init;\n  let trans = kanaDB.result.transaction(\n    [\"analysis\", \"analysis_meta\"],\n    \"readwrite\"\n  );\n  let analysis_store = trans.objectStore(\"analysis\");\n  let meta_store = trans.objectStore(\"analysis_meta\");\n\n  var promises = [];\n\n  promises.push(\n    new Promise((resolve) => {\n      let request = analysis_store.delete(id);\n      request.onsuccess = function (event) {\n        resolve(true);\n      };\n      request.onerror = function (event) {\n        resolve(false);\n      };\n    })\n  );\n\n  // Removing all files as well.\n  var meta = await loadContent(id, meta_store);\n  for (const f of meta[\"files\"]) {\n    promises.push(removeFile(f));\n  }\n\n  promises.push(\n    new Promise((resolve) => {\n      let request = meta_store.delete(id);\n      request.onsuccess = function (event) {\n        resolve(true);\n      };\n      request.onerror = function (event) {\n        resolve(false);\n      };\n    })\n  );\n\n  return allOK(promises);\n}\n","var DownloadsDB;\nvar init = null;\n\nexport function initialize() {\n  if (init === null) {\n    init = new Promise((resolve, reject) => {\n      // initialize database on worker creation\n      DownloadsDB = indexedDB.open(\"DownloadsDB\", 3);\n\n      DownloadsDB.onupgradeneeded = (e) => {\n        var DownloadsDBClient = e.target.result;\n\n        // Currently purging all existing stores when the version is updated.\n        // At some point we may add a more sophisticated upgrade mechanism.\n        try {\n          DownloadsDBClient.deleteObjectStore(\"downloads\");\n        } catch (e) {}\n\n        DownloadsDBClient.createObjectStore(\"downloads\", { keyPath: \"url\" });\n      };\n\n      DownloadsDB.onsuccess = () => {\n        resolve(null);\n      };\n\n      DownloadsDB.onerror = () => {\n        reject(\"failed to initialize DownloadsDB\");\n      };\n    });\n  }\n\n  return init;\n}\n\nexport async function list() {\n  await init;\n  let trans = DownloadsDB.result.transaction([\"downloads\"], \"readonly\");\n  let download_store = trans.objectStore(\"downloads\");\n  return download_store.getAllKeys();\n}\n\nexport async function get(url, params = null, force = false) {\n  await init;\n\n  if (!force) {\n    let trans = DownloadsDB.result.transaction([\"downloads\"], \"readonly\");\n    let download_store = trans.objectStore(\"downloads\");\n    var data_check = new Promise((resolve) => {\n      var already = download_store.get(url);\n      already.onsuccess = function (event) {\n        if (already.result !== undefined) {\n          resolve(already.result.payload);\n        } else {\n          resolve(null);\n        }\n      };\n      already.onerror = function (event) {\n        resolve(null);\n      };\n    });\n\n    var found = await data_check;\n    if (found !== null) {\n      return found;\n    }\n  }\n\n  var req;\n  if (params == null) {\n    req = fetch(url);\n  } else {\n    req = fetch(url, params);\n  }\n\n  var res = await req;\n  if (!res.ok) {\n    throw \"failed to download '\" + url + \"' (\" + res.status + \")\";\n  }\n  var buffer = await res.arrayBuffer();\n\n  // Technically, this isn't quite right, because we need to close the read\n  // transaction before opening the write transaction; multiple queries to\n  // the same URL from different workers could cause multiple downloads if\n  // they each miss each other's read check. But oh well; the auto-commit\n  // of IDB transactions means that it's hard to do any better. (Specifically,\n  // we can't do an async fetch while the transaction is still open, because\n  // it just closes before the fetch is done.)\n  let trans = DownloadsDB.result.transaction([\"downloads\"], \"readwrite\");\n  let download_store = trans.objectStore(\"downloads\");\n  var data_saving = new Promise((resolve) => {\n    var putrequest = download_store.put({ url: url, payload: buffer });\n    putrequest.onsuccess = function (event) {\n      resolve(true);\n    };\n    putrequest.onerror = function (event) {\n      resolve(false);\n    };\n  });\n\n  let success = await data_saving;\n  if (!success) {\n    throw \"failed to download resources for '\" + url + \"'\";\n  }\n\n  return buffer;\n}\n\nexport async function remove(url) {\n  await init;\n  let trans = DownloadsDB.result.transaction([\"downloads\"], \"readwrite\");\n  let download_store = trans.objectStore(\"downloads\");\n\n  var removal = new Promise((resolve) => {\n    let request = download_store.delete(url);\n    request.onsuccess = function (event) {\n      resolve(true);\n    };\n    request.onerror = function (event) {\n      resolve(false);\n    };\n  });\n\n  return await removal;\n}\n","import * as bioc from \"bioconductor\";\n\nexport function extractBuffers(object, store) {\n  if (!object) {\n    return;\n  }\n\n  if (Array.isArray(object)) {\n    for (const element of object) {\n      extractBuffers(element, store);\n    }\n  } else if (object.constructor == Object) {\n    for (const [key, element] of Object.entries(object)) {\n      extractBuffers(element, store);\n    }\n  } else if (ArrayBuffer.isView(object)) {\n    if (!(object.buffer instanceof ArrayBuffer)) {\n      throw \"only ArrayBuffers should be in the message payload\";\n    }\n    store.push(object.buffer);\n  }\n}\n\nexport function postAttempt(step) {\n  postMessage({\n    type: `${step}_START`,\n  });\n}\n\nexport function postSuccess(step, info) {\n  if (typeof info == \"undefined\") {\n    postMessage({\n      type: `${step}_CACHE`,\n    });\n  } else {\n    var transferable = [];\n    extractBuffers(info, transferable);\n    postMessage(\n      {\n        type: `${step}_DATA`,\n        resp: info,\n      },\n      transferable\n    );\n  }\n}\n\nexport function postError(type, err, fatal) {\n  postMessage({\n    type: `${type}_ERROR`,\n    resp: {\n      reason: err.toString(),\n      fatal: fatal,\n    },\n  });\n}\n\nexport function splitMetricsByBlock(metrics, blockLevels, blockIds) {\n  var output = {};\n  var blocks = blockIds.array();\n  for (var b = 0; b < blockLevels.length; b++) {\n    let current = {};\n    for (const [key, val] of Object.entries(metrics)) {\n      current[key] = val.array().filter((x, i) => blocks[i] == b);\n    }\n    output[blockLevels[b]] = current;\n  }\n  return output;\n}\n\nexport function splitThresholdsByBlock(thresholds, blockLevels) {\n  var output = {};\n  for (const x of blockLevels) {\n    output[x] = {};\n  }\n\n  for (const [key, val] of Object.entries(thresholds)) {\n    for (var b = 0; b < blockLevels.length; b++) {\n      output[blockLevels[b]][key] = val[b];\n    }\n  }\n\n  return output;\n}\n\nexport async function fetchStepSummary(state, step) {\n  // do not send any response to UI if they have not changed\n  if (!state[step].changed) {\n    return null;\n  }\n\n  if (step === \"inputs\") {\n    let output = {};\n\n    let ngenes = {};\n    for (const a of state[step].fetchCountMatrix().available()) {\n      ngenes[a] = state[step].fetchCountMatrix().get(a).numberOfRows();\n    }\n\n    let gene_info = {};\n    for (const [k, v] of Object.entries(\n      state[step].fetchFeatureAnnotations()\n    )) {\n      let info = {};\n      for (const c of v.columnNames()) {\n        let col = v.column(c);\n        if (Array.isArray(col)) {\n          info[c] = col;\n        }\n      }\n      gene_info[k] = info;\n    }\n\n    output = {\n      num_cells: state[step].fetchCountMatrix().numberOfColumns(),\n      num_genes: ngenes,\n      genes: gene_info,\n      annotations: state[step].fetchCellAnnotations().columnNames(),\n    };\n\n    return output;\n  } else if (step === \"rna_quality_control\") {\n    let output = {};\n    var blocks = state[\"inputs\"].fetchBlockLevels();\n    if (blocks === null) {\n      blocks = [\"default\"];\n      output.data = {\n        default: {\n          sums: state[step].fetchMetrics().sums(),\n          detected: state[step].fetchMetrics().detected(),\n          proportion: state[step].fetchMetrics().subsetProportions(0),\n        },\n      };\n    } else {\n      let metrics = {\n        sums: state[step].fetchMetrics().sums(),\n        detected: state[step].fetchMetrics().detected(),\n        proportion: state[step].fetchMetrics().subsetProportions(0),\n      };\n      let bids = state[\"inputs\"].fetchBlock();\n      output.data = splitMetricsByBlock(metrics, blocks, bids);\n    }\n\n    let listed = {\n      sums: state[step].fetchFilters().thresholdsSums(),\n      detected: state[step].fetchFilters().thresholdsDetected(),\n      proportion: state[step].fetchFilters().thresholdsSubsetProportions(0),\n    };\n    output.thresholds = splitThresholdsByBlock(listed, blocks);\n\n    return output;\n  } else if (step === \"adt_quality_control\") {\n    var output = {};\n\n    var blocks = state[\"inputs\"].fetchBlockLevels();\n    if (blocks === null) {\n      blocks = [\"default\"];\n      output.data = {\n        default: {\n          sums: state[step].fetchMetrics().sums(),\n          detected: state[step].fetchMetrics().detected(),\n          proportion: state[step].fetchMetrics().subsetTotals(0),\n        },\n      };\n    } else {\n      let metrics = {\n        sums: state[step].fetchMetrics().sums(),\n        detected: state[step].fetchMetrics().detected(),\n        proportion: state[step].fetchMetrics().maxProportions(),\n      };\n      let bids = state[\"inputs\"].fetchBlock();\n      output.data = splitMetricsByBlock(metrics, blocks, bids);\n    }\n\n    let listed = {\n      detected: state[step].fetchFilters().thresholdsDetected(),\n      proportion: state[step].fetchFilters().thresholdsSubsetTotals(0),\n    };\n    output.thresholds = splitThresholdsByBlock(listed, blocks);\n\n    // We don't use sums for filtering but we do report it in the metrics,\n    // so we just add some NaNs to the thresholds for consistency.\n    for (const [k, v] of Object.entries(output.thresholds)) {\n      v.sums = NaN;\n    }\n\n    return output;\n  } else if (step === \"crispr_quality_control\") {\n    let output = {};\n    var blocks = state[\"inputs\"].fetchBlockLevels();\n    if (blocks === null) {\n      blocks = [\"default\"];\n      output.data = {\n        default: {\n          sums: state[step].fetchMetrics().sums(),\n          detected: state[step].fetchMetrics().detected(),\n          proportion: state[step].fetchMetrics().maxProportions(),\n        },\n      };\n    } else {\n      let metrics = {\n        sums: state[step].fetchMetrics().sums(),\n        detected: state[step].fetchMetrics().detected(),\n        proportion: state[step].fetchMetrics().maxProportions(),\n      };\n      let bids = state[\"inputs\"].fetchBlock();\n      output.data = splitMetricsByBlock(metrics, blocks, bids);\n    }\n\n    let listed = {\n      count: state[step].fetchFilters().thresholdsMaxCount(0),\n    };\n    output.thresholds = splitThresholdsByBlock(listed, blocks);\n\n    return output;\n  } else if (step === \"cell_filtering\") {\n    let remaining = 0,\n      discard_vec = null;\n    const discardBuff = state[step].fetchDiscards();\n    if (discardBuff) {\n      discardBuff.forEach((x) => {\n        remaining += x == 0;\n      });\n      discard_vec = discardBuff.slice();\n    } else {\n      let available = state[\"inputs\"].hasAvailable();\n      remaining = state[\"inputs\"]\n        .fetchCountMatrix(available[0])\n        .numberOfColumns();\n    }\n    let output = { retained: remaining, discard: discard_vec };\n    return output;\n  } else if (step === \"rna_normalization\") {\n    return {};\n  } else if (step === \"adt_normalization\") {\n    return {};\n  } else if (step === \"crispr_normalization\") {\n    return {};\n  } else if (step === \"feature_selection\") {\n    let output = {\n      means: state[step].fetchResults().means(),\n      vars: state[step].fetchResults().variances(),\n      fitted: state[step].fetchResults().fitted(),\n      resids: state[step].fetchResults().residuals(),\n    };\n    return output;\n  } else if (\n    step === \"rna_pca\" ||\n    step === \"adt_pca\" ||\n    step === \"crispr_pca\"\n  ) {\n    let pcs = state[step].fetchPCs();\n    var var_exp = pcs.varianceExplained();\n    var total_var = pcs.totalVariance();\n    var_exp.forEach((x, i) => {\n      var_exp[i] = x / total_var;\n    });\n    return {\n      var_exp: var_exp,\n    };\n  } else if (step === \"combine_embeddings\") {\n    return {};\n  } else if (step === \"batch_correction\") {\n    return {};\n  } else if (step === \"neighbor_index\") {\n    return {};\n  } else if (step === \"tsne\" || step === \"umap\") {\n    return await state[step].fetchResults();\n  } else if (step === \"kmeans_cluster\") {\n    return {};\n  } else if (step === \"snn_graph_cluster\") {\n    return {};\n  } else if (step === \"choose_clustering\") {\n    var clusters = state[step].fetchClusters();\n    return { clusters: clusters.slice() };\n  } else if (step === \"marker_detection\") {\n    return {};\n  } else if (step === \"cell_labelling\") {\n    return await state[step].fetchResults();\n  } else if (step === \"custom_selections\") {\n    return {};\n  } else if (step === \"feature_set_enrichment\") {\n    let collections = state.feature_set_enrichment.fetchCollectionDetails();\n    let sets = state.feature_set_enrichment.fetchSetDetails();\n    return { \n        collections: collections,\n        sets: {\n            names: sets.names,\n            descriptions: sets.descriptions,\n            sizes: sets.sizes.slice(),\n            collections: sets.collections.slice()\n        }\n    }\n  }\n}\n","import { randomColor } from \"randomcolor\";\n\nexport const getColors = (data) => {\n  const palette = {\n    1: [\"#1b9e77\"],\n    2: [\"#1b9e77\", \"#d95f02\"],\n    3: [\"#1b9e77\", \"#d95f02\", \"#7570b3\"],\n    4: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\"],\n    5: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\"],\n    6: [\"#1b9e77\", \"#d95f02\", \"#7570b3\", \"#e7298a\", \"#66a61e\", \"#e6ab02\"],\n    7: [\n      \"#1b9e77\",\n      \"#d95f02\",\n      \"#7570b3\",\n      \"#e7298a\",\n      \"#66a61e\",\n      \"#e6ab02\",\n      \"#a6761d\",\n    ],\n    8: [\n      \"#1b9e77\",\n      \"#d95f02\",\n      \"#7570b3\",\n      \"#e7298a\",\n      \"#66a61e\",\n      \"#e6ab02\",\n      \"#a6761d\",\n      \"#666666\",\n    ],\n    9: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n    ],\n    10: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n      \"#6a3d9a\",\n    ],\n    11: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n      \"#6a3d9a\",\n      \"#ffff99\",\n    ],\n    12: [\n      \"#a6cee3\",\n      \"#1f78b4\",\n      \"#b2df8a\",\n      \"#33a02c\",\n      \"#fb9a99\",\n      \"#e31a1c\",\n      \"#fdbf6f\",\n      \"#ff7f00\",\n      \"#cab2d6\",\n      \"#6a3d9a\",\n      \"#ffff99\",\n      \"#b15928\",\n    ],\n  };\n\n  let cluster_count = Math.max(...data) + 1;\n  let cluster_colors = null;\n  if (cluster_count > Object.keys(palette).length) {\n    cluster_colors = randomColor({\n      luminosity: \"dark\",\n      count: cluster_count + 1,\n    });\n  } else {\n    cluster_colors = palette[cluster_count.toString()];\n  }\n\n  return cluster_colors;\n};\n\nexport function isObject(object) {\n  return typeof object === \"object\" && Array.isArray(object) === false;\n}\n\nexport const code = \"K@𝜂a#$c3ll\";\n\n// this function is from https://developer.mozilla.org/en-US/docs/Glossary/Base64\nexport function utf8_to_b64(str) {\n  return window.btoa(unescape(encodeURIComponent(str)));\n}\n\nexport function generateUID(resource) {\n  let base = `${resource.format}`;\n  switch (resource.format) {\n    case \"SummarizedExperiment\":\n      base += `::${resource.rds.name}::${resource.rds.lastModified}::${resource.rds.size}`;\n      return utf8_to_b64(base);\n    case \"MatrixMarket\":\n      for (let key of [\"genes\", \"mtx\", \"annotations\"]) {\n        if (resource[key]) {\n          base += `::${resource[key].name}::${resource[key].lastModified}::${resource[key].size}`;\n        }\n      }\n      return utf8_to_b64(base);\n    case \"10X\":\n    case \"H5AD\":\n      base += `::${resource.h5.name}::${resource.h5.lastModified}::${resource.h5.size}`;\n      return utf8_to_b64(base);\n    case \"ExperimentHub\":\n      base += `::${resource.id}`;\n      return utf8_to_b64(base);\n    default:\n      throw Error(`format: ${resource.format} does not exist`);\n      break;\n  }\n}\n\nexport const MODALITIES = [\"RNA\", \"ADT\", \"CRISPR\"];\n\nexport const getMinMax = (arr) => {\n  var max = -Number.MAX_VALUE,\n    min = Number.MAX_VALUE;\n  arr.forEach(function (x) {\n    if (max < x) {\n      max = x;\n    }\n    if (min > x) {\n      min = x;\n    }\n  });\n  return [min, max];\n};\n\nexport const defaultColor = \"#5F6B7C\";","import * as bakana from \"bakana\";\nimport * as scran from \"scran.js\";\nimport * as gesel from \"gesel\";\n\nimport * as kana_db from \"./KanaDBHandler.js\";\nimport * as downloads from \"./DownloadsDBHandler.js\";\nimport * as hashwasm from \"hash-wasm\";\nimport JSZip from \"jszip\";\n\nimport * as translate from \"./translate.js\";\nimport {\n  extractBuffers,\n  postAttempt,\n  postSuccess,\n  postError,\n  fetchStepSummary,\n} from \"./helpers.js\";\nimport * as remotes from \"bakana-remotes\";\nimport { code } from \"../utils/utils.js\";\n/***************************************/\n\nconst default_cluster = `${code}::CLUSTERS`;\nconst default_selection = `${code}::SELECTION`;\n\nlet superstate = null;\nlet preflights = {};\nlet preflights_summary = {};\nlet cache_matrix = null;\nlet cache_anno_markers = {};\n\n// Evade CORS problems and enable caching.\nconst proxy = \"https://cors-proxy.aaron-lun.workers.dev\";\nasync function proxyAndCache(url) {\n  let buffer = await downloads.get(proxy + \"/\" + encodeURIComponent(url));\n  return new Uint8Array(buffer);\n}\n\nremotes.ExperimentHubDataset.setDownloadFun(proxyAndCache);\nbakana.availableReaders[\"ExperimentHub\"] = remotes.ExperimentHubDataset;\nbakana.CellLabellingState.setDownload(proxyAndCache);\nbakana.RnaQualityControlState.setDownload(proxyAndCache);\n\ngesel.referenceDownload(async (file, start, end) => {\n  let url = gesel.referenceBaseUrl() + \"/\" + file;\n  let full = proxy + \"/\" + encodeURIComponent(url);\n  if (start == null && end == null) {\n    let buffer = await downloads.get(full);\n    return new Response(buffer);\n  } else {\n    return fetch(full + \"?start=\" + String(start) + \"&end=\" + String(end));\n  }\n});\n\ngesel.geneDownload(async (file) => {\n  let url = gesel.geneBaseUrl() + \"/\" + file;\n  let buffer = await downloads.get(proxy + \"/\" + encodeURIComponent(url));\n  return new Response(buffer);\n});\n\nfunction createDataset(args) {\n  if (args.format == \"10X\") {\n    return new bakana.TenxHdf5Dataset(args.h5);\n  } else if (args.format == \"MatrixMarket\") {\n    return new bakana.TenxMatrixMarketDataset(\n      args.mtx,\n      args.genes || null,\n      args.annotations || null\n    );\n  } else if (args.format == \"H5AD\") {\n    return new bakana.H5adDataset(args.h5);\n  } else if (args.format == \"SummarizedExperiment\") {\n    return new bakana.SummarizedExperimentDataset(args.rds);\n  } else if (args.format == \"ExperimentHub\") {\n    return new remotes.ExperimentHubDataset(args.id);\n  } else {\n    throw new Error(\"unknown format '\" + args.format + \"'\");\n  }\n}\n\nfunction summarizeDataset(summary, args) {\n  let cells_summary = {};\n  for (const k of summary.cells.columnNames()) {\n    cells_summary[k] = bakana.summarizeArray(summary.cells.column(k));\n  }\n  let tmp_meta = {\n    cells: {\n      columns: cells_summary,\n      numberOfCells: summary.cells.numberOfRows(),\n    },\n  };\n\n  if (args.format === \"H5AD\") {\n    tmp_meta[\"all_features\"] = {};\n    let tmod_summary = {};\n    for (const k of summary[\"all_features\"].columnNames()) {\n      tmod_summary[k] = bakana.summarizeArray(\n        summary[\"all_features\"].column(k)\n      );\n    }\n    tmp_meta[\"all_features\"] = {\n      columns: tmod_summary,\n      numberOfFeatures: summary[\"all_features\"].numberOfRows(),\n    };\n  } else if (args.format === \"SummarizedExperiment\") {\n    tmp_meta[\"modality_features\"] = {};\n    if (\"modality_features\" in summary) {\n      for (const [k, v] of Object.entries(summary.modality_features)) {\n        let tmod_summary = {};\n        for (const k of v.columnNames()) {\n          // TODO: figure out a way to deal with these later\n          if (!Array.isArray(v.column(k))) {\n            continue;\n          }\n          tmod_summary[k] = bakana.summarizeArray(v.column(k));\n        }\n        tmp_meta[\"modality_features\"][k] = {\n          columns: tmod_summary,\n          numberOfFeatures: v.numberOfRows(),\n        };\n      }\n    }\n  } else {\n    tmp_meta[\"modality_features\"] = {};\n    if (\"modality_features\" in summary) {\n      for (const [k, v] of Object.entries(summary.modality_features)) {\n        let tmod_summary = {};\n        for (const k of v.columnNames()) {\n          tmod_summary[k] = bakana.summarizeArray(v.column(k));\n        }\n        tmp_meta[\"modality_features\"][k] = {\n          columns: tmod_summary,\n          numberOfFeatures: v.numberOfRows(),\n        };\n      }\n    }\n  }\n\n  if (args.format === \"H5AD\") {\n    tmp_meta[\"all_assay_names\"] = summary.all_assay_names;\n  } else if (args.format === \"SummarizedExperiment\") {\n    tmp_meta[\"modality_assay_names\"] = summary.modality_assay_names;\n  }\n  return tmp_meta;\n}\n\nbakana.setVisualizationAnimate((type, x, y, iter) => {\n  postMessage(\n    {\n      type: type + \"_iter\",\n      x: x,\n      y: y,\n      iteration: iter,\n    },\n    [x.buffer, y.buffer]\n  );\n});\n\nfunction linkKanaDb(collected) {\n  return async (type, file) => {\n    let buffer = file.buffer();\n    var md5 = await hashwasm.md5(buffer);\n    var id = type + \"_\" + file.name() + \"_\" + buffer.length + \"_\" + md5;\n    var ok = await kana_db.saveFile(id, buffer);\n    if (!ok) {\n      throw \"failed to save file '\" + id + \"' to KanaDB\";\n    }\n    collected.push(id);\n    return id;\n  };\n}\n\nbakana.setResolveLink(kana_db.loadFile);\n\nasync function unserializeAllSteps(contents) {\n  const h5path = \"serialized_out.h5\";\n\n  let output;\n  try {\n    let loader = await bakana.parseKanaFile(contents, h5path);\n    let loaded_state = await bakana.loadAnalysis(h5path, loader, {\n      finishFun: postSuccess,\n    });\n\n    if (superstate !== null) {\n      await bakana.freeAnalysis(superstate);\n    }\n    superstate = loaded_state;\n\n    output = {\n      parameters: translate.toUI(bakana.retrieveParameters(superstate)),\n      other: {\n        custom_selections: superstate.custom_selections.fetchSelections(),\n      },\n    };\n  } finally {\n    bakana.callScran((scran) => scran.removeFile(h5path));\n  }\n\n  return output;\n}\n\nasync function postStepSummary(step) {\n  try {\n    let output = await fetchStepSummary(superstate, step);\n\n    if (output) {\n      postSuccess(step, output);\n    }\n  } catch (err) {\n    postError(step, err, true);\n  }\n}\n\nfunction getMarkerStandAloneForAnnot(annotation, annotation_vec) {\n  let mds;\n  if (!(annotation in cache_anno_markers)) {\n    mds = new bakana.MarkerDetectionStandalone(\n      getMatrix(),\n      annotation_vec.ids.slice()\n    );\n\n    mds.computeAll();\n    cache_anno_markers[annotation] = mds;\n  }\n\n  return cache_anno_markers[annotation];\n}\n\nconst getAnnotation = (annotation, unfiltered = true) => {\n  let vec;\n  if (annotation.startsWith(`${code}::QC::`)) {\n    let splits = annotation.replace(`${code}::QC::`, \"\");\n    vec = superstate.cell_filtering.fetchFilteredQualityMetric(\n      splits.substring(4),\n      splits.substring(0, 3)\n    );\n    // Filter to match QC unless requested otherwise.\n  } else if (unfiltered !== false) {\n    vec = superstate.cell_filtering.applyFilter(\n      superstate.inputs.fetchCellAnnotations().column(annotation)\n    );\n  } else {\n    vec = superstate.inputs.fetchAnnotations(annotation);\n  }\n\n  return vec;\n};\n\nconst getMatrix = () => {\n  if (cache_matrix === null) {\n    cache_matrix = new scran.MultiMatrix();\n    let mapping = {\n      RNA: \"rna_normalization\",\n      ADT: \"adt_normalization\",\n      CRISPR: \"crispr_normalization\",\n    };\n    for (const [k, v] of Object.entries(mapping)) {\n      let state = superstate[v];\n      if (state.valid()) {\n        cache_matrix.add(k, state.fetchNormalizedMatrix());\n      }\n    }\n  }\n  return cache_matrix;\n};\n\n/***************************************/\n\nvar loaded;\nonmessage = function (msg) {\n  const { type, payload } = msg.data;\n\n  console.log(\"WORKER::RCV::\", type, payload);\n\n  let fatal = false;\n  if (type == \"INIT\") {\n    fatal = true;\n    let nthreads = Math.round((navigator.hardwareConcurrency * 2) / 3);\n    let back_init = bakana.initialize({ numberOfThreads: nthreads });\n\n    let state_init = back_init.then(() => {\n      return bakana.createAnalysis();\n    });\n\n    state_init.then((x) => {\n      superstate = x;\n      postMessage({\n        type: type,\n        msg: \"Success: analysis state created\",\n      });\n    });\n\n    let kana_init = kana_db.initialize();\n    kana_init\n      .then((output) => {\n        if (output !== null) {\n          postMessage({\n            type: \"KanaDB_store\",\n            resp: output,\n            msg: \"Success: KanaDB initialized\",\n          });\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n        postMessage({\n          type: \"KanaDB_ERROR\",\n          msg: \"Error: Cannot initialize KanaDB\",\n        });\n      });\n\n    let down_init = downloads.initialize();\n    down_init\n      .then((output) => {\n        postMessage({\n          type: \"DownloadsDB_store\",\n          resp: output,\n          msg: \"Success: DownloadsDB initialized\",\n        });\n      })\n      .catch((error) => {\n        console.error(error);\n        postMessage({\n          type: \"DownloadsDB_ERROR\",\n          msg: \"Error: Cannot initialize DownloadsDB\",\n        });\n      });\n\n    try {\n      let ehub_ids = remotes.ExperimentHubDataset.availableDatasets();\n      postMessage({\n        type: \"ExperimentHub_store\",\n        resp: ehub_ids,\n        msg: \"Success: ExperimentHub initialized\",\n      });\n    } catch {\n      postMessage({\n        type: \"ExperimentHub_ERROR\",\n        msg: \"Error: Cannot access datasets in ExperimentHub\",\n      });\n    }\n\n    loaded = Promise.all([back_init, kana_init, down_init, state_init]);\n\n    loaded\n      .then(() => {\n        postMessage({\n          type: type,\n          msg: \"Success: bakana initialized\",\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** RUNNING AN ANALYSIS *******************/\n  } else if (type == \"RUN\") {\n    fatal = true;\n    loaded\n      .then((x) => {\n        let inputs = payload.inputs;\n        let files = inputs.files;\n\n        if (files !== null) {\n          // Extracting existing datasets from the preflights.\n          let current = {};\n          for (const [k, v] of Object.entries(files)) {\n            if (\"uid\" in v && v.uid in preflights) {\n              current[k] = preflights[v.uid];\n            } else {\n              current[k] = createDataset(v);\n            }\n          }\n\n          // Cleaning out the preflight datasets that weren't used.\n          for (const [k, v] of Object.entries(preflights)) {\n            v.clear();\n            delete preflights[k];\n          }\n\n          files = current;\n        }\n\n        let formatted = translate.fromUI(inputs, payload.params);\n        bakana\n          .runAnalysis(superstate, files, formatted, {\n            startFun: postAttempt,\n            finishFun: postStepSummary,\n          })\n          .catch((err) => {\n            console.error(err);\n            postError(type, err, fatal);\n          });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n    /**************** LOADING EXISTING ANALYSES *******************/\n  } else if (type == \"LOAD\") {\n    fatal = true;\n    let fs = payload.inputs.files;\n\n    if (fs[Object.keys(fs)[0]].format == \"kana\") {\n      let f = fs[Object.keys(fs)[0]].file;\n      loaded\n        .then(async (x) => {\n          const reader = new FileReaderSync(); // eslint-disable-line\n          const zipbuffer = reader.readAsArrayBuffer(f);\n          const unzipped = await JSZip.loadAsync(zipbuffer);\n          let config = JSON.parse(\n            await unzipped.file(\"config.json\").async(\"string\")\n          );\n\n          let buffers = {};\n          for (const x in unzipped.files) {\n            if (x.startsWith(\"datasets/\")) {\n              let current = await unzipped.files[x].async(\"uint8array\");\n              buffers[x.split(\"/\")[1]] = current;\n            }\n          }\n\n          // This re-runs the entire analysis, so throw startFun/finishFun callbacks here.\n          superstate = await bakana.unserializeConfiguration(\n            config,\n            (id) => buffers[id],\n            {\n              state: superstate,\n              startFun: postAttempt,\n              finishFun: postStepSummary,\n            }\n          );\n\n          var transferrable = [];\n          extractBuffers(config.parameters, transferrable);\n          postMessage(\n            {\n              type: \"loadedParameters\",\n              resp: config.parameters,\n            },\n            transferrable\n          );\n        })\n        .catch((err) => {\n          console.error(err);\n          postError(type, err, fatal);\n        });\n    } else if (fs[Object.keys(fs)[0]].format == \"kanadb\") {\n      loaded\n        .then(async (x) => {\n          var id = fs[Object.keys(fs)[0]].file;\n\n          const jsonbuffer = await kana_db.loadAnalysis(id);\n          const dec = new TextDecoder();\n          let config = JSON.parse(dec.decode(jsonbuffer));\n\n          superstate = await bakana.unserializeConfiguration(\n            config,\n            kana_db.loadFile,\n            {\n              state: superstate,\n              startFun: postAttempt,\n              finishFun: postStepSummary,\n            }\n          );\n        })\n        .catch((err) => {\n          console.error(err);\n          postError(type, err, fatal);\n        });\n    }\n    /**************** SAVING EXISTING ANALYSES *******************/\n  } else if (type == \"EXPORT\") {\n    loaded\n      .then(async (x) => {\n        let buffers = [];\n        let saver = (name, format, file) => {\n          let id = String(buffers.length);\n          buffers.push(file.buffer());\n          return id;\n        };\n\n        // Returns a configuration object.\n        let collected = await bakana.serializeConfiguration(superstate, saver);\n\n        // Let's zip it all up!\n        const zipper = new JSZip();\n        zipper.file(\"config.json\", JSON.stringify(collected));\n        for (var i = 0; i < buffers.length; i++) {\n          zipper.file(\"datasets/\" + String(i), buffers[i]);\n        }\n        let zipbuffer = await zipper.generateAsync({ type: \"uint8array\" });\n        postMessage(\n          {\n            type: \"exportState\",\n            resp: zipbuffer,\n            msg: \"Success: application state exported\",\n          },\n          [zipbuffer.buffer]\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type == \"EXPORT_RDS\") {\n    loaded\n      .then(async (x) => {\n        let files = await bakana.saveSingleCellExperiment(\n          superstate,\n          \"results\",\n          {\n            forceBuffer: true,\n          }\n        );\n        let zipbuffer = await bakana.zipFiles(files);\n\n        postMessage(\n          {\n            type: \"exportRDSState\",\n            resp: zipbuffer,\n            msg: \"Success: application state exported\",\n          },\n          [zipbuffer.buffer]\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type == \"SAVEKDB\") {\n    // save analysis to inbrowser indexedDB\n    var title = payload.title;\n    loaded\n      .then(async (x) => {\n        let buffers = [];\n        let saver = async (name, format, file) => {\n          // basically linkKanaDb with an extra arg.\n          let buffer = file.buffer();\n          var md5 = await hashwasm.md5(buffer);\n          var id = type + \"_\" + file.name() + \"_\" + buffer.length + \"_\" + md5;\n          var ok = await kana_db.saveFile(id, buffer);\n          if (!ok) {\n            throw \"failed to save file '\" + id + \"' to KanaDB\";\n          }\n          buffers.push(id);\n          return id;\n        };\n\n        let collected = await bakana.serializeConfiguration(superstate, saver);\n        const enc = new TextEncoder();\n        let config = enc.encode(JSON.stringify(collected));\n        let id = await kana_db.saveAnalysis(null, config, collected, title);\n\n        if (id !== null) {\n          let recs = await kana_db.getRecords();\n          postMessage({\n            type: \"KanaDB_store\",\n            resp: recs,\n            msg: `Success: Saved analysis to browser (${id})`,\n          });\n        } else {\n          postMessage({\n            type: \"KanaDB_ERROR\",\n            msg: `Fail: Cannot save analysis to browser`,\n          });\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** KANADB EVENTS *******************/\n  } else if (type == \"REMOVEKDB\") {\n    // remove a saved analysis\n    var id = payload.id;\n    kana_db\n      .removeAnalysis(id)\n      .then(async (output) => {\n        if (output) {\n          let recs = await kana_db.getRecords();\n          postMessage({\n            type: \"KanaDB_store\",\n            resp: recs,\n            msg: `Success: Removed file from cache (${id})`,\n          });\n        } else {\n          postMessage({\n            type: \"KanaDB_ERROR\",\n            msg: `fail: cannot remove file from cache (${id})`,\n          });\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type == \"PREFLIGHT_INPUT\") {\n    loaded\n      .then(async (x) => {\n        let resp = {};\n        try {\n          // Registering the UIDs of each new dataset.\n          let current = {};\n          let summary = {};\n          for (const [k, v] of Object.entries(payload.inputs.files)) {\n            if (\"uid\" in v) {\n              if (!(v.uid in preflights)) {\n                preflights[v.uid] = createDataset(v);\n                preflights_summary[v.uid] = await preflights[v.uid].summary();\n              }\n              current[k] = preflights[v.uid];\n              summary[k] = summarizeDataset(preflights_summary[v.uid], v);\n            } else {\n              let tmp_dataset = createDataset(v);\n              current[k] = tmp_dataset;\n              summary[k] = summarizeDataset(current[k], v);\n            }\n          }\n\n          resp.status = \"SUCCESS\";\n          resp.details = summary;\n          // resp.details = await bakana.validateAnnotations(current, { cache: true });\n          // i guess iterate through each dataset and call summary\n        } catch (e) {\n          console.error(e);\n          resp.status = \"ERROR\";\n          resp.reason = e.toString();\n        }\n\n        postMessage({\n          type: \"PREFLIGHT_INPUT_DATA\",\n          resp: resp,\n          msg: \"Success: PREFLIGHT_INPUT done\",\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** VERSUS MODE *******************/\n  } else if (type == \"computeVersusClusters\") {\n    loaded\n      .then((x) => {\n        let rank_type = payload.rank_type;\n        let modality = payload.modality;\n        let annotation = payload.annotation;\n\n        let resp, raw_res;\n        if (default_cluster === annotation) {\n          raw_res = superstate.marker_detection.computeVersus(\n            payload.left,\n            payload.right\n          );\n\n          resp = bakana.formatMarkerResults(\n            raw_res.results[modality],\n            raw_res.left,\n            rank_type\n          );\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n          raw_res = mds.computeVersus(\n            annotation_vec.levels.indexOf(payload.left),\n            annotation_vec.levels.indexOf(payload.right)\n          );\n          resp = bakana.formatMarkerResults(\n            raw_res.results[modality],\n            raw_res.left,\n            rank_type\n          );\n        }\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"computeVersusClusters\",\n            resp: resp,\n            msg: \"Success: COMPUTE_VERSUS_CLUSTERS done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type == \"computeVersusSelections\") {\n    loaded\n      .then((x) => {\n        let rank_type = payload.rank_type;\n        let res = superstate.custom_selections.computeVersus(\n          payload.left,\n          payload.right\n        );\n        let resp = bakana.formatMarkerResults(\n          res[\"results\"][payload.modality],\n          payload.left,\n          rank_type\n        );\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"computeVersusSelections\",\n            resp: resp,\n            msg: \"Success: COMPUTE_VERSUS_SELECTIONS done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n\n    /**************** OTHER EVENTS FROM UI *******************/\n  } else if (type == \"getMarkersForCluster\") {\n    loaded\n      .then((x) => {\n        let cluster = payload.cluster;\n        let rank_type = payload.rank_type;\n        let modality = payload.modality;\n        let annotation = payload.annotation;\n        let resp;\n        let raw_res;\n        if (default_cluster === annotation) {\n          raw_res = superstate.marker_detection.fetchResults()[modality];\n          resp = bakana.formatMarkerResults(raw_res, cluster, rank_type);\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n\n          raw_res = mds.fetchResults()[modality];\n          // cache_anno_markers[annotation][modality];\n\n          resp = bakana.formatMarkerResults(\n            raw_res,\n            annotation_vec.levels.indexOf(cluster),\n            rank_type\n          );\n        }\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"setMarkersForCluster\",\n            resp: resp,\n            msg: \"Success: GET_MARKER_GENE done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type == \"getGeneExpression\") {\n    loaded\n      .then((x) => {\n        let row_idx = payload.gene;\n        let modality = payload.modality;\n\n        const matrix = getMatrix(modality);\n        let vec;\n        if (modality === \"RNA\") {\n          vec = matrix.get(modality).row(row_idx);\n        } else if (modality === \"ADT\") {\n          vec = matrix.get(modality).row(row_idx);\n        } else if (modality === \"CRISPR\") {\n          vec = matrix.get(modality).row(row_idx);\n        } else {\n          throw new Error(\"unknown feature type '\" + modality + \"'\");\n        }\n\n        postMessage(\n          {\n            type: \"setGeneExpression\",\n            resp: {\n              gene: row_idx,\n              expr: vec,\n            },\n            msg: \"Success: GET_GENE_EXPRESSION done\",\n          },\n          [vec.buffer]\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type == \"computeCustomMarkers\") {\n    loaded\n      .then((x) => {\n        superstate.custom_selections.addSelection(\n          payload.id,\n          payload.selection\n        );\n        postMessage({\n          type: \"computeCustomMarkers\",\n          msg: \"Success: COMPUTE_CUSTOM_MARKERS done\",\n        });\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type == \"getMarkersForSelection\") {\n    loaded\n      .then((x) => {\n        let raw_res = superstate.custom_selections.fetchResults(\n          payload.cluster\n        )[payload.modality];\n        let resp = bakana.formatMarkerResults(\n          raw_res,\n          payload.cluster,\n          payload.rank_type\n        );\n\n        var transferrable = [];\n        extractBuffers(resp, transferrable);\n        postMessage(\n          {\n            type: \"setMarkersForCustomSelection\",\n            resp: resp,\n            msg: \"Success: GET_MARKER_GENE done\",\n          },\n          transferrable\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type == \"removeCustomMarkers\") {\n    loaded\n      .then((x) => {\n        superstate.custom_selections.removeSelection(payload.id);\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type == \"animateTSNE\") {\n    loaded\n      .then(async (x) => {\n        await superstate.tsne.animate();\n        postSuccess(\"tsne\", await superstate.tsne.fetchResults());\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type == \"animateUMAP\") {\n    loaded\n      .then(async (x) => {\n        await superstate.umap.animate();\n        postSuccess(\"umap\", await superstate.umap.fetchResults());\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type == \"getAnnotation\") {\n    loaded\n      .then((x) => {\n        let annot = payload.annotation;\n        let vec, output;\n\n        vec = getAnnotation(annot, payload.unfiltered);\n\n        if (ArrayBuffer.isView(vec)) {\n          output = {\n            type: \"array\",\n            values: vec.slice(),\n          };\n        } else {\n          let uniq_vals = [];\n          let uniq_map = {};\n          let indices = new Int32Array(vec.length);\n          vec.map((x, i) => {\n            if (!(x in uniq_map)) {\n              uniq_map[x] = uniq_vals.length;\n              uniq_vals.push(x);\n            }\n            indices[i] = uniq_map[x];\n          });\n\n          output = {\n            type: \"factor\",\n            index: indices,\n            levels: uniq_vals,\n          };\n        }\n\n        let extracted = [];\n        extractBuffers(output, extracted);\n        postMessage(\n          {\n            type: \"setAnnotation\",\n            resp: {\n              annotation: annot,\n              values: output,\n            },\n            msg: \"Success: GET_ANNOTATION done\",\n          },\n          extracted\n        );\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type == \"computeFeaturesetSummary\") {\n    loaded\n      .then(async (x) => {\n        let { annotation, rank_type, cluster } = payload;\n        let index = rank_type.indexOf(\"-\");\n        let resp;\n        if (default_cluster === annotation) {\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            superstate.marker_detection.fetchResults()[\"RNA\"],\n            cluster,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetSummary\", resp);\n        } else if (default_selection === annotation) {\n          let sel_indices =\n            superstate.custom_selections.fetchSelectionIndices(cluster);\n          let num_cells = superstate.cell_filtering\n            .fetchFilteredMatrix()\n            .numberOfColumns();\n\n          let arr_sel_indices = new Uint8Array(num_cells);\n          sel_indices.map((x) => arr_sel_indices.set([1], x));\n          let annotation_vec = scran.factorize(arr_sel_indices);\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n          let anno_markers = mds.fetchResults()[\"RNA\"];\n\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            anno_markers,\n            annotation_vec.levels.indexOf(1),\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetSummary\", resp);\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n          let anno_markers = mds.fetchResults()[\"RNA\"];\n\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            anno_markers,\n            annotation_vec.levels.indexOf(cluster),\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetSummary\", resp);\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type == \"computeFeaturesetVSSummary\") {\n    loaded\n      .then(async (x) => {\n        let { annotation, rank_type, left, right } = payload;\n        let index = rank_type.indexOf(\"-\");\n        let resp;\n        if (default_cluster === annotation) {\n          let raw_res = superstate.marker_detection.computeVersus(left, right);\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            raw_res.results[\"RNA\"],\n            raw_res.left,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetVSSummary\", resp);\n        } else if (default_selection === annotation) {\n          let anno_markers = superstate.custom_selections.computeVersus(\n            left,\n            right\n          );\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            anno_markers.results[\"RNA\"],\n            0,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetVSSummary\", resp);\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n\n          let raw_res = mds.computeVersus(\n            annotation_vec.levels.indexOf(payload.left),\n            annotation_vec.levels.indexOf(payload.right)\n          );\n\n          resp = superstate.feature_set_enrichment.computeEnrichment(\n            raw_res.results[\"RNA\"],\n            raw_res.left,\n            rank_type.slice(0, index),\n            rank_type.slice(index + 1)\n          );\n          postSuccess(\"computeFeaturesetVSSummary\", resp);\n        }\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getFeatureScores\") {\n    loaded\n      .then((x) => {\n        let { index } = payload;\n\n        let resp =\n          superstate.feature_set_enrichment.computePerCellScores(index);\n        postSuccess(\"setFeatureScores\", resp);\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else if (type === \"getFeatureGeneIndices\") {\n    loaded\n      .then((x) => {\n        let { index, cluster, annotation, modality, rank_type } = payload;\n\n        let resp =\n          superstate.feature_set_enrichment.fetchFeatureSetIndices(index);\n\n        let raw_res, marker_resp;\n\n        if (default_cluster === annotation) {\n          raw_res = superstate.marker_detection.fetchResults()[modality];\n          marker_resp = bakana.formatMarkerResults(raw_res, cluster, rank_type);\n        } else if (default_selection === annotation) {\n          raw_res = superstate.custom_selections.fetchResults(payload.cluster)[\n            payload.modality\n          ];\n          marker_resp = bakana.formatMarkerResults(\n            raw_res,\n            payload.cluster,\n            payload.rank_type\n          );\n        } else {\n          let annotation_vec = scran.factorize(getAnnotation(annotation));\n          let mds = getMarkerStandAloneForAnnot(annotation, annotation_vec);\n\n          raw_res = mds.fetchResults()[modality];\n          // cache_anno_markers[annotation][modality];\n\n          marker_resp = bakana.formatMarkerResults(\n            raw_res,\n            annotation_vec.levels.indexOf(cluster),\n            rank_type\n          );\n        }\n\n        let indices = marker_resp.ordering\n          .map((x, i) => (resp.includes(x) ? i : -100))\n          .filter((x) => x !== -100);\n\n        let filtered_marker_resp = {};\n        for (const [k, v] of Object.entries(marker_resp)) {\n          filtered_marker_resp[k] = v\n            .map((x, i) => (indices.includes(i) ? x : -100))\n            .filter((x) => x !== -100);\n        }\n\n        postSuccess(\"setFeatureGeneIndices\", filtered_marker_resp);\n      })\n      .catch((err) => {\n        console.error(err);\n        postError(type, err, fatal);\n      });\n  } else {\n    postError(type, `Type: ${type} not defined`, fatal);\n  }\n};\n","/*****************************************************\n * This file is intended to be vendored into kanapi,\n * so you shouldn't add too many dependencies here.\n * The canonical version of the file is expected to\n * live at src/workers/translate.js in the kana repo.\n *****************************************************/\n\nimport * as bakana from \"bakana\";\n\nconst mappings = {\n  quality_control: {\n    use_mito_default: [\"qc\", \"qc-usemitodefault\"],\n    mito_prefix: [\"qc\", \"qc-mito\"],\n    nmads: [\"qc\", \"qc-nmads\"],\n    skip: [\"qc\", \"skip\"],\n  },\n  adt_quality_control: {\n    nmads: [\"adt_qualitycontrol\", \"nmads\"],\n    min_detected_drop: [\"adt_qualitycontrol\", \"min_detected_drop\"],\n    igg_prefix: [\"adt_qualitycontrol\", \"igg_prefix\"],\n    skip: [\"adt_qualitycontrol\", \"skip\"],\n  },\n  adt_normalization: {\n    num_pcs: [\"adt_normalization\", \"num_pcs\"],\n    num_clusters: [\"adt_normalization\", \"num_clusters\"],\n  },\n  feature_selection: {\n    span: [\"fSelection\", \"fsel-span\"],\n  },\n  pca: {\n    num_hvgs: [\"pca\", \"pca-hvg\"],\n    num_pcs: [\"pca\", \"pca-npc\"],\n  },\n  adt_pca: {\n    num_pcs: [\"adt_pca\", \"num_pcs\"],\n  },\n  combine_embeddings: {\n    weights: [\"combine_embeddings\", \"weights\"],\n  },\n  batch_correction: {\n    // method is handled by configureBatchCorrection.\n    num_neighbors: [\"batch_correction\", \"num_neighbors\"],\n  },\n  choose_clustering: {\n    method: [\"cluster\", \"clus-method\"],\n  },\n  // Neighbor indexing is handled by configureApproximateNeighbors.\n  tsne: {\n    perplexity: [\"tsne\", \"tsne-perp\"],\n    iterations: [\"tsne\", \"tsne-iter\"],\n    animate: [\"tsne\", \"animate\"],\n  },\n  umap: {\n    num_neighbors: [\"umap\", \"umap-nn\"],\n    num_epochs: [\"umap\", \"umap-epochs\"],\n    min_dist: [\"umap\", \"umap-min_dist\"],\n    animate: [\"umap\", \"animate\"],\n  },\n  kmeans_cluster: {\n    k: [\"cluster\", \"kmeans-k\"],\n  },\n  snn_graph_cluster: {\n    k: [\"cluster\", \"clus-k\"],\n    scheme: [\"cluster\", \"clus-scheme\"],\n    resolution: [\"cluster\", \"clus-res\"],\n  },\n  cell_labelling: {\n    human_references: [\"annotateCells\", \"annotateCells-human_references\"],\n    mouse_references: [\"annotateCells\", \"annotateCells-mouse_references\"],\n  },\n};\n\nexport function fromUI(inputs, params) {\n  let formatted = params;\n\n  // Replacing all 1:1 mappings.\n  let safeReplace = (step, par, value) => {\n    if (typeof value == \"undefined\") {\n      throw new Error(\n        \"cannot assign undefined parameter to '\" + step + \".\" + par + \"'\"\n      );\n    }\n    if (!(step in formatted)) {\n      throw new Error(\"unknown analysis step '\" + step + \"'\");\n    }\n    let target = formatted[step];\n    if (!(par in target)) {\n      throw new Error(\n        \"unknown analysis parameter '\" + par + \"' for step '\" + step + \"'\"\n      );\n    }\n    target[par] = value;\n  };\n\n  safeReplace(\"inputs\", \"block_factor\", inputs.batch);\n  safeReplace(\"inputs\", \"subset\", inputs.subset);\n\n  // Special handling for multi-step parameters.\n  bakana.configureBatchCorrection(formatted, params.batch_correction[\"method\"]);\n  bakana.configureApproximateNeighbors(\n    formatted,\n    params.neighbor_index[\"approximate\"]\n  );\n\n  // Simplify the combine_embeddings if we see it is all equal.\n  if (formatted.combine_embeddings.weights !== null) {\n    let uniq_weights = new Set([\n      formatted.combine_embeddings.rna_weight,\n      formatted.combine_embeddings.adt_weight,\n      formatted.combine_embeddings.crispr_weight,\n    ]);\n    if (uniq_weights.size <= 1) {\n      formatted.combine_embeddings.weights = null;\n    }\n  }\n\n  return formatted;\n}\n\nexport function toUI(params) {\n  // Setting all 1:1 mappings.\n  let safeExtract = (step, par) => {\n    if (!(step in params)) {\n      throw new Error(\n        \"no available step '\" + step + \"' in the supplied parameters\"\n      );\n    }\n\n    let curstep = params[step];\n    if (!(par in curstep)) {\n      throw new Error(\n        \"no available parameter '\" + par + \"' in step '\" + step + \"'\"\n      );\n    }\n\n    return curstep[par];\n  };\n\n  let reversed = {\n    inputs: {\n      batch: safeExtract(\"inputs\", \"sample_factor\"),\n      subset: safeExtract(\"inputs\", \"subset\"),\n    },\n  };\n\n  for (const [step, spars] of Object.entries(mappings)) {\n    for (const [par, target] of Object.entries(spars)) {\n      if (!(target[0] in reversed)) {\n        reversed[target[0]] = {};\n      }\n\n      let currev = reversed[target[0]];\n      if (target[1] in currev) {\n        throw new Error(\n          \"duplicate entry for parameter '\" + target[0] + \".\" + target[1] + \"'\"\n        );\n      }\n      currev[target[1]] = safeExtract(step, par);\n    }\n  }\n\n  // Mopping up the rest.\n  reversed.batch_correction.method = bakana.guessBatchCorrectionConfig(params);\n  reversed.ann = {\n    approximate: bakana.guessApproximateNeighborsConfig(params),\n  };\n\n  // Converting it into a dictionary for easier consumption by the UI.\n  if (reversed.combine_embeddings.weights === null) {\n    reversed.combine_embeddings.weights = {};\n  }\n\n  return reversed;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [319,551,776], function() { return __webpack_require__(9612); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"319\":\"0c72d2be\",\"484\":\"3312738a\",\"551\":\"8e5084b5\",\"776\":\"06e8cffa\",\"909\":\"3740d45d\",\"933\":\"82a19830\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","__webpack_require__.b = self.location + \"/../../../\";\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t612: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkkana\"] = self[\"webpackChunkkana\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn Promise.all([319,551,776].map(__webpack_require__.e, __webpack_require__)).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["kanaDB","DownloadsDB","init","getRecordsResolver","resolve","store","arguments","length","undefined","result","transaction","objectStore","allAnalysis","getAll","onsuccess","vals","forEach","x","files","onerror","loadContent","_x","_x2","_loadContent","apply","_asyncToGenerator","_regeneratorRuntime","mark","_callee","id","wrap","_context","prev","next","abrupt","Promise","request","get","stop","allOK","promises","allSettled","then","_step","_iterator","_createForOfIteratorHelper","s","n","done","value","err","e","f","getRecords","_getRecords","_callee2","_context2","saveFile","_x3","_x4","_saveFile","_callee3","buffer","trans","file_store","meta_store","meta","refcount","data_saving","ref_saving","_context3","sent","putrequest","put","payload","event","count","saveAnalysis","_x5","_x6","_x7","_x8","_saveAnalysis","_callee4","state","title","analysis_store","already","id_saving","_context4","String","time","Number","Date","loadFile","_x9","_loadFile","_callee5","_context5","Uint8Array","loadAnalysis","_x10","_loadAnalysis","_callee6","_context6","removeFile","_x11","_removeFile","_callee7","_context7","push","remove","delete","_removeAnalysis","_callee8","_iterator2","_step2","_context8","_get","url","params","force","_trans","_download_store","data_check","found","req","res","download_store","_args2","fetch","ok","status","arrayBuffer","extractBuffers","object","Array","isArray","constructor","Object","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","ArrayBuffer","isView","postAttempt","step","postMessage","type","concat","postSuccess","info","transferable","resp","postError","fatal","reason","toString","splitMetricsByBlock","metrics","blockLevels","blockIds","output","blocks","array","b","current","_i2","_Object$entries2","_Object$entries2$_i","key","val","filter","i","splitThresholdsByBlock","thresholds","_i3","_Object$entries3","_Object$entries3$_i","fetchStepSummary","_fetchStepSummary","_output","ngenes","_iterator3","_step3","a","gene_info","_i4","_Object$entries4","_Object$entries4$_i","k","v","_iterator4","_step4","c","col","_output2","bids","listed","_metrics","_bids","_listed","_i5","_Object$entries5","_Object$entries5$_i","_output3","_metrics2","_bids2","_listed2","remaining","discard_vec","discardBuff","available","_output4","_output5","pcs","var_exp","total_var","clusters","collections","sets","changed","fetchCountMatrix","numberOfRows","fetchFeatureAnnotations","columnNames","column","num_cells","numberOfColumns","num_genes","genes","annotations","fetchCellAnnotations","fetchBlockLevels","data","default","sums","fetchMetrics","detected","proportion","subsetProportions","fetchBlock","fetchFilters","thresholdsSums","thresholdsDetected","thresholdsSubsetProportions","subsetTotals","maxProportions","thresholdsSubsetTotals","NaN","thresholdsMaxCount","fetchDiscards","slice","hasAvailable","retained","discard","means","fetchResults","vars","variances","fitted","resids","residuals","fetchPCs","varianceExplained","totalVariance","fetchClusters","feature_set_enrichment","fetchCollectionDetails","fetchSetDetails","names","descriptions","sizes","code","default_cluster","default_selection","superstate","preflights","preflights_summary","cache_matrix","cache_anno_markers","proxy","proxyAndCache","_proxyAndCache","_callee16","_context16","downloads","encodeURIComponent","createDataset","args","format","bakana","h5","mtx","rds","remotes","Error","summarizeDataset","summary","cells_summary","cells","tmp_meta","columns","numberOfCells","tmod_summary","numberOfFeatures","modality_features","all_assay_names","modality_assay_names","postStepSummary","_postStepSummary","_callee18","_context18","t0","getMarkerStandAloneForAnnot","annotation","annotation_vec","mds","getMatrix","ids","computeAll","gesel","_ref","file","start","end","full","Response","_ref2","y","iter","iteration","kana_db","loaded","getAnnotation","vec","unfiltered","startsWith","splits","replace","cell_filtering","fetchFilteredQualityMetric","substring","applyFilter","inputs","fetchAnnotations","scran","RNA","ADT","CRISPR","valid","add","fetchNormalizedMatrix","onmessage","msg","_msg$data","console","log","nthreads","Math","round","navigator","hardwareConcurrency","back_init","numberOfThreads","state_init","kana_init","indexedDB","open","onupgradeneeded","kanaDBClient","target","deleteObjectStore","createObjectStore","keyPath","catch","error","down_init","reject","DownloadsDBClient","ehub_ids","_unused","all","uid","clear","formatted","safeReplace","par","batch","subset","batch_correction","neighbor_index","combine_embeddings","weights","Set","rna_weight","adt_weight","crispr_weight","size","translate","startFun","finishFun","fs","keys","_ref4","reader","zipbuffer","unzipped","config","buffers","transferrable","FileReaderSync","readAsArrayBuffer","JSZip","JSON","async","t1","parse","call","t2","t3","split","parameters","_ref5","jsonbuffer","dec","TextDecoder","decode","_x12","_ref6","saver","collected","zipper","name","stringify","generateAsync","_x13","_ref7","forceBuffer","_x14","_ref8","_callee9","enc","recs","_context9","_ref9","md5","hashwasm","_x16","_x17","_x18","TextEncoder","encode","_x15","_ref10","_callee10","_context10","_x19","_ref11","_callee11","_i6","_Object$entries6","_Object$entries6$_i","tmp_dataset","_context11","details","_x20","raw_res","rank_type","modality","marker_detection","computeVersus","left","right","results","levels","indexOf","custom_selections","cluster","row_idx","gene","matrix","row","expr","addSelection","selection","removeSelection","_ref12","_callee12","_context12","tsne","animate","_x21","_ref13","_callee13","_context13","umap","_x22","annot","values","uniq_vals","uniq_map","indices","Int32Array","map","index","extracted","_ref14","_callee14","sel_indices","arr_sel_indices","anno_markers","_annotation_vec","_mds","_anno_markers","_context14","computeEnrichment","fetchSelectionIndices","fetchFilteredMatrix","set","_x23","_ref15","_callee15","_raw_res","_context15","_x24","computePerCellScores","marker_resp","fetchFeatureSetIndices","ordering","includes","filtered_marker_resp","_i7","_Object$entries7","_Object$entries7$_i","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","splice","r","getter","__esModule","d","definition","o","defineProperty","enumerable","chunkId","reduce","u","miniCssF","g","globalThis","this","Function","window","obj","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","children","p","self","location","installedChunks","importScripts","chunkLoadingGlobal","parentChunkLoadingFunction","bind","moreModules","runtime","pop"],"sourceRoot":""}