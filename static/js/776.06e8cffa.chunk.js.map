{"version":3,"file":"static/js/776.06e8cffa.chunk.js","mappings":"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","sources":["../node_modules/hash-wasm/dist/index.esm.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/utils/general.js","../node_modules/bakana-remotes/node_modules/bakana/browser/readers/abstract/file.js","../node_modules/bakana-remotes/node_modules/bakana/browser/readers/utils/abstract/stream.js","../node_modules/bakana-remotes/node_modules/bakana/browser/readers/utils/extract.js","../node_modules/bakana-remotes/node_modules/bakana/browser/readers/ArtifactDB-abstract.js","../node_modules/bakana-remotes/node_modules/bakana/browser/readers/ArtifactDB-zipped.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/inputs.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/rna_quality_control.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/adt_quality_control.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/crispr_quality_control.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/cell_filtering.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/utils/normalization.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/rna_normalization.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/adt_normalization.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/crispr_normalization.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/feature_selection.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/rna_pca.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/adt_pca.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/crispr_pca.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/combine_embeddings.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/batch_correction.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/neighbor_index.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/snn_graph_cluster.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/utils/markers.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/kmeans_cluster.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/choose_clustering.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/marker_detection.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/feature_set_enrichment.js","../node_modules/bakana-remotes/node_modules/bakana/browser/steps/cell_labelling.js","../node_modules/bakana-remotes/node_modules/bakana/browser/dump/DataFrame.js","../node_modules/bakana-remotes/src/utils.js","../node_modules/bakana-remotes/src/ExperimentHub.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/artifactdb/src/HttpError.js","../node_modules/bakana/browser/steps/custom_selections.js","../node_modules/bakana/browser/steps/feature_set_enrichment.js","../node_modules/bakana/browser/defaults.js","../node_modules/bakana/browser/analysis.js","../node_modules/bakana/browser/serialize.js","../node_modules/bakana/browser/dump/DataFrame.js","../node_modules/bakana/browser/dump/assays.js","../node_modules/bakana/browser/dump/markers.js","../node_modules/bakana/browser/dump/reducedDimensions.js","../node_modules/bakana/browser/dump/List.js","../node_modules/bakana/browser/dump/SingleCellExperiment.js","../node_modules/bakana/browser/dump/abstract/dump.js","../node_modules/bakana/browser/dump/index.js","../node_modules/bakana/browser/index.js","../node_modules/bakana/browser/readers/h5ad.js","../node_modules/bakana/browser/readers/se.js","../node_modules/bakana/browser/readers/index.js","../node_modules/bakana/browser/steps/inputs.js","../node_modules/bakana/browser/steps/utils/viz_parent.js","../node_modules/bakana/browser/version.js","../node_modules/pako/dist/pako.esm.mjs","../node_modules/scran.js/browser/abstract/file.js","../node_modules/scran.js/browser/file.js","../node_modules/scran.js/browser/hdf5.js","../node_modules/scran.js/browser/realizeFile.js","../node_modules/scran.js/browser/testFeatureSetEnrichment.js","../node_modules/scran.js/browser/writeSparseMatrixToHdf5.js"],"sourcesContent":["/*!\n * hash-wasm (https://www.npmjs.com/package/hash-wasm)\n * (c) Dani Biro\n * @license MIT\n */\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n\r\nfunction __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\n\nclass Mutex {\n    constructor() {\n        this.mutex = Promise.resolve();\n    }\n    lock() {\n        let begin = () => { };\n        this.mutex = this.mutex.then(() => new Promise(begin));\n        return new Promise((res) => {\n            begin = res;\n        });\n    }\n    dispatch(fn) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const unlock = yield this.lock();\n            try {\n                return yield Promise.resolve(fn());\n            }\n            finally {\n                unlock();\n            }\n        });\n    }\n}\n\n/* eslint-disable import/prefer-default-export */\n/* eslint-disable no-bitwise */\nvar _a;\nfunction getGlobal() {\n    if (typeof globalThis !== 'undefined')\n        return globalThis;\n    // eslint-disable-next-line no-restricted-globals\n    if (typeof self !== 'undefined')\n        return self;\n    if (typeof window !== 'undefined')\n        return window;\n    return global;\n}\nconst globalObject = getGlobal();\nconst nodeBuffer = (_a = globalObject.Buffer) !== null && _a !== void 0 ? _a : null;\nconst textEncoder = globalObject.TextEncoder ? new globalObject.TextEncoder() : null;\nfunction intArrayToString(arr, len) {\n    return String.fromCharCode(...arr.subarray(0, len));\n}\nfunction hexCharCodesToInt(a, b) {\n    return (((a & 0xF) + ((a >> 6) | ((a >> 3) & 0x8))) << 4) | ((b & 0xF) + ((b >> 6) | ((b >> 3) & 0x8)));\n}\nfunction writeHexToUInt8(buf, str) {\n    const size = str.length >> 1;\n    for (let i = 0; i < size; i++) {\n        const index = i << 1;\n        buf[i] = hexCharCodesToInt(str.charCodeAt(index), str.charCodeAt(index + 1));\n    }\n}\nfunction hexStringEqualsUInt8(str, buf) {\n    if (str.length !== buf.length * 2) {\n        return false;\n    }\n    for (let i = 0; i < buf.length; i++) {\n        const strIndex = i << 1;\n        if (buf[i] !== hexCharCodesToInt(str.charCodeAt(strIndex), str.charCodeAt(strIndex + 1))) {\n            return false;\n        }\n    }\n    return true;\n}\nconst alpha = 'a'.charCodeAt(0) - 10;\nconst digit = '0'.charCodeAt(0);\nfunction getDigestHex(tmpBuffer, input, hashLength) {\n    let p = 0;\n    /* eslint-disable no-plusplus */\n    for (let i = 0; i < hashLength; i++) {\n        let nibble = input[i] >>> 4;\n        tmpBuffer[p++] = nibble > 9 ? nibble + alpha : nibble + digit;\n        nibble = input[i] & 0xF;\n        tmpBuffer[p++] = nibble > 9 ? nibble + alpha : nibble + digit;\n    }\n    /* eslint-enable no-plusplus */\n    return String.fromCharCode.apply(null, tmpBuffer);\n}\nconst getUInt8Buffer = nodeBuffer !== null\n    ? (data) => {\n        if (typeof data === 'string') {\n            const buf = nodeBuffer.from(data, 'utf8');\n            return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);\n        }\n        if (nodeBuffer.isBuffer(data)) {\n            return new Uint8Array(data.buffer, data.byteOffset, data.length);\n        }\n        if (ArrayBuffer.isView(data)) {\n            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        }\n        throw new Error('Invalid data type!');\n    }\n    : (data) => {\n        if (typeof data === 'string') {\n            return textEncoder.encode(data);\n        }\n        if (ArrayBuffer.isView(data)) {\n            return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n        }\n        throw new Error('Invalid data type!');\n    };\nconst base64Chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst base64Lookup = new Uint8Array(256);\nfor (let i = 0; i < base64Chars.length; i++) {\n    base64Lookup[base64Chars.charCodeAt(i)] = i;\n}\nfunction encodeBase64(data, pad = true) {\n    const len = data.length;\n    const extraBytes = len % 3;\n    const parts = [];\n    const len2 = len - extraBytes;\n    for (let i = 0; i < len2; i += 3) {\n        const tmp = ((data[i] << 16) & 0xFF0000)\n            + ((data[i + 1] << 8) & 0xFF00)\n            + (data[i + 2] & 0xFF);\n        const triplet = base64Chars.charAt((tmp >> 18) & 0x3F)\n            + base64Chars.charAt((tmp >> 12) & 0x3F)\n            + base64Chars.charAt((tmp >> 6) & 0x3F)\n            + base64Chars.charAt(tmp & 0x3F);\n        parts.push(triplet);\n    }\n    if (extraBytes === 1) {\n        const tmp = data[len - 1];\n        const a = base64Chars.charAt(tmp >> 2);\n        const b = base64Chars.charAt((tmp << 4) & 0x3F);\n        parts.push(`${a}${b}`);\n        if (pad) {\n            parts.push('==');\n        }\n    }\n    else if (extraBytes === 2) {\n        const tmp = (data[len - 2] << 8) + data[len - 1];\n        const a = base64Chars.charAt(tmp >> 10);\n        const b = base64Chars.charAt((tmp >> 4) & 0x3F);\n        const c = base64Chars.charAt((tmp << 2) & 0x3F);\n        parts.push(`${a}${b}${c}`);\n        if (pad) {\n            parts.push('=');\n        }\n    }\n    return parts.join('');\n}\nfunction getDecodeBase64Length(data) {\n    let bufferLength = Math.floor(data.length * 0.75);\n    const len = data.length;\n    if (data[len - 1] === '=') {\n        bufferLength -= 1;\n        if (data[len - 2] === '=') {\n            bufferLength -= 1;\n        }\n    }\n    return bufferLength;\n}\nfunction decodeBase64(data) {\n    const bufferLength = getDecodeBase64Length(data);\n    const len = data.length;\n    const bytes = new Uint8Array(bufferLength);\n    let p = 0;\n    for (let i = 0; i < len; i += 4) {\n        const encoded1 = base64Lookup[data.charCodeAt(i)];\n        const encoded2 = base64Lookup[data.charCodeAt(i + 1)];\n        const encoded3 = base64Lookup[data.charCodeAt(i + 2)];\n        const encoded4 = base64Lookup[data.charCodeAt(i + 3)];\n        bytes[p] = (encoded1 << 2) | (encoded2 >> 4);\n        p += 1;\n        bytes[p] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        p += 1;\n        bytes[p] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n        p += 1;\n    }\n    return bytes;\n}\n\nconst MAX_HEAP = 16 * 1024;\nconst WASM_FUNC_HASH_LENGTH = 4;\nconst wasmMutex = new Mutex();\nconst wasmModuleCache = new Map();\nfunction WASMInterface(binary, hashLength) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let wasmInstance = null;\n        let memoryView = null;\n        let initialized = false;\n        if (typeof WebAssembly === 'undefined') {\n            throw new Error('WebAssembly is not supported in this environment!');\n        }\n        const writeMemory = (data, offset = 0) => {\n            memoryView.set(data, offset);\n        };\n        const getMemory = () => memoryView;\n        const getExports = () => wasmInstance.exports;\n        const setMemorySize = (totalSize) => {\n            wasmInstance.exports.Hash_SetMemorySize(totalSize);\n            const arrayOffset = wasmInstance.exports.Hash_GetBuffer();\n            const memoryBuffer = wasmInstance.exports.memory.buffer;\n            memoryView = new Uint8Array(memoryBuffer, arrayOffset, totalSize);\n        };\n        const getStateSize = () => {\n            const view = new DataView(wasmInstance.exports.memory.buffer);\n            const stateSize = view.getUint32(wasmInstance.exports.STATE_SIZE, true);\n            return stateSize;\n        };\n        const loadWASMPromise = wasmMutex.dispatch(() => __awaiter(this, void 0, void 0, function* () {\n            if (!wasmModuleCache.has(binary.name)) {\n                const asm = decodeBase64(binary.data);\n                const promise = WebAssembly.compile(asm);\n                wasmModuleCache.set(binary.name, promise);\n            }\n            const module = yield wasmModuleCache.get(binary.name);\n            wasmInstance = yield WebAssembly.instantiate(module, {\n            // env: {\n            //   emscripten_memcpy_big: (dest, src, num) => {\n            //     const memoryBuffer = wasmInstance.exports.memory.buffer;\n            //     const memView = new Uint8Array(memoryBuffer, 0);\n            //     memView.set(memView.subarray(src, src + num), dest);\n            //   },\n            //   print_memory: (offset, len) => {\n            //     const memoryBuffer = wasmInstance.exports.memory.buffer;\n            //     const memView = new Uint8Array(memoryBuffer, 0);\n            //     console.log('print_int32', memView.subarray(offset, offset + len));\n            //   },\n            // },\n            });\n            // wasmInstance.exports._start();\n        }));\n        const setupInterface = () => __awaiter(this, void 0, void 0, function* () {\n            if (!wasmInstance) {\n                yield loadWASMPromise;\n            }\n            const arrayOffset = wasmInstance.exports.Hash_GetBuffer();\n            const memoryBuffer = wasmInstance.exports.memory.buffer;\n            memoryView = new Uint8Array(memoryBuffer, arrayOffset, MAX_HEAP);\n        });\n        const init = (bits = null) => {\n            initialized = true;\n            wasmInstance.exports.Hash_Init(bits);\n        };\n        const updateUInt8Array = (data) => {\n            let read = 0;\n            while (read < data.length) {\n                const chunk = data.subarray(read, read + MAX_HEAP);\n                read += chunk.length;\n                memoryView.set(chunk);\n                wasmInstance.exports.Hash_Update(chunk.length);\n            }\n        };\n        const update = (data) => {\n            if (!initialized) {\n                throw new Error('update() called before init()');\n            }\n            const Uint8Buffer = getUInt8Buffer(data);\n            updateUInt8Array(Uint8Buffer);\n        };\n        const digestChars = new Uint8Array(hashLength * 2);\n        const digest = (outputType, padding = null) => {\n            if (!initialized) {\n                throw new Error('digest() called before init()');\n            }\n            initialized = false;\n            wasmInstance.exports.Hash_Final(padding);\n            if (outputType === 'binary') {\n                // the data is copied to allow GC of the original memory object\n                return memoryView.slice(0, hashLength);\n            }\n            return getDigestHex(digestChars, memoryView, hashLength);\n        };\n        const save = () => {\n            if (!initialized) {\n                throw new Error('save() can only be called after init() and before digest()');\n            }\n            const stateOffset = wasmInstance.exports.Hash_GetState();\n            const stateLength = getStateSize();\n            const memoryBuffer = wasmInstance.exports.memory.buffer;\n            const internalState = new Uint8Array(memoryBuffer, stateOffset, stateLength);\n            // prefix is 4 bytes from SHA1 hash of the WASM binary\n            // it is used to detect incompatible internal states between different versions of hash-wasm\n            const prefixedState = new Uint8Array(WASM_FUNC_HASH_LENGTH + stateLength);\n            writeHexToUInt8(prefixedState, binary.hash);\n            prefixedState.set(internalState, WASM_FUNC_HASH_LENGTH);\n            return prefixedState;\n        };\n        const load = (state) => {\n            if (!(state instanceof Uint8Array)) {\n                throw new Error('load() expects an Uint8Array generated by save()');\n            }\n            const stateOffset = wasmInstance.exports.Hash_GetState();\n            const stateLength = getStateSize();\n            const overallLength = WASM_FUNC_HASH_LENGTH + stateLength;\n            const memoryBuffer = wasmInstance.exports.memory.buffer;\n            if (state.length !== overallLength) {\n                throw new Error(`Bad state length (expected ${overallLength} bytes, got ${state.length})`);\n            }\n            if (!hexStringEqualsUInt8(binary.hash, state.subarray(0, WASM_FUNC_HASH_LENGTH))) {\n                throw new Error('This state was written by an incompatible hash implementation');\n            }\n            const internalState = state.subarray(WASM_FUNC_HASH_LENGTH);\n            new Uint8Array(memoryBuffer, stateOffset, stateLength).set(internalState);\n            initialized = true;\n        };\n        const isDataShort = (data) => {\n            if (typeof data === 'string') {\n                // worst case is 4 bytes / char\n                return data.length < MAX_HEAP / 4;\n            }\n            return data.byteLength < MAX_HEAP;\n        };\n        let canSimplify = isDataShort;\n        switch (binary.name) {\n            case 'argon2':\n            case 'scrypt':\n                canSimplify = () => true;\n                break;\n            case 'blake2b':\n            case 'blake2s':\n                // if there is a key at blake2 then cannot simplify\n                canSimplify = (data, initParam) => initParam <= 512 && isDataShort(data);\n                break;\n            case 'blake3':\n                // if there is a key at blake3 then cannot simplify\n                canSimplify = (data, initParam) => initParam === 0 && isDataShort(data);\n                break;\n            case 'xxhash64': // cannot simplify\n            case 'xxhash3':\n            case 'xxhash128':\n                canSimplify = () => false;\n                break;\n        }\n        // shorthand for (init + update + digest) for better performance\n        const calculate = (data, initParam = null, digestParam = null) => {\n            if (!canSimplify(data, initParam)) {\n                init(initParam);\n                update(data);\n                return digest('hex', digestParam);\n            }\n            const buffer = getUInt8Buffer(data);\n            memoryView.set(buffer);\n            wasmInstance.exports.Hash_Calculate(buffer.length, initParam, digestParam);\n            return getDigestHex(digestChars, memoryView, hashLength);\n        };\n        yield setupInterface();\n        return {\n            getMemory,\n            writeMemory,\n            getExports,\n            setMemorySize,\n            init,\n            update,\n            digest,\n            save,\n            load,\n            calculate,\n            hashLength,\n        };\n    });\n}\n\nvar name$k = \"adler32\";\nvar data$k = \"AGFzbQEAAAABDANgAAF/YAAAYAF/AAMHBgABAgEAAgQFAXABAQEFBAEBAgIGDgJ/AUGAiQULfwBBgAgLB3AIBm1lbW9yeQIADkhhc2hfR2V0QnVmZmVyAAAJSGFzaF9Jbml0AAELSGFzaF9VcGRhdGUAAgpIYXNoX0ZpbmFsAAMNSGFzaF9HZXRTdGF0ZQAEDkhhc2hfQ2FsY3VsYXRlAAUKU1RBVEVfU0laRQMBCoAIBgUAQYAJCwoAQQBBATYChAgL9gYBBn9BACgChAgiAUH//wNxIQIgAUEQdiEDAkACQCAAQQFHDQAgAkEALQCACWoiAUGPgHxqIAEgAUHw/wNLGyIBIANqIgRBEHQiBUGAgDxqIAUgBEHw/wNLGyABciEBDAELAkACQAJAAkACQCAAQRBJDQBBgAkhBiAAQbArSQ0BQYAJIQYDQEEAIQUDQCAGIAVqIgEoAgAiBEH/AXEgAmoiAiADaiACIARBCHZB/wFxaiICaiACIARBEHZB/wFxaiICaiACIARBGHZqIgJqIAIgAUEEaigCACIEQf8BcWoiAmogAiAEQQh2Qf8BcWoiAmogAiAEQRB2Qf8BcWoiAmogAiAEQRh2aiICaiACIAFBCGooAgAiBEH/AXFqIgJqIAIgBEEIdkH/AXFqIgJqIAIgBEEQdkH/AXFqIgJqIAIgBEEYdmoiBGogBCABQQxqKAIAIgFB/wFxaiIEaiAEIAFBCHZB/wFxaiIEaiAEIAFBEHZB/wFxaiIEaiAEIAFBGHZqIgJqIQMgBUEQaiIFQbArRw0ACyADQfH/A3AhAyACQfH/A3AhAiAGQbAraiEGIABB0FRqIgBBrytLDQALIABFDQQgAEEPSw0BDAILAkAgAEUNAEEAIQEDQCACIAFBgAlqLQAAaiICIANqIQMgACABQQFqIgFHDQALCyACQY+AfGogAiACQfD/A0sbIANB8f8DcEEQdHIhAQwECwNAIAYoAgAiAUH/AXEgAmoiBCADaiAEIAFBCHZB/wFxaiIEaiAEIAFBEHZB/wFxaiIEaiAEIAFBGHZqIgRqIAQgBkEEaigCACIBQf8BcWoiBGogBCABQQh2Qf8BcWoiBGogBCABQRB2Qf8BcWoiBGogBCABQRh2aiIEaiAEIAZBCGooAgAiAUH/AXFqIgRqIAQgAUEIdkH/AXFqIgRqIAQgAUEQdkH/AXFqIgRqIAQgAUEYdmoiBGogBCAGQQxqKAIAIgFB/wFxaiIEaiAEIAFBCHZB/wFxaiIEaiAEIAFBEHZB/wFxaiIEaiAEIAFBGHZqIgJqIQMgBkEQaiEGIABBcGoiAEEPSw0ACyAARQ0BCwNAIAIgBi0AAGoiAiADaiEDIAZBAWohBiAAQX9qIgANAAsLIANB8f8DcCEDIAJB8f8DcCECCyACIANBEHRyIQELQQAgATYChAgLMgEBf0EAQQAoAoQIIgBBGHQgAEEIdEGAgPwHcXIgAEEIdkGA/gNxIABBGHZycjYCgAkLBQBBhAgLPABBAEEBNgKECCAAEAJBAEEAKAKECCIAQRh0IABBCHRBgID8B3FyIABBCHZBgP4DcSAAQRh2cnI2AoAJCwsVAgBBgAgLBAQAAAAAQYQICwQBAAAA\";\nvar hash$k = \"321174b4\";\nvar wasmJson$k = {\n\tname: name$k,\n\tdata: data$k,\n\thash: hash$k\n};\n\nfunction lockedCreate(mutex, binary, hashLength) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const unlock = yield mutex.lock();\n        const wasm = yield WASMInterface(binary, hashLength);\n        unlock();\n        return wasm;\n    });\n}\n\nconst mutex$l = new Mutex();\nlet wasmCache$l = null;\n/**\n * Calculates Adler-32 hash. The resulting 32-bit hash is stored in\n * network byte order (big-endian).\n *\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction adler32(data) {\n    if (wasmCache$l === null) {\n        return lockedCreate(mutex$l, wasmJson$k, 4)\n            .then((wasm) => {\n            wasmCache$l = wasm;\n            return wasmCache$l.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache$l.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new Adler-32 hash instance\n */\nfunction createAdler32() {\n    return WASMInterface(wasmJson$k, 4).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 4,\n            digestSize: 4,\n        };\n        return obj;\n    });\n}\n\nvar name$j = \"blake2b\";\nvar data$j = \"\";\nvar hash$j = \"68afc9cf\";\nvar wasmJson$j = {\n\tname: name$j,\n\tdata: data$j,\n\thash: hash$j\n};\n\nconst mutex$k = new Mutex();\nlet wasmCache$k = null;\nfunction validateBits$4(bits) {\n    if (!Number.isInteger(bits) || bits < 8 || bits > 512 || bits % 8 !== 0) {\n        return new Error('Invalid variant! Valid values: 8, 16, ..., 512');\n    }\n    return null;\n}\nfunction getInitParam$1(outputBits, keyBits) {\n    // eslint-disable-next-line no-bitwise\n    return outputBits | (keyBits << 16);\n}\n/**\n * Calculates BLAKE2b hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param bits Number of output bits, which has to be a number\n *             divisible by 8, between 8 and 512. Defaults to 512.\n * @param key Optional key (string, Buffer or TypedArray). Maximum length is 64 bytes.\n * @returns Computed hash as a hexadecimal string\n */\nfunction blake2b(data, bits = 512, key = null) {\n    if (validateBits$4(bits)) {\n        return Promise.reject(validateBits$4(bits));\n    }\n    let keyBuffer = null;\n    let initParam = bits;\n    if (key !== null) {\n        keyBuffer = getUInt8Buffer(key);\n        if (keyBuffer.length > 64) {\n            return Promise.reject(new Error('Max key length is 64 bytes'));\n        }\n        initParam = getInitParam$1(bits, keyBuffer.length);\n    }\n    const hashLength = bits / 8;\n    if (wasmCache$k === null || wasmCache$k.hashLength !== hashLength) {\n        return lockedCreate(mutex$k, wasmJson$j, hashLength)\n            .then((wasm) => {\n            wasmCache$k = wasm;\n            if (initParam > 512) {\n                wasmCache$k.writeMemory(keyBuffer);\n            }\n            return wasmCache$k.calculate(data, initParam);\n        });\n    }\n    try {\n        if (initParam > 512) {\n            wasmCache$k.writeMemory(keyBuffer);\n        }\n        const hash = wasmCache$k.calculate(data, initParam);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new BLAKE2b hash instance\n * @param bits Number of output bits, which has to be a number\n *             divisible by 8, between 8 and 512. Defaults to 512.\n * @param key Optional key (string, Buffer or TypedArray). Maximum length is 64 bytes.\n */\nfunction createBLAKE2b(bits = 512, key = null) {\n    if (validateBits$4(bits)) {\n        return Promise.reject(validateBits$4(bits));\n    }\n    let keyBuffer = null;\n    let initParam = bits;\n    if (key !== null) {\n        keyBuffer = getUInt8Buffer(key);\n        if (keyBuffer.length > 64) {\n            return Promise.reject(new Error('Max key length is 64 bytes'));\n        }\n        initParam = getInitParam$1(bits, keyBuffer.length);\n    }\n    const outputSize = bits / 8;\n    return WASMInterface(wasmJson$j, outputSize).then((wasm) => {\n        if (initParam > 512) {\n            wasm.writeMemory(keyBuffer);\n        }\n        wasm.init(initParam);\n        const obj = {\n            init: initParam > 512\n                ? () => {\n                    wasm.writeMemory(keyBuffer);\n                    wasm.init(initParam);\n                    return obj;\n                }\n                : () => {\n                    wasm.init(initParam);\n                    return obj;\n                },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 128,\n            digestSize: outputSize,\n        };\n        return obj;\n    });\n}\n\nvar name$i = \"argon2\";\nvar data$i = \"\";\nvar hash$i = \"59aa4fb4\";\nvar wasmJson$i = {\n\tname: name$i,\n\tdata: data$i,\n\thash: hash$i\n};\n\nfunction encodeResult(salt, options, res) {\n    const parameters = [\n        `m=${options.memorySize}`,\n        `t=${options.iterations}`,\n        `p=${options.parallelism}`,\n    ].join(',');\n    return `$argon2${options.hashType}$v=19$${parameters}$${encodeBase64(salt, false)}$${encodeBase64(res, false)}`;\n}\nconst uint32View = new DataView(new ArrayBuffer(4));\nfunction int32LE(x) {\n    uint32View.setInt32(0, x, true);\n    return new Uint8Array(uint32View.buffer);\n}\nfunction hashFunc(blake512, buf, len) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (len <= 64) {\n            const blake = yield createBLAKE2b(len * 8);\n            blake.update(int32LE(len));\n            blake.update(buf);\n            return blake.digest('binary');\n        }\n        const r = Math.ceil(len / 32) - 2;\n        const ret = new Uint8Array(len);\n        blake512.init();\n        blake512.update(int32LE(len));\n        blake512.update(buf);\n        let vp = blake512.digest('binary');\n        ret.set(vp.subarray(0, 32), 0);\n        for (let i = 1; i < r; i++) {\n            blake512.init();\n            blake512.update(vp);\n            vp = blake512.digest('binary');\n            ret.set(vp.subarray(0, 32), i * 32);\n        }\n        const partialBytesNeeded = len - 32 * r;\n        let blakeSmall;\n        if (partialBytesNeeded === 64) {\n            blakeSmall = blake512;\n            blakeSmall.init();\n        }\n        else {\n            blakeSmall = yield createBLAKE2b(partialBytesNeeded * 8);\n        }\n        blakeSmall.update(vp);\n        vp = blakeSmall.digest('binary');\n        ret.set(vp.subarray(0, partialBytesNeeded), r * 32);\n        return ret;\n    });\n}\nfunction getHashType(type) {\n    switch (type) {\n        case 'd':\n            return 0;\n        case 'i':\n            return 1;\n        default:\n            return 2;\n    }\n}\nfunction argon2Internal(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { parallelism, iterations, hashLength } = options;\n        const password = getUInt8Buffer(options.password);\n        const salt = getUInt8Buffer(options.salt);\n        const version = 0x13;\n        const hashType = getHashType(options.hashType);\n        const { memorySize } = options; // in KB\n        const [argon2Interface, blake512] = yield Promise.all([\n            WASMInterface(wasmJson$i, 1024),\n            createBLAKE2b(512),\n        ]);\n        // last block is for storing the init vector\n        argon2Interface.setMemorySize(memorySize * 1024 + 1024);\n        const initVector = new Uint8Array(24);\n        const initVectorView = new DataView(initVector.buffer);\n        initVectorView.setInt32(0, parallelism, true);\n        initVectorView.setInt32(4, hashLength, true);\n        initVectorView.setInt32(8, memorySize, true);\n        initVectorView.setInt32(12, iterations, true);\n        initVectorView.setInt32(16, version, true);\n        initVectorView.setInt32(20, hashType, true);\n        argon2Interface.writeMemory(initVector, memorySize * 1024);\n        blake512.init();\n        blake512.update(initVector);\n        blake512.update(int32LE(password.length));\n        blake512.update(password);\n        blake512.update(int32LE(salt.length));\n        blake512.update(salt);\n        blake512.update(int32LE(0)); // key length + key\n        blake512.update(int32LE(0)); // associatedData length + associatedData\n        const segments = Math.floor(memorySize / (parallelism * 4)); // length of each lane\n        const lanes = segments * 4;\n        const param = new Uint8Array(72);\n        const H0 = blake512.digest('binary');\n        param.set(H0);\n        for (let lane = 0; lane < parallelism; lane++) {\n            param.set(int32LE(0), 64);\n            param.set(int32LE(lane), 68);\n            let position = lane * lanes;\n            let chunk = yield hashFunc(blake512, param, 1024);\n            argon2Interface.writeMemory(chunk, position * 1024);\n            position += 1;\n            param.set(int32LE(1), 64);\n            chunk = yield hashFunc(blake512, param, 1024);\n            argon2Interface.writeMemory(chunk, position * 1024);\n        }\n        const C = new Uint8Array(1024);\n        writeHexToUInt8(C, argon2Interface.calculate(new Uint8Array([]), memorySize));\n        const res = yield hashFunc(blake512, C, hashLength);\n        if (options.outputType === 'hex') {\n            const digestChars = new Uint8Array(hashLength * 2);\n            return getDigestHex(digestChars, res, hashLength);\n        }\n        if (options.outputType === 'encoded') {\n            return encodeResult(salt, options, res);\n        }\n        // return binary format\n        return res;\n    });\n}\nconst validateOptions$3 = (options) => {\n    if (!options || typeof options !== 'object') {\n        throw new Error('Invalid options parameter. It requires an object.');\n    }\n    if (!options.password) {\n        throw new Error('Password must be specified');\n    }\n    options.password = getUInt8Buffer(options.password);\n    if (options.password.length < 1) {\n        throw new Error('Password must be specified');\n    }\n    if (!options.salt) {\n        throw new Error('Salt must be specified');\n    }\n    options.salt = getUInt8Buffer(options.salt);\n    if (options.salt.length < 8) {\n        throw new Error('Salt should be at least 8 bytes long');\n    }\n    if (!Number.isInteger(options.iterations) || options.iterations < 1) {\n        throw new Error('Iterations should be a positive number');\n    }\n    if (!Number.isInteger(options.parallelism) || options.parallelism < 1) {\n        throw new Error('Parallelism should be a positive number');\n    }\n    if (!Number.isInteger(options.hashLength) || options.hashLength < 4) {\n        throw new Error('Hash length should be at least 4 bytes.');\n    }\n    if (!Number.isInteger(options.memorySize)) {\n        throw new Error('Memory size should be specified.');\n    }\n    if (options.memorySize < 8 * options.parallelism) {\n        throw new Error('Memory size should be at least 8 * parallelism.');\n    }\n    if (options.outputType === undefined) {\n        options.outputType = 'hex';\n    }\n    if (!['hex', 'binary', 'encoded'].includes(options.outputType)) {\n        throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary', 'encoded']`);\n    }\n};\n/**\n * Calculates hash using the argon2i password-hashing function\n * @returns Computed hash\n */\nfunction argon2i(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateOptions$3(options);\n        return argon2Internal(Object.assign(Object.assign({}, options), { hashType: 'i' }));\n    });\n}\n/**\n * Calculates hash using the argon2id password-hashing function\n * @returns Computed hash\n */\nfunction argon2id(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateOptions$3(options);\n        return argon2Internal(Object.assign(Object.assign({}, options), { hashType: 'id' }));\n    });\n}\n/**\n * Calculates hash using the argon2d password-hashing function\n * @returns Computed hash\n */\nfunction argon2d(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateOptions$3(options);\n        return argon2Internal(Object.assign(Object.assign({}, options), { hashType: 'd' }));\n    });\n}\nconst getHashParameters = (password, encoded) => {\n    const regex = /^\\$argon2(id|i|d)\\$v=([0-9]+)\\$((?:[mtp]=[0-9]+,){2}[mtp]=[0-9]+)\\$([A-Za-z0-9+/]+)\\$([A-Za-z0-9+/]+)$/;\n    const match = encoded.match(regex);\n    if (!match) {\n        throw new Error('Invalid hash');\n    }\n    const [, hashType, version, parameters, salt, hash] = match;\n    if (version !== '19') {\n        throw new Error(`Unsupported version: ${version}`);\n    }\n    const parsedParameters = {};\n    const paramMap = { m: 'memorySize', p: 'parallelism', t: 'iterations' };\n    parameters.split(',').forEach((x) => {\n        const [n, v] = x.split('=');\n        parsedParameters[paramMap[n]] = parseInt(v, 10);\n    });\n    return Object.assign(Object.assign({}, parsedParameters), { password, hashType: hashType, salt: decodeBase64(salt), hashLength: getDecodeBase64Length(hash), outputType: 'encoded' });\n};\nconst validateVerifyOptions$1 = (options) => {\n    if (!options || typeof options !== 'object') {\n        throw new Error('Invalid options parameter. It requires an object.');\n    }\n    if (options.hash === undefined || typeof options.hash !== 'string') {\n        throw new Error('Hash should be specified');\n    }\n};\n/**\n * Verifies password using the argon2 password-hashing function\n * @returns True if the encoded hash matches the password\n */\nfunction argon2Verify(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateVerifyOptions$1(options);\n        const params = getHashParameters(options.password, options.hash);\n        validateOptions$3(params);\n        const hashStart = options.hash.lastIndexOf('$') + 1;\n        const result = yield argon2Internal(params);\n        return result.substring(hashStart) === options.hash.substring(hashStart);\n    });\n}\n\nvar name$h = \"blake2s\";\nvar data$h = \"\";\nvar hash$h = \"0f570f49\";\nvar wasmJson$h = {\n\tname: name$h,\n\tdata: data$h,\n\thash: hash$h\n};\n\nconst mutex$j = new Mutex();\nlet wasmCache$j = null;\nfunction validateBits$3(bits) {\n    if (!Number.isInteger(bits) || bits < 8 || bits > 256 || bits % 8 !== 0) {\n        return new Error('Invalid variant! Valid values: 8, 16, ..., 256');\n    }\n    return null;\n}\nfunction getInitParam(outputBits, keyBits) {\n    // eslint-disable-next-line no-bitwise\n    return outputBits | (keyBits << 16);\n}\n/**\n * Calculates BLAKE2s hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param bits Number of output bits, which has to be a number\n *             divisible by 8, between 8 and 256. Defaults to 256.\n * @param key Optional key (string, Buffer or TypedArray). Maximum length is 32 bytes.\n * @returns Computed hash as a hexadecimal string\n */\nfunction blake2s(data, bits = 256, key = null) {\n    if (validateBits$3(bits)) {\n        return Promise.reject(validateBits$3(bits));\n    }\n    let keyBuffer = null;\n    let initParam = bits;\n    if (key !== null) {\n        keyBuffer = getUInt8Buffer(key);\n        if (keyBuffer.length > 32) {\n            return Promise.reject(new Error('Max key length is 32 bytes'));\n        }\n        initParam = getInitParam(bits, keyBuffer.length);\n    }\n    const hashLength = bits / 8;\n    if (wasmCache$j === null || wasmCache$j.hashLength !== hashLength) {\n        return lockedCreate(mutex$j, wasmJson$h, hashLength)\n            .then((wasm) => {\n            wasmCache$j = wasm;\n            if (initParam > 512) {\n                wasmCache$j.writeMemory(keyBuffer);\n            }\n            return wasmCache$j.calculate(data, initParam);\n        });\n    }\n    try {\n        if (initParam > 512) {\n            wasmCache$j.writeMemory(keyBuffer);\n        }\n        const hash = wasmCache$j.calculate(data, initParam);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new BLAKE2s hash instance\n * @param bits Number of output bits, which has to be a number\n *             divisible by 8, between 8 and 256. Defaults to 256.\n * @param key Optional key (string, Buffer or TypedArray). Maximum length is 32 bytes.\n */\nfunction createBLAKE2s(bits = 256, key = null) {\n    if (validateBits$3(bits)) {\n        return Promise.reject(validateBits$3(bits));\n    }\n    let keyBuffer = null;\n    let initParam = bits;\n    if (key !== null) {\n        keyBuffer = getUInt8Buffer(key);\n        if (keyBuffer.length > 32) {\n            return Promise.reject(new Error('Max key length is 32 bytes'));\n        }\n        initParam = getInitParam(bits, keyBuffer.length);\n    }\n    const outputSize = bits / 8;\n    return WASMInterface(wasmJson$h, outputSize).then((wasm) => {\n        if (initParam > 512) {\n            wasm.writeMemory(keyBuffer);\n        }\n        wasm.init(initParam);\n        const obj = {\n            init: initParam > 512\n                ? () => {\n                    wasm.writeMemory(keyBuffer);\n                    wasm.init(initParam);\n                    return obj;\n                }\n                : () => {\n                    wasm.init(initParam);\n                    return obj;\n                },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: outputSize,\n        };\n        return obj;\n    });\n}\n\nvar name$g = \"blake3\";\nvar data$g = \"\";\nvar hash$g = \"e8655383\";\nvar wasmJson$g = {\n\tname: name$g,\n\tdata: data$g,\n\thash: hash$g\n};\n\nconst mutex$i = new Mutex();\nlet wasmCache$i = null;\nfunction validateBits$2(bits) {\n    if (!Number.isInteger(bits) || bits < 8 || bits % 8 !== 0) {\n        return new Error('Invalid variant! Valid values: 8, 16, ...');\n    }\n    return null;\n}\n/**\n * Calculates BLAKE3 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param bits Number of output bits, which has to be a number\n *             divisible by 8. Defaults to 256.\n * @param key Optional key (string, Buffer or TypedArray). Length should be 32 bytes.\n * @returns Computed hash as a hexadecimal string\n */\nfunction blake3(data, bits = 256, key = null) {\n    if (validateBits$2(bits)) {\n        return Promise.reject(validateBits$2(bits));\n    }\n    let keyBuffer = null;\n    let initParam = 0; // key is empty by default\n    if (key !== null) {\n        keyBuffer = getUInt8Buffer(key);\n        if (keyBuffer.length !== 32) {\n            return Promise.reject(new Error('Key length must be exactly 32 bytes'));\n        }\n        initParam = 32;\n    }\n    const hashLength = bits / 8;\n    const digestParam = hashLength;\n    if (wasmCache$i === null || wasmCache$i.hashLength !== hashLength) {\n        return lockedCreate(mutex$i, wasmJson$g, hashLength)\n            .then((wasm) => {\n            wasmCache$i = wasm;\n            if (initParam === 32) {\n                wasmCache$i.writeMemory(keyBuffer);\n            }\n            return wasmCache$i.calculate(data, initParam, digestParam);\n        });\n    }\n    try {\n        if (initParam === 32) {\n            wasmCache$i.writeMemory(keyBuffer);\n        }\n        const hash = wasmCache$i.calculate(data, initParam, digestParam);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new BLAKE3 hash instance\n * @param bits Number of output bits, which has to be a number\n *             divisible by 8. Defaults to 256.\n * @param key Optional key (string, Buffer or TypedArray). Length should be 32 bytes.\n */\nfunction createBLAKE3(bits = 256, key = null) {\n    if (validateBits$2(bits)) {\n        return Promise.reject(validateBits$2(bits));\n    }\n    let keyBuffer = null;\n    let initParam = 0; // key is empty by default\n    if (key !== null) {\n        keyBuffer = getUInt8Buffer(key);\n        if (keyBuffer.length !== 32) {\n            return Promise.reject(new Error('Key length must be exactly 32 bytes'));\n        }\n        initParam = 32;\n    }\n    const outputSize = bits / 8;\n    const digestParam = outputSize;\n    return WASMInterface(wasmJson$g, outputSize).then((wasm) => {\n        if (initParam === 32) {\n            wasm.writeMemory(keyBuffer);\n        }\n        wasm.init(initParam);\n        const obj = {\n            init: initParam === 32\n                ? () => {\n                    wasm.writeMemory(keyBuffer);\n                    wasm.init(initParam);\n                    return obj;\n                }\n                : () => {\n                    wasm.init(initParam);\n                    return obj;\n                },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType, digestParam),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: outputSize,\n        };\n        return obj;\n    });\n}\n\nvar name$f = \"crc32\";\nvar data$f = \"AGFzbQEAAAABEQRgAAF/YAF/AGAAAGACf38AAwgHAAEBAQIAAwQFAXABAQEFBAEBAgIGDgJ/AUGQyQULfwBBgAgLB3AIBm1lbW9yeQIADkhhc2hfR2V0QnVmZmVyAAAJSGFzaF9Jbml0AAILSGFzaF9VcGRhdGUAAwpIYXNoX0ZpbmFsAAQNSGFzaF9HZXRTdGF0ZQAFDkhhc2hfQ2FsY3VsYXRlAAYKU1RBVEVfU0laRQMBCq0HBwUAQYAJC8MDAQN/QYCJASEBQQAhAgNAIAFBAEEAQQBBAEEAQQBBAEEAIAJBAXFrIABxIAJBAXZzIgNBAXFrIABxIANBAXZzIgNBAXFrIABxIANBAXZzIgNBAXFrIABxIANBAXZzIgNBAXFrIABxIANBAXZzIgNBAXFrIABxIANBAXZzIgNBAXFrIABxIANBAXZzIgNBAXFrIABxIANBAXZzNgIAIAFBBGohASACQQFqIgJBgAJHDQALQQAhAANAIABBhJEBaiAAQYSJAWooAgAiAkH/AXFBAnRBgIkBaigCACACQQh2cyICNgIAIABBhJkBaiACQf8BcUECdEGAiQFqKAIAIAJBCHZzIgI2AgAgAEGEoQFqIAJB/wFxQQJ0QYCJAWooAgAgAkEIdnMiAjYCACAAQYSpAWogAkH/AXFBAnRBgIkBaigCACACQQh2cyICNgIAIABBhLEBaiACQf8BcUECdEGAiQFqKAIAIAJBCHZzIgI2AgAgAEGEuQFqIAJB/wFxQQJ0QYCJAWooAgAgAkEIdnMiAjYCACAAQYTBAWogAkH/AXFBAnRBgIkBaigCACACQQh2czYCACAAQQRqIgBB/AdHDQALCycAAkBBACgCgMkBIABGDQAgABABQQAgADYCgMkBC0EAQQA2AoTJAQuhAgEDf0EAKAKEyQFBf3MhAUGACSECAkAgAEEISQ0AQYAJIQIDQCACQQRqKAIAIgNBDnZB/AdxQYCRAWooAgAgA0EWdkH8B3FBgIkBaigCAHMgA0EGdkH8B3FBgJkBaigCAHMgA0H/AXFBAnRBgKEBaigCAHMgAigCACABcyIBQRZ2QfwHcUGAqQFqKAIAcyABQQ52QfwHcUGAsQFqKAIAcyABQQZ2QfwHcUGAuQFqKAIAcyABQf8BcUECdEGAwQFqKAIAcyEBIAJBCGohAiAAQXhqIgBBB0sNAAsLAkAgAEUNAANAIAFB/wFxIAItAABzQQJ0QYCJAWooAgAgAUEIdnMhASACQQFqIQIgAEF/aiIADQALC0EAIAFBf3M2AoTJAQszAQF/QQBBACgChMkBIgBBGHQgAEEIdEGAgPwHcXIgAEEIdkGA/gNxIABBGHZycjYCgAkLBgBBhMkBC1oAAkBBACgCgMkBIAFGDQAgARABQQAgATYCgMkBC0EAQQA2AoTJASAAEANBAEEAKAKEyQEiAUEYdCABQQh0QYCA/AdxciABQQh2QYD+A3EgAUEYdnJyNgKACQsLCwEAQYAICwQEAAAA\";\nvar hash$f = \"749723dc\";\nvar wasmJson$f = {\n\tname: name$f,\n\tdata: data$f,\n\thash: hash$f\n};\n\nconst mutex$h = new Mutex();\nlet wasmCache$h = null;\n/**\n * Calculates CRC-32 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction crc32(data) {\n    if (wasmCache$h === null) {\n        return lockedCreate(mutex$h, wasmJson$f, 4)\n            .then((wasm) => {\n            wasmCache$h = wasm;\n            return wasmCache$h.calculate(data, 0xEDB88320);\n        });\n    }\n    try {\n        const hash = wasmCache$h.calculate(data, 0xEDB88320);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new CRC-32 hash instance\n */\nfunction createCRC32() {\n    return WASMInterface(wasmJson$f, 4).then((wasm) => {\n        wasm.init(0xEDB88320);\n        const obj = {\n            init: () => { wasm.init(0xEDB88320); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 4,\n            digestSize: 4,\n        };\n        return obj;\n    });\n}\n\nconst mutex$g = new Mutex();\nlet wasmCache$g = null;\n/**\n * Calculates CRC-32C hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction crc32c(data) {\n    if (wasmCache$g === null) {\n        return lockedCreate(mutex$g, wasmJson$f, 4)\n            .then((wasm) => {\n            wasmCache$g = wasm;\n            return wasmCache$g.calculate(data, 0x82F63B78);\n        });\n    }\n    try {\n        const hash = wasmCache$g.calculate(data, 0x82F63B78);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new CRC-32C hash instance\n */\nfunction createCRC32C() {\n    return WASMInterface(wasmJson$f, 4).then((wasm) => {\n        wasm.init(0x82F63B78);\n        const obj = {\n            init: () => { wasm.init(0x82F63B78); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 4,\n            digestSize: 4,\n        };\n        return obj;\n    });\n}\n\nvar name$e = \"md4\";\nvar data$e = \"AGFzbQEAAAABEgRgAAF/YAAAYAF/AGACf38BfwMIBwABAgMBAAIEBQFwAQEBBQQBAQICBg4CfwFBoIoFC38AQYAICwdwCAZtZW1vcnkCAA5IYXNoX0dldEJ1ZmZlcgAACUhhc2hfSW5pdAABC0hhc2hfVXBkYXRlAAIKSGFzaF9GaW5hbAAEDUhhc2hfR2V0U3RhdGUABQ5IYXNoX0NhbGN1bGF0ZQAGClNUQVRFX1NJWkUDAQqXEQcFAEGACQstAEEAQv6568XpjpWZEDcCkIkBQQBCgcaUupbx6uZvNwKIiQFBAEIANwKAiQEL6AIBA39BAEEAKAKAiQEiASAAakH/////AXEiAjYCgIkBQQAoAoSJASEDAkAgAiABTw0AQQAgA0EBaiIDNgKEiQELQQAgAyAAQR12ajYChIkBAkACQAJAAkACQAJAIAFBP3EiAw0AQYAJIQIMAQtBwAAgA2siAiAASw0BIANBGGohA0EAIQEDQCADIAFqQYCJAWogAUGACWotAAA6AAAgAyABQQFqIgFqQdgARw0AC0GYiQFBwAAQAxogACACayEAIAJBgAlqIQILIABBwABPDQEgACEDDAILIABFDQJBACEBIANBmIkBakEALQCACToAACAAQQFGDQIgA0GZiQFqIQMgAEF/aiECA0AgAyABaiABQYEJai0AADoAACACIAFBAWoiAUcNAAwDCwsgAEE/cSEDIAIgAEFAcRADIQILIANFDQBBACEBA0AgAUGYiQFqIAIgAWotAAA6AAAgAyABQQFqIgFHDQALCwuYCwEXf0EAKAKUiQEhAkEAKAKQiQEhA0EAKAKMiQEhBEEAKAKIiQEhBQNAIABBHGooAgAiBiAAQRRqKAIAIgcgAEEYaigCACIIIABBEGooAgAiCSAAQSxqKAIAIgogAEEoaigCACILIABBJGooAgAiDCAAQSBqKAIAIg0gCyAIIABBCGooAgAiDiADaiAAQQRqKAIAIg8gAmogBCADIAJzcSACcyAFaiAAKAIAIhBqQQN3IhEgBCADc3EgA3NqQQd3IhIgESAEc3EgBHNqQQt3IhNqIBIgB2ogESAJaiAAQQxqKAIAIhQgBGogEyASIBFzcSARc2pBE3ciESATIBJzcSASc2pBA3ciEiARIBNzcSATc2pBB3ciEyASIBFzcSARc2pBC3ciFWogEyAMaiASIA1qIBEgBmogFSATIBJzcSASc2pBE3ciESAVIBNzcSATc2pBA3ciEiARIBVzcSAVc2pBB3ciEyASIBFzcSARc2pBC3ciFSAAQThqKAIAIhZqIBMgAEE0aigCACIXaiASIABBMGooAgAiGGogESAKaiAVIBMgEnNxIBJzakETdyISIBUgE3NxIBNzakEDdyITIBIgFXNxIBVzakEHdyIVIBMgEnNxIBJzakELdyIRaiAJIBVqIBAgE2ogEiAAQTxqKAIAIglqIBEgFSATc3EgE3NqQRN3IhIgESAVcnEgESAVcXJqQZnzidQFakEDdyITIBIgEXJxIBIgEXFyakGZ84nUBWpBBXciESATIBJycSATIBJxcmpBmfOJ1AVqQQl3IhVqIAcgEWogDyATaiAYIBJqIBUgESATcnEgESATcXJqQZnzidQFakENdyISIBUgEXJxIBUgEXFyakGZ84nUBWpBA3ciESASIBVycSASIBVxcmpBmfOJ1AVqQQV3IhMgESAScnEgESAScXJqQZnzidQFakEJdyIVaiAIIBNqIA4gEWogFyASaiAVIBMgEXJxIBMgEXFyakGZ84nUBWpBDXciESAVIBNycSAVIBNxcmpBmfOJ1AVqQQN3IhIgESAVcnEgESAVcXJqQZnzidQFakEFdyITIBIgEXJxIBIgEXFyakGZ84nUBWpBCXciFWogBiATaiAUIBJqIBYgEWogFSATIBJycSATIBJxcmpBmfOJ1AVqQQ13IhEgFSATcnEgFSATcXJqQZnzidQFakEDdyISIBEgFXJxIBEgFXFyakGZ84nUBWpBBXciEyASIBFycSASIBFxcmpBmfOJ1AVqQQl3IhVqIBAgEmogCSARaiAVIBMgEnJxIBMgEnFyakGZ84nUBWpBDXciBiAVcyISIBNzakGh1+f2BmpBA3ciESAGcyANIBNqIBIgEXNqQaHX5/YGakEJdyISc2pBodfn9gZqQQt3IhNqIA4gEWogEyAScyAYIAZqIBIgEXMgE3NqQaHX5/YGakEPdyIRc2pBodfn9gZqQQN3IhUgEXMgCyASaiARIBNzIBVzakGh1+f2BmpBCXciEnNqQaHX5/YGakELdyITaiAPIBVqIBMgEnMgFiARaiASIBVzIBNzakGh1+f2BmpBD3ciEXNqQaHX5/YGakEDdyIVIBFzIAwgEmogESATcyAVc2pBodfn9gZqQQl3IhJzakGh1+f2BmpBC3ciE2ogFCAVaiATIBJzIBcgEWogEiAVcyATc2pBodfn9gZqQQ93IhFzakGh1+f2BmpBA3ciFSARcyAKIBJqIBEgE3MgFXNqQaHX5/YGakEJdyISc2pBodfn9gZqQQt3IhMgA2ohAyAJIBFqIBIgFXMgE3NqQaHX5/YGakEPdyAEaiEEIBIgAmohAiAVIAVqIQUgAEHAAGohACABQUBqIgENAAtBACACNgKUiQFBACADNgKQiQFBACAENgKMiQFBACAFNgKIiQEgAAuhAgEDf0EAKAKAiQEiAEE/cSIBQZiJAWpBgAE6AAACQAJAAkAgAUE/cyICQQdLDQACQCACRQ0AIAFBmYkBaiEAA0AgAEEAOgAAIABBAWohACACQX9qIgINAAsLQcAAIQJBmIkBQcAAEAMaQQAhAAwBCyACQQhGDQEgAUEBaiEACyAAQY+JAWohAQNAIAEgAmpBADoAACACQXdqIQAgAkF/aiECIABBAEoNAAtBACgCgIkBIQALQQAgAEEVdjoA04kBQQAgAEENdjoA0okBQQAgAEEFdjoA0YkBQQAgAEEDdCICOgDQiQFBACACNgKAiQFBAEEAKAKEiQE2AtSJAUGYiQFBwAAQAxpBAEEAKQKIiQE3A4AJQQBBACkCkIkBNwOICQsGAEGAiQELMwBBAEL+uevF6Y6VmRA3ApCJAUEAQoHGlLqW8ermbzcCiIkBQQBCADcCgIkBIAAQAhAECwsLAQBBgAgLBJgAAAA=\";\nvar hash$e = \"1bf01052\";\nvar wasmJson$e = {\n\tname: name$e,\n\tdata: data$e,\n\thash: hash$e\n};\n\nconst mutex$f = new Mutex();\nlet wasmCache$f = null;\n/**\n * Calculates MD4 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction md4(data) {\n    if (wasmCache$f === null) {\n        return lockedCreate(mutex$f, wasmJson$e, 16)\n            .then((wasm) => {\n            wasmCache$f = wasm;\n            return wasmCache$f.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache$f.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new MD4 hash instance\n */\nfunction createMD4() {\n    return WASMInterface(wasmJson$e, 16).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 16,\n        };\n        return obj;\n    });\n}\n\nvar name$d = \"md5\";\nvar data$d = \"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\";\nvar hash$d = \"9b0fac7d\";\nvar wasmJson$d = {\n\tname: name$d,\n\tdata: data$d,\n\thash: hash$d\n};\n\nconst mutex$e = new Mutex();\nlet wasmCache$e = null;\n/**\n * Calculates MD5 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction md5(data) {\n    if (wasmCache$e === null) {\n        return lockedCreate(mutex$e, wasmJson$d, 16)\n            .then((wasm) => {\n            wasmCache$e = wasm;\n            return wasmCache$e.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache$e.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new MD5 hash instance\n */\nfunction createMD5() {\n    return WASMInterface(wasmJson$d, 16).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 16,\n        };\n        return obj;\n    });\n}\n\nvar name$c = \"sha1\";\nvar data$c = \"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\";\nvar hash$c = \"40d92e5d\";\nvar wasmJson$c = {\n\tname: name$c,\n\tdata: data$c,\n\thash: hash$c\n};\n\nconst mutex$d = new Mutex();\nlet wasmCache$d = null;\n/**\n * Calculates SHA-1 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction sha1(data) {\n    if (wasmCache$d === null) {\n        return lockedCreate(mutex$d, wasmJson$c, 20)\n            .then((wasm) => {\n            wasmCache$d = wasm;\n            return wasmCache$d.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache$d.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SHA-1 hash instance\n */\nfunction createSHA1() {\n    return WASMInterface(wasmJson$c, 20).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 20,\n        };\n        return obj;\n    });\n}\n\nvar name$b = \"sha3\";\nvar data$b = \"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\";\nvar hash$b = \"ec266d91\";\nvar wasmJson$b = {\n\tname: name$b,\n\tdata: data$b,\n\thash: hash$b\n};\n\nconst mutex$c = new Mutex();\nlet wasmCache$c = null;\nfunction validateBits$1(bits) {\n    if (![224, 256, 384, 512].includes(bits)) {\n        return new Error('Invalid variant! Valid values: 224, 256, 384, 512');\n    }\n    return null;\n}\n/**\n * Calculates SHA-3 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n * @returns Computed hash as a hexadecimal string\n */\nfunction sha3(data, bits = 512) {\n    if (validateBits$1(bits)) {\n        return Promise.reject(validateBits$1(bits));\n    }\n    const hashLength = bits / 8;\n    if (wasmCache$c === null || wasmCache$c.hashLength !== hashLength) {\n        return lockedCreate(mutex$c, wasmJson$b, hashLength)\n            .then((wasm) => {\n            wasmCache$c = wasm;\n            return wasmCache$c.calculate(data, bits, 0x06);\n        });\n    }\n    try {\n        const hash = wasmCache$c.calculate(data, bits, 0x06);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SHA-3 hash instance\n * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n */\nfunction createSHA3(bits = 512) {\n    if (validateBits$1(bits)) {\n        return Promise.reject(validateBits$1(bits));\n    }\n    const outputSize = bits / 8;\n    return WASMInterface(wasmJson$b, outputSize).then((wasm) => {\n        wasm.init(bits);\n        const obj = {\n            init: () => { wasm.init(bits); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType, 0x06),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 200 - 2 * outputSize,\n            digestSize: outputSize,\n        };\n        return obj;\n    });\n}\n\nconst mutex$b = new Mutex();\nlet wasmCache$b = null;\nfunction validateBits(bits) {\n    if (![224, 256, 384, 512].includes(bits)) {\n        return new Error('Invalid variant! Valid values: 224, 256, 384, 512');\n    }\n    return null;\n}\n/**\n * Calculates Keccak hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n * @returns Computed hash as a hexadecimal string\n */\nfunction keccak(data, bits = 512) {\n    if (validateBits(bits)) {\n        return Promise.reject(validateBits(bits));\n    }\n    const hashLength = bits / 8;\n    if (wasmCache$b === null || wasmCache$b.hashLength !== hashLength) {\n        return lockedCreate(mutex$b, wasmJson$b, hashLength)\n            .then((wasm) => {\n            wasmCache$b = wasm;\n            return wasmCache$b.calculate(data, bits, 0x01);\n        });\n    }\n    try {\n        const hash = wasmCache$b.calculate(data, bits, 0x01);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new Keccak hash instance\n * @param bits Number of output bits. Valid values: 224, 256, 384, 512\n */\nfunction createKeccak(bits = 512) {\n    if (validateBits(bits)) {\n        return Promise.reject(validateBits(bits));\n    }\n    const outputSize = bits / 8;\n    return WASMInterface(wasmJson$b, outputSize).then((wasm) => {\n        wasm.init(bits);\n        const obj = {\n            init: () => { wasm.init(bits); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType, 0x01),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 200 - 2 * outputSize,\n            digestSize: outputSize,\n        };\n        return obj;\n    });\n}\n\nvar name$a = \"sha256\";\nvar data$a = \"\";\nvar hash$a = \"817d957e\";\nvar wasmJson$a = {\n\tname: name$a,\n\tdata: data$a,\n\thash: hash$a\n};\n\nconst mutex$a = new Mutex();\nlet wasmCache$a = null;\n/**\n * Calculates SHA-2 (SHA-224) hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction sha224(data) {\n    if (wasmCache$a === null) {\n        return lockedCreate(mutex$a, wasmJson$a, 28)\n            .then((wasm) => {\n            wasmCache$a = wasm;\n            return wasmCache$a.calculate(data, 224);\n        });\n    }\n    try {\n        const hash = wasmCache$a.calculate(data, 224);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SHA-2 (SHA-224) hash instance\n */\nfunction createSHA224() {\n    return WASMInterface(wasmJson$a, 28).then((wasm) => {\n        wasm.init(224);\n        const obj = {\n            init: () => { wasm.init(224); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 28,\n        };\n        return obj;\n    });\n}\n\nconst mutex$9 = new Mutex();\nlet wasmCache$9 = null;\n/**\n * Calculates SHA-2 (SHA-256) hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction sha256(data) {\n    if (wasmCache$9 === null) {\n        return lockedCreate(mutex$9, wasmJson$a, 32)\n            .then((wasm) => {\n            wasmCache$9 = wasm;\n            return wasmCache$9.calculate(data, 256);\n        });\n    }\n    try {\n        const hash = wasmCache$9.calculate(data, 256);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SHA-2 (SHA-256) hash instance\n */\nfunction createSHA256() {\n    return WASMInterface(wasmJson$a, 32).then((wasm) => {\n        wasm.init(256);\n        const obj = {\n            init: () => { wasm.init(256); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 32,\n        };\n        return obj;\n    });\n}\n\nvar name$9 = \"sha512\";\nvar data$9 = \"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\";\nvar hash$9 = \"a5d1ca7c\";\nvar wasmJson$9 = {\n\tname: name$9,\n\tdata: data$9,\n\thash: hash$9\n};\n\nconst mutex$8 = new Mutex();\nlet wasmCache$8 = null;\n/**\n * Calculates SHA-2 (SHA-384) hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction sha384(data) {\n    if (wasmCache$8 === null) {\n        return lockedCreate(mutex$8, wasmJson$9, 48)\n            .then((wasm) => {\n            wasmCache$8 = wasm;\n            return wasmCache$8.calculate(data, 384);\n        });\n    }\n    try {\n        const hash = wasmCache$8.calculate(data, 384);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SHA-2 (SHA-384) hash instance\n */\nfunction createSHA384() {\n    return WASMInterface(wasmJson$9, 48).then((wasm) => {\n        wasm.init(384);\n        const obj = {\n            init: () => { wasm.init(384); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 128,\n            digestSize: 48,\n        };\n        return obj;\n    });\n}\n\nconst mutex$7 = new Mutex();\nlet wasmCache$7 = null;\n/**\n * Calculates SHA-2 (SHA-512) hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction sha512(data) {\n    if (wasmCache$7 === null) {\n        return lockedCreate(mutex$7, wasmJson$9, 64)\n            .then((wasm) => {\n            wasmCache$7 = wasm;\n            return wasmCache$7.calculate(data, 512);\n        });\n    }\n    try {\n        const hash = wasmCache$7.calculate(data, 512);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SHA-2 (SHA-512) hash instance\n */\nfunction createSHA512() {\n    return WASMInterface(wasmJson$9, 64).then((wasm) => {\n        wasm.init(512);\n        const obj = {\n            init: () => { wasm.init(512); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 128,\n            digestSize: 64,\n        };\n        return obj;\n    });\n}\n\nvar name$8 = \"xxhash32\";\nvar data$8 = \"AGFzbQEAAAABEQRgAAF/YAF/AGAAAGACf38AAwcGAAEBAgADBAUBcAEBAQUEAQECAgYOAn8BQbCJBQt/AEGACAsHcAgGbWVtb3J5AgAOSGFzaF9HZXRCdWZmZXIAAAlIYXNoX0luaXQAAQtIYXNoX1VwZGF0ZQACCkhhc2hfRmluYWwAAw1IYXNoX0dldFN0YXRlAAQOSGFzaF9DYWxjdWxhdGUABQpTVEFURV9TSVpFAwEKswkGBQBBgAkLTQBBAEIANwOoiQFBACAANgKIiQFBACAAQc+Moo4GajYCjIkBQQAgAEH3lK+veGo2AoSJAUEAIABBqIiNoQJqNgKAiQFBAEEANgKgiQELswUBBn8CQCAARQ0AQQBBACkDqIkBIACtfDcDqIkBAkBBACgCoIkBIgEgAGpBD0sNAEEAIAFBAWo2AqCJASABQZCJAWpBAC0AgAk6AAAgAEEBRg0BQQEhAgNAQQBBACgCoIkBIgFBAWo2AqCJASABQZCJAWogAkGACWotAAA6AAAgACACQQFqIgJHDQAMAgsLIABB8AhqIQMCQAJAIAENAEEAKAKMiQEhAUEAKAKIiQEhBEEAKAKEiQEhBUEAKAKAiQEhBkGACSECDAELQYAJIQICQCABQQ9LDQBBgAkhAgNAIAItAAAhBEEAIAFBAWo2AqCJASABQZCJAWogBDoAACACQQFqIQJBACgCoIkBIgFBEEkNAAsLQQBBACgCkIkBQfeUr694bEEAKAKAiQFqQQ13QbHz3fF5bCIGNgKAiQFBAEEAKAKUiQFB95Svr3hsQQAoAoSJAWpBDXdBsfPd8XlsIgU2AoSJAUEAQQAoApiJAUH3lK+veGxBACgCiIkBakENd0Gx893xeWwiBDYCiIkBQQBBACgCnIkBQfeUr694bEEAKAKMiQFqQQ13QbHz3fF5bCIBNgKMiQELIABBgAlqIQACQCACIANLDQADQCACKAIAQfeUr694bCAGakENd0Gx893xeWwhBiACQQxqKAIAQfeUr694bCABakENd0Gx893xeWwhASACQQhqKAIAQfeUr694bCAEakENd0Gx893xeWwhBCACQQRqKAIAQfeUr694bCAFakENd0Gx893xeWwhBSACQRBqIgIgA00NAAsLQQAgATYCjIkBQQAgBDYCiIkBQQAgBTYChIkBQQAgBjYCgIkBQQAgACACayIBNgKgiQEgAUUNAEEAIQEDQCABQZCJAWogAiABai0AADoAACABQQFqIgFBACgCoIkBSQ0ACwsLzAICAX4Gf0EAKQOoiQEiAKchAQJAAkAgAEIQVA0AQQAoAoSJAUEHd0EAKAKAiQFBAXdqQQAoAoiJAUEMd2pBACgCjIkBQRJ3aiECDAELQQAoAoiJAUGxz9myAWohAgsgAiABaiECQZCJASEBQQAoAqCJASIDQZCJAWohBAJAIANBBEgNAEGQiQEhBQNAIAUoAgBBvdzKlXxsIAJqQRF3Qa/W074CbCECIAVBCGohBiAFQQRqIgEhBSAGIARNDQALCwJAIAEgBEYNACADQZCJAWohBQNAIAEtAABBsc/ZsgFsIAJqQQt3QbHz3fF5bCECIAUgAUEBaiIBRw0ACwtBACACQQ92IAJzQfeUr694bCIBQQ12IAFzQb3cypV8bCIBQRB2IAFzIgFBGHQgAUEIdEGAgPwHcXIgAUEIdkGA/gNxIAFBGHZycq03A4AJCwYAQYCJAQtTAEEAQgA3A6iJAUEAIAE2AoiJAUEAIAFBz4yijgZqNgKMiQFBACABQfeUr694ajYChIkBQQAgAUGoiI2hAmo2AoCJAUEAQQA2AqCJASAAEAIQAwsLCwEAQYAICwQwAAAA\";\nvar hash$8 = \"5b6a5062\";\nvar wasmJson$8 = {\n\tname: name$8,\n\tdata: data$8,\n\thash: hash$8\n};\n\nconst mutex$6 = new Mutex();\nlet wasmCache$6 = null;\nfunction validateSeed$3(seed) {\n    if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {\n        return new Error('Seed must be a valid 32-bit long unsigned integer.');\n    }\n    return null;\n}\n/**\n * Calculates xxHash32 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param seed Number used to initialize the internal state of the algorithm (defaults to 0)\n * @returns Computed hash as a hexadecimal string\n */\nfunction xxhash32(data, seed = 0) {\n    if (validateSeed$3(seed)) {\n        return Promise.reject(validateSeed$3(seed));\n    }\n    if (wasmCache$6 === null) {\n        return lockedCreate(mutex$6, wasmJson$8, 4)\n            .then((wasm) => {\n            wasmCache$6 = wasm;\n            return wasmCache$6.calculate(data, seed);\n        });\n    }\n    try {\n        const hash = wasmCache$6.calculate(data, seed);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new xxHash32 hash instance\n * @param data Input data (string, Buffer or TypedArray)\n * @param seed Number used to initialize the internal state of the algorithm (defaults to 0)\n */\nfunction createXXHash32(seed = 0) {\n    if (validateSeed$3(seed)) {\n        return Promise.reject(validateSeed$3(seed));\n    }\n    return WASMInterface(wasmJson$8, 4).then((wasm) => {\n        wasm.init(seed);\n        const obj = {\n            init: () => { wasm.init(seed); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 16,\n            digestSize: 4,\n        };\n        return obj;\n    });\n}\n\nvar name$7 = \"xxhash64\";\nvar data$7 = \"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\";\nvar hash$7 = \"bc315b2a\";\nvar wasmJson$7 = {\n\tname: name$7,\n\tdata: data$7,\n\thash: hash$7\n};\n\nconst mutex$5 = new Mutex();\nlet wasmCache$5 = null;\nconst seedBuffer$2 = new ArrayBuffer(8);\nfunction validateSeed$2(seed) {\n    if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {\n        return new Error('Seed must be given as two valid 32-bit long unsigned integers (lo + high).');\n    }\n    return null;\n}\nfunction writeSeed$2(arr, low, high) {\n    // write in little-endian format\n    const buffer = new DataView(arr);\n    buffer.setUint32(0, low, true);\n    buffer.setUint32(4, high, true);\n}\n/**\n * Calculates xxHash64 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param seedLow Lower 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @param seedHigh Higher 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @returns Computed hash as a hexadecimal string\n */\nfunction xxhash64(data, seedLow = 0, seedHigh = 0) {\n    if (validateSeed$2(seedLow)) {\n        return Promise.reject(validateSeed$2(seedLow));\n    }\n    if (validateSeed$2(seedHigh)) {\n        return Promise.reject(validateSeed$2(seedHigh));\n    }\n    if (wasmCache$5 === null) {\n        return lockedCreate(mutex$5, wasmJson$7, 8)\n            .then((wasm) => {\n            wasmCache$5 = wasm;\n            writeSeed$2(seedBuffer$2, seedLow, seedHigh);\n            wasmCache$5.writeMemory(new Uint8Array(seedBuffer$2));\n            return wasmCache$5.calculate(data);\n        });\n    }\n    try {\n        writeSeed$2(seedBuffer$2, seedLow, seedHigh);\n        wasmCache$5.writeMemory(new Uint8Array(seedBuffer$2));\n        const hash = wasmCache$5.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new xxHash64 hash instance\n * @param seedLow Lower 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @param seedHigh Higher 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n */\nfunction createXXHash64(seedLow = 0, seedHigh = 0) {\n    if (validateSeed$2(seedLow)) {\n        return Promise.reject(validateSeed$2(seedLow));\n    }\n    if (validateSeed$2(seedHigh)) {\n        return Promise.reject(validateSeed$2(seedHigh));\n    }\n    return WASMInterface(wasmJson$7, 8).then((wasm) => {\n        const instanceBuffer = new ArrayBuffer(8);\n        writeSeed$2(instanceBuffer, seedLow, seedHigh);\n        wasm.writeMemory(new Uint8Array(instanceBuffer));\n        wasm.init();\n        const obj = {\n            init: () => {\n                wasm.writeMemory(new Uint8Array(instanceBuffer));\n                wasm.init();\n                return obj;\n            },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 32,\n            digestSize: 8,\n        };\n        return obj;\n    });\n}\n\nvar name$6 = \"xxhash3\";\nvar data$6 = \"\";\nvar hash$6 = \"187bc2c6\";\nvar wasmJson$6 = {\n\tname: name$6,\n\tdata: data$6,\n\thash: hash$6\n};\n\nconst mutex$4 = new Mutex();\nlet wasmCache$4 = null;\nconst seedBuffer$1 = new ArrayBuffer(8);\nfunction validateSeed$1(seed) {\n    if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {\n        return new Error('Seed must be given as two valid 32-bit long unsigned integers (lo + high).');\n    }\n    return null;\n}\nfunction writeSeed$1(arr, low, high) {\n    // write in little-endian format\n    const buffer = new DataView(arr);\n    buffer.setUint32(0, low, true);\n    buffer.setUint32(4, high, true);\n}\n/**\n * Calculates xxHash3 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param seedLow Lower 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @param seedHigh Higher 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @returns Computed hash as a hexadecimal string\n */\nfunction xxhash3(data, seedLow = 0, seedHigh = 0) {\n    if (validateSeed$1(seedLow)) {\n        return Promise.reject(validateSeed$1(seedLow));\n    }\n    if (validateSeed$1(seedHigh)) {\n        return Promise.reject(validateSeed$1(seedHigh));\n    }\n    if (wasmCache$4 === null) {\n        return lockedCreate(mutex$4, wasmJson$6, 8)\n            .then((wasm) => {\n            wasmCache$4 = wasm;\n            writeSeed$1(seedBuffer$1, seedLow, seedHigh);\n            wasmCache$4.writeMemory(new Uint8Array(seedBuffer$1));\n            return wasmCache$4.calculate(data);\n        });\n    }\n    try {\n        writeSeed$1(seedBuffer$1, seedLow, seedHigh);\n        wasmCache$4.writeMemory(new Uint8Array(seedBuffer$1));\n        const hash = wasmCache$4.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new xxHash3 hash instance\n * @param seedLow Lower 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @param seedHigh Higher 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n */\nfunction createXXHash3(seedLow = 0, seedHigh = 0) {\n    if (validateSeed$1(seedLow)) {\n        return Promise.reject(validateSeed$1(seedLow));\n    }\n    if (validateSeed$1(seedHigh)) {\n        return Promise.reject(validateSeed$1(seedHigh));\n    }\n    return WASMInterface(wasmJson$6, 8).then((wasm) => {\n        const instanceBuffer = new ArrayBuffer(8);\n        writeSeed$1(instanceBuffer, seedLow, seedHigh);\n        wasm.writeMemory(new Uint8Array(instanceBuffer));\n        wasm.init();\n        const obj = {\n            init: () => {\n                wasm.writeMemory(new Uint8Array(instanceBuffer));\n                wasm.init();\n                return obj;\n            },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 512,\n            digestSize: 8,\n        };\n        return obj;\n    });\n}\n\nvar name$5 = \"xxhash128\";\nvar data$5 = \"\";\nvar hash$5 = \"e8e3fcf8\";\nvar wasmJson$5 = {\n\tname: name$5,\n\tdata: data$5,\n\thash: hash$5\n};\n\nconst mutex$3 = new Mutex();\nlet wasmCache$3 = null;\nconst seedBuffer = new ArrayBuffer(8);\nfunction validateSeed(seed) {\n    if (!Number.isInteger(seed) || seed < 0 || seed > 0xFFFFFFFF) {\n        return new Error('Seed must be given as two valid 32-bit long unsigned integers (lo + high).');\n    }\n    return null;\n}\nfunction writeSeed(arr, low, high) {\n    // write in little-endian format\n    const buffer = new DataView(arr);\n    buffer.setUint32(0, low, true);\n    buffer.setUint32(4, high, true);\n}\n/**\n * Calculates xxHash128 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @param seedLow Lower 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @param seedHigh Higher 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @returns Computed hash as a hexadecimal string\n */\nfunction xxhash128(data, seedLow = 0, seedHigh = 0) {\n    if (validateSeed(seedLow)) {\n        return Promise.reject(validateSeed(seedLow));\n    }\n    if (validateSeed(seedHigh)) {\n        return Promise.reject(validateSeed(seedHigh));\n    }\n    if (wasmCache$3 === null) {\n        return lockedCreate(mutex$3, wasmJson$5, 16)\n            .then((wasm) => {\n            wasmCache$3 = wasm;\n            writeSeed(seedBuffer, seedLow, seedHigh);\n            wasmCache$3.writeMemory(new Uint8Array(seedBuffer));\n            return wasmCache$3.calculate(data);\n        });\n    }\n    try {\n        writeSeed(seedBuffer, seedLow, seedHigh);\n        wasmCache$3.writeMemory(new Uint8Array(seedBuffer));\n        const hash = wasmCache$3.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new xxHash128 hash instance\n * @param seedLow Lower 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n * @param seedHigh Higher 32 bits of the number used to\n *  initialize the internal state of the algorithm (defaults to 0)\n */\nfunction createXXHash128(seedLow = 0, seedHigh = 0) {\n    if (validateSeed(seedLow)) {\n        return Promise.reject(validateSeed(seedLow));\n    }\n    if (validateSeed(seedHigh)) {\n        return Promise.reject(validateSeed(seedHigh));\n    }\n    return WASMInterface(wasmJson$5, 16).then((wasm) => {\n        const instanceBuffer = new ArrayBuffer(8);\n        writeSeed(instanceBuffer, seedLow, seedHigh);\n        wasm.writeMemory(new Uint8Array(instanceBuffer));\n        wasm.init();\n        const obj = {\n            init: () => {\n                wasm.writeMemory(new Uint8Array(instanceBuffer));\n                wasm.init();\n                return obj;\n            },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 512,\n            digestSize: 16,\n        };\n        return obj;\n    });\n}\n\nvar name$4 = \"ripemd160\";\nvar data$4 = \"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\";\nvar hash$4 = \"42f1de39\";\nvar wasmJson$4 = {\n\tname: name$4,\n\tdata: data$4,\n\thash: hash$4\n};\n\nconst mutex$2 = new Mutex();\nlet wasmCache$2 = null;\n/**\n * Calculates RIPEMD-160 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction ripemd160(data) {\n    if (wasmCache$2 === null) {\n        return lockedCreate(mutex$2, wasmJson$4, 20)\n            .then((wasm) => {\n            wasmCache$2 = wasm;\n            return wasmCache$2.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache$2.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new RIPEMD-160 hash instance\n */\nfunction createRIPEMD160() {\n    return WASMInterface(wasmJson$4, 20).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 20,\n        };\n        return obj;\n    });\n}\n\nfunction calculateKeyBuffer(hasher, key) {\n    const { blockSize } = hasher;\n    const buf = getUInt8Buffer(key);\n    if (buf.length > blockSize) {\n        hasher.update(buf);\n        const uintArr = hasher.digest('binary');\n        hasher.init();\n        return uintArr;\n    }\n    return new Uint8Array(buf.buffer, buf.byteOffset, buf.length);\n}\nfunction calculateHmac(hasher, key) {\n    hasher.init();\n    const { blockSize } = hasher;\n    const keyBuf = calculateKeyBuffer(hasher, key);\n    const keyBuffer = new Uint8Array(blockSize);\n    keyBuffer.set(keyBuf);\n    const opad = new Uint8Array(blockSize);\n    for (let i = 0; i < blockSize; i++) {\n        const v = keyBuffer[i];\n        opad[i] = v ^ 0x5C;\n        keyBuffer[i] = v ^ 0x36;\n    }\n    hasher.update(keyBuffer);\n    const obj = {\n        init: () => {\n            hasher.init();\n            hasher.update(keyBuffer);\n            return obj;\n        },\n        update: (data) => {\n            hasher.update(data);\n            return obj;\n        },\n        digest: ((outputType) => {\n            const uintArr = hasher.digest('binary');\n            hasher.init();\n            hasher.update(opad);\n            hasher.update(uintArr);\n            return hasher.digest(outputType);\n        }),\n        save: () => {\n            throw new Error('save() not supported');\n        },\n        load: () => {\n            throw new Error('load() not supported');\n        },\n        blockSize: hasher.blockSize,\n        digestSize: hasher.digestSize,\n    };\n    return obj;\n}\n/**\n * Calculates HMAC hash\n * @param hash Hash algorithm to use. It has to be the return value of a function like createSHA1()\n * @param key Key (string, Buffer or TypedArray)\n */\nfunction createHMAC(hash, key) {\n    if (!hash || !hash.then) {\n        throw new Error('Invalid hash function is provided! Usage: createHMAC(createMD5(), \"key\").');\n    }\n    return hash.then((hasher) => calculateHmac(hasher, key));\n}\n\nfunction calculatePBKDF2(digest, salt, iterations, hashLength, outputType) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const DK = new Uint8Array(hashLength);\n        const block1 = new Uint8Array(salt.length + 4);\n        const block1View = new DataView(block1.buffer);\n        const saltBuffer = getUInt8Buffer(salt);\n        const saltUIntBuffer = new Uint8Array(saltBuffer.buffer, saltBuffer.byteOffset, saltBuffer.length);\n        block1.set(saltUIntBuffer);\n        let destPos = 0;\n        const hLen = digest.digestSize;\n        const l = Math.ceil(hashLength / hLen);\n        let T = null;\n        let U = null;\n        for (let i = 1; i <= l; i++) {\n            block1View.setUint32(salt.length, i);\n            digest.init();\n            digest.update(block1);\n            T = digest.digest('binary');\n            U = T.slice();\n            for (let j = 1; j < iterations; j++) {\n                digest.init();\n                digest.update(U);\n                U = digest.digest('binary');\n                for (let k = 0; k < hLen; k++) {\n                    T[k] ^= U[k];\n                }\n            }\n            DK.set(T.subarray(0, hashLength - destPos), destPos);\n            destPos += hLen;\n        }\n        if (outputType === 'binary') {\n            return DK;\n        }\n        const digestChars = new Uint8Array(hashLength * 2);\n        return getDigestHex(digestChars, DK, hashLength);\n    });\n}\nconst validateOptions$2 = (options) => {\n    if (!options || typeof options !== 'object') {\n        throw new Error('Invalid options parameter. It requires an object.');\n    }\n    if (!options.hashFunction || !options.hashFunction.then) {\n        throw new Error('Invalid hash function is provided! Usage: pbkdf2(\"password\", \"salt\", 1000, 32, createSHA1()).');\n    }\n    if (!Number.isInteger(options.iterations) || options.iterations < 1) {\n        throw new Error('Iterations should be a positive number');\n    }\n    if (!Number.isInteger(options.hashLength) || options.hashLength < 1) {\n        throw new Error('Hash length should be a positive number');\n    }\n    if (options.outputType === undefined) {\n        options.outputType = 'hex';\n    }\n    if (!['hex', 'binary'].includes(options.outputType)) {\n        throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary']`);\n    }\n};\n/**\n * Generates a new PBKDF2 hash for the supplied password\n */\nfunction pbkdf2(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateOptions$2(options);\n        const hmac = yield createHMAC(options.hashFunction, options.password);\n        return calculatePBKDF2(hmac, options.salt, options.iterations, options.hashLength, options.outputType);\n    });\n}\n\nvar name$3 = \"scrypt\";\nvar data$3 = \"AGFzbQEAAAABIwZgAX8Bf2AAAX9gBX9/fn9/AGAEf39/fwBgAX8AYAN/f38AAwcGAAECAwQFBAUBcAEBAQUGAQECgIACBggBfwFBkIgECwc5BAZtZW1vcnkCABJIYXNoX1NldE1lbW9yeVNpemUAAA5IYXNoX0dldEJ1ZmZlcgABBnNjcnlwdAAFCpcmBlsBAX9BACEBAkAgAEEAKAKACGsiAEUNAAJAIABBEHYgAEGAgHxxIABJaiIAQABBf0cNAEH/ASEBDAELQQAhAUEAQQApA4AIIABBEHStfDcDgAgLIAFBGHRBGHULagECfwJAQQAoAogIIgANAEEAPwBBEHQiADYCiAhBgIAgQQAoAoAIayIBRQ0AAkAgAUEQdiABQYCAfHEgAUlqIgBAAEF/Rw0AQQAPC0EAQQApA4AIIABBEHStfDcDgAhBACgCiAghAAsgAAu5EAMMfwl+An8gAUEFdCEFIAQgAUEIdGohBiAEIAFBB3QiB2ohCAJAAkACQAJAIAFFDQBBACEJIAAhCiAEIQsDQCALIAooAgA2AgAgCkEEaiEKIAtBBGohCyAJQQFqIgkgBUkNAAsgAlANAiABQQh0IQxBACENIAMhDgNAQQAhCSABIQ8DQCAOIAlqIgogBCAJaiILKQMANwMAIApBCGogC0EIaikDADcDACAKQRBqIAtBEGopAwA3AwAgCkEYaiALQRhqKQMANwMAIApBIGogC0EgaikDADcDACAKQShqIAtBKGopAwA3AwAgCkEwaiALQTBqKQMANwMAIApBOGogC0E4aikDADcDACAKQcAAaiALQcAAaikDADcDACAKQcgAaiALQcgAaikDADcDACAKQdAAaiALQdAAaikDADcDACAKQdgAaiALQdgAaikDADcDACAKQeAAaiALQeAAaikDADcDACAKQegAaiALQegAaikDADcDACAKQfAAaiALQfAAaikDADcDACAKQfgAaiALQfgAaikDADcDACAJQYABaiEJIA9Bf2oiDw0ACyAEIAggBiABEAMgDiEJIAQhDyABIRADQCAJIAdqIgogDyAHaiILKQMANwMAIApBCGogC0EIaikDADcDACAKQRBqIAtBEGopAwA3AwAgCkEYaiALQRhqKQMANwMAIApBIGogC0EgaikDADcDACAKQShqIAtBKGopAwA3AwAgCkEwaiALQTBqKQMANwMAIApBOGogC0E4aikDADcDACAKQcAAaiALQcAAaikDADcDACAKQcgAaiALQcgAaikDADcDACAKQdAAaiALQdAAaikDADcDACAKQdgAaiALQdgAaikDADcDACAKQeAAaiALQeAAaikDADcDACAKQegAaiALQegAaikDADcDACAKQfAAaiALQfAAaikDADcDACAKQfgAaiALQfgAaikDADcDACAJQYABaiEJIA9BgAFqIQ8gEEF/aiIQDQALIAggBCAGIAEQAyAOIAxqIQ4gDUECaiINrSACVA0ADAILCyACUA0CIAhBQGoiCikDOCERIAopAzAhEiAKKQMoIRMgCikDICEUIAopAxghFSAKKQMQIRYgCikDCCEXIAopAwAhGEECIQoDQCAKrSEZIApBAmohCiAZIAJUDQALIAYgETcDOCAGIBI3AzAgBiATNwMoIAYgFDcDICAGIBU3AxggBiAWNwMQIAYgFzcDCCAGIBg3AwALAkAgAUUNACAHQUBqIgogCGohGiACp0F/aiEOIAogBGohGyABQQd0IQ1BACEMA0AgAyANIBsoAgAgDnFsaiEHQQAhCSABIQ8DQCAEIAlqIgogCikDACAHIAlqIgspAwCFNwMAIApBCGoiECAQKQMAIAtBCGopAwCFNwMAIApBEGoiECAQKQMAIAtBEGopAwCFNwMAIApBGGoiECAQKQMAIAtBGGopAwCFNwMAIApBIGoiECAQKQMAIAtBIGopAwCFNwMAIApBKGoiECAQKQMAIAtBKGopAwCFNwMAIApBMGoiECAQKQMAIAtBMGopAwCFNwMAIApBOGoiECAQKQMAIAtBOGopAwCFNwMAIApBwABqIhAgECkDACALQcAAaikDAIU3AwAgCkHIAGoiECAQKQMAIAtByABqKQMAhTcDACAKQdAAaiIQIBApAwAgC0HQAGopAwCFNwMAIApB2ABqIhAgECkDACALQdgAaikDAIU3AwAgCkHgAGoiECAQKQMAIAtB4ABqKQMAhTcDACAKQegAaiIQIBApAwAgC0HoAGopAwCFNwMAIApB8ABqIhAgECkDACALQfAAaikDAIU3AwAgCkH4AGoiCiAKKQMAIAtB+ABqKQMAhTcDACAJQYABaiEJIA9Bf2oiDw0ACyAEIAggBiABEAMgAyANIBooAgAgDnFsaiEHQQAhCSABIQ8DQCAIIAlqIgogCikDACAHIAlqIgspAwCFNwMAIApBCGoiECAQKQMAIAtBCGopAwCFNwMAIApBEGoiECAQKQMAIAtBEGopAwCFNwMAIApBGGoiECAQKQMAIAtBGGopAwCFNwMAIApBIGoiECAQKQMAIAtBIGopAwCFNwMAIApBKGoiECAQKQMAIAtBKGopAwCFNwMAIApBMGoiECAQKQMAIAtBMGopAwCFNwMAIApBOGoiECAQKQMAIAtBOGopAwCFNwMAIApBwABqIhAgECkDACALQcAAaikDAIU3AwAgCkHIAGoiECAQKQMAIAtByABqKQMAhTcDACAKQdAAaiIQIBApAwAgC0HQAGopAwCFNwMAIApB2ABqIhAgECkDACALQdgAaikDAIU3AwAgCkHgAGoiECAQKQMAIAtB4ABqKQMAhTcDACAKQegAaiIQIBApAwAgC0HoAGopAwCFNwMAIApB8ABqIhAgECkDACALQfAAaikDAIU3AwAgCkH4AGoiCiAKKQMAIAtB+ABqKQMAhTcDACAJQYABaiEJIA9Bf2oiDw0ACyAIIAQgBiABEAMgDEECaiIMrSACVA0ADAILCyAIQUBqIgopAzghESAKKQMwIRIgCikDKCETIAopAyAhFCAKKQMYIRUgCikDECEWIAopAwghFyAKKQMAIRhBAiEKA0AgCq0hGSAKQQJqIQogGSACVA0ACyAGIBE3AzggBiASNwMwIAYgEzcDKCAGIBQ3AyAgBiAVNwMYIAYgFjcDECAGIBc3AwggBiAYNwMACyABRQ0AQQAhCgNAIAAgBCgCADYCACAAQQRqIQAgBEEEaiEEIApBAWoiCiAFSQ0ACwsL4wUDAX8IfgJ/IAIgA0EHdCAAakFAaiIEKQMAIgU3AwAgAiAEKQMIIgY3AwggAiAEKQMQIgc3AxAgAiAEKQMYIgg3AxggAiAEKQMgIgk3AyAgAiAEKQMoIgo3AyggAiAEKQMwIgs3AzAgAiAEKQM4Igw3AzgCQCADRQ0AIANBAXQhDSAAQfgAaiEEIANBBnQhDkECIQADQCACIAUgBEGIf2opAwCFNwMAIAIgBiAEQZB/aikDAIU3AwggAiAHIARBmH9qKQMAhTcDECACIAggBEGgf2opAwCFNwMYIAIgCSAEQah/aikDAIU3AyAgAiAKIARBsH9qKQMAhTcDKCACIAsgBEG4f2opAwCFNwMwIAIgDCAEQUBqKQMAhTcDOCACEAQgASACKQMANwMAIAFBCGogAikDCDcDACABQRBqIAIpAxA3AwAgAUEYaiACKQMYNwMAIAFBIGogAikDIDcDACABQShqIAIpAyg3AwAgAUEwaiACKQMwNwMAIAFBOGogAikDODcDACACIAIpAwAgBEFIaikDAIU3AwAgAiACKQMIIARBUGopAwCFNwMIIAIgAikDECAEQVhqKQMAhTcDECACIAIpAxggBEFgaikDAIU3AxggAiACKQMgIARBaGopAwCFNwMgIAIgAikDKCAEQXBqKQMAhTcDKCACIAIpAzAgBEF4aikDAIU3AzAgAiACKQM4IAQpAwCFNwM4IAIQBCABIA5qIgMgAikDADcDACADQQhqIAIpAwg3AwAgA0EQaiACKQMQNwMAIANBGGogAikDGDcDACADQSBqIAIpAyA3AwAgA0EoaiACKQMoNwMAIANBMGogAikDMDcDACADQThqIAIpAzg3AwAgACANTw0BIARBgAFqIQQgAUHAAGohASAAQQJqIQAgAikDOCEMIAIpAzAhCyACKQMoIQogAikDICEJIAIpAxghCCACKQMQIQcgAikDCCEGIAIpAwAhBQwACwsLug0IAX4BfwF+AX8BfgF/AX4SfyAAIAAoAgQgACkDKCIBQiCIpyICIAApAzgiA0IgiKciBGpBB3cgACkDCCIFQiCIp3MiBiAEakEJdyAAKQMYIgdCIIincyIIIAZqQQ13IAJzIgkgB6ciCiABpyILakEHdyADp3MiAiALakEJdyAFp3MiDCACakENdyAKcyINIAxqQRJ3IAtzIg4gACkDACIBQiCIpyIPIAApAxAiA0IgiKciEGpBB3cgACkDICIFQiCIp3MiC2pBB3dzIgogCSAIakESdyAEcyIRIAJqQQd3IAApAzAiB6ciCSABpyISakEHdyADp3MiBCASakEJdyAFp3MiEyAEakENdyAJcyIUcyIJIBFqQQl3IAsgEGpBCXcgB0IgiKdzIhVzIhYgCWpBDXcgAnMiFyAWakESdyARcyIRakEHdyAGIBQgE2pBEncgEnMiEmpBB3cgFSALakENdyAPcyIUcyICIBJqQQl3IAxzIg8gAmpBDXcgBnMiGHMiBiARakEJdyAIIA0gFCAVakESdyAQcyIQIARqQQd3cyIMIBBqQQl3cyIIcyIVIAZqQQ13IApzIhQgDCAKIA5qQQl3IBNzIhMgCmpBDXcgC3MiGSATakESdyAOcyIKakEHdyAXcyILIApqQQl3IA9zIg4gC2pBDXcgDHMiFyAOakESdyAKcyINIAIgCCAMakENdyAEcyIMIAhqQRJ3IBBzIghqQQd3IBlzIgpqQQd3cyIEIBQgFWpBEncgEXMiECALakEHdyAJIBggD2pBEncgEnMiEWpBB3cgDHMiDCARakEJdyATcyISIAxqQQ13IAlzIg9zIgkgEGpBCXcgCiAIakEJdyAWcyITcyIWIAlqQQ13IAtzIhQgFmpBEncgEHMiEGpBB3cgBiAPIBJqQRJ3IBFzIhFqQQd3IBMgCmpBDXcgAnMiC3MiAiARakEJdyAOcyIOIAJqQQ13IAZzIhhzIgYgEGpBCXcgFSAXIAsgE2pBEncgCHMiCCAMakEHd3MiCyAIakEJd3MiE3MiFSAGakENdyAEcyIXIAsgBCANakEJdyAScyISIARqQQ13IApzIhkgEmpBEncgDXMiBGpBB3cgFHMiCiAEakEJdyAOcyIPIApqQQ13IAtzIhQgD2pBEncgBHMiDSACIBMgC2pBDXcgDHMiDCATakESdyAIcyIIakEHdyAZcyILakEHd3MiBCAXIBVqQRJ3IBBzIhAgCmpBB3cgCSAYIA5qQRJ3IBFzIg5qQQd3IAxzIgwgDmpBCXcgEnMiESAMakENdyAJcyIXcyIJIBBqQQl3IAsgCGpBCXcgFnMiEnMiEyAJakENdyAKcyIYIBNqQRJ3IBBzIhBqQQd3IAYgFyARakESdyAOcyIKakEHdyASIAtqQQ13IAJzIhdzIgIgCmpBCXcgD3MiDiACakENdyAGcyIWcyIGIAkgFiAOakESdyAKcyIWakEHdyAVIBQgFyASakESdyAIcyIIIAxqQQd3cyIKIAhqQQl3cyISIApqQQ13IAxzIg9zIgwgFmpBCXcgBCANakEJdyARcyIRcyIVIAxqQQ13IAlzIhQgFWpBEncgFnMiCWpBB3cgAiAPIBJqQRJ3IAhzIghqQQd3IBEgBGpBDXcgC3MiD3MiCyAIakEJdyATcyITIAtqQQ13IAJzIhdzIhZqNgIEIAAgACgCCCAWIAlqQQl3IAogDyARakESdyANcyIRakEHdyAYcyICIBFqQQl3IA5zIg5zIg9qNgIIIAAgACgCDCAPIBZqQQ13IAZzIg1qNgIMIAAgACgCECAGIBBqQQl3IBJzIhIgDiACakENdyAKcyIYIBcgE2pBEncgCHMiCiAMakEHd3MiCCAKakEJd3MiFiAIakENdyAMcyIMajYCECAAIAAoAgAgDSAPakESdyAJc2o2AgAgACAAKAIUIAwgFmpBEncgCnNqNgIUIAAgACgCGCAIajYCGCAAIAAoAhwgFmo2AhwgACAAKAIgIBIgBmpBDXcgBHMiCSAYIA5qQRJ3IBFzIgYgC2pBB3dzIgogBmpBCXcgFXMiBGo2AiAgACAAKAIkIAQgCmpBDXcgC3MiC2o2AiQgACAAKAIoIAsgBGpBEncgBnNqNgIoIAAgACgCLCAKajYCLCAAIAAoAjAgCSASakESdyAQcyIGIAJqQQd3IBRzIgtqNgIwIAAgACgCNCALIAZqQQl3IBNzIgpqNgI0IAAgACgCOCAKIAtqQQ13IAJzIgJqNgI4IAAgACgCPCACIApqQRJ3IAZzajYCPAtyAwF/AX4CfwJAIAJFDQBBACgCiAgiAyAAIAGtIgQgAyAAQQd0IgUgAmxqIgMgAyAFIAFsaiIGEAIgAkEBRg0AIAJBf2ohASAFIQIDQEEAKAKICCACaiAAIAQgAyAGEAIgAiAFaiECIAFBf2oiAQ0ACwsL\";\nvar hash$3 = \"d96fb75f\";\nvar wasmJson$3 = {\n\tname: name$3,\n\tdata: data$3,\n\thash: hash$3\n};\n\nfunction scryptInternal(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { costFactor, blockSize, parallelism, hashLength, } = options;\n        const SHA256Hasher = createSHA256();\n        const blockData = yield pbkdf2({\n            password: options.password,\n            salt: options.salt,\n            iterations: 1,\n            hashLength: 128 * blockSize * parallelism,\n            hashFunction: SHA256Hasher,\n            outputType: 'binary',\n        });\n        const scryptInterface = yield WASMInterface(wasmJson$3, 0);\n        // last block is for storing the temporary vectors\n        const VSize = 128 * blockSize * costFactor;\n        const XYSize = 256 * blockSize;\n        scryptInterface.setMemorySize(blockData.length + VSize + XYSize);\n        scryptInterface.writeMemory(blockData, 0);\n        // mix blocks\n        scryptInterface.getExports().scrypt(blockSize, costFactor, parallelism);\n        const expensiveSalt = scryptInterface\n            .getMemory()\n            .subarray(0, 128 * blockSize * parallelism);\n        const outputData = yield pbkdf2({\n            password: options.password,\n            salt: expensiveSalt,\n            iterations: 1,\n            hashLength,\n            hashFunction: SHA256Hasher,\n            outputType: 'binary',\n        });\n        if (options.outputType === 'hex') {\n            const digestChars = new Uint8Array(hashLength * 2);\n            return getDigestHex(digestChars, outputData, hashLength);\n        }\n        // return binary format\n        return outputData;\n    });\n}\n// eslint-disable-next-line no-bitwise\nconst isPowerOfTwo = (v) => v && !(v & (v - 1));\nconst validateOptions$1 = (options) => {\n    if (!options || typeof options !== 'object') {\n        throw new Error('Invalid options parameter. It requires an object.');\n    }\n    if (!Number.isInteger(options.blockSize) || options.blockSize < 1) {\n        throw new Error('Block size should be a positive number');\n    }\n    if (!Number.isInteger(options.costFactor)\n        || options.costFactor < 2\n        || !isPowerOfTwo(options.costFactor)) {\n        throw new Error('Cost factor should be a power of 2, greater than 1');\n    }\n    if (!Number.isInteger(options.parallelism) || options.parallelism < 1) {\n        throw new Error('Parallelism should be a positive number');\n    }\n    if (!Number.isInteger(options.hashLength) || options.hashLength < 1) {\n        throw new Error('Hash length should be a positive number.');\n    }\n    if (options.outputType === undefined) {\n        options.outputType = 'hex';\n    }\n    if (!['hex', 'binary'].includes(options.outputType)) {\n        throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary']`);\n    }\n};\n/**\n * Calculates hash using the scrypt password-based key derivation function\n * @returns Computed hash as a hexadecimal string or as\n *          Uint8Array depending on the outputType option\n */\nfunction scrypt(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateOptions$1(options);\n        return scryptInternal(options);\n    });\n}\n\nvar name$2 = \"bcrypt\";\nvar data$2 = \"\";\nvar hash$2 = \"9f4c7b9e\";\nvar wasmJson$2 = {\n\tname: name$2,\n\tdata: data$2,\n\thash: hash$2\n};\n\nfunction bcryptInternal(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const { costFactor, password, salt } = options;\n        const bcryptInterface = yield WASMInterface(wasmJson$2, 0);\n        bcryptInterface.writeMemory(getUInt8Buffer(salt), 0);\n        const passwordBuffer = getUInt8Buffer(password);\n        bcryptInterface.writeMemory(passwordBuffer, 16);\n        const shouldEncode = options.outputType === 'encoded' ? 1 : 0;\n        bcryptInterface.getExports().bcrypt(passwordBuffer.length, costFactor, shouldEncode);\n        const memory = bcryptInterface.getMemory();\n        if (options.outputType === 'encoded') {\n            return intArrayToString(memory, 60);\n        }\n        if (options.outputType === 'hex') {\n            const digestChars = new Uint8Array(24 * 2);\n            return getDigestHex(digestChars, memory, 24);\n        }\n        // return binary format\n        // the data is copied to allow GC of the original memory buffer\n        return memory.slice(0, 24);\n    });\n}\nconst validateOptions = (options) => {\n    if (!options || typeof options !== 'object') {\n        throw new Error('Invalid options parameter. It requires an object.');\n    }\n    if (!Number.isInteger(options.costFactor) || options.costFactor < 4 || options.costFactor > 31) {\n        throw new Error('Cost factor should be a number between 4 and 31');\n    }\n    options.password = getUInt8Buffer(options.password);\n    if (options.password.length < 1) {\n        throw new Error('Password should be at least 1 byte long');\n    }\n    if (options.password.length > 72) {\n        throw new Error('Password should be at most 72 bytes long');\n    }\n    options.salt = getUInt8Buffer(options.salt);\n    if (options.salt.length !== 16) {\n        throw new Error('Salt should be 16 bytes long');\n    }\n    if (options.outputType === undefined) {\n        options.outputType = 'encoded';\n    }\n    if (!['hex', 'binary', 'encoded'].includes(options.outputType)) {\n        throw new Error(`Insupported output type ${options.outputType}. Valid values: ['hex', 'binary', 'encoded']`);\n    }\n};\n/**\n * Calculates hash using the bcrypt password-hashing function\n * @returns Computed hash\n */\nfunction bcrypt(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateOptions(options);\n        return bcryptInternal(options);\n    });\n}\nconst validateHashCharacters = (hash) => {\n    if (!/^\\$2[axyb]\\$[0-3][0-9]\\$[./A-Za-z0-9]{53}$/.test(hash)) {\n        return false;\n    }\n    if (hash[4] === '0' && parseInt(hash[5], 10) < 4) {\n        return false;\n    }\n    if (hash[4] === '3' && parseInt(hash[5], 10) > 1) {\n        return false;\n    }\n    return true;\n};\nconst validateVerifyOptions = (options) => {\n    if (!options || typeof options !== 'object') {\n        throw new Error('Invalid options parameter. It requires an object.');\n    }\n    if (options.hash === undefined || typeof options.hash !== 'string') {\n        throw new Error('Hash should be specified');\n    }\n    if (options.hash.length !== 60) {\n        throw new Error('Hash should be 60 bytes long');\n    }\n    if (!validateHashCharacters(options.hash)) {\n        throw new Error('Invalid hash');\n    }\n    options.password = getUInt8Buffer(options.password);\n    if (options.password.length < 1) {\n        throw new Error('Password should be at least 1 byte long');\n    }\n    if (options.password.length > 72) {\n        throw new Error('Password should be at most 72 bytes long');\n    }\n};\n/**\n * Verifies password using bcrypt password-hashing function\n * @returns True if the encoded hash matches the password\n */\nfunction bcryptVerify(options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        validateVerifyOptions(options);\n        const { hash, password } = options;\n        const bcryptInterface = yield WASMInterface(wasmJson$2, 0);\n        bcryptInterface.writeMemory(getUInt8Buffer(hash), 0);\n        const passwordBuffer = getUInt8Buffer(password);\n        bcryptInterface.writeMemory(passwordBuffer, 60);\n        return !!bcryptInterface.getExports().bcrypt_verify(passwordBuffer.length);\n    });\n}\n\nvar name$1 = \"whirlpool\";\nvar data$1 = \"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\";\nvar hash$1 = \"358808f8\";\nvar wasmJson$1 = {\n\tname: name$1,\n\tdata: data$1,\n\thash: hash$1\n};\n\nconst mutex$1 = new Mutex();\nlet wasmCache$1 = null;\n/**\n * Calculates Whirlpool hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction whirlpool(data) {\n    if (wasmCache$1 === null) {\n        return lockedCreate(mutex$1, wasmJson$1, 64)\n            .then((wasm) => {\n            wasmCache$1 = wasm;\n            return wasmCache$1.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache$1.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new Whirlpool hash instance\n */\nfunction createWhirlpool() {\n    return WASMInterface(wasmJson$1, 64).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 64,\n        };\n        return obj;\n    });\n}\n\nvar name = \"sm3\";\nvar data = \"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\";\nvar hash = \"6e6f46ad\";\nvar wasmJson = {\n\tname: name,\n\tdata: data,\n\thash: hash\n};\n\nconst mutex = new Mutex();\nlet wasmCache = null;\n/**\n * Calculates SM3 hash\n * @param data Input data (string, Buffer or TypedArray)\n * @returns Computed hash as a hexadecimal string\n */\nfunction sm3(data) {\n    if (wasmCache === null) {\n        return lockedCreate(mutex, wasmJson, 32)\n            .then((wasm) => {\n            wasmCache = wasm;\n            return wasmCache.calculate(data);\n        });\n    }\n    try {\n        const hash = wasmCache.calculate(data);\n        return Promise.resolve(hash);\n    }\n    catch (err) {\n        return Promise.reject(err);\n    }\n}\n/**\n * Creates a new SM3 hash instance\n */\nfunction createSM3() {\n    return WASMInterface(wasmJson, 32).then((wasm) => {\n        wasm.init();\n        const obj = {\n            init: () => { wasm.init(); return obj; },\n            update: (data) => { wasm.update(data); return obj; },\n            digest: (outputType) => wasm.digest(outputType),\n            save: () => wasm.save(),\n            load: (data) => { wasm.load(data); return obj; },\n            blockSize: 64,\n            digestSize: 32,\n        };\n        return obj;\n    });\n}\n\nexport { adler32, argon2Verify, argon2d, argon2i, argon2id, bcrypt, bcryptVerify, blake2b, blake2s, blake3, crc32, crc32c, createAdler32, createBLAKE2b, createBLAKE2s, createBLAKE3, createCRC32, createCRC32C, createHMAC, createKeccak, createMD4, createMD5, createRIPEMD160, createSHA1, createSHA224, createSHA256, createSHA3, createSHA384, createSHA512, createSM3, createWhirlpool, createXXHash128, createXXHash3, createXXHash32, createXXHash64, keccak, md4, md5, pbkdf2, ripemd160, scrypt, sha1, sha224, sha256, sha3, sha384, sha512, sm3, whirlpool, xxhash128, xxhash3, xxhash32, xxhash64 };\n","import * as scran from \"scran.js\";\n\nexport function freeCache(object) {\n    // Just an alias for back-compatibility.\n    scran.free(object);\n    return;\n}\n\nfunction changedParametersIllegal(x, y, xskip, yskip) {\n    // Failing if this is a TypedArray or ArrayBuffer;\n    // we shouldn't be seeing these things here anyway.\n    if (!xskip) {\n        if (x instanceof ArrayBuffer || ArrayBuffer.isView(x)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n    if (!yskip) {\n        if (y instanceof ArrayBuffer || ArrayBuffer.isView(y)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n}\n\nexport function changedParameters(x, y) {\n    if (typeof x != typeof y) {\n        changedParametersIllegal(x, y, false, false);\n        return true;\n    } else if (typeof x != \"object\") {\n        return x != y;\n    }\n\n    //Handling nulls (which are objects).\n    let xnull = x === null;\n    let ynull = y === null;\n    if (xnull !== ynull) {\n        changedParametersIllegal(x, y, xnull, ynull);\n        return true;\n    } else if (xnull) {\n        return false;\n    }\n\n    // Handling arrays (which are also objects).\n    let xarr = x instanceof Array;\n    let yarr = y instanceof Array;\n    if (xarr != yarr) {\n        changedParametersIllegal(x, y, xarr, yarr);\n        return true;\n    } else if (xarr) {\n        if (x.length != y.length) {\n            return true;\n        }\n\n        for (var i = 0; i < x.length; i++) {\n            if (changedParameters(x[i], y[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    changedParametersIllegal(x, y, false, false);\n    \n    // Now actually handling objects. We don't \n    // worry about the order of the keys here.\n    let xkeys = Object.keys(x);\n    let ykeys = Object.keys(y);\n    if (xkeys.length != ykeys.length) {\n        return true;\n    }\n\n    xkeys.sort();\n    ykeys.sort();\n    for (var i = 0; i < xkeys.length; i++) {\n        if (xkeys[i] != ykeys[i]) {\n            return true;\n        }\n    }\n\n    for (const k of xkeys) {\n        if (changedParameters(x[k], y[k])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n\n        // Views also trigger reallocation, because it is assumed that the\n        // caller of this function does not own the view, but downstream\n        // uses of the array will involve writing to it.\n        if (candidate.size != size || candidate.constructor.className != type || candidate.owner !== null) { \n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = scran.createUint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = scran.createInt32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = scran.createFloat64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function findValidUpstreamStates(states, msg) {\n    let to_use = [];\n    for (const [k, v] of Object.entries(states)) {\n        if (v.valid()) {\n            to_use.push(k);\n        }\n    }\n    if (to_use.length == 0) {\n        throw new Error(\"expected at least one valid upstream \" + msg + \" state\");\n    }\n    return to_use;\n}\n\nexport function checkIndices(indices, max) {\n    if (max !== null) {\n        for (const i of indices) {\n            if (i < 0 || i >= max) {\n                throw new Error(\"subset indices are out of range\");\n            }\n        }\n    }\n\n    for (var i = 1; i < indices.length; i++) {\n        if (indices[i] <= indices[i-1]) {\n            throw new Error(\"subset indices must be sorted and unique\");\n        }\n    }\n}\n\nexport async function defaultDownload(url) {\n    let resp = await fetch(url);\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch content at \" + url + \"(\" + resp.status + \")\");\n    }\n    return new Uint8Array(await resp.arrayBuffer());\n}\n\nexport function guessFeatureTypes(genes) {\n    let output = { columns: {} };\n\n    let rn = genes.rowNames();\n    if (rn !== null) {\n        output.row_names = scran.guessFeatures(rn, { forceTaxonomy: true });\n    }\n\n    for (const key of genes.columnNames()) {\n        let curcol = genes.column(key);\n        if (curcol instanceof Array) {\n            output.columns[key] = scran.guessFeatures(genes.column(key), { forceTaxonomy: true });\n        }\n    }\n\n    return output;\n}\n\nexport function subsetInvalidFactors(arrays) {\n    let N = arrays[0].length;\n    let output = { arrays: [], retain: null };\n\n    let invalid = new Uint8Array(N);\n    invalid.fill(0);\n    for (const x of arrays) {\n        let transformed = scran.factorize(x, { action: \"none\", placeholder: -1 });\n        output.arrays.push(transformed);\n        transformed.ids.forEach((y, i) => {\n            if (y == -1) {\n                invalid[i] = 1;\n            }\n        });\n    }\n\n    let num_invalid = 0;\n    invalid.forEach(y => { num_invalid += y; });\n    if (num_invalid == 0) {\n        return output;\n    }\n\n    let retain = new Int32Array(N - num_invalid);\n    {\n        let counter = 0;\n        for (var i = 0; i < N; i++) {\n            if (invalid[i] == 0) {\n                retain[counter] = i;\n                counter++;\n            }\n        }\n    }\n    output.retain = retain;\n\n    for (var i = 0; i < output.arrays.length; i++) {\n        let x = output.arrays[i];\n        let new_ids = scran.subsetBlock(x.ids, retain);\n        let remapping = scran.dropUnusedBlock(new_ids);\n        let new_levels = remapping.map(i => x.levels[i]);\n\n        scran.free(x.ids);\n        x.ids = new_ids;\n        x.levels = new_levels;\n    }\n\n    return output;\n}\n","export class SimpleFile {\n    #mode;\n    #buffer;\n    #file;\n    #name;\n\n    constructor(x, { name = null } = {}) {\n        if (x instanceof File) {\n            this.#mode = \"file\";\n            this.#file = x;\n            if (name === null) {\n                name = x.name;\n            }\n            this.#name = name;\n        } else if (x instanceof Uint8Array) {\n            this.#mode = \"buffer\";\n            this.#buffer = x; \n            if (name === null) {\n                throw new Error(\"'name' must be provided for Uint8Array inputs in SimpleFile constructor\");\n            }\n            this.#name = name;\n        } else {\n            throw new Error(\"unknown type '\" + typeof(x) + \"' for SimpleFile constructor\");\n        }\n    }\n\n    buffer({ copy = false } = {}) {\n        if (this.#mode == \"file\") {\n            let reader = new FileReaderSync();\n            let b = reader.readAsArrayBuffer(this.#file);\n            return new Uint8Array(b);\n        } else {\n            if (copy) {\n                return this.#buffer.slice();\n            } else {\n                return this.#buffer;\n            }\n        }\n    }\n\n    size() {\n        if (this.#mode == \"file\") {\n            return this.#file.size;\n        } else {\n            return this.#buffer.length;\n        }\n    }\n\n    name() {\n        return this.#name;\n    }\n\n    content({ copy = false } = {}) {\n        return this.buffer({ copy: copy });\n    }\n}\n","export function stream(file, chunkSize, callback, resolve, reject) {\n    reject(\"no support for file paths in the browser context\");\n}\n\nexport function peek(file, n) {\n    throw new Error(\"no support for file paths in the browser context\");\n}\n","import * as pako from \"pako\";\nimport ppp from \"papaparse\";\nimport * as astream from \"./abstract/stream.js\";\nimport * as afile from \"../abstract/file.js\";\n\nexport function extractHDF5Strings(handle, name) {\n    if (!(name in handle.children)) {\n        return null;\n    }\n\n    if (handle.children[name] !== \"DataSet\") {\n        return null;\n    }\n\n    let content = handle.open(name);\n    if (content.type !== \"String\") {\n        return null;\n    }\n\n    return content.load();\n}\n\n/**\n * Summarize an array, typically corresponding to a single column of per-cell annotation.\n * This can be used as part of a preflight response in a Reader.\n *\n * @param {Array|TypedArray} array - Per-cell annotation array of length equal to the number of cells for a given matrix.\n * An Array is treated as categorical data and should contain strings, while TypedArrays are treated as continuous data.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.limit=50] - Maximum number of unique values to report for categorical `x`.\n *\n * @return {object} Object containing `type`, a string indicating whether `array` was categorical or continuous.\n *\n * If `\"categorical\"`, the object will contain `values`, an array of unique values up to the length specified by `limit`.\n * It will also contain `truncated`, a boolean indicating whether the actual number of unique values exceeds `limit`.\n *\n * If `\"continuous\"`, the object will contain the numbers `min` and `max` specifying the minimum and maximum value in `x`, respectively.\n * `min` or `max` may be negative or positive infinity, respectively, if there is no bound on one or both ends.\n * If `min > max`, all values in `array` are `NaN`s such that no bound can be found.\n */\nexport function summarizeArray(array, { limit = 50 } = {}) {\n    if (array instanceof Array) {\n        let chosen = Array.from(new Set(array));\n        chosen.sort();\n        let truncated = false;\n        if (chosen.length > limit) {\n            chosen = chosen.slice(0, limit);\n            truncated = true;\n        }\n        return {\n            \"type\": \"categorical\",\n            \"values\": chosen,\n            \"truncated\": truncated\n        };\n    } else {\n        let min = Number.POSITIVE_INFINITY, max = Number.NEGATIVE_INFINITY;\n        array.forEach(x => {\n            if (x < min) {\n                min = x;\n            }\n            if (x > max) {\n                max = x;\n            }\n        });\n\n        return { \n            \"type\": \"continuous\",\n            \"min\": min, \n            \"max\": max \n        };\n    }\n}\n\nfunction guess_compression(x, compression) {\n    if (compression !== null) {\n        return compression;\n    }\n\n    let buffer;\n    if (x instanceof Uint8Array) {\n        buffer = x;\n    } else {\n        buffer = astream.peek(x, 3);\n    }\n\n    // Compare against magic words for auto-detection.\n    if (buffer.length >= 3 && buffer[0] == 0x1F && buffer[1] == 0x8B && buffer[2] == 0x08) {\n        return 'gz';\n    }\n\n    return 'none';\n}\n\nexport function unpackText(buffer, { compression = null } = {}) {\n    compression = guess_compression(buffer, compression);\n    let txt = (compression === \"gz\" ? pako.ungzip(buffer) : buffer);\n    const dec = new TextDecoder();\n    return dec.decode(txt);\n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readLines(buffer, { compression = null } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let lines = decoded.split(\"\\n\");\n    if (lines.length > 0 && lines[lines.length - 1] == \"\") { // ignoring the trailing newline.\n        lines.pop();\n    }\n    return lines;    \n}\n\nfunction merge_bytes(leftovers, decoder) {\n    let total = 0;\n    for (const x of leftovers) {\n        total += x.length;\n    }\n\n    let combined = new Uint8Array(total);\n    total = 0;\n    for (const x of leftovers) {\n        combined.set(x, total);\n        total += x.length;\n    }\n\n    return decoder.decode(combined);\n}\n\nasync function stream_callback(x, compression, chunkSize, callback) {\n    // Force the input to be either a Uint8Array or a file path string.\n    if (typeof x == \"string\") {\n        ;\n    } else if (x instanceof Uint8Array) {\n        ;\n    } else if (x instanceof afile.SimpleFile) {\n        x = x.content();\n    } else {\n        x = (new afile.SimpleFile(x, { name: \"dummy\" })).content();\n    }\n\n    if (guess_compression(x, compression) == \"gz\") {\n        await (new Promise((resolve, reject) => {\n            let gz = new pako.Inflate({ chunkSize: chunkSize });\n            gz.onData = callback;\n            gz.onEnd = status => {\n                if (status) {\n                    reject(\"gzip decompression failed; \" + gz.msg);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            if (typeof x == \"string\") {\n                astream.stream(x, chunkSize, chunk => gz.push(chunk), null, reject);\n            } else {\n                gz.push(x);\n            }\n        }));\n        return;\n    }\n\n    // Remaining possibilities are uncompressed.\n    if (typeof x == \"string\") {\n        await (new Promise((resolve, reject) => astream.stream(x, chunkSize, callback, resolve, reject)));\n        return;\n    }\n\n    callback(x);\n    return;\n}\n\n/**\n * Read lines of text from a file, possibly with decompression.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {number} [options.chunkSize=65536] - Chunk size in bytes to use for file reading (if `x` is a file path) and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of strings where each entry contains a line in `buffer`.\n * The newline itself is not included in each string.\n * @async \n */\nexport async function readLines2(x, { compression = null, chunkSize = 65536 } = {}) {\n    const dec = new TextDecoder;\n    let leftovers = [];\n    let lines = [];\n\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            if (chunk[i] == 10) { // i.e., ASCII newline.\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    lines.push(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    lines.push(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        lines.push(merge_bytes(leftovers, dec));\n    }\n\n    return lines;    \n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readTable(buffer, { compression = null, delim = \"\\t\", firstOnly = false } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let res = ppp.parse(decoded, { delimiter: delim, preview: (firstOnly ? 1 : 0) });\n\n    // Handle terminating newlines.\n    let last = res.data[res.data.length - 1];\n    if (last.length === 1 && last[0] === \"\") {\n        res.data.pop();\n    }\n\n    return res.data;\n}\n\n/**\n * Read a delimiter-separated table from a buffer, possibly with decompression.\n * This assumes that newlines represent the end of each row of the table, i.e., there cannot be newlines inside quoted strings.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {string} [options.delim=\"\\t\"] - Delimiter between fields.\n * @param {number} [options.chunkSize=1048576] - Chunk size in bytes to use for file reading (if `x` is a path), parsing of rows, and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of length equal to the number of lines in `buffer`.\n * Each entry is an array of strings, containing the `delim`-separated fields for its corresponding line.\n *\n * @async\n */\nexport async function readTable2(x, { compression = null, delim = \"\\t\", chunkSize = 1048576 } = {}) {\n    const dec = new TextDecoder;\n\n    let rows = [];\n    let parse = (str) => {\n        let out = ppp.parse(str, { delimiter: delim });\n        if (out.meta.aborted) {\n            let msg = \"failed to parse delimited file\";\n            for (const e of out.errors) {\n                msg += \"; \" + e.message;\n            }\n            throw new Error(msg);\n        }\n        for (const x of out.data) {\n            rows.push(x);\n        }\n    };\n\n    let leftovers = [];\n    let size_left = 0;\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            // We assume that all newlines are end-of-rows, i.e., there are no\n            // newlines inside quoted strings. Under this assumption, we can\n            // safely chunk the input stream based on newlines, parse each\n            // chunk, and then combine the parsing results together. To avoid\n            // too many parsing calls, we accumulate buffers until we hit \n            // the chunkSize and then we decode + parse them altogether.\n            if (chunk[i] == 10 && (i - last) + size_left >= chunkSize) {\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    parse(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    parse(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n                size_left = 0;\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n            size_left += chunk.length - last;\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        let combined = merge_bytes(leftovers, dec);\n        parse(combined);\n        if (combined[combined.length - 1] == \"\\n\") { // guaranteed to have non-zero length, by virtue of how 'leftovers' is filled.\n            rows.pop();            \n        }\n    }\n\n    return rows;    \n}\n\n/**\n * Detect if an array contains only stringified numbers and, if so, convert it into a TypedArray.\n * Conversion will still be performed for non-number strings corresponding to missing values or explicit not-a-number entries.\n *\n * @param {Array} x Array of strings, usually corresponding to a column in a table read by {@linkcode readDSVFromBuffer}.\n *\n * @return {?Float64Array} A Float64Array is returned if `x` contains stringified numbers.\n * Otherwise, `null` is returned if the conversion could not be performed.\n */\nexport function promoteToNumber(x) {\n    let as_num = new Float64Array(x.length);\n\n    for (const [i, v] of Object.entries(x)) {\n        // See discussion at https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number.\n        let opt1 = Number(v);\n        let opt2 = parseFloat(v);\n        if (!isNaN(opt1) && !isNaN(opt2)) {\n            as_num[i] = opt1;\n        } else if (v === \"\" || v === \"NA\" || v == \"na\" || v == \"NaN\" || v == \"nan\") {\n            as_num[i] = NaN;\n        } else if (v == \"Inf\" || v == \"inf\") {\n            as_num[i] = Number.POSITIVE_INFINITY;\n        } else if (v == \"-Inf\" || v == \"-inf\") {\n            as_num[i] = Number.NEGATIVE_INFINITY;\n        } else {\n            return null;\n        }\n    }\n\n    return as_num;\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\nimport * as afile from \"./abstract/file.js\";\n\n/**\n * Any class that satisfies the ArtifactdbProjectNavigator contract, so called as it is intended to \"navigate\" an ArtifactDB project directory.\n * This should provide the following methods:\n * \n * - `metadata(p)`, a (possibly async) method that accepts a string `p` containing a relative path to a resource inside an ArtifactDB project directory,\n *   and returns an object containing the metadata for that object.\n *   Any redirections should be resolved by this method.\n *\n *   Note that {@linkplain AbstractArtifactdbDataset} will automatically cache the outputs of all `metadata()` calls between any invocations of {@linkcode AbstractArtifactdbDataset#clear clear},\n *   to improve efficiency when repeatedly accessing the same metadata.\n *   The same applies to {@linkplain AbstractArtifactdbResult}.\n * - `file(p)`, a (possibly async) method that accepts a string `p` containing a relative path inside a project directory and returns the contents of the file at that path.\n *   The return value should typically be a Uint8Array; on Node.js, methods may alternatively return a string containing a path to the file on the local file system.\n *   The method does not need to handle redirections from `p`.\n *\n * Optionally, the ArtifactdbProjectNavigator class may implement a `clear()` method to remove any cached content.\n * This will be called by {@linkcode AbstractArtifactdbDataset#clear AbstractArtifactdbDataset.clear} and  {@linkcode AbstractArtifactdbResult#clear AbstractArtifactdbResult.clear}.\n *\n * @typedef ArtifactdbProjectNavigator\n */\n\n/**************************\n ******* Internals ********\n **************************/\n\nasync function load_data_frame(info, navigator) {\n    if (typeof info == \"string\") {\n        info = await navigator.metadata(info);\n    }\n    let contents = await navigator.file(info.path);\n\n    let colnames;\n    let columns;\n    let rownames = null;\n\n    if (info[\"$schema\"].startsWith(\"csv_data_frame/\")) {\n        // TODO: replace with comservatory parser.\n        let parsed = await eutils.readTable2(contents, { delim: \",\" });\n        colnames = parsed.shift();\n\n        columns = new Array(colnames.length);\n        for (var i = 0; i < columns.length; i++) {\n            let current = [];\n            for (const x of parsed) {\n                current.push(x[i]);\n            }\n            columns[i] = current;\n        }\n\n        if (info.data_frame.row_names) {\n            rownames = columns.shift();\n            colnames.shift();\n        }\n\n        // Mutating the type... this doesn't quite handle NAs and NaNs properly, but whatever.\n        for (var i = 0; i < columns.length; i++) {\n            let type = info.data_frame.columns[i].type;\n            if (type == \"integer\") {\n                columns[i] = new Int32Array(columns[i]);\n            } else if (type == \"number\") {\n                columns[i] = new Float64Array(columns[i]);\n            } else if (type == \"boolean\") {\n                columns[i] = columns[i].map(x => x == \"true\");\n            }\n        }\n\n    } else if (info[\"$schema\"].startsWith(\"hdf5_data_frame/\")) {\n        let out = scran.realizeFile(contents);\n        try {\n            let handle = new scran.H5File(out.path);\n            let ghandle = handle.open(info.hdf5_data_frame.group);\n\n            colnames = ghandle.open(\"column_names\", { load: true }).values;\n            if (info.data_frame.row_names) {\n                rownames = ghandle.open(\"row_names\", { load: true }).values;\n            }\n\n            columns = [];\n            let chandle = ghandle.open(\"data\");\n            for (var i = 0; i < colnames.length; i++) {\n                if (!(String(i) in chandle.children)) {\n                    columns.push(null);\n                    continue;\n                }\n\n                let dhandle = chandle.open(String(i), { load: true });\n                let current = dhandle.values;\n\n                let type = info.data_frame.columns[i];\n                if (type == \"integer\") {\n                    if (current instanceof Float64Array || current instanceof Float32Array) {\n                        current = new Int32Array(current);\n                    }\n\n                } else if (type == \"number\") {\n                    if (!(current instanceof Float64Array) && !(current instanceof Float32Array)) {\n                        current = new Float64Array(current);\n                    }\n\n                } else if (type == \"boolean\") {\n                    let replacement = new Array(current.length);\n                    for (var i = 0; i < current.length; i++) {\n                        if (current[i] == -2147483648) {\n                            replacement[i] = null;\n                        } else {\n                            replacement[i] = current[i] != 0\n                        }\n                    }\n                    current = replacement;\n\n                } else if (type == \"string\" || type == \"date\") {\n                    if (\"missing-value-placeholder\" in dhandle.attributes) {\n                        let placeholder = dhandle.readAttribute(\"missing-value-placeholder\").values[0];\n                        for (var i = 0; i < current.length; i++) {\n                            if (current[i] == placeholder) {\n                                current[i] = null;\n                            }\n                        }\n                    }\n                }\n\n                columns.push(current);\n            }\n        } finally {\n            out.flush();\n        }\n\n    } else {\n        throw new Error(\"unknown data_frame schema type '\" + info[\"$schema\"] + \"'\");\n    }\n\n    let new_columns = {};\n    let new_colnames = [];\n    for (var i = 0; i < columns.length; i++) {\n        if (info.data_frame.columns[i].type === \"other\") {\n            let nest_meta = await navigator.metadata(info.data_frame.columns[i].resource.path);\n            try {\n                new_columns[colnames[i]] = await load_data_frame(nest_meta, navigator);\n                new_colnames.push(colnames[i]);\n            } catch (e) {\n                console.warn(e);\n            }\n        } else {\n            new_columns[colnames[i]] = columns[i];\n            new_colnames.push(colnames[i]);\n        }\n    }\n\n    return new bioc.DataFrame(new_columns, { \n        columnOrder: new_colnames, \n        rowNames: rownames, \n        numberOfRows: info.data_frame.dimensions[0] \n    });\n}\n\nconst main_experiment_name = \"\";\n\nasync function extract_all_features(path, navigator) {\n    let extract_features = async se_meta => {\n        if (\"row_data\" in se_meta.summarized_experiment) {\n            let row_path = se_meta.summarized_experiment.row_data.resource.path;\n            return await load_data_frame(row_path, navigator);\n        } else {\n            return new bioc.DataFrame({}, { numberOfRows: se_meta.summarized_experiment.dimensions[0] });\n        }\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let output = {};\n    output[main_experiment_name] = await extract_features(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                output[alt.name] = await extract_features(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return output;\n}\n\nasync function extract_all_assay_names(path, navigator) {\n    let extract_assay_names = se_meta => {\n        let output = [];\n        for (const ass of se_meta.summarized_experiment.assays) {\n            output.push(ass.name);\n        }\n        return output;\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let assays = {};\n    assays[main_experiment_name] = extract_assay_names(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                assays[alt.name] = extract_assay_names(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return assays;\n}\n\n// This specifically loads the log-counts created by the dumper.\n// TODO: replace this with chihaya.js.\nasync function extract_logcounts(handle, navigator) {\n    if (handle.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (handle.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (Math.abs(handle.open(\"value\", { load: true }).values[0] - Math.log(2)) > 0.00000001) {\n        return null;\n    }\n    if (handle.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (handle.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n\n    let ghandle2 = handle.open(\"seed\");\n    if (ghandle2.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle2.readAttribute(\"delayed_operation\").values[0] !== \"unary math\") {\n        return null;\n    }\n    if (ghandle2.open(\"method\", { load: true }).values[0] !== \"log1p\") {\n        return null;\n    }\n\n    let ghandle3 = ghandle2.open(\"seed\");\n    if (ghandle3.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle3.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (ghandle3.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (ghandle3.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n    if (ghandle3.open(\"along\", { load: true }).values[0] !== 1) {\n        return null;\n    }\n    let sf = ghandle3.open(\"value\", { load: true }).values;\n\n    let ahandle = ghandle3.open(\"seed\");\n    if (ahandle.readAttribute(\"delayed_type\").values[0] !== \"array\") {\n        return null;\n    }\n    if (ahandle.readAttribute(\"delayed_array\").values[0] !== \"custom alabaster local array\") {\n        return null;\n    }\n    let path = ahandle.open(\"path\", { load: true }).values[0];\n\n    let mat;\n    let output = {};\n    try {\n        mat = await extract_assay_raw(path, navigator, false); // don't force it to be integer, but we don't mind if it is.\n        output.matrix = scran.logNormCounts(mat.matrix, { sizeFactors: sf, center: false });\n        output.row_ids = mat.row_ids;\n    } finally {\n        scran.free(mat.matrix);\n    }\n                \n    return output;\n}\n\nasync function extract_assay(meta, assay, navigator, forceInteger) {\n    if (typeof assay == \"string\") {\n        var counter = 0;\n        for (const ass of meta.summarized_experiment.assays) {\n            if (ass.name == assay) {\n                assay = counter;\n                break;\n            }\n            counter++;\n        }\n        if (counter == meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay '\" + assay + \"' not found\");\n        }\n    } else {\n        if (assay >= meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay \" + String(assay) + \" out of range\");\n        }\n    }\n\n    let asspath = meta.summarized_experiment.assays[assay].resource.path;\n    return extract_assay_raw(asspath, navigator, forceInteger);\n}\n\nasync function extract_assay_raw(asspath, navigator, forceInteger) {\n    let assmeta = await navigator.metadata(asspath);\n    let contents = await navigator.file(assmeta.path);\n    let output;\n\n    let schema = assmeta[\"$schema\"];\n    let is_dense = schema.startsWith(\"hdf5_dense_array/\");\n    let is_sparse = schema.startsWith(\"hdf5_sparse_matrix/\");\n\n    if (is_dense || is_sparse) {\n        let name = (is_sparse ?  assmeta.hdf5_sparse_matrix.group : assmeta.hdf5_dense_array.dataset);\n        let stuff = scran.realizeFile(contents);\n        try {\n            output = scran.initializeSparseMatrixFromHDF5(stuff.path, name, { forceInteger });\n        } finally {\n            stuff.flush();\n        }\n\n    } else if (assmeta[\"$schema\"].startsWith(\"hdf5_delayed_array/\")) {\n        let stuff = scran.realizeFile(contents);\n        try {\n            let fhandle = new scran.H5File(stuff.path);\n            let ghandle = fhandle.open(assmeta.hdf5_delayed_array.group);\n\n            // TODO: replace with calls to chihaya.js.\n            output = await extract_logcounts(ghandle, navigator);\n            if (output == null) {\n                throw new Error(\"currently only supporting bakana-generated log-counts for delayed arrays\");\n            }\n        } finally {\n            stuff.flush();\n        }\n\n    } else {\n        throw new Error(\"array schema '\" + assmeta[\"$schema\"] + \"' is currently not supported\");\n    }\n\n    return output;\n}\n\nasync function extract_other_data(other_path, navigator) {\n    let othermeta = await navigator.metadata(other_path);\n    if (!othermeta[\"$schema\"].startsWith(\"json_simple_list/\")) {\n        throw new Error(\"currently only support JSON-formatted lists in the 'other_data'\");\n    }\n\n    let contents = await navigator.file(othermeta.path);\n    let ofile = new afile.SimpleFile(contents, { name: \"list.json\" });\n    let unpacked = eutils.unpackText(ofile.buffer(), { compression: (othermeta.json_simple_list.compression == \"gzip\" ? \"gz\" : \"none\") });\n    let parsed = JSON.parse(unpacked);\n    return extract_list_data_internal(parsed);\n}\n\nfunction extract_list_data_internal(obj) {\n    if (!(\"type\" in obj)) {\n        throw new Error(\"non-standard JSON object for 'json_simple_list' schema\");\n    }\n\n    if (obj.type == \"number\") {\n        if (obj.values instanceof Array) {\n            let output = new Float64Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? Number.NaN : x) \n            });\n            return output;\n        } else {\n            return (obj.values == null ? Number.NaN : obj.values);\n        }\n\n    } else if (obj.type == \"integer\") {\n        if (obj.values instanceof Array) {\n            let output = new Int32Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? -2147483648 : x) \n            });\n            return output;\n        } else {\n            return obj.values;\n        }\n\n    } else if (obj.type == \"boolean\" || obj.type == \"string\") {\n        return obj.values;\n\n    } else if (obj.type == \"list\") {\n        if (\"names\" in obj) {\n            let output = {};\n            for (var i = 0; i < obj.values.length; i++) {\n                output[obj.names[i]] = extract_list_data_internal(obj.values[i]);\n            }\n            return output;\n        } else {\n            let output = [];\n            for (var i = 0; i < obj.values.length; i++) {\n                output.push(extract_list_data_internal(obj.values[i]));\n            }\n            return output;\n        }\n\n    } else if (obj.type == \"nothing\") {\n        return null;\n\n    } else {\n        console.warn(\"JSON simple list containing type '\" + obj.type + \"' is not yet supported\");\n        return null;\n    }\n}\n\n/***********************\n ******* Cacher ********\n ***********************/\n\n// As we'll be using the metadata often, we cache it at this level. This\n// removes the burden of caching on the implementation of the navigator. \nclass MetadataCacheWrapper {\n    #navigator;\n    #metadata_cache;\n\n    constructor(nav) {\n        this.#navigator = nav;\n        this.#metadata_cache = {};\n    }\n\n    clear() {\n        this.#metadata_cache = {};\n        if (\"clear\" in this.#navigator) {\n            this.#navigator.clear();\n        }\n    }\n\n    async metadata(path) {\n        if (path in this.#metadata_cache) {\n            return this.#metadata_cache[path];\n        } else {\n            let content = await this.#navigator.metadata(path);\n            this.#metadata_cache[path] = content;\n            return content;\n        }\n    }\n\n    file(path) {\n        return this.#navigator.file(path);\n    }\n};\n\n/************************\n ******* Dataset ********\n ************************/\n\n/**\n * Dataset stored as a SummarizedExperiment in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n * Subclasses should define `abbreviate()` and `serialize()` methods, as well as the static `format()` and `unserialize()` methods - \n * see the [Dataset contract](https://github.com/LTLA/bakana/blob/master/docs/related/custom_readers.md) for more details.\n */\nexport class AbstractArtifactdbDataset {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n\n    #rnaCountAssay;\n    #adtCountAssay;\n    #crisprCountAssay;\n\n    #rnaExperiment;\n    #adtExperiment;\n    #crisprExperiment;\n\n    #primaryRnaFeatureIdColumn;\n    #primaryAdtFeatureIdColumn;\n    #primaryCrisprFeatureIdColumn;\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return {\n            rnaCountAssay: this.#rnaCountAssay,\n            adtCountAssay: this.#adtCountAssay,\n            crisprCountAssay: this.#crisprCountAssay,\n            rnaExperiment: this.#rnaExperiment,\n            adtExperiment: this.#adtExperiment,\n            crisprExperiment: this.#crisprExperiment,\n            primaryRnaFeatureIdColumn: this.#primaryRnaFeatureIdColumn,\n            primaryAdtFeatureIdColumn: this.#primaryAdtFeatureIdColumn,\n            primaryCrisprFeatureIdColumn: this.#primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string|number} [options.rnaCountAssay=0] - See {@linkcode AbstractArtifactdbDataset#setRnaCountAssay setRnaCountAssay}.\n     * @param {string|number} [options.adtCountAssay=0] - See {@linkcode AbstractArtifactdbDataset#setAdtCountAssay setAdtCountAssay}.\n     * @param {string|number} [options.crisprCountAssay=0] - See {@linkcode AbstractArtifactdbDataset#setCrisprCountAssay setCrisprCountAssay}.\n     * @param {?(string|number)} [options.rnaExperiment=\"\"] - See {@linkcode AbstractArtifactdbDataset#setRnaExperiment setRnaExperiment}.\n     * @param {?(string|number)} [options.adtExperiment=\"Antibody Capture\"] - See {@linkcode AbstractArtifactdbDataset#setAdtExperiment setAdtExperiment}.\n     * @param {?(string|number)} [options.crisprExperiment=\"CRISPR Guide Capture\"] - See {@linkcode AbstractArtifactdbDataset#setCrisprExperiment setCrisprExperiment}.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn=null] - See {@linkcode AbstractArtifactdbDataset#setPrimaryRnaFeatureIdColumn setPrimaryRnaFeatureIdColumn}.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn=null] - See {@linkcode AbstractArtifactdbDataset#setPrimaryAdtFeatureIdColumn setPrimaryAdtFeatureIdColumn}.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn=null] - See {@linkcode AbstractArtifactdbDataset#setPrimaryCrisprFeatureIdColumn setPrimaryCrisprFeatureIdColumn}.\n     */\n    constructor(path, navigator, { \n        rnaCountAssay = 0, \n        adtCountAssay = 0, \n        crisprCountAssay = 0,\n        rnaExperiment = \"\", \n        adtExperiment = \"Antibody Capture\", \n        crisprExperiment = \"CRISPR Guide Capture\",\n        primaryRnaFeatureIdColumn = null, \n        primaryAdtFeatureIdColumn = null,\n        primaryCrisprFeatureIdColumn = null \n    } = {}) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n\n        this.#rnaCountAssay = rnaCountAssay;\n        this.#adtCountAssay = adtCountAssay;\n        this.#crisprCountAssay = crisprCountAssay;\n\n        this.#rnaExperiment = rnaExperiment;\n        this.#adtExperiment = adtExperiment;\n        this.#crisprExperiment = crisprExperiment;\n\n        this.#primaryRnaFeatureIdColumn = primaryRnaFeatureIdColumn;\n        this.#primaryAdtFeatureIdColumn = primaryAdtFeatureIdColumn;\n        this.#primaryCrisprFeatureIdColumn = primaryCrisprFeatureIdColumn;\n\n        // Don't call this.clear() here. We don't want to clear the navigator's\n        // cache at this point, as the navigator might contain some cached\n        // values when passed to the constructor. We should respect any caches\n        // until we're specifically told to discard it with clear() or cache =\n        // false in load() or summary().\n        this.#reset_local_caches();\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the assay containing the RNA count matrix.\n     */\n    setRnaCountAssay(i) {\n        this.#rnaCountAssay = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the assay containing the ADT count matrix.\n     */\n    setAdtCountAssay(i) {\n        this.#adtCountAssay = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the assay containing the CRISPR count matrix.\n     */\n    setCrisprCountAssay(i) {\n        this.#adtCountAssay = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the alternative experiment containing gene expression data.\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no RNA data is assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the gene expression data.\n     */\n    setRnaExperiment(i) {\n        this.#rnaExperiment = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the alternative experiment containing ADT data.\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no ADTs are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the ADT data.\n     */\n    setAdtExperiment(i) {\n        this.#adtExperiment = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the alternative experiment containing CRISPR guide data.\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no CRISPR guides are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the guide data.\n     */\n    setCrisprExperiment(i) {\n        this.#crisprExperiment = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setPrimaryRnaFeatureIdColumn(i) {\n        this.#primaryRnaFeatureIdColumn = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setPrimaryAdtFeatureIdColumn(i) {\n        this.#primaryAdtFeatureIdColumn = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the existing row names (if they exist) are used as the primary identifier.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setPrimaryCrisprFeatureIdColumn(i) {\n        this.#primaryCrisprFeatureIdColumn = i;\n        return;\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbDataset#load load} or {@linkcode AbstractArtifactdbDataset#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbDataset#load load}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator)\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbDataset#summary summary}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an integer array containing the feature identifiers for each row in that modality.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            row_ids: {},\n            features: {},\n            cells: this.#raw_cells\n        };\n\n        let mapping = { \n            RNA: { exp: this.#rnaExperiment, assay: this.#rnaCountAssay },\n            ADT: { exp: this.#adtExperiment, assay: this.#adtCountAssay },\n            CRISPR: { exp: this.#crisprExperiment, assay: this.#crisprCountAssay }\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let altmap = {};\n        let alts = [];\n        if (\"single_cell_experiment\" in full_meta) {\n            alts = full_meta.single_cell_experiment.alternative_experiments;\n            for (const alt of alts) {\n                altmap[alt.name] = alt.resource.path;\n            }\n        }\n\n        try {\n            for (const [k, v] of Object.entries(mapping)) {\n                if (v.exp === null) {\n                    continue;\n                }\n\n                let meta = null;\n                let name = v.exp;\n                if (typeof v.exp == \"string\") {\n                    if (v.exp === \"\") {\n                        meta = full_meta;\n                    } else {\n                        if (!(v.exp in altmap)) {\n                            continue;\n                        }\n                        meta = await this.#navigator.metadata(altmap[v.exp]);\n                    }\n                } else {\n                    if (v.exp >= alts.length) {\n                        continue;\n                    }\n                    name = alts[v.exp].name;\n                    meta = await this.#navigator.metadata(alts[v.exp].resource.path);\n                }\n\n                let loaded = await extract_assay(meta, v.assay, this.#navigator, true);\n                output.matrix.add(k, loaded.matrix);\n                let out_ids = loaded.row_ids;\n                output.row_ids[k] = out_ids;\n                output.features[k] = bioc.SLICE(this.#raw_features[name], out_ids);\n            }\n\n            let primaries = { \n                RNA: this.#primaryRnaFeatureIdColumn, \n                ADT: this.#primaryAdtFeatureIdColumn,\n                CRISPR: this.#primaryCrisprFeatureIdColumn\n            };\n            output.primary_ids = futils.extractPrimaryIds(output.features, primaries);\n\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentDatasetBase = AbstractArtifactdbDataset;\n\n/***********************\n ******* Result ********\n ***********************/\n\n/**\n * Pre-computed analysis results stored as a SummarizedExperiment object (or one of its subclasses) in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n */\nexport class AbstractArtifactdbResult {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n    #raw_other;\n\n    #primaryAssay;\n    #isPrimaryNormalized;\n    #reducedDimensionNames;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {object|string|number} [options.primaryAssay=0] - See {@linkcode AbstractArtifactdbResult#setPrimaryAssay setPrimaryAssay}.\n     * @param {object|boolean} [options.isPrimaryNormalized={}] - See {@linkcode AbstractArtifactdbResult#setIsPrimaryNormalized setIsPrimaryNormalized}.\n     * @param {?Array} [options.reducedDimensionNames=null] - See {@linkcode AbstractArtifactdbResult#setReducedDimensionNames setReducedDimensionNames}.\n     */\n    constructor(path, navigator, { \n        primaryAssay = 0,\n        isPrimaryNormalized = true,\n        reducedDimensionNames = null\n    } = {}) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n\n        // Cloning to avoid pass-by-reference links.\n        this.#primaryAssay = bioc.CLONE(primaryAssay);\n        this.#isPrimaryNormalized = bioc.CLONE(isPrimaryNormalized);\n        this.#reducedDimensionNames = bioc.CLONE(reducedDimensionNames);\n\n        // Don't call clear() here, see comments above in the Dataset constructor.\n        this.#reset_local_caches();\n    }\n\n    /**\n     * @param {object|string|number} primary - Assay containing the relevant data for each modality.\n     *\n     * - If a string, this is used as the name of the assay across all modalities.\n     * - If a number, this is used as the index of the assay across all modalities.\n     * - If any object, the key should be the name of a modality and the value may be either a string or number specifying the assay to use for that modality.\n     *   Modalities absent from this object will not be loaded.\n     */\n    setPrimaryAssay(primary) {\n        this.#primaryAssay = bioc.CLONE(primary);\n        return;\n    }\n\n    /**\n     * @param {object|boolean} normalized - Whether or not the assay for a particular modality has already been normalized.\n     *\n     * - If a boolean, this is used to indicate normalization status of assays across all modalities.\n     *   If `false`, that modality's assay is assumed to contain count data and is subjected to library size normalization. \n     * - If any object, the key should be the name of a modality and the value should be a boolean indicating whether that modality's assay has been normalized.\n     *   Modalities absent from this object are assumed to have been normalized.\n     */\n    setIsPrimaryNormalized(normalized) {\n        this.#isPrimaryNormalized = bioc.CLONE(normalized);\n        return;\n    }\n\n    /**\n     * @param {?Array} names - Array of names of the reduced dimensions to load.\n     * If `null`, all reduced dimensions found in the file are loaded.\n     */\n    setReducedDimensionNames(names) {\n        this.#reducedDimensionNames = bioc.CLONE(names);\n        return;\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n        this.#raw_other = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbResult#load load} or {@linkcode AbstractArtifactdbResult#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    async #other() {\n        if (this.#raw_other !== null) {\n            return;\n        }\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"other_data\" in full_meta.summarized_experiment) {\n            let other_path = full_meta.summarized_experiment.other_data.resource.path;\n            this.#raw_other = await extract_other_data(other_path, this.#navigator);\n        } else {\n            this.#raw_other = {};\n        }\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbDataset#load load}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     * - `reduced_dimension_names`: an Array of strings containing names of dimensionality reduction results.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async \n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator),\n            reduced_dimension_names: [],\n            other_metadata: this.#raw_other\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"single_cell_experiment\" in full_meta) {\n            for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                let redmeta = await this.#navigator.metadata(red.resource.path);\n                if (redmeta[\"$schema\"].startsWith(\"hdf5_dense_array/\") && redmeta.array.dimensions.length == 2) {\n                    output.reduced_dimension_names.push(red.name);\n                }\n            }\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbDataset#summary summary}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `reduced_dimensions`: an object containing the dimensionality reduction results.\n     *   Each value is an array of arrays, where each inner array contains the coordinates for one dimension.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            features: {},\n            cells: this.#raw_cells,\n            reduced_dimensions: {},\n            other_metadata: this.#raw_other\n        };\n\n        // Fetch the reduced dimensions first.\n        {\n            let reddims = this.#reducedDimensionNames;\n            if (reddims == null) {\n                reddims = [];\n                if (\"single_cell_experiment\" in full_meta) {\n                    for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                        reddims.push(red.name);\n                    }\n                }\n            }\n\n            if (reddims.length > 0) {\n                let redmap = {};\n                for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                    redmap[red.name] = red.resource.path;\n                }\n\n                for (const k of reddims) {\n                    let redmeta = await this.#navigator.metadata(redmap[k]); // this should be only HDF5 dense matrices.\n                    let dims = redmeta.array.dimensions;\n                    let redcontents = await this.#navigator.file(redmeta.path); \n\n                    let realized = scran.realizeFile(redcontents);\n                    let acquired = [];\n                    try {\n                        let fhandle = new scran.H5File(realized.path);\n                        let dhandle = fhandle.open(redmeta.hdf5_dense_array.dataset, { load: true });\n                        let contents = dhandle.values;\n                        for (var d = 0; d < dims[1]; d++) {\n                            acquired.push(contents.slice(d * dims[0], (d + 1) * dims[0]));\n                        }\n                    } finally {\n                        realized.flush();\n                    }\n\n                    output.reduced_dimensions[k] = acquired;\n                }\n            }\n        }\n\n        // Now fetching the assay matrix.\n        {\n            let altmap = {};\n            if (\"single_cell_experiment\" in full_meta) {\n                for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n                    altmap[alt.name] = alt.resource.path;\n                }\n            }\n\n            try {\n                for (const [k, v] of Object.entries(this.#raw_features)) {\n                    let curassay = this.#primaryAssay;\n                    if (typeof curassay == \"object\") {\n                        if (k in curassay) {\n                            curassay = curassay[k];\n                        } else {\n                            continue;\n                        }\n                    }\n\n                    let curnormalized = this.#isPrimaryNormalized;\n                    if (typeof curnormalized == \"object\") {\n                        if (k in curnormalized) {\n                            curnormalized = curnormalized[k];\n                        } else {\n                            curnormalized = true;\n                        }\n                    }\n\n                    let meta;\n                    if (k === \"\") {\n                        meta = full_meta;\n                    } else {\n                        meta = await this.#navigator.metadata(altmap[k]);\n                    }\n\n                    let loaded = await extract_assay(meta, curassay, this.#navigator, !curnormalized);\n                    output.matrix.add(k, loaded.matrix);\n\n                    if (!curnormalized) {\n                        let normed = scran.logNormCounts(loaded.matrix, { allowZeros: true });\n                        output.matrix.add(k, normed);\n                    }\n\n                    if (loaded.row_ids !== null) {\n                        output.features[k] = bioc.SLICE(this.#raw_features[k], loaded.row_ids);\n                    } else {\n                        output.features[k] = this.#raw_features[k];\n                    }\n                }\n\n            } catch (e) {\n                scran.free(output.matrix);\n                throw e;\n            }\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentResultBase = AbstractArtifactdbResult;\n","import * as adb from \"./ArtifactDB-abstract.js\";\nimport JSZip from \"jszip\";\n\nclass ZippedProjectNavigator {\n    #zipfile;\n    #ziphandle;\n\n    constructor(zipfile, ziphandle) {\n        this.#zipfile = zipfile;\n        this.#ziphandle = null;\n    }\n\n    async file(path) {\n        if (this.#ziphandle == null) {\n            this.#ziphandle = await JSZip.loadAsync(this.#zipfile.buffer());\n        }\n        return await this.#ziphandle.file(path).async(\"uint8array\");\n    }\n\n    async metadata(path) {\n        if (this.#ziphandle == null) {\n            this.#ziphandle = await JSZip.loadAsync(this.#zipfile.buffer());\n        }\n\n        while (1) {\n            if (!path.endsWith(\".json\")) { \n                path += \".json\";\n            }\n\n            let contents = await this.#ziphandle.file(path).async(\"string\");\n            let values = JSON.parse(contents);\n\n            if (values[\"$schema\"].startsWith(\"redirection/\")){\n                path = values.redirection.targets[0].location;\n            } else {\n                return values;\n            }\n        }\n    }\n\n    clear() {\n        this.#ziphandle = null;\n    }\n};\n\n/************************\n ******* Dataset ********\n ************************/\n\n/**\n * Dataset as a ZIP file containing a SummarizedExperiment in the **ArtifactDB** representation,\n * e.g., as produced by {@linkcode saveSingleCellExperiment}.\n * Specifically, the ZIP file should contain the contents of an **ArtifactDB** project directory.\n * This project directory may contain multiple objects; the SummarizedExperiment of interest is identified in the constructor.\n *\n * @extends AbstractArtifactdbDataset\n */\nexport class ZippedArtifactdbDataset extends adb.AbstractArtifactdbDataset {\n    #zipfile;\n    #name;\n\n    /**\n     * @param {string} name - Name of the SummarizedExperiment object inside the project directory.\n     * @param {SimpleFile} zipfile - A {@linkplain SimpleFile} object representing the ZIP file containing the project directory.\n     * @param {object} [options={}] - Optional parameters, including those to be passed to the {@linkplain AbstractArtifactdbDataset} constructor.\n     * @param {?JSZip} [options.existingHandle=null] - An existing handle into the ZIP file, generated using the [**JSZip**](https://stuk.github.io/jszip/) package.\n     * If an existing handle already exists, passing it in here will allow it to be re-used for greater efficiency.\n     * If `null`, a new handle is created for this ZippedArtifactdbDataset instance.\n     */\n    constructor(name, zipfile, options={}) {\n        let ziphandle = null;\n        if (\"existingHandle\" in options) {\n            ziphandle = options.existingHandle;\n            delete options.existingHandle;\n        }\n\n        let nav = new ZippedProjectNavigator(zipfile, ziphandle);\n        super(name, nav, options);\n        this.#zipfile = zipfile;\n        this.#name = name;\n    }\n\n    /**\n     * @return {string} String specifying the format for this dataset.\n     */\n    static format() {\n        return \"ArtifactDB-zipped\";\n    }\n\n    #dump_summary(fun) {\n        let files = [ { type: \"zip\", file: fun(this.#zipfile) } ]; \n        let opt = this.options();\n        opt.datasetName = this.#name; // storing the name as a special option... can't be bothered to store it as a separate file.\n        return { files: files, options: opt };\n\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset.\n     */\n    abbreviate() {\n        return this.#dump_summary(f => { \n            return { size: f.size(), name: f.name() }\n        });\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode ZippedArtifactdbDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {ZippedArtifactdbDataset} A new instance of this class.\n     * @static\n     */\n    static unserialize(files, options) {\n        if (files.length != 1 || files[0].type != \"zip\") {\n            throw new Error(\"expected exactly one file of type 'zip' for Zipped ArtifactDB unserialization\");\n        }\n\n        let name = options.datasetName;\n        delete options.datasetName;\n        return new ZippedArtifactdbDataset(name, files[0].file, options);\n    }\n}\n\n/***********************\n ******* Result ********\n ***********************/\n\n/**\n * Result as a ZIP file containing a SummarizedExperiment in the **ArtifactDB** representation,\n * e.g., as produced by {@linkcode saveSingleCellExperiment}.\n * Specifically, the ZIP file should contain the contents of an **ArtifactDB** project directory.\n * This project directory may contain multiple objects; the SummarizedExperiment of interest is identified in the constructor.\n *\n * @extends AbstractArtifactdbResult\n */\nexport class ZippedArtifactdbResult extends adb.AbstractArtifactdbResult {\n    /**\n     * @param {string} name - Name of the SummarizedExperiment object inside the project directory.\n     * @param {SimpleFile} zipfile - A {@linkplain SimpleFile} object representing the ZIP file containing the project directory.\n     * @param {object} [options={}] - Optional parameters, including those to be passed to the {@linkplain AbstractArtifactdbResult} constructor.\n     * @param {?JSZip} [options.existingHandle=null] - An existing handle into the ZIP file, generated using the [**JSZip**](https://stuk.github.io/jszip/) package.\n     * If an existing handle already exists, passing it in here will allow it to be re-used for greater efficiency.\n     * If `null`, a new handle is created for this ZippedArtifactdbDataset instance.\n     */\n    constructor(name, zipfile, options={}) {\n        let ziphandle = null;\n        if (\"existingHandle\" in options) {\n            ziphandle = options.existingHandle;\n            delete options.existingHandle;\n        }\n\n        let nav = new ZippedProjectNavigator(zipfile, ziphandle);\n        super(name, nav, options);\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as iutils from \"../readers/index.js\";\nexport const step_name = \"inputs\";\n\nconst RAW_SUBSET_OVERRIDE = \"raw_subset_indices\";\n\n/**\n * This step handles the loading of all datasets into memory.\n * This wraps various matrix initialization functions in [**scran.js**](https://github.com/kanaverse/scran.js),\n * depending on the format of the supplied datasets.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class InputsState {\n    #parameters;\n    #cache;\n    #abbreviated;\n    #preserve_dataset_cache;\n\n    constructor(parameters = null, cache = null, abbreviated = null) {\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.#abbreviated = (abbreviated === null ? {} : abbreviated);\n        this.#preserve_dataset_cache = false;\n        this.changed = false;\n        return;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.raw_matrix);\n        utils.freeCache(this.#cache.block_ids);\n        utils.freeCache(this.#cache.raw_block_ids);\n        utils.freeCache(this.#cache.multi_block_ids);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {external:MultiMatrix} A {@linkplain external:MultiMatrix MultiMatrix} object containing counts for one or more modalities.\n     * Each modality is represented by a separate count matrix, where each row of the matrix represents a feature of that modality.\n     * All matrices have the same number and ordering of cells in their columns.\n     */\n    fetchCountMatrix() {\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {object} Object where each key is the name of a modality and each value is a {@linkplain external:DataFrame DataFrame}.\n     * Each row of the DataFrame corresponds to a feature in that modality \n     * (i.e., a row in the corresponding matrix from {@linkcode InputsState#fetchCountMatrix fetchCountMatrix})\n     * and each column represents a per-feature annotation field.\n     */\n    fetchFeatureAnnotations() {\n        return this.#cache.genes;\n    }\n\n    /**\n     * @return {object} Object where each key is the name of a modality and each value is an Int32Array.\n     * Each entry of an Int32Array specifies the identity of the corresponding row of its count matrix from {@linkcode InputsState#fetchCountMatrix fetchCountMatrix}.\n     */\n    fetchRowIds() {\n        return this.#cache.row_ids;\n    }\n\n    /**\n     * @return {external:DataFrame} {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * Each row of the DataFrame corresponds to a cell in {@linkcode InputsState#fetchCountMatrix fetchCountMatrix},\n     * and each column represents a per-cell annotation field.\n     *\n     * Note that this considers all cells in the dataset before QC filtering - \n     * see {@linkcode QualityControlState#applyFilter QualityControlState.applyFilter} to obtain a filtered version of each column.\n     */\n    fetchCellAnnotations() {\n        return this.#cache.annotations;\n    }\n\n    /**\n     * @return {?Int32Array} Array of length equal to the number of cells in the dataset,\n     * identifying the block to which each cell is assigned.\n     * Alternatively `null`, if no blocking is performed.\n     */\n    fetchBlock() {\n        return this.#cache.block_ids;\n    }\n\n    /**\n     * @return {?Array} Array of names of the blocks, or `null` if no blocking is performed.\n     */\n    fetchBlockLevels() {\n        return this.#cache.block_levels;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Cloning the parameters to avoid pass-by-reference behavior affecting the\n        // InputsState object. We don't pass the files back here.\n        let output = { ...this.#parameters };\n        output.subset = this.constructor.#cloneSubset(output.subset);\n        return output;\n    }\n\n    fetchDatasets() {\n        return this.#cache.datasets;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to return a copy of the subsets to avoid pass-by-reference behaviors.\n     *\n     * @return {?Int32Array} Array containing the indices to use for direct subsetting -\n     * see {@linkcode InputsState#setDirectSubset setDirectSubset} for more information.\n     * Alternatively `null`, if direct subsetting is not performed.\n     */\n    fetchDirectSubset({ copy = true } = {}) {\n        if (RAW_SUBSET_OVERRIDE in this.#cache) {\n            let candidate = this.#cache[RAW_SUBSET_OVERRIDE];\n            return (copy ? candidate.slice() : candidate);\n        } else {\n            return null;\n        }\n    }\n\n    guessRnaFeatureTypes() {\n        if (!(\"RNA\" in this.#cache.genes)) {\n            return null;\n        }\n\n        if (!(\"inferred_rna_types\" in this.#cache)) {\n            this.#cache.inferred_rna_types = utils.guessFeatureTypes(this.#cache.genes[\"RNA\"]);\n        }\n\n        return this.#cache.inferred_rna_types;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            block_factor: null,\n            subset: null\n        };\n    }\n\n    /**\n     * Allow each {@linkplain Dataset} reader (i.e., the `datasets` in {@linkcode InputsState#compute compute}) to cache any intermediate results during loading.\n     * By default, this is disabled as caching increases memory usage of the analysis without any major runtime improvements to `compute` when the `datasets` do not change.\n     *\n     * Setting `cache = true` is only useful if the instances in `datasets` are to be re-used outside of **bakana**, or if they are to be re-used in `compute()` in different combinations. \n     * In such cases, there may be a runtime improvement that warrants the increase in memory usage.\n     * If caching is used, the user is responsible for releasing cached resources via each instance's `clear()` method once they are no longer needed.\n     *\n     * @param {boolean} cache - Whether to allow {@linkplain Dataset} instances to cache their results.\n     */\n    enableDatasetCache(cache) {\n        this.#preserve_dataset_cache = cache;\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} datasets - An object containing data for one or more datasets.\n     * Each property corresponds to a single dataset and its value should satisfy the {@linkplain Dataset} contract.\n     * See the description of the argument of the same name in {@linkcode runAnalysis}.\n     * @param {object} parameters - Parameter object, equivalent to the `inputs` property of the `parameters` in {@linkcode runAnalysis}.\n     * @param {?string} parameters.block_factor - Name of the column of the cell annotations specifying the sample of origin for each cell.\n     * This is only used if a single count matrix is supplied.\n     *\n     * If `null`, all cells are assumed to originate from the same sample.\n     * @param {?subset} parameters.subset - Object describing if any pre-analysis subsetting should be applied.\n     * This should contain `field`, a string specifying a field of the column annotation.\n     *\n     * - For categorical variables, the object should also contain `values`, an array of allowed values for that annotation.\n     *   Cells are only retained if they are associated with any of the allowable values for that annotation field.\n     * - For continuous variables, the object should also contain `ranges`, an array of arrays.\n     *   Each inner array should contain two numbers defining the start and end of a range.\n     *   Ranges should be sorted and non-overlapping (boundaries excepted).\n     *\n     * If `subset` is `null`, no subsetting is performed and all cells are used in the downstream analysis.\n     *\n     * @return The object is updated with the new results.\n     * A promise is returned that resolves to `null` once input loading is complete - this should be resolved before any downstream steps are run.\n     */\n    async compute(datasets, parameters) {\n        let { block_factor, subset } = parameters;\n        this.changed = false;\n\n        // Don't bother proceeding with any of the below\n        // if we're operating from a reloaded state.\n        if (datasets !== null) {\n            let tmp_abbreviated = {};\n            for (const [key, val] of Object.entries(datasets)) {\n                tmp_abbreviated[key] = { format: val.constructor.format(), details: val.abbreviate() };\n            }\n\n            if (utils.changedParameters(tmp_abbreviated, this.#abbreviated)) {\n                await load_and_cache(datasets, this.#cache, this.#preserve_dataset_cache);\n                this.#abbreviated = tmp_abbreviated;\n                this.#cache.datasets = { ...datasets }; // making a deep-ish copy to avoid pass-by-reference links.\n                delete this.#cache.inferred_rna_types;\n                this.changed = true;\n            }\n        }\n\n        if (this.changed || this.#parameters.block_factor !== block_factor) {\n            block_and_cache(block_factor, this.#cache);\n            this.#parameters.block_factor = block_factor;\n            this.changed = true;\n        }\n\n        // final condition handles loss of 'matrix' when setDirectSubset() is called.\n        if (this.changed || (!(RAW_SUBSET_OVERRIDE in this.#cache) && utils.changedParameters(subset, this.#parameters.subset)) || !(\"matrix\" in this.#cache)) { \n            subset_and_cache(subset, this.#cache);\n            this.#parameters.subset = this.constructor.#cloneSubset(subset);\n            this.changed = true;\n        }\n\n        return null;\n    }\n\n    /******************************\n     ******** Subsetting **********\n     ******************************/\n\n    static #cloneSubset(subset) {\n        // We use a dedicated cloning function to handle Infs,\n        // as these get converted to nulls by the JSON stringify.\n        if (subset == null) {\n            return subset;\n        }\n\n        let clone = { ...subset };\n        if (\"values\" in clone) {\n            clone.values = clone.values.slice();\n        }\n\n        if (\"ranges\" in clone) {\n            clone.ranges = clone.ranges.map(x => x.slice());\n        }\n\n        return clone;\n    }\n\n    /**\n     * Undo the effect of subsetting on an array of indices.\n     *\n     * @param {Array|TypedArray} indices - Array of column indices to the subsetted matrix.\n     * Note that this will be modified in-place.\n     *\n     * @return Entries of `indices` are replaced with indices to the pre-subsetted matrix.\n     */\n    undoSubset(indices) {\n        if (\"matrix\" in this.#cache) {\n            let max_index = this.fetchCountMatrix().numberOfColumns();\n            for (const x of indices) {\n                if (x < 0 || x >= max_index) {\n                    throw new Error(\"entries of 'indices' should be less than the number of cells in the dataset\");\n                }\n            }\n        }\n\n        // Setting the subset to null, if the parameter-level subset hasn't\n        // been set yet. This is because we might get indirectly called via\n        // setDirectSubset() before compute() has been run.\n        let subset = null;\n        if (\"subset\" in this.#parameters) {\n            subset = this.#parameters.subset;\n        }\n\n        let keep = harvest_subset_indices(subset, this.#cache);\n        if (keep !== null) {\n            indices.forEach((x, i) => { indices[i] = keep[x] });\n        }\n    }\n\n    #configureIndices(indices, copy, onOriginal) {\n        // scran.js's subset functions will pick up out-of-range indices.\n        utils.checkIndices(indices, null);\n\n        // We make a copy here to take ownership of the underlying memory,\n        // otherwise any edits in the caller would mutate the new InputsState's\n        // indices by reference.\n        if (copy) {\n            indices = indices.slice();\n        }\n\n        if (!onOriginal) {\n            this.undoSubset(indices);\n        }\n\n        return indices;\n    }\n\n    /**\n     * Unlike most of the other methods, `setDirectSubset` can be called on an InputsState before {@linkcode InputsState#compute compute}.\n     * This means that a user can create the state object from {@linkcode createAnalysis},\n     * specify a subset of cells via `setDirectSubset` on the (currently empty) InputsState object in `inputs`,\n     * and then call {@linkcode runAnalysis} to execute an analysis on the desired subset of cells.\n     * \n     * @param {TypedArray|Array} indices - Array containing the indices for the desired subset of cells.\n     * This should be sorted and non-duplicate.\n     * Any existing subset in this object will be overridden by `indices`.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to make a copy of `indices` before storing it inside the returned state object.\n     * If `false`, it is assumed that the caller makes no further use of the passed `indices`.\n     * @param {boolean} [options.onOriginal=false] - Whether `indices` contains indices on the original dataset or on the dataset in `state`.\n     * This distinction is only relevant if the current InputsState object already contains a specified subset.\n     * If `false`, the `indices` are assumed to refer to the already-subsetted dataset that exists in `state`;\n     * if `true`, the `indices` are assumed to refer to the original dataset from which the subset in `state` was created.\n     *\n     * @return The dataset in this InputsState object is subsetted to the desired `indices`.\n     */\n    setDirectSubset(indices, { copy = true, onOriginal = false } = {}) {\n        if (indices !== null) {\n            this.#cache[RAW_SUBSET_OVERRIDE] = this.#configureIndices(indices, copy, onOriginal);\n        } else {\n            delete this.#cache[RAW_SUBSET_OVERRIDE];            \n        }\n\n        // Flag that it needs to be rerun.\n        scran.free(this.#cache.matrix);\n        delete this.#cache.matrix;\n    }\n\n    createDirectSubset(indices, { copy = true, onOriginal = false } = {}) {\n        let new_cache = {};\n        new_cache[RAW_SUBSET_OVERRIDE] = this.#configureIndices(indices, copy, onOriginal);\n\n        // Need to manually copy everything in 'this.#cache' that is set in\n        // load_and_cache or block_and_cache.\n\n        // Making explicit clones to take ownership.\n        new_cache.raw_matrix = this.#cache.raw_matrix.clone();\n        for (const x of [ \"multi_block_ids\", \"raw_block_ids\" ]) {\n            if (x in this.#cache) {\n                if (this.#cache[x] === null) {\n                    new_cache[x] = null;\n                } else {\n                    new_cache[x] = this.#cache[x].clone();\n                }\n            }\n        }\n\n        // These can probably be copied directly, given that they are always\n        // replaced wholesale in the various *_and_cache functions, rather than\n        // being modified in-place.\n        for (const x of [ \"row_ids\", \"raw_annotations\", \"genes\", \"multi_block_levels\", \"raw_block_levels\" ]) {\n            if (x in this.#cache) {\n                new_cache[x] = this.#cache[x];\n            }\n        }\n\n        subset_and_cache(null, new_cache);\n\n        let new_params = this.fetchParameters();\n        new_params.subset = null;\n\n        return new InputsState(new_params, new_cache, this.#abbreviated);\n    }\n}\n\n/************************************\n ******* Internals - loading ********\n ************************************/\n\nconst known_modalities = [ \"RNA\", \"ADT\", \"CRISPR\" ];\n\nfunction bind_single_modality(modality, loaded) {\n    let output = {};\n\n    try {\n        let gnames = [];\n        let mats = [];\n        for (var i = 0; i < loaded.length; i++) {\n            mats.push(loaded[i].matrix.get(modality));\n\n            let primary_id = loaded[i].primary_ids[modality];\n            if (primary_id == null) {\n                throw new Error(\"modality '\" + modality + \"' lacks a primary identifier for dataset \" + String(i));\n            }\n            gnames.push(primary_id);\n        }\n\n        let merged = scran.cbindWithNames(mats, gnames);\n        output.matrix = merged.matrix;\n\n        // Extracting gene information from the first object. We won't make\n        // any attempt at merging and deduplication across objects.\n        output.features = bioc.SLICE(loaded[0].features[modality], merged.indices);\n        output.row_ids = bioc.SLICE(loaded[0].row_ids[modality], merged.indices);\n\n    } catch (e) {\n        utils.freeCache(output.matrix);\n        throw e;\n    }\n\n    return output;\n}\n\nfunction bind_datasets(names, loaded) {\n    let common_modes = [];\n    for (const mod of known_modalities) {\n        let okay = true;\n        for (const l of loaded) {\n            if (!l.matrix.has(mod)) {\n                okay = false;\n                break;\n            }\n        }\n        if (okay) {\n            common_modes.push(mod);\n        }\n    }\n\n    if (common_modes.length == 0) {\n        throw new Error(\"failed to find common modalities across all datasets\");\n    }\n\n    let blocks;\n    let output = { \n        matrix: new scran.MultiMatrix, \n        features: {},\n        row_ids: {}\n    };\n\n    try {\n        for (const k of common_modes) {\n            let current = bind_single_modality(k, loaded);\n            output.matrix.add(k, current.matrix);\n            output.features[k] = current.features;\n            output.row_ids[k] = current.row_ids;\n        }\n\n        let annos = loaded.map(x => x.cells);\n        output.cells = bioc.flexibleCombineRows(annos);\n\n        // Generating a block vector.\n        let ncells = new Array(loaded.length);\n        loaded.forEach((x, i) => { ncells[i] = x.matrix.numberOfColumns(); });\n        blocks = scran.createBlock(ncells);\n        output.block_ids = blocks;\n        output.block_levels = names;\n\n        let nice_barr = new Array(blocks.length);\n        blocks.forEach((x, i) => { nice_barr[i] = names[x]; })\n        output.cells.$setColumn(\"__batch__\", nice_barr);\n\n    } catch (e) {\n        utils.freeCache(blocks);\n        utils.freeCache(output.matrix);\n        throw e;\n    } \n\n    return output;\n}\n\nfunction rename_dataset(single) {\n    let modalities = single.matrix.available();\n    if (modalities.length == 0) {\n        throw new Error(\"\");\n    }\n\n    let output = { \n        matrix: new scran.MultiMatrix, \n        features: {},\n        row_ids: {}\n    };\n\n    try {\n        for (const k of known_modalities) {\n            if (!single.matrix.has(k)) {\n                continue;\n            }\n\n            output.matrix.add(k, single.matrix.get(k));\n            output.features[k] = single.features[k];\n            output.row_ids[k] = single.row_ids[k];\n        }\n    } catch (e) {\n        scran.free(output.matrix);\n        throw e;\n    }\n\n    output.cells = single.cells;\n    output.block_ids = null;\n    output.block_levels = null;\n\n    return output;\n}\n\nasync function load_datasets(datasets, preserve_dataset_cache) {\n    // Ensure we have a reproducible order; otherwise the batch\n    // order becomes dependent on the JS engine's ordering.\n    let names = Object.keys(datasets);\n    names.sort();\n\n    let loaded = [];\n    try {\n        for (const key of names) {\n            // Too much hassle to convert this into a Promise.all(), because we\n            // need to make sure it gets freed properly on failure.\n            loaded.push(await datasets[key].load({ cache: preserve_dataset_cache }));\n        }\n    } catch (e) {\n        // If any one fails, we free the rest.\n        for (const x of loaded) {\n            scran.free(x.matrix);\n        }\n        throw e;\n    }\n\n    let output;\n    if (names.length == 1) {\n        try {\n            output = rename_dataset(loaded[0]);\n        } catch (e) {\n            scran.free(loaded[0].matrix);\n            throw e;\n        }\n    } else {\n        try {\n            output = bind_datasets(names, loaded);\n        } finally {\n            // No need to hold references to the individual matrices once the\n            // binding is complete, so we release them.\n             for (const x of loaded) {\n                scran.free(x.matrix);\n            }\n        }\n    }\n\n    return output;\n}\n\n/******************************************\n ******* Internals - miscellaneous ********\n ******************************************/\n\nconst invalid_block_id = -1;\n\nfunction harvest_subset_indices(subset, cache) {\n    let keep;\n\n    if (RAW_SUBSET_OVERRIDE in cache) {\n        keep = cache[RAW_SUBSET_OVERRIDE];\n    } else if (subset == null) {\n        keep = null;\n    } else {\n        if (!cache.raw_annotations.hasColumn(subset.field)) {\n            throw new Error(\"failed to find '\" + subset.field + \"' in the column annotations\");\n        }\n\n        let anno = cache.raw_annotations.column(subset.field);\n        keep = [];\n\n        if (\"values\" in subset) {\n            let allowed = new Set(subset.values);\n            anno.forEach((x, i) => {\n                if (allowed.has(x)) {\n                    keep.push(i);\n                }\n            });\n        } else {\n            // Check each entry to see whether it belongs to the range.\n            // This is cheaper than sorting anything, assuming there \n            // aren't that many ranges.\n            anno.forEach((x, i) => {\n                for (const r of subset.ranges) {\n                    if (x >= r[0] && x <= r[1]) {\n                        keep.push(i);\n                        return;\n                    }\n                }\n            });\n        }\n    }\n\n    // Filter out invalid block IDs. Note that this might get called\n    // before compute() is run (via undoSubset), so we need to protect\n    // against the case where the raw_block_ids has not been set yet.\n    if (\"raw_block_ids\" in cache && cache.raw_block_ids !== null) {\n        let bids = cache.raw_block_ids.array();\n\n        let keep2 = [];\n        if (keep !== null) {\n            for (const i of keep) {\n                if (bids[i] !== invalid_block_id) {\n                    keep2.push(i);\n                }\n            }\n        } else {\n            for (var i = 0; i < bids.length; i++) {\n                if (bids[i] !== invalid_block_id) {\n                    keep2.push(i);\n                }\n            }\n        }\n        keep = keep2;\n    }\n\n    return keep;\n}\n\nfunction check_subset_ranges(ranges) { \n    if (ranges.length % 2 !== 0) {\n        throw new Error(\"'ranges' should have two columns in 'subset'\");\n    }\n    for (var i = 1; i < ranges.length; i++) {\n        if (ranges[i] < ranges[i-1]) {\n            throw new Error(\"'ranges' should be sorted in increasing order\");\n        }\n    }\n}\n\n/************************************\n ******* Internals - caching ********\n ************************************/\n\nasync function load_and_cache(new_datasets, cache, preserve_dataset_cache) {\n    utils.freeCache(cache.raw_matrix);\n    utils.freeCache(cache.matrix); // freeing this as well, to release all references and potentially release memory.\n    utils.freeCache(cache.multi_block_ids);\n\n    let res = await load_datasets(new_datasets, preserve_dataset_cache);\n    cache.raw_matrix = res.matrix;\n    cache.row_ids = res.row_ids;\n    cache.raw_annotations = res.cells;\n    cache.multi_block_ids = res.block_ids;\n    cache.multi_block_levels = res.block_levels;\n    cache.genes = res.features;\n}\n\nfunction block_and_cache(block_factor, cache) {\n    utils.freeCache(cache.raw_block_ids);\n\n    let blocks = null;\n    let block_levels = null;\n\n    if (block_factor !== null) {\n        // Single matrix with a batch factor.\n        try {\n            let anno_batch = cache.raw_annotations.column(block_factor);\n            if (anno_batch.length != cache.raw_matrix.numberOfColumns()) {\n                throw new Error(\"length of blocking factor '\" + block_factor + \"' should be equal to the number of cells\"); \n            }\n            let converted = scran.factorize(anno_batch, { action: \"none\", placeholder: invalid_block_id });\n            blocks = converted.ids;\n            block_levels = converted.levels;\n        } catch (e) {\n            utils.freeCache(blocks);\n            throw e;\n        }\n    } else {\n        if (cache.multi_block_ids !== null) { \n            // Creating a view so that freeing of this object is a no-op.\n            // We're downstream of load_and_cache so any freeing of\n            // multi_block_ids would require block_and_cache to rerun\n            // anyway, so we don't have to worry about invalidation.\n            blocks = cache.multi_block_ids.view();\n        } else {\n            blocks = null;\n        }\n        block_levels = cache.multi_block_levels;\n    }\n\n    cache.raw_block_ids = blocks;\n    cache.raw_block_levels = block_levels;\n}\n\nfunction subset_and_cache(subset, cache) {\n    utils.freeCache(cache.matrix);\n    utils.freeCache(cache.block_ids);\n\n    let keep = harvest_subset_indices(subset, cache);\n\n    let new_annotations;\n    let new_matrix;\n    let new_block_ids;\n    let new_block_levels;\n\n    try {\n        if (keep === null) {\n            new_annotations = cache.raw_annotations;\n\n            // Need to make a clone so that it can be freed independently of the original.\n            // This is cheap as only the shared pointer is cloned, not the underlying data.\n            new_matrix = cache.raw_matrix.clone();\n\n            if (cache.raw_block_ids !== null) {\n                // A view also works, given that we're downstream of the generating\n                // process for raw_block_ids and thus our lifetime is always tied to it.\n                new_block_ids = cache.raw_block_ids.view();\n                new_block_levels = cache.raw_block_levels;\n            } else {\n                new_block_ids = null;\n                new_block_levels = null;\n            }\n\n        } else {\n            new_annotations = bioc.SLICE(cache.raw_annotations, keep);\n\n            if (cache.raw_block_ids !== null) {\n                new_block_ids = scran.subsetBlock(cache.raw_block_ids, keep);\n                let dropped = scran.dropUnusedBlock(new_block_ids);\n                new_block_levels = dropped.map(x => cache.raw_block_levels[x]);\n            } else {\n                new_block_ids = null;\n                new_block_levels = null;\n            }\n\n            new_matrix = new scran.MultiMatrix;\n            for (const key of cache.raw_matrix.available()) {\n                let current = cache.raw_matrix.get(key);\n                new_matrix.add(key, scran.subsetColumns(current, keep));\n            }\n        }\n\n    } catch (e) {\n        utils.freeCache(new_matrix);\n        utils.freeCache(new_block_ids);\n        throw e;\n    }\n\n    cache.annotations = new_annotations;\n    cache.block_levels = new_block_levels;\n    cache.block_ids = new_block_ids;\n    cache.matrix = new_matrix;\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function updateRowIdentities(current, old) {\n    if (current.length == old.length) {\n        if (current.every((x, i) => x == old[i])) {\n            return y => y;\n        }\n    }\n\n    let mapping = {};\n    old.forEach((x, i) => {\n        mapping[x] = i;\n    });\n\n    let perm = new Int32Array(current.length);\n    current.forEach((x, i) => {\n        if (x in mapping) {\n            perm[i] = mapping[x];\n        } else {\n            perm[i] = -1;\n        }\n    });\n\n    return y => {\n        let copy = new y.constructor(perm.length);\n        perm.forEach((i, j) => {\n            if (i == -1) {\n                if (copy instanceof Array) {\n                    copy[j] = null;\n                } else if (copy instanceof Float64Array) {\n                    copy[j] = Number.NaN;\n                } else {\n                    copy[j] = -1; // dunno what else to do here.\n                }\n            } else {\n                copy[j] = y[i];\n            }\n        });\n        return copy;\n    };\n}\n\nfunction extract_serialized_files(handle) {\n    let kids = handle.children;\n    let all_files = new Array(kids.length);\n\n    for (const x of Object.keys(kids)) {\n        let current = handle.open(x);\n\n        let curfile = {};\n        for (const field of [\"type\", \"name\"]) {\n            let dhandle = current.open(field, { load: true });\n            curfile[field] = dhandle.values[0];\n        }\n\n        if (\"id\" in current.children) {\n            curfile.id = current.open(\"id\", { load: true }).values[0];\n        } else {\n            for (const field of [\"offset\", \"size\"]) {\n                curfile[field] = current.open(field, { load: true }).values[0];\n            }\n        }\n\n        let idx = Number(x);\n        all_files[idx] = curfile;\n    }\n\n    return all_files;\n}\n\nasync function unserialize_Dataset(format, all_files, all_options, loader) {\n    if (!(format in iutils.availableReaders)) {\n        throw new Error(\"unknown format '\" + format + \"' during unserialization\");\n    }\n    let cls = iutils.availableReaders[format];\n\n    let handles = [];\n    for (const f of all_files) {\n        let b;\n        if (loader == null) {\n            if (link2file == null) {\n                throw new Error(\"no valid linking function from 'setResolveLink'\");\n            }\n            b = await link2file(f.id);\n        } else {\n            b = await loader(f.offset, f.size);\n        }\n        let handle = new iutils.SimpleFile(b, { name: f.name }) \n        handles.push({ type: f.type, file: handle });\n    }\n\n    return await cls.unserialize(handles, all_options);\n}\n\nexport async function unserialize(handle, embeddedLoader) {\n    let ghandle = handle.open(\"inputs\");\n    let phandle = ghandle.open(\"parameters\");\n\n    let readers = {};\n    let parameters = { block_factor: null };\n    let solofile = false; // legacy argument.\n\n    if (\"datasets\" in phandle.children) {\n        let dhandle = phandle.open(\"datasets\");\n        for (const k of Object.keys(dhandle.children)) {\n            let curdhandle = dhandle.open(k);\n            let format = curdhandle.open(\"format\", { load: true }).values[0];\n            let name = curdhandle.open(\"name\", { load: true }).values[0];\n\n            let fihandle = curdhandle.open(\"files\");\n            let curfiles = extract_serialized_files(fihandle);\n\n            let options = {};\n            if (\"options\" in curdhandle.children) {\n                options = JSON.parse(curdhandle.open(\"options\", { load: true }).values[0]);\n            }\n\n            readers[name] = await unserialize_Dataset(format, curfiles, options, embeddedLoader);\n        }\n\n        if (\"block_factor\" in phandle.children) {\n            parameters.block_factor = phandle.open(\"block_factor\", { load: true }).values[0];\n        }\n\n    } else {\n        // Extracting the files.\n        let fihandle = phandle.open(\"files\");\n        let all_files = extract_serialized_files(fihandle);\n\n        // Extracting the format and organizing the files.\n        let fohandle = phandle.open(\"format\", { load: true });\n        solofile = (fohandle.shape.length == 0);\n\n        if (solofile) {\n            let format = fohandle.values[0];\n            readers[\"default\"] = await unserialize_Dataset(format, all_files, {}, embeddedLoader);\n            if (\"sample_factor\" in phandle.children) {\n                parameters.block_factor = phandle.open(\"sample_factor\", { load: true }).values[0];\n            }\n\n        } else {\n            let formats = fohandle.values;\n            let sample_names = phandle.open(\"sample_names\", { load: true }).values;\n            let sample_groups = phandle.open(\"sample_groups\", { load: true }).values;\n\n            let sofar = 0;\n            for (var i = 0; i < formats.length; i++) {\n                let start = sofar;\n                sofar += sample_groups[i];\n                let curfiles = all_files.slice(start, sofar);\n                let format = formats[i];\n                readers[sample_names[i]] = await unserialize_Dataset(format, curfiles, {}, embeddedLoader);\n            }\n        }\n    }\n\n    // Figuring out the subset.\n    let subset = null;\n    let raw_indices = null;\n    if (\"subset\" in phandle.children) {\n        let shandle = phandle.open(\"subset\");\n\n        if (\"cells\" in shandle.children) {\n            let schandle = shandle.open(\"cells\");\n            if (\"indices\" in schandle.children) {\n                raw_indices = schandle.open(\"indices\", { load: true }).values;\n            } else if (\"field\" in schandle.children) {\n                subset = { field: schandle.open(\"field\", { load: true }).values[0] };\n\n                if (\"values\" in schandle.children) {\n                    subset.values = schandle.open(\"values\", { load: true }).values;\n                } else {\n                    let ranges = schandle.open(\"ranges\", { load: true }).values;\n                    check_subset_ranges(ranges);\n                    let reranges = [];\n                    for (var i = 0; i < ranges.length/2; i++) {\n                        reranges.push([ ranges[2*i], ranges[2*i + 1] ]);\n                    }\n                    subset.ranges = reranges;\n                }\n            } else {\n                throw new Error(\"unrecognized specification for 'subset'\");\n            }\n        }\n    }\n\n    parameters.subset = subset;\n\n    // Loading matrix data.\n    let cache = { readers: readers };\n    await load_and_cache(readers, cache);\n    block_and_cache(parameters.block_factor, cache);\n\n    if (raw_indices !== null) {\n        cache[RAW_SUBSET_OVERRIDE] = raw_indices;\n    }\n    subset_and_cache(parameters.subset, cache);\n\n    // We need to do something if the permutation is not the same.\n    let rhandle = ghandle.open(\"results\");\n    let perm = {};\n\n    if (\"feature_identities\" in rhandle.children) { \n        // v3.0\n        let ihandle = rhandle.open(\"feature_identities\");\n        for (const a of Object.keys(ihandle.children)) {\n            if (cache.matrix.has(a)) {\n                let dhandle = ihandle.open(a, { load: true });\n                perm[a] = updateRowIdentities(cache.row_ids[a], dhandle.values);\n            }\n        }\n    } else {\n        if (solofile) {\n            if (\"permutation\" in rhandle.children) {\n                // v1.0-v1.1\n                let dhandle = rhandle.open(\"permutation\", { load: true });\n                let ids = new Int32Array(dhandle.values.length);\n                dhandle.values.forEach((x, i) => { ids[x] = i; });\n                perm.RNA = updateRowIdentities(cache.row_ids[\"RNA\"], ids);\n            } else if (\"identities\" in rhandle.children) {\n                if (rhandle.children[\"identities\"] == \"DataSet\") {\n                    // v1.2\n                    let dhandle = rhandle.open(\"identities\", { load: true });\n                    perm.RNA = updateRowIdentities(cache.row_ids[\"RNA\"], dhandle.values);\n                } else {\n                    // v2.0\n                    let ihandle = rhandle.open(\"identities\");\n                    for (const a of Object.keys(ihandle.children)) {\n                        if (cache.matrix.has(a)) {\n                            let dhandle = ihandle.open(a, { load: true });\n                            perm[a] = updateRowIdentities(cache.row_ids[a], dhandle.values);\n                        }\n                    }\n                }\n            } else {\n                // Otherwise, we're dealing with v0 states. We'll just\n                // assume it was the same, I guess. Should be fine as we didn't change\n                // the permutation code in v0.\n            }\n        } else {\n            let old_ids;\n            if (\"indices\" in rhandle.children) {\n                // v1.1\n                old_ids = rhandle.open(\"indices\", { load: true }).values;\n\n                let ref = cache.row_ids[\"RNA\"].slice().sort();\n                let old_ids2 = old_ids.slice().sort();\n                for (var i = 0; i < old_ids2.length; i++) {\n                    if (ref[i] != old_ids2[i]) {\n                        console.log([i, ref[i], old_ids2[i]]);\n                        break;\n                    }\n                }\n                perm.RNA = updateRowIdentities(cache.row_ids[\"RNA\"], old_ids);\n            } else {\n                if (rhandle.children[\"identities\"] == \"DataSet\") {\n                    // v1.2+\n                    old_ids = rhandle.open(\"identities\", { load: true }).values;\n                    perm.RNA = updateRowIdentities(cache.row_ids[\"RNA\"], old_ids);\n                } else {\n                    // v2.0\n                    let ihandle = rhandle.open(\"identities\");\n                    for (const a of Object.keys(ihandle.children)) {\n                        if (cache.matrix.has(a)) {\n                            let dhandle = ihandle.open(a, { load: true });\n                            perm[a] = updateRowIdentities(cache.row_ids[a], dhandle.values);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Any missing modalities, for whatever reason.\n    for (const a of cache.matrix.available()) {\n        if (!(a in perm)) {\n            perm[a] = y => y;\n        }\n    }\n\n    /*\n     * We could try to construct 'abbreviated', but there isn't really\n     * any point because callers are expected to set 'datasets = null'\n     * in their calls to 'compute()' on an unserialized analysis, so \n     * any setting of '#abbreviated' wouldn't even get used.\n     */\n\n    return { \n        state: new InputsState(parameters, cache),\n        permuters: perm\n    };\n}\n\n/**************************\n ******** Linking *********\n **************************/\n\nvar file2link = null;\nvar link2file = null;\n\n/**\n * Specify a function to create links for data files.\n *\n * @param {function} fun - Function that accepts:\n *\n * - `format`: the string containing the format of the dataset that owns the file.\n * - `file`: a {@linkplain SimpleFile} representing the file contents.\n *\n * It should return a string containing some unique identifier to the file.\n * This is most typically used to register the file with some user-specified database system for later retrieval.\n *\n * @return `fun` is set as the global link creator for this step. \n * The _previous_ value of the creator is returned.\n */\nexport function setCreateLink(fun) {\n    let previous = file2link;\n    file2link = fun;\n    return previous;\n}\n\n/**\n * Specify a function to resolve links for data files.\n *\n * @param {function} fun - Function that accepts a string containing a linking idenfier and returns any value that can be used in the {@linkplain SimpleFile} constructor\n * i.e., a Uint8Array, File (on browser) or string containing a file path (on Node.js).\n * This is most typically used to retrieve a file from some user-specified database system.\n *\n * @return `fun` is set as the global resolver for this step. \n * The _previous_ value of the resolver is returned.\n */\nexport function setResolveLink(fun) {\n    let previous = link2file;\n    link2file = fun;\n    return previous;\n}\n","import * as scran from \"scran.js\"; \nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as rutils from \"../readers/index.js\";\n\nconst baseUrl = \"https://github.com/kanaverse/kana-special-features/releases/download/v1.0.0\";\n\nexport const step_name = \"rna_quality_control\";\n\n/**\n * Results of computing per-cell RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellRnaQcMetricsResults.html) for details.\n *\n * @external PerCellRnaQcMetricsResults\n */\n\n/**\n * Suggested filters for the RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestRnaQcFiltersResults.html) for details.\n *\n * @external SuggestRnaQcFiltersResults\n */\n\n/**\n * This step applies quality control on the RNA count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellRnaQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellRnaQcMetrics)\n * and [`suggestRnaQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestRnaQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n    #automatic;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.#automatic = false;\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n    \n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        let output = { ...this.#parameters }; // avoid pass-by-reference links.\n        output.species = bioc.CLONE(output.species);\n        return output;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:SuggestRnaQcFiltersResults} Result of filtering on the RNA-derived QC metrics.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {external:PerCellRnaQcMetricsResults} RNA-derived QC metrics.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults () {\n        return {\n            automatic: true,\n            gene_id_column: null,\n            use_reference_mito: true,\n            species: [],\n            gene_id_type: \"ENSEMBL\",\n            mito_prefix: \"mt-\",\n            nmads: 3\n        };\n    }\n\n    static configureFeatureParameters(use_reference_mito, guesses) {\n        let best_key = null;\n        let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n        if (\"row_names\" in guesses) {\n            let val = guesses.row_names;\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n            }\n        }\n\n        for (const [key, val] of Object.entries(guesses.columns)) {\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n                best_key = key;\n            }\n        }\n\n        return {\n            gene_id_column: best_key,\n            species: [best.species],\n            gene_id_type: best.type.toUpperCase()\n        };\n    }\n\n    /**\n     * Array of strings containing the taxonomy IDs for species where mitochondrial gene lists are available.\n     * @type {Array}\n     */\n    static mitochondriaSpecies = [ \n        \"9606\",  // Mouse\n        \"10090\", // Human\n        \"6239\",  // C. elegans\n        \"10116\", // Rat\n        \"9541\",  // M. fascicularis\n        \"7227\",  // Fly\n        \"7955\",  // Zebrafish\n        \"9598\"   // Chimp\n    ];\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    async #acquire_reference(species, feature_type) {\n        let output = new Set;\n        let mito_lists = RnaQualityControlState.#mito_lists;\n\n        for (const s of species) {\n            let target = s + \"-mito-\" + feature_type.toLowerCase() + \".txt.gz\";\n            if (!(target in mito_lists)) {\n                let contents = await RnaQualityControlState.#downloadFun(baseUrl + \"/\" + target);\n                let lines = await rutils.readLines2(contents, { compression: \"gz\" });\n                mito_lists[target] = lines;\n            }\n\n            mito_lists[target].forEach(x => { output.add(x); });\n        }\n\n        return output;\n    }\n\n    static #mito_lists = {};\n\n    /**\n     * Flush all cached lists of mitochondrial genes.\n     *\n     * By default, {@linkcode RnaQualityControlState#compute compute} will cache the mitochondrial gene lists in a static member for re-use across {@linkplain RnaQualityControlState} instances.\n     * These cached lists are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        RnaQualityControlState.#mito_lists = {};\n        return;\n    }\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * Specify a function to download the reference mitochondrial gene lists.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step. \n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        let previous = RnaQualityControlState.#downloadFun;\n        RnaQualityControlState.#downloadFun = fun;\n        return previous;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If set to `true`, the following logic is applied:\n     *\n     * - If `use_reference_mito = true`, the annotation column that best matches human/mouse Ensembl/symbols is set as `gene_id_column`.\n     *   Based on the identified species and feature type, `species` and `gene_id_type` are also set.\n     * - If `use_reference_mito = false`, the annotation column that best matches human/mouse symbols is set as `gene_id_column`.\n     *\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the feature annotations that contains the gene identifiers for the RNA modality.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {boolean} parameters.use_reference_mito - Whether to use the reference lists of mitochondrial genes.\n     * If `false`, mitochondrial genes are instead identified from their prefix.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species to use to obtain a reference list of mitochondrial genes.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode RnaQualityControlState#mitochondriaSpecies mitochondriaSpecies}).\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Name of the feature type in the reference list of mitochondrial genes.\n     * This can be any one of `\"ENSEMBL\"`, `\"SYMBOL\"`, or `\"ENTREZ\"`.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.mito_prefix - Case-insensitive prefix to use to identify mitochondrial genes from the dataset.\n     * Only used when `use_reference_mito = false`; in such cases, `gene_id_column` should point to symbols.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     *\n     * @return The object is updated with the new results.\n     * @async\n     */\n    async compute(parameters) {\n        let { mito_prefix, nmads } = parameters;\n        let automatic;\n        let use_reference_mito;\n        let gene_id_column;\n        let species;\n        let gene_id_type;\n\n        // Some back-compatibility here.\n        if (\"use_reference_mito\" in parameters) {\n            automatic = parameters.automatic;\n            use_reference_mito = parameters.use_reference_mito;\n            gene_id_column = parameters.gene_id_column;\n            species = parameters.species;\n            gene_id_type = parameters.gene_id_type;\n        } else {\n            automatic = true;\n            use_reference_mito = parameters.use_mito_default;\n            let def = RnaQualityControlState.defaults();\n            gene_id_column = def.gene_id_column;\n            species = def.species;\n            gene_id_type = def.gene_id_type;\n        }\n\n        this.changed = false;\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            use_reference_mito !== this.#parameters.use_reference_mito || \n            (\n                !automatic && \n                (\n                    gene_id_column !== this.#parameters.gene_id_column || \n                    (!use_reference_mito && mito_prefix !== this.#parameters.mito_prefix) ||\n                    (\n                        use_reference_mito && \n                        (\n                            utils.changedParameters(species, this.#parameters.species) || \n                            gene_id_type !== this.#parameters.gene_id_type\n                        )\n                    )\n                )\n            ) \n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                let gene_id_column2 = gene_id_column;\n                let species2 = species;\n                let gene_id_type2 = gene_id_type;\n\n                if (automatic) {\n                    let guesses = this.#inputs.guessRnaFeatureTypes();\n                    let backcomp = RnaQualityControlState.configureFeatureParameters(use_reference_mito, guesses);\n                    gene_id_column2 = backcomp.gene_id_column;\n                    species2 = backcomp.species;\n                    gene_id_type2 = backcomp.gene_id_type;\n                }\n\n                var gene_info = this.#inputs.fetchFeatureAnnotations()[\"RNA\"];\n                let val = (gene_id_column2 == null ? gene_info.rowNames() : gene_info.column(gene_id_column2));\n                var subsets = utils.allocateCachedArray(gene_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (val !== null) {\n                    if (use_reference_mito) {\n                        let lists = await this.#acquire_reference(species2, gene_id_type2);\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if (lists.has(x)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    } else if (mito_prefix !== null) {\n                        var lower_mito = mito_prefix.toLowerCase();\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if(x.toLowerCase().startsWith(lower_mito)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"RNA\");\n                this.#cache.metrics = scran.perCellRnaQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.gene_id_column = gene_id_column;\n        this.#parameters.use_reference_mito = use_reference_mito;\n        this.#parameters.species = bioc.CLONE(species); // avoid pass-by-reference behavior.\n        this.#parameters.gene_id_type = gene_id_type;\n        this.#parameters.mito_prefix = mito_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestRnaQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let ghandle = handle.open(\"rna_quality_control\" in handle.children ? \"rna_quality_control\" : \"quality_control\");\n\n    let parameters = RnaQualityControlState.defaults(); \n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.use_mito_default = phandle.open(\"use_mito_default\", { load: true }).values[0] > 0;\n        parameters.mito_prefix = phandle.open(\"mito_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n    }\n\n    let output;\n    let cache = {};\n    try {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"metrics\" in rhandle.children) { // QC metrics may not be reported if skipped.\n            let mhandle = rhandle.open(\"metrics\");\n            let sums = mhandle.open(\"sums\", { load: true }).values;\n\n            cache.metrics = scran.emptyPerCellRnaQcMetricsResults(sums.length, 1);\n            cache.metrics.sums({ fillable: true }).set(sums);\n\n            let detected = mhandle.open(\"detected\", { load: true }).values;\n            cache.metrics.detected({ fillable: true }).set(detected);\n            let proportions = mhandle.open(\"proportion\", { load: true }).values;\n            cache.metrics.subsetProportions(0, { fillable: true }).set(proportions);\n        }\n\n        if (\"thresholds\" in rhandle.children) { // if skip=true, QC thresholds may not be reported.\n            let discards = rhandle.open(\"discards\", { load: true }).values; \n            cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n            cache.discard_buffer.set(discards);\n\n            let thandle = rhandle.open(\"thresholds\");\n            let thresholds_sums = thandle.open(\"sums\", { load: true }).values;\n            let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n            let thresholds_proportion = thandle.open(\"proportion\", { load: true }).values;\n\n            cache.filters = scran.emptySuggestRnaQcFiltersResults(1, thresholds_sums.length);\n            cache.filters.thresholdsSums({ fillable: true }).set(thresholds_sums);\n            cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n            cache.filters.thresholdsSubsetProportions(0, { fillable: true }).set(thresholds_proportion);\n        }\n\n        output = new RnaQualityControlState(inputs, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.metrics);\n        utils.freeCache(cache.filters)\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"adt_quality_control\";\n\n/**\n * Results of computing per-cell ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellAdtQcMetricsResults.html) for details.\n *\n * @external PerCellAdtQcMetricsResults\n */\n\n/**\n * Suggested filters for the ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestAdtQcFiltersResults.html) for details.\n *\n * @external SuggestAdtQcFiltersResults\n */\n\n/**\n * This step applies quality control on the ADT count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellAdtQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellAdtQcMetrics)\n * and [`suggestAdtQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestAdtQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"ADT\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestAdtQcFiltersResults} Result of filtering on the ADT-derived QC metrics.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellAdtQcMetricsResults} ADT-derived QC metrics,\n     * available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults() {\n        return {\n            automatic: true,\n            tag_id_column: null,\n            igg_prefix: \"IgG\",\n            nmads: 3,\n            min_detected_drop: 0.1\n        };\n    }\n\n    static configureFeatureParameters(lower_igg, annotations) {\n        let counter = val => {\n            let n = 0;\n            val.forEach(x => {\n                if (x.toLowerCase().startsWith(lower_igg)) {\n                    n++;\n                }\n            });\n            return n;\n        };\n\n        let best_key = null;\n        let best = 0;\n\n        let rn = annotations.rowNames();\n        if (rn !== null) {\n            best = counter(rn);\n        }\n\n        for (const key of annotations.columnNames()) {\n            let latest = counter(annotations.column(key));\n            if (latest > best) {\n                best_key = key;\n                best = latest;\n            }\n        }\n\n        return best_key;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * \n     * @param {object} parameters - Parameter object, equivalent to the `adt_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotations. \n     * Specifically, `tag_id_column` is set to the column with the most matches to `igg_prefix`.\n     * @param {?(string|number)} parameters.tag_id_column - Name or index of the column of the feature annotations that contains the tag identifiers.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.igg_prefix - Prefix of the identifiers for isotype controls.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     * @param {number} parameters.min_detected_drop - Minimum proportional drop in the number of detected features before a cell is to be considered low-quality.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { igg_prefix, nmads, min_detected_drop } = parameters;\n        this.changed = false;\n\n        let automatic;\n        let tag_id_column; \n        if (\"automatic\" in parameters) {\n            automatic = parameters.automatic;\n            tag_id_column = parameters.tag_id_column;\n        } else {\n            automatic = true;\n            tag_id_column = null;\n        }\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            igg_prefix !== this.#parameters.igg_prefix ||\n            (!automatic && tag_id_column !== this.#parameters.tag_id_column)\n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var tag_info = this.#inputs.fetchFeatureAnnotations()[\"ADT\"];\n                var subsets = utils.allocateCachedArray(tag_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (igg_prefix !== null) {\n                    var lower_igg = igg_prefix.toLowerCase();\n                    let key = tag_id_column;\n                    if (automatic) {\n                        key = AdtQualityControlState.configureFeatureParameters(lower_igg, tag_info);\n                    }\n\n                    let val = (key == null ? tag_info.rowNames() : tag_info.column(key));\n                    if (val !== null) {\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => { \n                            if (x.toLowerCase().startsWith(lower_igg)) {\n                                sub_arr[i] = 1;                        \n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"ADT\");\n                this.#cache.metrics = scran.perCellAdtQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.tag_id_column = tag_id_column;\n        this.#parameters.igg_prefix = igg_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads || min_detected_drop !== this.#parameters.min_detected_drop) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestAdtQcFilters(this.#cache.metrics, { numberOfMADs: nmads, minDetectedDrop: min_detected_drop, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n            this.#parameters.min_detected_drop = min_detected_drop;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = AdtQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.igg_prefix = phandle.open(\"igg_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n        parameters.min_detected_drop = phandle.open(\"min_detected_drop\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellAdtQcMetricsResults(detected.length, 1);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n                let igg_total = mhandle.open(\"igg_total\", { load: true }).values;\n                cache.metrics.subsetTotals(0, { fillable: true }).set(igg_total);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n                let thresholds_igg_total = thandle.open(\"igg_total\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestAdtQcFiltersResults(1, thresholds_detected.length);\n                cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n                cache.filters.thresholdsSubsetTotals(0, { fillable: true }).set(thresholds_igg_total);\n            }\n\n            output = new AdtQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"crispr_quality_control\";\n\n/**\n * Results of computing per-cell CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellCrisprQcMetricsResults.html) for details.\n *\n * @external PerCellCrisprQcMetricsResults\n */\n\n/**\n * Suggested filters for the CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestCrisprQcFiltersResults.html) for details.\n *\n * @external SuggestCrisprQcFiltersResults\n */\n\n/**\n * This step applies quality control on the CRISPR guide count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellCrisprQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellCrisprQcMetrics)\n * and [`suggestCrisprQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestCrisprQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestCrisprQcFiltersResults} Result of filtering on the CRISPR-derived QC metrics.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellCrisprQcMetricsResults} CRISPR-derived QC metrics,\n     * available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            nmads: 3\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold on the maximum count. \n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { nmads } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var mat = this.#inputs.fetchCountMatrix().get(\"CRISPR\");\n                this.#cache.metrics = scran.perCellCrisprQcMetrics(mat);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestCrisprQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = CrisprQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellCrisprQcMetricsResults(detected.length);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n\n                let max_prop = mhandle.open(\"max_proportion\", { load: true }).values;\n                cache.metrics.maxProportions({ fillable: true }).set(max_prop);\n\n                let max_index = mhandle.open(\"max_index\", { load: true }).values;\n                cache.metrics.maxIndex({ fillable: true }).set(max_index);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_max_count = thandle.open(\"max_count\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestCrisprQcFiltersResults(thresholds_max_count.length);\n                cache.filters.thresholdsMaxCount({ fillable: true }).set(thresholds_max_count);\n            }\n\n            output = new CrisprQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback if the results aren't available. \n        output = new CrisprQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as rna_qc_module from \"./rna_quality_control.js\";\nimport * as adt_qc_module from \"./adt_quality_control.js\";\nimport * as crispr_qc_module from \"./crispr_quality_control.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"cell_filtering\";\n\nfunction find_usable_upstream_states(qc_states, in_use) {\n    let tmp = utils.findValidUpstreamStates(qc_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (in_use[k]) {\n            to_use.push(qc_states[k]);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step filters the count matrices to remove low-quality cells,\n * based on metrics and thresholds computed in {@linkplain RnaQualityControlState} and friends.\n * It wraps the [`filterCells`](https://kanaverse.github.io/scran.js/global.html#filterCells) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * For multi-modal datasets, this can combine quality calls from all valid modalities; \n * a cell is removed if it is considered low-quality in any individual modality.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellFilteringState {\n    #inputs;\n    #qc_states;\n    #cache;\n    #parameters;\n\n    constructor(inputs, qc_states, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        if (!(qc_states.RNA instanceof rna_qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc_states.RNA' should be a RnaQualityControlState object\");\n        }\n        if (!(qc_states.ADT instanceof adt_qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc_states.ADT' should be a AdtQualityControlState object\");\n        }\n        if (!(qc_states.CRISPR instanceof crispr_qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc_states.CRISPR' should be a CrisprQualityControlState object\");\n        }\n        this.#qc_states = qc_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.block_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {external:MultiMatrix} A {@linkplain external:MultiMatrix MultiMatrix} object containing the filtered and normalized matrices for all modalities,\n     * available after running {@linkcode CellFilteringState#compute compute}.\n     */\n    fetchFilteredMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute_matrix();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Int32WasmArray} Array of length equal to the number of cells after filtering, \n     * containing the block assignment for each cell.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null` if no blocks are present in the dataset.\n     */\n    fetchFilteredBlock() {\n        if (!(\"block_buffer\" in this.#cache)) {\n            this.#raw_compute_block();\n        }\n        return this.#cache.block_buffer;\n    }\n\n    /**\n     * @return {?Uint8WasmArray} Combined discard vector, i.e., an array of length equal to the number of cells in the dataset,\n     * indicating whether each cell should be removed.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null`, if no upstream filtering steps were performed.\n     */\n    fetchDiscards() {\n        if (\"discard_buffer\" in this.#cache) {\n            return this.#cache.discard_buffer;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute_matrix() {\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = new scran.MultiMatrix;\n\n        let inputs = this.#inputs.fetchCountMatrix();\n        for (const a of inputs.available()) {\n            let src = inputs.get(a);\n\n            let sub;\n            if (\"discard_buffer\" in this.#cache) {\n                sub = scran.filterCells(src, this.#cache.discard_buffer);\n            } else {\n                sub = src.clone();\n            }\n\n            this.#cache.matrix.add(a, sub);\n        }\n    }\n\n    #raw_compute_block() {\n        utils.freeCache(this.#cache.block_buffer);\n\n        let block = this.#inputs.fetchBlock();\n        if (block !== null) {\n            if (\"discard_buffer\" in this.#cache) {\n                // Filtering on the block. Might as well force a load of the\n                // matrix, it'll be needed once we have the blocks anyway.\n                let filtered_ncols = this.fetchFilteredMatrix().numberOfColumns();\n                let bcache = utils.allocateCachedArray(filtered_ncols, \"Int32Array\", this.#cache, \"block_buffer\");\n                scran.filterBlock(block, this.#cache.discard_buffer, { buffer: bcache });\n            } else {\n                this.#cache.block_buffer = block.view();\n            }\n        } else {\n            this.#cache.block_buffer = null;\n        }\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `cell_filtering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.use_rna - Whether to use the RNA-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_adt - Whether to use the ADT-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_crispr - Whether to use the CRISPR-derived QC metrics for filtering.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { use_rna, use_adt, use_crispr } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            this.changed = true;\n        }\n\n        if (this.#parameters.use_rna !== use_rna || this.#parameters.use_adt !== use_adt || this.#parameters.use_crispr !== use_crispr) {\n            this.#parameters.use_rna = use_rna;\n            this.#parameters.use_adt = use_adt;\n            this.#parameters.use_crispr = use_crispr;\n            this.changed = true;\n        }\n\n        let to_use = find_usable_upstream_states(this.#qc_states, { RNA: use_rna, ADT: use_adt, CRISPR: use_crispr });\n        if (!this.changed) {\n            for (const u of to_use) {\n                if (u.changed) {\n                    this.changed = true;\n                    break;\n                }\n            }\n        }\n\n        if (this.changed) {\n            if (to_use.length > 0) {\n                let first = to_use[0].fetchDiscards();\n\n                if (to_use.length > 1) {\n                    // A discard signal in any modality causes the cell to be removed. \n                    let disc_buffer = utils.allocateCachedArray(first.length, \"Uint8Array\", this.#cache, \"discard_buffer\");\n                    disc_buffer.fill(0);\n\n                    let disc_arr = disc_buffer.array();\n                    for (const u of to_use) {\n                        u.fetchDiscards().forEach((y, i) => { disc_arr[i] |= y; });\n                    }\n                } else {\n                    // If there's only one valid modality, we just create a view on it\n                    // to avoid unnecessary duplication.\n                    utils.freeCache(this.#cache.discard_buffer);\n                    this.#cache.discard_buffer = first.view();\n                }\n\n            } else {\n                // Deleting this so that serialization will behave correctly.\n                utils.freeCache(this.#cache.discard_buffer);\n                delete this.#cache.discard_buffer;\n            }\n\n            this.#raw_compute_matrix();\n            this.#raw_compute_block();\n        }\n    }\n\n    static defaults() {\n        return {\n            use_rna: true,\n            use_adt: true,\n            use_crispr: true\n        };\n    }\n\n    /**\n     * Apply the same filter to an array of data for each cell in the unfiltered dataset.\n     * Any calls to this method should be done after running {@linkcode CellFilteringState#compute compute}.\n     *\n     * @param {Array|TypedArray} Any array-like object of length equal to the number of cells in the unfiltered dataset.\n     * \n     * @return {Array|TypedArray} An array-like object of the same type as `x`,\n     * where all elements corresponding to low-quality cells have been discarded.\n     * This will have number of columns equal to that of {@linkcode CellFilteringState#fetchFilteredMatrix fetchFilteredMatrix}.\n     */\n    applyFilter(x) {\n        let expect_len = this.#inputs.fetchCountMatrix().numberOfColumns();\n        if (expect_len != x.length) {\n            throw new Error(\"length of 'x' should be equal to the number of cells in the unfiltered dataset\");\n        }\n\n        if (!(\"discard_buffer\" in this.#cache)) {\n            return x.slice(); // making a copy.\n        } else {\n            let discard = this.#cache.discard_buffer.array();\n            return x.filter((y, i) => !discard[i]);\n        }\n    }\n\n    /**\n     * Undo the effect of filtering on an array of indices.\n     * This is primarily useful for adjusting indices from downstream steps \n     * (e.g., {@linkcode CustomSelectionsState#fetchSelectionIndices CustomSelectionsState.fetchSelectionIndices})\n     * so that it can be used in {@linkcode subsetInputs}.\n     *\n     * @param {Array|TypedArray} indices - Array of column indices to the filtered matrix.\n     * Note that this will be modified in-place.\n     *\n     * @return Entries of `indices` are replaced with indices to the unfiltered matrix.\n     */\n    undoFilter(indices) {\n        let max_index = this.fetchFilteredMatrix().numberOfColumns();\n        for (const x of indices) {\n            if (x < 0 || x >= max_index) {\n                throw new Error(\"entries of 'indices' should be less than the number of cells in the filtered dataset\");\n            }\n        }\n\n        if (!('discard_buffer' in this.#cache)) {\n            return;\n        }\n\n        let keep = [];\n        this.#cache.discard_buffer.forEach((x, i) => {\n            if (x == 0) {\n                keep.push(i);\n            }\n        });\n\n        indices.forEach((x, i) => {\n            indices[i] = keep[x];\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, qc_states) {\n    let parameters = CellFilteringState.defaults();\n    let cache = {};\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            if (\"parameters\" in ghandle.children) {\n                let phandle = ghandle.open(\"parameters\");\n                if (\"use_rna\" in phandle.children) {\n                    parameters.use_rna = phandle.open(\"use_rna\", { load: true }).values[0] > 0;\n                    parameters.use_adt = phandle.open(\"use_adt\", { load: true }).values[0] > 0;\n                    parameters.use_crispr = phandle.open(\"use_crispr\", { load: true }).values[0] > 0;\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"discards\" in rhandle.children) {\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n            }\n        } \n\n        if (!(\"discard_buffer\" in cache)) {\n            let to_use = find_usable_upstream_states(qc_states, { RNA: parameters.use_rna, ADT: parameters.use_adt, CRISPR: parameters.use_crispr });\n\n            if (to_use.length == 1) {\n                // We figure out which upstream QC state contains the discard vector\n                // and create a view on it so that our discard_buffer checks work properly.\n                // (v1 and earlier also implicitly falls in this category.)\n                cache.discard_buffer = to_use[0].fetchDiscards().view();\n            } else if (to_use.length == 0) {\n                // No-op; we don't need to define discard_buffer.\n                ;\n            } else {\n                throw new Error(\"no more than one upstream QC state should be valid if 'discards' is not available\");\n            }\n        }\n\n        output = new CellFilteringState(inputs, qc_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.discard_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as utils from \"./general.js\";\n\nexport function subsetSums(qc, filter, mat, cache, name) {\n    let output = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache, name);\n    let discards = filter.fetchDiscards();\n\n    // unsafe, so no more Wasm allocations past this point. \n    let sums = qc.fetchMetrics().sums({ copy: false }); \n\n    if (discards == null) {\n        output.set(sums);\n    } else {\n        let oarr = output.array();\n        var j = 0;\n        discards.forEach((x, i) => {\n            if (!x) {\n                if (j == output.length) {\n                    throw new Error(\"normalization and filtering are not in sync\");\n                }\n                oarr[j] = sums[i];\n                j++;\n            }\n        });\n        if (j !== output.length) {\n            throw new Error(\"normalization and filtering are not in sync\");\n        }\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./rna_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"rna_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered matrix from the {@linkplain QualityControlState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaNormalizationState {\n    #qc\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc' should be a RnaQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.sum_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"RNA\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing normalized expression values,\n     * available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the RNA-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"RNA\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.changed = true;\n            }\n        } \n\n        if (this.changed) {\n            this.#raw_compute();\n        }\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new RnaNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./adt_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"adt_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered ADT matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`groupedSizeFactors`](https://kanaverse.github.io/scran.js/global.html#groupedSizeFactors) \n * and [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc' should be a AdtQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.sf_buffer);\n        utils.freeCache(this.#cache.centered_sf_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"ADT\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized ADT values,\n     * available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the ADT-derived size factor for each cell in the (QC-filtered) dataset.\n     * This is available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sf_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sf_buffer.length, \"Float64Array\", this.#cache, \"centered_sf_buffer\");\n            scran.centerSizeFactors(this.#cache.sf_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n        var block = this.#filter.fetchFilteredBlock();\n\n        var buffer = this.#cache.sf_buffer;\n        if (buffer.length != mat.numberOfColumns()) {\n            throw new Error(\"length of size factor vector should equal number of columns after QC\");\n        }\n\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to use for creating a low-dimensional embedding for clustering.\n     * @param {number} parameters.num_clusters - Number of clusters to create with k-means clustering.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        const { num_pcs, num_clusters } = parameters;\n        this.changed = false;\n\n        if (this.#qc.changed || this.#filter.changed || num_pcs !== this.#parameters.num_pcs || num_clusters != this.#parameters.num_clusters) {\n            if (this.valid()) {\n                var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n                let total_buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"total_buffer\");\n\n                var block = this.#filter.fetchFilteredBlock();\n                var sf_buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", this.#cache, \"sf_buffer\");\n                scran.quickAdtSizeFactors(mat, { \n                    totals: total_buffer, \n                    block: block, \n                    buffer: sf_buffer, \n                    numberOfPCs: num_pcs, \n                    numberOfClusters: num_clusters \n                });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.num_clusters = num_clusters;\n        } \n\n        if (this.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n            }\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n           num_pcs: 25,\n           num_clusters: 20\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    let cache = {};\n    let parameters = AdtNormalizationState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\");\n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.num_clusters = phandle.open(\"num_clusters\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n            \n            if (\"size_factors\" in rhandle.children) {\n                let sf = rhandle.open(\"size_factors\", { load: true }).values;\n                cache.sf_buffer = scran.createFloat64WasmArray(sf.length);\n                cache.sf_buffer.set(sf);\n            }\n\n            output = new AdtNormalizationState(qc, filter, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.sf_buffer);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtNormalizationState(qc, filter, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./crispr_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"crispr_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered CRISPR count matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc' should be a CrisprQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.centered_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized CRISPR abundances,\n     * available after running {@linkcode CrisprNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the CRISPR-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"CRISPR\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n                this.changed = true;\n            }\n        } \n\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n        let phandle = ghandle.createGroup(\"parameters\"); \n        let rhandle = ghandle.createGroup(\"results\"); \n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new CrisprNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\n\n/**\n * Results of per-gene variance modelling,\n * see [here](https://kanaverse.github.io/scran.js/ModelGeneVarResults.html) for details.\n *\n * @external ModelGeneVarResults\n */\n\n/**\n * Feature selection is performed by modelling the per-gene variance and finding highly variable genes.\n * This wraps the [`modelGeneVar`](https://kanaverse.github.io/scran.js/global.html#modelGeneVar) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class FeatureSelectionState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:ModelGeneVarResults} Variance modelling results,\n     * available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.results;\n    }\n\n    /**\n     * @return {Float64Array} Array of length equal to the number of genes,\n     * containing the sorted residuals after fitting a mean-dependent trend to the variances.\n     * Available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchSortedResiduals() {\n        return this.#cache.sorted_residuals;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference activity.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n \n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `feature_selection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.span - Value between 0 and 1 specifying the span for the LOWESS smoother.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { span } = parameters;\n        this.changed = false;\n        \n        if (this.#norm.changed || span != this.#parameters.span) {\n            utils.freeCache(this.#cache.results);\n\n            if (this.valid()) {\n                let mat = this.#norm.fetchNormalizedMatrix();\n                let block = this.#filter.fetchFilteredBlock();\n                this.#cache.results = scran.modelGeneVar(mat, { span: span, block: block });\n\n                this.#cache.sorted_residuals = this.#cache.results.residuals().slice(); // a separate copy.\n                this.#cache.sorted_residuals.sort();\n\n                this.changed = true;\n            }\n\n            this.#parameters.span = span;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, permuter, filter, norm) {\n    let ghandle = handle.open(\"feature_selection\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            span: phandle.open(\"span\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"means\" in rhandle.children) {\n            // Possibly permuting it to match the new permutation order;\n            // see 'unserialize' in 'inputs.js'.\n            let reloaded = {};\n            for (const key of [ \"means\", \"vars\", \"fitted\", \"resids\" ]) {\n                let value = rhandle.open(key, { load: true }).values;\n                reloaded[key] = permuter(value);\n            }\n\n            cache.results = scran.emptyModelGeneVarResults(reloaded.means.length, 1);\n            cache.results.means({ fillable: true }).set(reloaded.means);\n            cache.results.variances({ fillable: true }).set(reloaded.vars);\n            cache.results.fitted({ fillable: true }).set(reloaded.fitted);\n            cache.results.residuals({ fillable: true }).set(reloaded.resids);\n\n            cache.sorted_residuals = cache.results.residuals({ copy: true });\n            cache.sorted_residuals.sort();\n        }\n    }\n\n    return new FeatureSelectionState(filter, norm, parameters, cache);\n}\n\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\nimport * as feat_module from \"./feature_selection.js\";\n\nexport const step_name = \"rna_pca\";\n\n/**\n * Results of running PCA on some input matrix,\n * see [here](https://kanaverse.github.io/scran.js/RunPCAResults.html) for details.\n *\n * @external RunPCAResults\n */\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise the data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaPcaState { \n    #filter;\n    #norm;\n    #feat;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, feat, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        if (!(feat instanceof feat_module.FeatureSelectionState)) {\n            throw new Error(\"'feat' should be a FeatureSelectionState object\");\n        }\n        this.#feat = feat;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.hvg_buffer);\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized gene expression values.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {number} parameters.num_hvgs - Number of highly variable genes (see {@linkplain FeatureSelectionState}) to use in the PCA.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be one of:\n     *\n     * - `\"none\"`, in which case nothing is done using the sample information. \n     * - `\"regress\"`, where linear regression is applied to remove mean differences between samples.\n     * - `\"weight\"`, where samples are weighted so that they contribute equally regardless of the number of cells.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_hvgs, num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#feat.changed || num_hvgs !== this.#parameters.num_hvgs) {\n            if (this.valid()) {\n                choose_hvgs(num_hvgs, this.#feat, this.#cache);\n                this.changed = true;\n            }\n\n            this.#parameters.num_hvgs = num_hvgs;\n        }\n\n        if (this.changed || this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            utils.freeCache(this.#cache.pcs);\n\n            if (this.valid()) {\n                let sub = this.#cache.hvg_buffer;\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                this.#cache.pcs = scran.runPCA(mat, { features: sub, numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_hvgs: 2000,\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******* Internals ********\n **************************/\n\nfunction choose_hvgs(num_hvgs, feat, cache) {\n    var sorted_resids = feat.fetchSortedResiduals();\n    var sub = utils.allocateCachedArray(sorted_resids.length, \"Uint8Array\", cache, \"hvg_buffer\");\n\n    if (num_hvgs < sorted_resids.length) {\n        var threshold_at = sorted_resids[sorted_resids.length - num_hvgs];\n        var unsorted_resids = feat.fetchResults().residuals({ copy: false });\n        sub.array().forEach((element, index, array) => {\n            array[index] = unsorted_resids[index] >= threshold_at;\n        });\n    } else {\n        sub.fill(1);\n    }\n\n    return sub;\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm, feat) {\n    let ghandle = handle.open(\"rna_pca\" in handle.children ? \"rna_pca\" : \"pca\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters = { \n            num_hvgs: phandle.open(\"num_hvgs\", { load: true }).values[0],\n            num_pcs: phandle.open(\"num_pcs\", { load: true }).values[0]\n        };\n\n        // For back-compatibility.\n        if (\"block_method\" in phandle.children) {\n            parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n            if (parameters.block_method == \"mnn\") {\n                parameters.block_method = \"weight\";\n            }\n        } else {\n            parameters.block_method = \"none\";\n        }\n    }\n\n    let output;\n    let cache = {};\n    try {\n        if (feat.valid()) {\n            choose_hvgs(parameters.num_hvgs, feat, cache);\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"pcs\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n        }\n\n        output = new RnaPcaState(filter, norm, feat, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.hvg_buffer);\n        utils.freeCache(cache.pcs);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./adt_normalization.js\";\n\nexport const step_name = \"adt_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise ADT data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm' should be a AdtNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized ADT matrix,\n     * available after running {@linkcode AdtPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = AdtPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new AdtPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new AdtPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"crispr_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise CRISPR abundance data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm' should be a CrisprNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized CRISPR abundance matrix,\n     * available after running {@linkcode CrisprPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = CrisprPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new CrisprPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new CrisprPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as rna_pca_module from \"./rna_pca.js\";\nimport * as adt_pca_module from \"./adt_pca.js\";\nimport * as crispr_pca_module from \"./crispr_pca.js\";\n\nexport const step_name = \"combine_embeddings\";\n\nfunction find_nonzero_upstream_states(pca_states, weights) {\n    let tmp = utils.findValidUpstreamStates(pca_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (weights[k] > 0) {\n            to_use.push(k);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step combines multiple embeddings from different modalities into a single matrix for downstream analysis.\n * It wraps the [`scaleByNeighbors`](https://kanaverse.github.io/scran.js/global.html#scaleByNeighbors) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CombineEmbeddingsState {\n    #pca_states;\n    #parameters;\n    #cache;\n\n    constructor(pca_states, parameters = null, cache = null) {\n        if (!(pca_states.RNA instanceof rna_pca_module.RnaPcaState)) {\n            throw new Error(\"'pca_states.RNA' should be an RnaPcaState object\");\n        }\n        if (!(pca_states.ADT instanceof adt_pca_module.AdtPcaState)) {\n            throw new Error(\"'pca_states.ADT' should be an AdtPcaState object\");\n        }\n        if (!(pca_states.CRISPR instanceof crispr_pca_module.CrisprPcaState)) {\n            throw new Error(\"'pca_states.CRISPR' should be an CrisprPcaState object\");\n        }\n        this.#pca_states = pca_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.combined_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the combined embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchCombined() {\n        return this.#cache.combined_buffer;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfCells() {\n        return this.#cache.num_cells;\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#cache.total_dims;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return { \n            rna_weight: 1,\n            adt_weight: 1,\n            crispr_weight: 0,\n            approximate: true\n        };\n    }\n\n    static createPcsView(cache, upstream) {\n        utils.freeCache(cache.combined_buffer);\n        cache.combined_buffer = upstream.principalComponents({ copy: \"view\" }).view();\n        cache.num_cells = upstream.numberOfCells();\n        cache.total_dims = upstream.numberOfPCs();\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.rna_weight - Relative weight of the RNA embeddings.\n     * @param {number} parameters.adt_weight - Relative weight of the ADT embeddings.\n     * @param {number} parameters.crispr_weight - Relative weight of the CRISPR embeddings.\n     * @param {boolean} parameters.approximate - Whether an approximate nearest neighbor search should be used by `scaleByNeighbors`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { rna_weight, adt_weight, crispr_weight, approximate } = parameters;\n        this.changed = false;\n\n        for (const v of Object.values(this.#pca_states)) {\n            if (v.changed) {\n                this.changed = true;\n                break;\n            }\n        }\n\n        if (approximate !== this.#parameters.approximate) {\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        if (rna_weight !== this.#parameters.rna_weight || adt_weight !== this.#parameters.adt_weight || crispr_weight !== this.#parameters.crispr_weight) {\n            this.#parameters.rna_weight = rna_weight;\n            this.#parameters.adt_weight = adt_weight;\n            this.#parameters.crispr_weight = crispr_weight;\n            this.changed = true;\n        }\n\n        if (this.changed) { \n            const weights = { RNA: rna_weight, ADT: adt_weight, CRISPR: crispr_weight };\n            let to_use = find_nonzero_upstream_states(this.#pca_states, weights);\n\n            if (to_use.length > 1) {\n                let weight_arr = to_use.map(x => weights[x]);\n                let collected = [];\n                let total = 0;\n                let ncells = null;\n\n                for (const k of to_use) {\n                    let curpcs = this.#pca_states[k].fetchPCs();\n                    collected.push(curpcs.principalComponents({ copy: \"view\" }));\n                    if (ncells == null) {\n                        ncells = curpcs.numberOfCells();\n                    } else if (ncells !== curpcs.numberOfCells()) {\n                        throw new Error(\"number of cells should be consistent across all embeddings\");\n                    }\n                    total += curpcs.numberOfPCs();\n                }\n\n                let buffer = utils.allocateCachedArray(ncells * total, \"Float64Array\", this.#cache, \"combined_buffer\");\n                scran.scaleByNeighbors(collected, ncells, { buffer: buffer, weights: weight_arr, approximate: approximate });\n                this.#cache.num_cells = ncells;\n                this.#cache.total_dims = total;\n\n            } else {\n                // If there's only one embedding, we shouldn't respond to changes\n                // in parameters, because they won't have any effect.\n                let pcs = this.#pca_states[to_use[0]].fetchPCs();\n                this.constructor.createPcsView(this.#cache, pcs);\n            }\n        }\n\n        // Updating all parameters anyway. This requires us to take ownership\n        // of 'weights' to avoid pass-by-reference shenanigans.\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca_states) {\n    let cache = {};\n    let parameters = CombineEmbeddingsState.defaults();\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            {\n                let phandle = ghandle.open(\"parameters\");\n                parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n                if ('weights' in phandle.children) { // v2.0\n                    let whandle = phandle.open(\"weights\");\n                    if (\"RNA\" in whandle.children) {\n                        parameters.rna_weight = whandle.open(\"RNA\", { load: true }).values[0];\n                    }\n                    if (\"ADT\" in whandle.children) {\n                        parameters.adt_weight = whandle.open(\"ADT\", { load: true }).values[0];\n                    }\n                    if (\"CRISPR\" in whandle.children) {\n                        parameters.crispr_weight = whandle.open(\"CRISPR\", { load: true }).values[0];\n                    }\n                } else {\n                    parameters.rna_weight = phandle.open(\"rna_weight\", { load: true }).values[0];\n                    parameters.adt_weight = phandle.open(\"adt_weight\", { load: true }).values[0];\n                    parameters.crispr_weight = phandle.open(\"crispr_weight\", { load: true }).values[0];\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"combined\" in rhandle.children) {\n                let phandle = rhandle.open(\"combined\", { load: true });\n                cache.num_cells = phandle.shape[0];\n                cache.total_dims = phandle.shape[1];\n\n                let vals = phandle.values;\n                cache.combined_buffer = scran.createFloat64WasmArray(vals.length);\n                cache.combined_buffer.set(vals);\n            }\n        }\n\n        if (!(\"combined_buffer\" in cache)) {\n            // This only happens if there was only one upstream PCA state; in which case, \n            // we figure out which upstream PCA state contains the PC vector\n            // and create a view on it so that our fetchPCs() works properly.\n            // (v1 and earlier also implicitly falls in this category.)\n            const weights = { RNA: parameters.rna_weight, ADT: parameters.adt_weight, CRISPR: parameters.crispr_weight };\n            let to_use = find_nonzero_upstream_states(pca_states, weights);\n\n            if (to_use.length != 1) {\n                throw new Error(\"only one upstream PCA state should be valid with non-zero weight if 'combined' is not available\");\n            }\n\n            let pcs = pca_states[to_use[0]].fetchPCs();\n            CombineEmbeddingsState.createPcsView(cache, pcs);\n        }\n\n        output = new CombineEmbeddingsState(pca_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.combined_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as combine_module from \"./combine_embeddings.js\";\n\nexport const step_name = \"batch_correction\";\n\n/**\n * Correct for batch effects in PC space based on mutual nearest neighbors.\n * This wraps the [`mnnCorrect`](https://kanaverse.github.io/scran.js/global.html#mnnCorrect) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class BatchCorrectionState {\n    #filter;\n    #combined;\n    #parameters;\n    #cache;\n\n    constructor(filter, combined, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(combined instanceof combine_module.CombineEmbeddingsState)) {\n            throw new Error(\"'pca' should be a CombineEmbeddingsState object\");\n        }\n        this.#combined = combined;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.corrected);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the batch-corrected embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode BatchCorrectionState#compute compute}.\n     */\n    fetchCorrected() {\n        return this.#cache.corrected;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfCells() {\n        return this.#combined.fetchNumberOfCells();\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#combined.fetchNumberOfDimensions();\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `batch_correction` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - The correction method to use.\n     * Currently this can be either `\"mnn\"` or `\"none\"`.\n     * If `\"mnn\"`, it is recommended that upstream PCA steps (i.e., {@linkplain RnaPcaState} and {@linkplain AdtPcaState}) use `block_method = \"weight\"`.\n     * @param {number} parameters.num_neighbors - Number of neighbors to use during MNN correction.\n     * @param {boolean} parameters.approximate - Whether to use an approximate method to identify MNNs.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { method, num_neighbors, approximate} = parameters;\n        this.changed = false;\n\n        if (this.#filter.changed || this.#combined.changed) {\n            this.changed = true;\n        }\n        let block = this.#filter.fetchFilteredBlock();\n        let needs_correction = (method == \"mnn\" && block !== null);\n\n        if (this.changed || method !== this.#parameters.method || num_neighbors !== this.#parameters.num_neighbors || approximate !== this.#parameters.approximate) { \n            if (needs_correction) {\n                let pcs = this.#combined.fetchCombined();\n                let corrected = utils.allocateCachedArray(pcs.length, \"Float64Array\", this.#cache, \"corrected\");\n                scran.mnnCorrect(pcs, block, { \n                    k: num_neighbors, \n                    buffer: corrected, \n                    numberOfCells: this.#combined.fetchNumberOfCells(), \n                    numberOfDims: this.#combined.fetchNumberOfDimensions(), \n                    approximate: approximate \n                });\n                this.changed = true;\n            }\n        }\n\n        if (this.changed) {\n            // If no correction is actually required, we shouldn't respond to\n            // changes in parameters, because they won't have any effect.\n            if (!needs_correction) {\n                utils.freeCache(this.#cache.corrected);\n                this.#cache.corrected = this.#combined.fetchCombined().view();\n            }\n        }\n\n        // Updating all parameters, even if they weren't used.\n        this.#parameters.method = method;\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.approximate = approximate;\n        return;\n    }\n\n    static defaults() {\n        return {\n            method: \"mnn\",\n            num_neighbors: 15,\n            approximate: true\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, combined) {\n    let cache = {};\n    let parameters = BatchCorrectionState.defaults();\n    let output;\n    \n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.method = phandle.open(\"method\", { load: true }).values[0];\n        parameters.num_neighbors = phandle.open(\"num_neighbors\", { load: true }).values[0];\n        parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"corrected\" in rhandle.children) {\n                let corrected = rhandle.open(\"corrected\", { load: true }).values;\n                cache.corrected = scran.createFloat64WasmArray(corrected.length);\n                cache.corrected.set(corrected);\n            } else {\n                // Creating a view from the upstream combined state.\n                let pcs = combined.fetchCombined();\n                cache.corrected = pcs.view();\n            }\n\n            output = new BatchCorrectionState(filter, combined, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.corrected);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        let ghandle = handle.open(\"pca\");\n\n        let rhandle = ghandle.open(\"results\");\n        if (\"corrected\" in rhandle.children) {\n            let corrected = rhandle.open(\"corrected\", { load: true }).values;\n            let corbuffer = utils.allocateCachedArray(corrected.length, \"Float64Array\", cache, \"corrected\");\n            corbuffer.set(corrected);\n        } else {\n            cache.corrected = combined.fetchCombined().view();\n        }\n\n        output = new BatchCorrectionState(filter, combined, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\nexport const step_name = \"neighbor_index\";\n\n/**\n * This step assembles the neighbor search indices from the PCs (see {@linkplain PcaState}) in preparation for nearest neighbor searches in downstream steps.\n * It wraps the [`buildNeighborSearchIndex`](https://kanaverse.github.io/scran.js/global.html#buildNeighborSearchIndex) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class NeighborIndexState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {BuildNeighborSearchIndexResults} Index for a nearest-neighbor search,\n     * available after running {@linkcode NeighborIndexState#compute compute}.\n     */\n    fetchIndex() {\n        if (!(\"raw\" in this.#cache)) {\n            this.#raw_compute(this.#parameters.approximate);\n        }\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            approximate: true\n        };\n    }\n\n    #raw_compute(approximate) {\n        this.#cache.raw = scran.buildNeighborSearchIndex(this.#correct.fetchCorrected(), { \n            approximate: approximate, \n            numberOfDims: this.#correct.fetchNumberOfDimensions(),\n            numberOfCells: this.#correct.fetchNumberOfCells()\n        });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `neighbor_index` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.approximate - Whether to create an approximate search index.\n     * If `false`, an exact index is used.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { approximate } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || approximate != this.#parameters.approximate) {\n            utils.freeCache(this.#cache.raw);\n            this.#raw_compute(approximate);\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let ghandle = handle.open(\"neighbor_index\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            approximate: phandle.open(\"approximate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let cache = {};\n    return new NeighborIndexState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\n\nexport const step_name = \"snn_graph_cluster\";\n\n/**\n * This step does SNN graph clustering based on the neighbor search index built by {@linkplain NeighborIndexState}.\n * This wraps [`clusterSNNGraph`](https://kanaverse.github.io/scran.js/global.html#clusterSNNGraph) \n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class SnnGraphClusterState {\n    #index;\n    #parameters;\n    #cache;\n\n    constructor(index, parameters = null, cache = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.neighbors);\n        utils.freeCache(this.#cache.graph);\n        utils.freeCache(this.#cache.clusters);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode SnnGraphClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw \"cannot fetch SNN clusters from an invalid state\";\n        } else {\n            return this.#cache.clusters.membership({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"clusters\" in this.#cache;\n    }\n\n    #compute_neighbors(k) {\n        this.#cache.neighbors = scran.findNearestNeighbors(this.#index.fetchIndex(), k);\n        return;\n    }\n\n    #compute_graph(scheme) {\n        if (!(\"neighbors\" in this.#cache)) { // need to check as reloaded state will not populate the internals.\n            this.#compute_neighbors(this.#parameters.k);\n        }\n        this.#cache.graph = scran.buildSNNGraph(this.#cache.neighbors, { scheme: scheme });\n        return;\n    }\n\n    #compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps) {\n        if (!(\"graph\" in this.#cache)) {\n            this.#compute_graph(this.#parameters.scheme);\n        }\n        this.#cache.clusters = scran.clusterSNNGraph(this.#cache.graph, {\n            method: algorithm,\n            multiLevelResolution: multilevel_resolution,\n            leidenResolution: leiden_resolution,\n            leidenModularityObjective: true, // avoid problems with unstable interpretation of leidenResolution.\n            walktrapSteps: walktrap_steps\n        });\n        return;\n    }\n\n    static defaults() {\n        return { \n            k: 10,\n            scheme: \"rank\",\n            algorithm: \"multilevel\",\n            multilevel_resolution: 1,\n            leiden_resolution: 1,\n            walktrap_steps: 4\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `snn_graph_cluster` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of nearest neighbors used to construct the graph.\n     * @param {string} parameters.scheme - Weighting scheme for graph construction.\n     * This can be one of `\"rank\"`, `\"number\"` or `\"jaccard\"`.\n     * @param {string} parameters.algorithm - Algorithm to use for community detection.\n     * This can be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n     * @param {number} parameters.multilevel_resolution - Resolution of the multi-level community detection.\n     * @param {number} parameters.leiden_resolution - Resolution of the Leiden community detection.\n     * @param {number} parameters.walktrap_steps - Number of merge steps for the Walktrap algorithm.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k, scheme, algorithm, multilevel_resolution, leiden_resolution, walktrap_steps } = parameters;\n        this.changed = false;\n\n        if (this.#index.changed || k !== this.#parameters.k) {\n            utils.freeCache(this.#cache.neighbors);\n            if (run_me) {\n                this.#compute_neighbors(k);\n            } else {\n                delete this.#cache.neighbors; // ensuring that this is re-run on future calls to compute() with run_me = true.\n            }\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        if (this.changed || scheme !== this.#parameters.scheme) {\n            utils.freeCache(this.#cache.graph);\n            if (run_me) {\n                this.#compute_graph(scheme);\n            } else {\n                delete this.#cache.graph;\n            }\n            this.#parameters.scheme = scheme;\n            this.changed = true \n        }\n\n        if (this.changed \n            || algorithm !== this.#parameters.algorithm \n            || multilevel_resolution !== this.#parameters.multilevel_resolution \n            || leiden_resolution !== this.#parameters.leiden_resolution \n            || walktrap_steps !== this.#parameters.walktrap_steps \n            || (!this.#valid() && run_me))\n        {\n            utils.freeCache(this.#cache.clusters);\n            if (run_me) {\n                this.#compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps);\n            } else {\n                delete this.#cache.clusters;\n            }\n\n            this.#parameters.algorithm = algorithm;\n            this.#parameters.multilevel_resolution = multilevel_resolution;\n            this.#parameters.leiden_resolution = leiden_resolution;\n            this.#parameters.walktrap_steps = walktrap_steps;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, index) {\n    let ghandle = handle.open(\"snn_graph_cluster\");\n\n    let parameters = SnnGraphClusterState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters.k = phandle.open(\"k\", { load: true }).values[0];\n\n        parameters.scheme = phandle.open(\"scheme\", { load: true }).values[0];\n        if (typeof parameters.scheme !== \"string\") { // because I stuffed up and tried to save a string as an int in v1.0, oops.\n            parameters.scheme = \"rank\";\n        }\n\n        if (\"algorithm\" in phandle.children) {\n            // v3.0\n            parameters.algorithm = phandle.open(\"algorithm\", { load: true }).values[0];\n            parameters.multilevel_resolution = phandle.open(\"multilevel_resolution\", { load: true }).values[0];\n            parameters.leiden_resolution = phandle.open(\"leiden_resolution\", { load: true }).values[0];\n            parameters.walktrap_steps = phandle.open(\"walktrap_steps\", { load: true }).values[0];\n        } else {\n            // v2.0\n            parameters.multilevel_resolution = phandle.open(\"resolution\", { load: true }).values[0];\n        }\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        if (\"clusters\" in rhandle.children) {\n            let clusters = rhandle.open(\"clusters\", { load: true }).values;\n            cache.clusters = scran.emptyClusterSNNGraphResults(clusters.length, 1);\n            cache.clusters.setBest(0); // whatever.\n            cache.clusters.membership({ fillable: true }).set(clusters);\n        }\n    }\n\n    return new SnnGraphClusterState(index, parameters, cache);\n}\n\n\n","import * as scran from \"scran.js\";\n\nexport const summaries2int = { \"min\": 0, \"mean\": 1, \"min_rank\": 4 };\n\nexport function unserializeGroupStats(handle, permuter, { no_summaries = false, compute_auc = true } = {}) {\n    let output = {};\n    for (const x of [ \"means\", \"detected\" ]) {\n        output[x] = permuter(handle.open(x, { load: true }).values);\n    }\n\n    for (const i of [ \"lfc\", \"delta_detected\", \"auc\", \"cohen\" ]) {\n        if (i == \"auc\" && !compute_auc) {\n            continue;\n        }\n\n        if (no_summaries) {\n            output[i] = handle.open(i, { load: true }).values;\n        } else {\n            let rhandle = handle.open(i);\n            let current = {};\n            for (const j of Object.keys(rhandle.children)) {\n                current[j] = permuter(rhandle.open(j, { load: true }).values);\n            }\n            output[i] = current;\n        }\n    }\n\n    return output;\n}\n\nexport function fillGroupStats(object, i, vals) {\n    object.means(i, { copy: false }).set(vals.means);\n    object.detected(i, { copy: false }).set(vals.detected);\n\n    for (const [s, v] of Object.entries(vals.cohen)) {\n        object.cohen(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.lfc)) {\n        object.lfc(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.delta_detected)) {\n        object.deltaDetected(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    if (\"auc\" in vals) {\n        for (const [s, v] of Object.entries(vals.auc)) {\n            object.auc(i, { summary: summaries2int[s], copy: false }).set(v);\n        }\n    }\n}\n\n/**\n * Report marker results for a given group or cluster, ordered so that the strongest candidate markers appear first.\n *\n * @param {ScoreMarkersResults} results - The marker results object generated by the `scoreMarkers` function in **scran.js**.\n * @param {number} group - Integer specifying the group or cluster of interest.\n * Any number can be used if it was part of the `groups` passed to `scoreMarkers`.\n * @param {string} rankEffect - Summarized effect size to use for ranking markers.\n * This should follow the format of `<effect>-<summary>` where `<effect>` may be `lfc`, `cohen`, `auc` or `delta_detected`,\n * and `<summary>` may be `min`, `mean` or `min-rank`.\n *\n * @return An object containing the marker statistics for the selection, sorted by the specified effect and summary size from `rankEffect`.\n * This contains:\n *   - `means`: a Float64Array of length equal to the number of genes, containing the mean expression within the selection.\n *   - `detected`: a Float64Array of length equal to the number of genes, containing the proportion of cells with detected expression inside the selection.\n *   - `lfc`: a Float64Array of length equal to the number of genes, containing the log-fold changes for the comparison between cells inside and outside the selection.\n *   - `delta_detected`: a Float64Array of length equal to the number of genes, containing the difference in the detected proportions between cells inside and outside the selection.\n */\nexport function formatMarkerResults(results, group, rankEffect) {\n    if (!rankEffect || rankEffect === undefined) {\n        rankEffect = \"cohen-min-rank\";\n    }\n\n    var ordering;\n    {\n        // Choosing the ranking statistic. Do NOT do any Wasm allocations\n        // until 'ranking' is fully consumed!\n        let ranking;\n        let increasing = false;\n      \n        let index = 1;\n        if (rankEffect.match(/-min$/)) {\n            index = 0;\n        } else if (rankEffect.match(/-min-rank$/)) {\n            increasing = true;\n            index = 4;\n        }\n\n        if (rankEffect.match(/^cohen-/)) {\n            ranking = results.cohen(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^auc-/)) {\n            ranking = results.auc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^lfc-/)) {\n            ranking = results.lfc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^delta-d-/)) {\n            ranking = results.deltaDetected(group, { summary: index, copy: false });\n        } else {\n            throw \"unknown rank type '\" + rankEffect + \"'\";\n        }\n  \n        // Computing the ordering based on the ranking statistic.\n        ordering = new Int32Array(ranking.length);\n        for (var i = 0; i < ordering.length; i++) {\n            ordering[i] = i;\n        }\n        if (increasing) {\n            ordering.sort((f, s) => (ranking[f] - ranking[s]));\n        } else {\n            ordering.sort((f, s) => (ranking[s] - ranking[f]));\n        }\n    }\n  \n    // Apply that ordering to each statistic of interest.\n    var reorder = function(stats) {\n        var thing = new Float64Array(stats.length);\n        for (var i = 0; i < ordering.length; i++) {\n            thing[i] = stats[ordering[i]];\n        }\n        return thing;\n    };\n  \n    var stat_detected = reorder(results.detected(group, { copy: false }));\n    var stat_mean = reorder(results.means(group, { copy: false }));\n    var stat_lfc = reorder(results.lfc(group, { summary: 1, copy: false }));\n    var stat_delta_d = reorder(results.deltaDetected(group, { summary: 1, copy: false }));\n\n    return {\n        \"ordering\": ordering,\n        \"means\": stat_mean,\n        \"detected\": stat_detected,\n        \"lfc\": stat_lfc,\n        \"delta_detected\": stat_delta_d\n    };\n}\n\nexport function locateVersusCache(left, right, cache) {\n    let left_small = left < right;\n\n    let bigg = (left_small ? right : left);\n    if (!(bigg in cache)) {\n        cache[bigg] = {};\n    }\n    let biggversus = cache[bigg];\n\n    let smal = (left_small ? left : right); \n    let rerun = !(smal in biggversus);\n    if (rerun) {\n        biggversus[smal] = {};\n    }\n\n    return { \n        cached: biggversus[smal],\n        run: rerun,\n        left_small: left_small\n    };\n}\n\nexport function freeVersusResults(cache) {\n    if (cache) {\n        for (const v of Object.values(cache)) {\n            for (const v2 of Object.values(v)) {\n                for (const m of Object.values(v2)) {\n                    scran.free(m);\n                }\n            }\n        }\n        for (const k of Object.keys(cache)) {\n            delete cache[k];\n        }\n    }\n}\n\nexport function computeVersusResults(matrices, clusters, block, keep, cache, lfc_threshold, compute_auc) {\n    let new_block = null;\n    if (block !== null) {\n        new_block = scran.subsetBlock(block, keep);\n        scran.dropUnusedBlock(new_block);\n    }\n\n    for (const modality of matrices.available()) {\n        let modmat = matrices.get(modality);\n        let sub;\n        try {\n            sub = scran.subsetColumns(modmat, keep);\n            cache[modality] = scran.scoreMarkers(sub, clusters, { block: new_block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        } finally {\n            scran.free(sub);\n        }\n    }\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\n/**\n * This step performs k-means clustering on the PCs, \n * wrapping the [`clusterKmeans`](https://kanaverse.github.io/scran.js/global.html#clusterKmeans) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class KmeansClusterState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode KmeansClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw new Error(\"cannot fetch k-means clusters from an invalid state\");\n        } else {\n            return this.#cache.raw.clusters({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    };\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"raw\" in this.#cache;\n    }\n\n    /** \n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of clusters to create.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || k != this.#parameters.k || (!this.#valid() && run_me)) {\n            utils.freeCache(this.#cache.raw);\n\n            if (run_me) {\n                var pcs = this.#correct.fetchCorrected();\n                this.#cache.raw = scran.clusterKmeans(pcs, k, { \n                    numberOfDims: this.#correct.fetchNumberOfDimensions(),\n                    numberOfCells: this.#correct.fetchNumberOfCells(),\n                    initMethod: \"pca-part\" \n                });\n            } else {\n                delete this.#cache.raw; // ensure this step gets re-run later when run_me = true. \n            }\n\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let parameters = {\n        k: 10\n    };\n    let cache = {};\n\n    // Protect against old analysis states that don't have kmeans_cluster.\n    if (\"kmeans_cluster\" in handle.children) {\n        let ghandle = handle.open(\"kmeans_cluster\");\n\n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.k = phandle.open(\"k\", { load: true }).values[0];\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n            if (\"clusters\" in rhandle.children) {\n                let clusters = rhandle.open(\"clusters\", { load: true }).values;\n                cache.raw = scran.emptyClusterKmeansResults(clusters.length, parameters.k, pca.fetchNumberOfDimensions());\n                cache.raw.clusters({ fillable: true }).set(clusters);\n            }\n        }\n    }\n\n    return new KmeansClusterState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as snn_module from \"./snn_graph_cluster.js\";\nimport * as kmeans_module from \"./kmeans_cluster.js\";\n\n/**\n * This step chooses between the k-means and SNN graph clusterings from {@linkplain KmeansClusterState} and {@linkplain SnnGraphClusterState}, respectively.\n * We added this step to preserve the cache for each clustering step - \n * specifically, each clustering does not need to be recomputed when a user changes their choice.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class ChooseClusteringState {\n    #snn_cluster;\n    #kmeans_cluster;\n    #parameters;\n    #cache;\n\n    constructor(snn, kmeans, parameters = null, cache = null) {\n        if (!(snn instanceof snn_module.SnnGraphClusterState)) {\n            throw new Error(\"'snn' should be a State object from './snn_graph_cluster.js'\");\n        }\n        this.#snn_cluster = snn;\n\n        if (!(kmeans instanceof kmeans_module.KmeansClusterState)) {\n            throw new Error(\"'kmeans' should be a State object from './kmeans_cluster.js'\");\n        }\n        this.#kmeans_cluster = kmeans;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {}\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode ChooseClusteringState#compute compute}.\n     */\n    fetchClusters() {\n        if (this.#parameters.method == \"snn_graph\") {\n            return this.#snn_cluster.fetchClusters();\n        } else if (this.#parameters.method == \"kmeans\") {\n            return this.#kmeans_cluster.fetchClusters();\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - Clustering method to use, either `\"kmeans\"` or `\"snn_graph\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { method } = parameters;\n        this.changed = true;\n        \n        if (method == this.#parameters.method) {\n            if (method == \"snn_graph\") {\n                if (!this.#snn_cluster.changed) {\n                    this.changed = false;\n                }\n            } else if (method == \"kmeans\") {\n                if (!this.#kmeans_cluster.changed) {\n                    this.changed = false;\n                }\n            }\n        }\n\n        this.#parameters.method = method;\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, snn, kmeans) {\n    let ghandle = handle.open(\"choose_clustering\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            method: phandle.open(\"method\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    return new ChooseClusteringState(snn, kmeans, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as markers from \"./utils/markers.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as choice_module from \"./choose_clustering.js\";\nimport * as rna_norm_module from \"./rna_normalization.js\";\nimport * as adt_norm_module from \"./adt_normalization.js\";\nimport * as crispr_norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"marker_detection\";\n\n/**\n * Results of marker detection,\n * see [here](https://www.kanaverse.github.io/scran.js/ScoreMarkersResults.html) for details.\n *\n * @external ScoreMarkersResults\n */\n\n/*********************\n ***** Internals *****\n *********************/\n\nfunction _free(cache) {\n    for (const v of Object.values(cache.raw)) {\n        utils.freeCache(v);\n    }\n    cache.raw = {};\n    markers.freeVersusResults(cache.versus);\n    delete cache.versus;\n}\n\nfunction _computeVersus(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n    let cache_info = markers.locateVersusCache(left, right, cache);\n    let left_index = (cache_info.left_small ? 0 : 1);\n    let right_index = (cache_info.left_small ? 1 : 0);\n\n    if (cache_info.run) {\n        let new_clusters = [];\n        let keep = [];\n        let leftfound = false, rightfound = false;\n        clusters.forEach((x, i) => {\n            if (x == left) {\n                new_clusters.push(left_index);\n                keep.push(i);\n                leftfound = true;\n            } else if (x == right) {\n                new_clusters.push(right_index);\n                keep.push(i);\n                rightfound = true;\n            }\n        });\n\n        if (!leftfound || !rightfound) {\n            throw new Error(\"non-zero entries should be present for both requested clusters in versus mode\");\n        }\n\n        markers.computeVersusResults(matrices, new_clusters, block, keep, cache_info.cached, lfc_threshold, compute_auc);\n    }\n\n    return { \n        results: cache_info.cached,\n        left: left_index,\n        right: right_index\n    };\n}\n\n/*****************\n ***** State *****\n *****************/\n\n/**\n * This step performs marker detection for each cluster of cells by performing pairwise comparisons to each other cluster.\n * This wraps the [`scoreMarkers`](https://kanaverse.github.io/scran.js/global.html#scoreMarkers) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * The clustering is obtained from the upstream {@linkplain ChooseClusteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class MarkerDetectionState {\n    #filter;\n    #norm_states;\n    #choice;\n    #parameters;\n    #cache;\n\n    constructor(filter, norm_states, choice, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a State object from './cell_filtering.js'\");\n        }\n        this.#filter = filter;\n\n        if (!(norm_states.RNA instanceof rna_norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm_states.RNA' should be an RnaNormalizationState object\");\n        }\n        if (!(norm_states.ADT instanceof adt_norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm_states.ADT' should be an AdtNormalizationState object\");\n        }\n        if (!(norm_states.CRISPR instanceof crispr_norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm_states.CRISPR' should be an CrisprNormalizationState object\");\n        }\n        this.#norm_states = norm_states;\n\n        if (!(choice instanceof choice_module.ChooseClusteringState)) {\n            throw new Error(\"'choice' should be a State object from './choose_clustering.js'\");\n        }\n        this.#choice = choice;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? { \"raw\": {} } : cache);\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        _free(this.#cache);\n    }\n\n    /**\n     * Obtain the marker detection results for all modalities.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object where each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all clusters.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * Parameters used to compute the results.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `marker_detection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.lfc_threshold - Log-fold change threshold to use when computing the Cohen's d and AUC for each pairwise comparison.\n     * @param {boolean} parameters.compute_auc - Whether to compute the AUCs.\n     * Setting this to `false` will skip AUC calculations and improve speed and memory efficiency.\n     *\n     * @return The state is updated with new results.\n     */\n    compute(parameters) {\n        let { lfc_threshold, compute_auc } = parameters;\n        this.changed = false;\n        let changed_params = (lfc_threshold !== this.#parameters.lfc_threshold || compute_auc !== this.#parameters.compute_auc);\n        \n        for (const [k, v] of Object.entries(this.#norm_states)) {\n            if (!v.valid()) {\n                continue;\n            }\n\n            if (this.#choice.changed || v.changed || changed_params) {\n                var mat = v.fetchNormalizedMatrix();\n                var clusters = this.#choice.fetchClusters();\n                var block = this.#filter.fetchFilteredBlock();\n                \n                utils.freeCache(this.#cache.raw[k]);\n                this.#cache.raw[k] = scran.scoreMarkers(mat, clusters, { block: block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n\n                this.changed = true;\n            }\n        }\n\n        this.#parameters.lfc_threshold = lfc_threshold;\n        this.#parameters.compute_auc = compute_auc;\n        if (this.changed) {\n            markers.freeVersusResults(this.#cache.versus);\n        }\n\n        return;\n    }\n\n    /**\n     * @return {object} Default parameters that may be modified and fed into {@linkcode MarkerDetectionCore#compute compute}.\n     */\n    static defaults() {\n        return {\n            lfc_threshold: 0,\n            compute_auc: true\n        };\n    }\n\n    // Soft-deprecated.\n    static computeVersusCustom(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n        return computeVersus(left, right, matrices, clusters, { cache, block, lfc_threshold, compute_auc });\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two clusters for more detailed examination of the differences between them.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @param {number} left - Index of one cluster in which to find upregulated markers.\n     * @param {number} right - Index of another cluster to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two clusters.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` cluster in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` cluster in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        var clusters = this.#choice.fetchClusters();\n        var block = this.#filter.fetchFilteredBlock();\n\n        // No need to free this afterwards; we don't own the normalized matrices anyway.\n        let matrices = new scran.MultiMatrix;\n        for (const [modality, state] of Object.entries(this.#norm_states)) {\n            if (!state.valid()) {\n                continue;\n            }\n            matrices.add(modality, state.fetchNormalizedMatrix());\n        }\n\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n\n        return _computeVersus(left, right, matrices, clusters, { \n            cache: this.#cache.versus, \n            block: block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**********************\n ***** Standalone *****\n **********************/\n\n/**\n * Standalone version of {@linkplain MarkerDetectionState} that provides the same functionality outside of {@linkcode runAnalysis}.\n * Users can supply their own normalized matrices, groups and blocking factor to compute the various marker statistics for each group.\n * Users are also responsible for ensuring that the lifetime of the supplied objects exceeds that of the constructed MarkerDetectionStandalone instance,\n * i.e., the Wasm-related `free()` methods are not called while the MarkerDetectionStandalone instance is still in operation.\n */\nexport class MarkerDetectionStandalone {\n    #matrices;\n\n    #groups;\n    #group_levels;\n    #block;\n    #block_levels;\n\n    #cache;\n    #parameters;\n\n    /**\n     * @param {external:MultiMatrix} normalized - A {@linkplain external:MultiMatrix MultiMatrix} of log-normalized values for multiple modalities.\n     * @param {Array|TypedArray} groups - Array of length equal to the number of columns in any value of `normalized`, containing the group assignments for each column. \n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.block=null] - Array of length equal to the number of columns in any value of `normalized`, containing the block assignments for each column.\n     * If `null`, all columns are assigned to the same block.\n     */\n    constructor(normalized, groups, { block = null } = {}) {\n        // Checking dimensions.\n        let N = groups.length;\n\n        for (const k of normalized.available()) {\n            let v = normalized.get(k);\n            if (v.numberOfColumns() != N) {\n                throw new Error(\"all matrices in 'normalized' should have the same number of columns as the length of 'groups'\");\n            }\n        }\n\n        if (block !== null) {\n            if (block.length != N) {\n                throw new Error(\"'block' should have the same length as 'groups' if not null\");\n            }\n        }\n\n        let arrays = [ groups ];\n        if (block !== null) {\n            arrays.push(block);\n        }\n        let dump = utils.subsetInvalidFactors(arrays);\n\n        // Maybe taking a subset to eliminate invalid entries.\n        let new_matrices;\n        if (dump.retain !== null) {\n            new_matrices = new scran.MultiMatrix;\n            let temp = scran.createInt32WasmArray(dump.retain.length);\n            try {\n                temp.set(dump.retain);\n                for (const k of normalized.available()) {\n                    new_matrices.add(k, scran.subsetColumns(normalized.get(k), temp))\n                }\n            } catch (e) {\n                new_matrices.free();\n                throw e;\n            } finally {\n                scran.free(temp);\n            }\n        } else {\n            new_matrices = normalized.clone();\n        }\n\n        this.#matrices = new_matrices;\n        this.#groups = dump.arrays[0].ids;\n        this.#group_levels = dump.arrays[0].levels;\n\n        if (block !== null) {\n            this.#block = dump.arrays[1].ids;\n            this.#block_levels = dump.arrays[1].levels;\n        } else {\n            this.#block = null;\n            this.#block_levels = null;\n        }\n\n        this.#cache = { raw: {}, init: true };\n        this.#parameters = MarkerDetectionState.defaults();\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        scran.free(this.#groups);\n        scran.free(this.#block);\n        scran.free(this.#matrices);\n        _free(this.#cache);\n    }\n\n    /**\n     * @return {object} Marker detection results for the all modalities.\n     * Each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all groups.\n     * This is available after running {@linkcode MarkerDetectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the grouping factor.\n     * Group indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchGroupLevels({ copy = true } = {}) {\n        let ret = this.#group_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the blocking factor.\n     * Block indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchBlockLevels({ copy = true } = {}) {\n        let ret = this.#block_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    // Testing functions to check that the sanitization worked correctly.\n    _peekMatrices() {\n        return this.#matrices;\n    }\n\n    _peekGroups() {\n        return this.#groups;\n    }\n\n    _peekBlock() {\n        return this.#block;\n    }\n\n    /**\n     * If this method is not called, the parameters default to those in {@linkcode MarkerDetectionState#defaults MarkerDetectionState.defaults}.\n     *\n     * @param {object} parameters - Parameter object, see the argument of the same name in {@linkcode MarkerDetectionState#compute MarkerDetectionState.compute} for more details.\n     *\n     * @return The state is updated with new parameters.\n     */\n    setParameters(parameters) {\n        if (this.#parameters.lfc_threshold !== parameters.lfc_threshold || this.#parameters.compute_auc !== parameters.compute_auc) {\n            this.free();\n        }\n        this.#parameters = { ...parameters };\n        return;\n    }\n\n    /**\n     * Compute markers for all groups.\n     *\n     * @return The state is updated with new results.\n     */\n    computeAll() {\n        let { lfc_threshold, compute_auc } = this.#parameters;\n        for (const k of this.#matrices.available()) {\n            var mat = this.#matrices.get(k);\n            utils.freeCache(this.#cache.raw[k]);\n            this.#cache.raw[k] = scran.scoreMarkers(mat, this.#groups, { block: this.#block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        }\n        return;\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two groups, \n     * for more detailed examination of the differences between them.\n     *\n     * @param {number} left - Index of one group in which to find upregulated markers.\n     * @param {number} right - Index of another group to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two groups.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` group in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` group in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n        return _computeVersus(left, right, this.#matrices, this.#groups, { \n            cache: this.#cache.versus, \n            block: this.#block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nfunction fill_results(stats, num_blocks) {\n    let keys = Object.keys(stats);\n    let first = stats[keys[0]];\n    let ngenes = first.means.length;\n    let object = scran.emptyScoreMarkersResults(ngenes, keys.length, num_blocks, { computeAuc: (\"auc\" in first) });\n\n    for (const k of keys) {\n        let i = Number(k);\n        let vals = stats[k];\n        object.means(i, { fillable: true }).set(vals.means);\n        object.detected(i, { fillable: true }).set(vals.detected);\n\n        for (const [s, v] of Object.entries(vals.cohen)) {\n            object.cohen(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.lfc)) {\n            object.lfc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.delta_detected)) {\n            object.deltaDetected(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        if (\"auc\" in vals) {\n            for (const [s, v] of Object.entries(vals.auc)) {\n                object.auc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n            }\n        }\n    }\n\n    return object;\n}\n\nexport function unserialize(handle, permuters, filter, norm_states, choice) {\n    let ghandle = handle.open(\"marker_detection\");\n\n    let parameters = MarkerDetectionState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        if (\"lfc_threshold\" in phandle.children) {\n            parameters.lfc_threshold = phandle.open(\"lfc_threshold\", { load: true }).values[0];\n        }\n        if (\"compute_auc\" in phandle.children) {\n            parameters.compute_auc = phandle.open(\"compute_auc\", { load: true }).values[0] > 0;\n        }\n    }\n\n    // Figure out the number of blocks.\n    let num_blocks = 1;\n    {\n        let filtered = filter.fetchFilteredBlock();\n        if (filtered != null) {\n            filtered.forEach(x => {\n                if (x + 1 > num_blocks) {\n                    num_blocks = x + 1;\n                }\n            });\n        }\n    }\n\n    // Set up the marker detection statistics.\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        cache.raw = {};\n\n        if (\"clusters\" in rhandle.children) { \n            // below v2.0\n            let chandle = rhandle.open(\"clusters\");\n            let clusters = {};\n            for (const cl of Object.keys(chandle.children)) {\n                clusters[Number(cl)] = markers.unserializeGroupStats(chandle.open(cl), permuters[\"RNA\"], { compute_auc: parameters.compute_auc });\n            }\n            cache.raw.RNA = fill_results(clusters, num_blocks);\n        } else {\n            // after v2.0.\n            let chandle = rhandle.open(\"per_cluster\");\n            for (const a of Object.keys(chandle.children)) {\n                let clusters = {};\n                let ahandle = chandle.open(a);\n                for (const cl of Object.keys(ahandle.children)) {\n                    clusters[Number(cl)] = markers.unserializeGroupStats(ahandle.open(cl), permuters[a], { compute_auc: parameters.compute_auc });\n                }\n                cache.raw[a] = fill_results(clusters, num_blocks);\n            }\n        }\n \n    }\n\n    return new MarkerDetectionState(filter, norm_states, choice, parameters, cache);\n}\n\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as mutils from \"./utils/markers.js\";\nimport * as rutils from \"../readers/index.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\nimport * as markers_module from \"./marker_detection.js\";\n\nconst base = \"https://github.com/LTLA/kana-feature-sets/releases/download/v1.0.0\";\n\nexport const step_name = \"feature_set_enrichment\";\n\n/****************************\n ******** Internals *********\n ****************************/\n\nclass FeatureSetManager {\n    #built;\n    #cache;\n\n    constructor() {\n        this.#built = {};\n        this.#cache = {};\n    }\n\n    free() {\n        this.#built = {};\n        utils.freeCache(this.#cache.set_buffer);\n    }\n\n    static #all_loaded = {};\n\n    static flush() {\n        FeatureSetManager.all_loaded = {};\n    }\n\n    static availableCollections = {\n        \"10090\": [ \"mouse-GO\" ],\n        \"9606\": [ \"human-GO\" ],\n        \"6239\": [ \"worm-GO\" ],\n        \"10116\": [ \"rat-GO\" ],\n        \"7227\": [ \"fly-GO\" ],\n        \"7955\": [ \"zebrafish-GO\" ],\n        \"9598\": [ \"chimp-GO\" ]\n    };\n\n    static #downloadFun = utils.defaultDownload;\n\n    static setDownload(fun) {\n        let previous = FeatureSetManager.#downloadFun;\n        FeatureSetManager.#downloadFun = fun;\n        return previous;\n    }\n\n    static async #loadCollection(name) {\n        if (!(name in FeatureSetManager.#all_loaded)) {\n            let suffixes = [\n                \"features.csv.gz\",\n                \"sets.txt.gz\"\n            ];\n\n            let contents = await Promise.all(\n                suffixes.map(\n                    async suffix => {\n                        let full = name + \"_\" + suffix;\n                        let b = await FeatureSetManager.#downloadFun(base + \"/\" + full);\n                        return new rutils.SimpleFile(b, { name: full })\n                    }\n                )\n            );\n\n            let gene_info = {};\n            {\n                let genes = await rutils.readTable2(contents[0].content(), { delim: \",\" });\n                let headers = genes.shift();\n                for (const x of headers) {\n                    gene_info[x] = [];\n                }\n                for (const line of genes) {\n                    for (var i = 0; i < headers.length; i++) {\n                        let curfield = line[i];\n                        gene_info[headers[i]].push(curfield == \"\" ? null : curfield);\n                    }\n                }\n            }\n\n            let set_members = [];\n            let set_name = [];\n            let set_description = [];\n            {\n                let features = await rutils.readLines2(contents[1].content());\n                for (const line of features) {\n                    let values = line.split(\"\\t\");\n                    set_name.push(values[0]);\n                    set_description.push(values[1]);\n\n                    let last = Number(values[2]);\n                    let members = [last];\n                    for (var i = 3; i < values.length; i++) {\n                        let latest = Number(values[i]) + last;\n                        members.push(latest);\n                        last = latest;\n                    }\n                    set_members.push(members);\n                }\n            }\n\n            FeatureSetManager.#all_loaded[name] = {\n                features: gene_info,\n                members: set_members,\n                names: set_name,\n                descriptions: set_description\n            };\n        }\n\n        return FeatureSetManager.#all_loaded[name];\n    }\n\n    static #remapCollection(feats, name, data_id, ref_id) {\n        let data_id_col;\n        if (data_id == null) {\n            data_id_col = feats.rowNames();\n            if (data_id_col == null) {\n                throw new Error(\"no row names available in the feature annotations\");\n            }\n        } else {\n            data_id_col = feats.column(data_id);\n        }\n\n        let loaded = FeatureSetManager.#all_loaded[name];\n        if (!(ref_id in loaded.features)){\n            throw new Error(\"no column '\" + ref_id + \"' in the feature set annotations\");\n        }\n\n        let output = scran.remapFeatureSets(data_id_col, loaded.features[ref_id], loaded.members);\n        let sizes = new Int32Array(output.sets.length);\n        output.sets.forEach((x, i) => { sizes[i] = x.length });\n        output.sizes = sizes;\n\n        return output;\n    }\n\n    async prepareCollections(feats, collections, species, gene_id_column, gene_id_type) {\n        let allowable = new Set;\n        for (const s of species) {\n            if (s in FeatureSetManager.availableCollections) {\n                FeatureSetManager.availableCollections[s].forEach(x => allowable.add(x));\n            }\n        }\n\n        this.#built = {};\n        for (const x of collections) {\n            if (!allowable.has(x)) {\n                continue;\n            }\n\n            let loaded = await FeatureSetManager.#loadCollection(x);\n            let mapped = FeatureSetManager.#remapCollection(feats, x, gene_id_column, gene_id_type);\n\n            this.#built[x] = {\n                names: loaded.names,\n                descriptions: loaded.descriptions,\n                indices: mapped.target_indices,\n                sets: mapped.sets,\n                sizes: mapped.sizes\n            };\n        }\n\n        return;\n    }\n\n    fetchCollectionDetails() {\n        let output = {};\n        for (const [k, v] of Object.entries(this.#built)) {\n            output[k] = { names: v.names, descriptions: v.descriptions, sizes: v.sizes, universe: v.indices.length };\n        }\n        return output;\n    }\n\n    computeEnrichment(group, effect_size, summary, markers, top_markers) {\n        if (effect_size == \"delta_detected\") {\n            effect_size = \"deltaDetected\";\n        }\n\n        // Avoid picking down-regulated genes in the marker set.\n        let min_threshold = effect_size == \"auc\" ? 0.5 : 0;\n\n        // Larger is better except for 'min_rank'.\n        let use_largest = effect_size !== \"min_rank\"; \n        let sumidx = mutils.summaries2int[summary];\n\n        let output = {};\n        for (const [name, info] of Object.entries(this.#built)) {\n            let stats = markers[effect_size](group, { summary: sumidx, copy: false });\n            let curstats = bioc.SLICE(stats, info.indices);\n            let threshold = scran.computeTopThreshold(curstats, top_markers, { largest: use_largest });\n            let in_set = [];\n\n            if (use_largest) {\n                if (threshold < min_threshold) {\n                    threshold = min_threshold;\n                }\n                curstats.forEach((x, i) => {\n                    if (x >= threshold) {\n                        in_set.push(i);\n                    }\n                });\n            } else {\n                curstats.forEach((x, i) => {\n                    if (x <= threshold) {\n                        in_set.push(i);\n                    }\n                });\n            }\n\n            let computed = scran.testFeatureSetEnrichment(in_set, info.sets, curstats.length);\n            output[name] = { \n                counts: computed.count, \n                pvalues: computed.pvalue,\n                num_markers: in_set.length\n            };\n        }\n\n        return output;\n    }\n\n    fetchFeatureSetIndices(collection, set_index) {\n        let current = this.#built[collection];\n        let set = current.sets[set_index];\n        let indices = current.indices;\n        return bioc.SLICE(indices, set);\n    }\n\n    computePerCellScores(collection, set_index, normalized, block) {\n        let indices = this.fetchFeatureSetIndices(collection, set_index);\n        // console.log(bioc.SLICE(this.#inputs.fetchFeatureAnnotations().RNA.column(\"id\"), indices));\n\n        let features = utils.allocateCachedArray(normalized.numberOfRows(), \"Uint8Array\", this.#cache, \"set_buffer\");\n        features.fill(0);\n        let farr = features.array();\n        indices.forEach(x => { farr[x] = 1; }); \n\n        return scran.scoreFeatureSet(normalized, features, { block: block });\n    }\n}\n\n// More internal functions, mostly related to wrangling with parameters.\n\nfunction _configureFeatureParameters(guesses) {\n    let best_key = null;\n    let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n    if (\"row_names\" in guesses) {\n        let val = guesses.row_names;\n        if (val.confidence > best.confidence) {\n            best = val;\n        }\n    }\n\n    for (const [key, val] of Object.entries(guesses.columns)) {\n        if (val.confidence > best.confidence) {\n            best = val;\n            best_key = key;\n        }\n    }\n\n    return {\n        gene_id_column: best_key,\n        gene_id_type: best.type.toUpperCase(),\n        species: [best.species]\n    };\n}\n\nasync function _buildCollections(old_parameters, manager, collections, automatic, species, gene_id_column, gene_id_type, annofun, guessfun) {\n    if (\n        utils.changedParameters(old_parameters.collections, collections) ||\n        automatic !== old_parameters.automatic ||\n        (\n            !automatic && \n            (\n                old_parameters.gene_id_column !== gene_id_column || \n                old_parameters.gene_id_type !== gene_id_type ||\n                utils.changedParameters(old_parameters.species, species)\n            )\n        )\n    ) {\n        let gene_id_column2 = gene_id_column;\n        let gene_id_type2 = gene_id_type;\n        let species2 = species;\n\n        if (automatic) {\n            let auto = _configureFeatureParameters(guessfun());\n            gene_id_column2 = auto.gene_id_column;\n            gene_id_type2 = auto.gene_id_type;\n            species2 = auto.species;\n        }\n\n        await manager.prepareCollections(annofun(), collections, species2, gene_id_column2, gene_id_type2);\n        return true;\n    }\n\n    return false;\n}\n\nfunction _transplantParameters(parameters, collections, automatic, species, gene_id_column, gene_id_type, top_markers) {\n    parameters.automatic = automatic;\n    parameters.species = bioc.CLONE(species); // make a copy to avoid pass-by-ref behavior.\n    parameters.collections = bioc.CLONE(collections);\n    parameters.gene_id_column = gene_id_column;\n    parameters.gene_id_type = gene_id_type;\n    parameters.top_markers = top_markers;\n}\n\nfunction _fetchParameters(parameters) {\n    // Avoid pass-by-reference behavior.\n    let out = { ...parameters };\n    out.species = bioc.CLONE(out.species);\n    out.collections = bioc.CLONE(out.collections);\n    return out;\n}\n\n/************************\n ******** State *********\n ************************/\n\n/**\n * This step tests for enrichment of particular feature sets in the set of top marker genes,\n * based on marker rankings from {@linkplain MarkerDetectionState}.\n * It wraps the [`testFeatureSetEnrichment`](https://kanaverse.github.io/scran.js/global.html#testFeatureSetEnrichment) \n * and [`scoreFeatureSet`](https://kanaverse.github.io/scran.js/global.html#scoreFeatureSet) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class FeatureSetEnrichmentState {\n    #inputs;\n    #filter;\n    #normalized;\n\n    #parameters;\n    #manager;\n\n    constructor(inputs, filter, normalized, markers, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(normalized instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'normalized' should be a RnaNormalizationState object from './rna_normalization.js'\");\n        }\n        this.#normalized = normalized;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#manager = new FeatureSetManager;\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        this.#manager.free();\n        return; \n    }\n\n    valid() {\n        let mat = this.#inputs.fetchCountMatrix();\n        return mat.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object where each entry corresponds to a feature set collection.\n     * Each value is itself an object containing:\n     *\n     * - `names`: Array of strings containing the names of the feature sets in the collection.\n     * - `descriptions`: Array of strings containing the set descriptions.\n     * - `sizes`: Int32Array containing the set sizes.\n     * - `universe`: number of features in the universe.\n     */\n    fetchCollectionDetails() {\n        return this.#manager.fetchCollectionDetails();\n    }\n\n    /**\n     * @param {external:ScoreMarkersResults} markers - Arbitrary marker detection results for an RNA modality, with the same order and identity of genes as from the upstream {@linkplain InputsState}.\n     * This is most typically the output from {@linkcode MarkerDetectionState#fetchResults MarkerDetectionState.fetchResults} or equivalents from {@linkplain CustomSelectionsState}.\n     * @param {number} group - Index of the group of interest inside `markers`.\n     * @param {string} effect_size - Effect size to use for ranking.\n     * This should be one of `\"cohen\"`, `\"auc\"`, `\"lfc\"` or `\"delta_detected\"`.\n     * @param {string} summary - Summary statistic to use for ranking.\n     * This should be one of `\"min\"`, `\"mean\"` or `\"min_rank\"`.\n     *\n     * @return {object} Object where each entry corresponds to a feature set collection.\n     * Each value is itself an object containing:\n     *\n     * - `counts`: Int32Array containing the number of markers present in each set.\n     * - `pvalues`: Float64Array containing the enrichment p-values for each set.\n     * - `num_markers`: number of markers selected for testing.\n     */\n    computeEnrichment(markers, group, effect_size, summary) {\n        return this.#manager.computeEnrichment(group, effect_size, summary, markers, this.#parameters.top_markers);\n    }\n\n    /**\n     * @param {string} collection - Name of the collection.\n     * @param {number} set_index - Index of a feature set inside the specified collection.\n     *\n     * @return {Int32Array} Array containing the row indices of the RNA count matrix corresponding to the genes in the specified set.\n     */\n    fetchFeatureSetIndices(collection, set_index) {\n        return this.#manager.fetchFeatureSetIndices(collection, set_index);\n    }\n\n    /**\n     * @param {string} collection - Name of the collection.\n     * @param {number} set_index - Index of a feature set inside the specified collection.\n     *\n     * @return {Object} Object containing:\n     *\n     * - `indices`: Int32Array containing the row indices of the genes in the set, relative to the RNA count matrix.\n     * - `weights`: Float64Array containing the weights of each gene in the set.\n     * - `scores`: Float64Array containing the feature set score for each cell.\n     */\n    computePerCellScores(collection, set_index) {\n        return this.#manager.computePerCellScores(collection, set_index, this.#normalized.fetchNormalizedMatrix(), this.#filter.fetchFilteredBlock());\n    }\n\n    // Soft-deprecated.\n    fetchPerCellScores(collection, set_index) {\n        return this.computePerCellScores(collection, set_index);\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return _fetchParameters(this.#parameters);\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    /**\n     * @return {object} Default parameters that may be modified and fed into {@linkcode FeatureSetEnrichmentState#compute compute}.\n     */\n    static defaults() {\n        return {\n            collections: [],\n            automatic: true,\n            gene_id_column: null, \n            gene_id_type: \"ENSEMBL\", \n            top_markers: 100\n        };\n    }\n\n    /**\n     * Available feature set collections for each species.\n     * Each key is a taxonomy ID and each value is an array of names of feature set collections for that species.\n     * @type {object}\n     */\n    static availableCollections = FeatureSetManager.availableCollections;\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    /**\n     * Flush all cached feature set collections.\n     *\n     * By default, {@linkcode FeatureSetEnrichmentState#compute compute} will cache the feature set collections in a static member for re-use across {@linkplain FeatureSetEnrichmentState} instances.\n     * These cached collections are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        FeatureSetManager.flush();\n        return;\n    }\n\n    /**\n     * Specify a function to download feature sets.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step.\n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        return FeatureSetManager.setDownload(fun);\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `feature_set_enrichment` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {Array} parameters.collections - Array of strings containing the names of collections to be tested, see {@linkcode FeatureSetEnrichmentState#availableCollections availableCollections}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If `true`, the column of the annotation that best matches human/mouse Ensembl/symbols is identified and used to set `species`, `gene_id_column`, `gene_id_type`.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species involved in this dataset.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode FeatureSetEnrichmentState#availableCollections availableCollections}.\n     * This is used internally to filter `collections` to the entries relevant to these species. \n     * Ignored if `automatic = true`.\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the RNA entry of {@linkcode InputsState#fetchFeatureAnnotations InputsState.fetchFeatureAnnotations} containing the identity of each gene. \n     * If `null`, identifiers are taken from the row names.\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Type of feature identifier in `gene_id_column`.\n     * This should be one of `\"ENSEMBL\"`, `\"SYMBOL\"` or `\"ENTREZ\"`\n     * Ignored if `automatic = true`.\n     * @param {number} parameters.top_markers - Number of top markers to use when testing for enrichment.\n     *\n     * @return The state is updated with new results.\n     */\n    async compute(parameters) {\n        let { collections, automatic, species, gene_id_column, gene_id_type, top_markers } = parameters;\n        this.changed = false;\n        if (this.#inputs.changed) {\n            this.changed = true;\n        }\n\n        if (this.valid()) {\n            let modified = await _buildCollections(\n                this.#parameters, \n                this.#manager,\n                collections, \n                automatic, \n                species, \n                gene_id_column, \n                gene_id_type, \n                () => this.#inputs.fetchFeatureAnnotations()[\"RNA\"],\n                () => this.#inputs.guessRnaFeatureTypes()\n            );\n            if (modified) {\n                this.changed = true;\n            }\n\n            if (top_markers !== this.#parameters.top_markers) {\n                this.changed = true;\n            }\n        }\n\n        _transplantParameters(this.#parameters, collections, automatic, species, gene_id_column, gene_id_type, top_markers);\n        return;\n    }\n}\n\n/*****************************\n ******** Standalone *********\n *****************************/\n\n/**\n * Standalone version of {@linkplain FeatureSetEnrichmentState} that provides the same functionality outside of {@linkcode runAnalysis}.\n * Users can supply their own annotation and marker results to compute the enrichment statistics for each group.\n * Users are also responsible for ensuring that the lifetime of the supplied objects exceeds that of the constructed instance,\n * i.e., the Wasm-related `free()` methods of the inputs are not called while the FeatureSetEnrichmentInstance is still in operation.\n */\nexport class FeatureSetEnrichmentStandalone {\n    #annotations;\n    #guesses;\n\n    #normalized;\n    #block;\n    #backmap;\n\n    #parameters;\n    #manager;\n\n    /**\n     * @param {external:DataFrame} annotations - A {@linkplain external:DataFrame DataFrame} of per-gene annotations, where each row corresponds to a gene.\n     * @param {external:ScoreMarkersResults} markers - A {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object produced from **scran.js**'s `scoreMarkers` function.\n     * This should contain marker statistics for the same genes (and in the same order as) in `annotations`.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(external:ScranMatrix)} [options.normalized=null] - A {@linkcode external:ScranMatrix ScranMatrix} of log-normalized expression values,\n     * to be used in {@linkcode FeatureSetEnrichmentStandalone#computePerCellScores FeatureSetEnrichmentStandalone.computePerCellScores}.\n     * Each row corresponds to a gene in the same order as `annotations` and `markers`.\n     * @param {?(Array|TypedArray)} [options.block=null] - Array of length equal to the number of columns in `normalized`, containing the block assignments for each column. \n     * If `null`, all columns are assigned to the same block.\n     */\n    constructor(annotations, { normalized = null, block = null } = {}) {\n        this.#annotations = annotations;\n        this.#guesses = null;\n\n        this.#normalized = null;\n        this.#block = null;\n        this.#backmap = null;\n\n        if (normalized !== null) {\n            if (normalized.numberOfRows() !== this.#annotations.numberOfRows()) {\n                throw new Error(\"number of rows of 'annotations' and 'normalized' should be identical\");\n            }\n\n            if (block !== null) {\n                if (normalized.numberOfColumns() !== block.length) {\n                    throw new Error(\"number of columns of 'normalized' should equal the length of 'block'\");\n                }\n\n                let dump = utils.subsetInvalidFactors([ block ]);\n                if (dump.retain !== null) {\n                    this.#normalized = scran.subsetColumns(normalized, dump.retain);\n                    this.#backmap = dump.retain;\n                } else {\n                    this.#normalized = normalized.clone();\n                }\n\n                this.#block = dump.arrays[0].ids;\n            } else {\n                this.#normalized = normalized.clone();\n            }\n        }\n\n        this.#parameters = FeatureSetEnrichmentState.defaults();\n        this.#manager = new FeatureSetManager; // empty Manager is valid for the defaults, which have no collections anyway.\n    }\n\n    #guessFeatureTypes() {\n        if (this.#guesses == null) {\n            this.#guesses = utils.guessFeatureTypes(this.#annotations);\n        }\n        return this.#guesses;\n    }\n\n    // Testing functions to check that the sanitization worked correctly.\n    _peekMatrices() {\n        return this.#normalized;\n    }\n\n    _peekBlock() {\n        return this.#block;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        scran.free(this.#block);\n        scran.free(this.#normalized);\n        this.#manager.free();\n        return; // nothing extra to free here.\n    }\n\n    /**\n     * If this method is not called, the parameters default to those in {@linkcode FeatureSetEnrichmentState#defaults FeatureSetEnrichmentState.defaults}.\n     *\n     * @param {object} parameters - Parameter object, see the argument of the same name in {@linkcode FeatureSetEnrichmentState#compute FeatureSetEnrichmentState.compute} for more details.\n     *\n     * @return The state is updated with new parameters.\n     * @async\n     */\n    async setParameters(parameters) {\n        let { collections, automatic, species, gene_id_column, gene_id_type, top_markers } = parameters;\n\n        await _buildCollections(\n            this.#parameters,\n            this.#manager,\n            collections, \n            automatic, \n            species, \n            gene_id_column, \n            gene_id_type, \n            () => this.#annotations,\n            () => this.#guessFeatureTypes()\n        );\n\n        _transplantParameters(this.#parameters, collections, automatic, species, gene_id_column, gene_id_type, top_markers);\n    }\n\n    /**\n     * @return {object} Object where each entry corresponds to a feature set collection, \n     * see {@linkcode FeatureSetEnrichmentState#fetchCollectionDetails FeatureSetEnrichmentState.fetchCollectionDetails} for more details.\n     */\n    fetchCollectionDetails() {\n        return this.#manager.fetchCollectionDetails();\n    }\n\n    /**\n     * @param {external:ScoreMarkersResults} markers - Marker detection results for an RNA modality.\n     * @param {number} group - Group index of interest.\n     * @param {string} effect_size - Effect size to use for ranking.\n     * This should be one of `\"cohen\"`, `\"auc\"`, `\"lfc\"` or `\"delta_detected\"`.\n     * @param {string} summary - Summary statistic to use for ranking.\n     * This should be one of `\"min\"`, `\"mean\"` or `\"min_rank\"`.\n     *\n     * @return {object} Object where each entry corresponds to a feature set collection and contains statistics for the enrichment of the top marker genes in that feature set.\n     * See {@linkcode FeatureSetEnrichmentState#computeEnrichment FeatureSetEnrichmentState.computeEnrichment} for more details.\n     */\n    computeEnrichment(markers, group, effect_size, summary) {\n        return this.#manager.computeEnrichment(group, effect_size, summary, markers, this.#parameters.top_markers);\n    }\n\n    /**\n     * @param {string} collection - Name of the collection.\n     * @param {number} set_index - Index of a feature set inside the specified collection.\n     *\n     * @return {Int32Array} Array containing the row indices of the RNA count matrix corresponding to the genes in the specified set.\n     */\n    fetchFeatureSetIndices(collection, set_index) {\n        return this.#manager.fetchFeatureSetIndices(collection, set_index);\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return _fetchParameters(this.#parameters);\n    }\n\n    /**\n     * @param {string} collection - Name of the collection.\n     * @param {number} set_index - Index of a feature set inside the specified collection.\n     *\n     * @return {Object} Object containing the per-cell scores for the feature set activity.\n     * See {@linkcode FeatureSetEnrichmentState#computePerCellScores FeatureSetEnrichmentState.computePerCellScores} for more details.\n     */\n    computePerCellScores(collection, set_index) {\n        if (this.#normalized == null) {\n            throw new Error(\"no normalized matrix supplied in constructor\");\n        }\n\n        let output = this.#manager.computePerCellScores(collection, set_index, this.#normalized, this.#block);\n\n        if (this.#backmap !== null) {\n            let backfilled = new Float64Array(output.scores.length);\n            backfilled.fill(Number.NaN);\n            this.#backmap.forEach((x, i) => {\n                backfilled[x] = output.scores[i];\n            });\n            output.scores = backfilled;\n        }\n\n        return output;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, filter, normalized, markers) {\n    let parameters = {};\n    let cache = {};\n\n    // Protect against old analysis states that don't have cell_labelling.\n    if (\"feature_set_enrichment\" in handle.children) {\n        let ghandle = handle.open(\"feature_set_enrichment\");\n        \n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.collections = phandle.open(\"collections\", { load: true }).values;\n            for (const k of [ \"gene_id_column\", \"gene_id_type\", \"top_markers\" ]) {\n                parameters[k] = phandle.open(k, { load: true }).values[0];\n            }\n        }\n    }\n\n    return new FeatureSetEnrichmentState(inputs, filter, normalized, markers, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as rutils from \"../readers/index.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as markers_module from \"./marker_detection.js\";\n\nconst baseUrl = \"https://github.com/LTLA/singlepp-references/releases/download/v2.0.0\";\n\nexport const step_name = \"cell_labelling\";\n\n/**\n * Cell labelling involves assigning cell type labels to clusters using the [**SingleR** algorithm](https://github.com/LTLA/CppSingleR),\n * based on [pre-formatted reference expression profiles](https://github.com/clusterfork/singlepp-references).\n * This wraps [`labelCells`](https://kanaverse.github.io/scran.js/global.html#labelCells)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * In theory, we could do this at the single-cell level, but we use clusters instead to expedite the computation and simplify interpretation.\n * If multiple references are requested, we will use each for assignment before attempting to choose the best label for each cluster across references.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellLabellingState {\n    #inputs;\n    #markers;\n    #parameters;\n    #cache;\n\n    constructor(inputs, markers, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        if (!(markers instanceof markers_module.MarkerDetectionState)) {\n            throw new Error(\"'markers' should be a State object from './marker_detection.js'\");\n        }\n        this.#markers = markers;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    #flush_prepared() {\n        if (\"prepared\" in this.#cache) {\n            for (const v of Object.values(this.#cache.prepared)) {\n                v.built.raw.free();\n            }\n            delete this.#cache.prepared;\n        }\n    }\n\n    free() {\n        utils.freeCache(this.#cache.buffer);\n        this.#flush_prepared();\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let mat = this.#inputs.fetchCountMatrix();\n        return mat.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        let out = { ...this.#parameters };\n        out.references = bioc.CLONE(out.references);\n        out.species = bioc.CLONE(out.species);\n        return out;\n    }\n\n    /**\n     * @return {object} An object containing:\n     *\n     * - `per_reference`: an object where keys are the reference names and the values are arrays of strings.\n     *   Each array is of length equal to the number of clusters and contains the cell type classification for each cluster.\n     * - `integrated`: an array of length equal to the number of clusters.\n     *   Each element is a string specifying the name of the reference with the best label for each cluster.\n     *   Only available if multiple references are requested.\n     *\n     * This is available after running {@linkcode CellLabellingState#compute compute}.\n     */\n    fetchResults() {\n        // No real need to clone these, they're string arrays\n        // so they can't be transferred anyway.\n        let perref = {};\n        for (const [key, val] of Object.entries(this.#cache.results)) {\n            perref[key] = val;\n        }\n\n        let output = { \"per_reference\": perref };\n        if (\"integrated_results\" in this.#cache) {\n            output.integrated = this.#cache.integrated_results;\n        }\n\n        return output;\n    }\n\n    /**\n     * @return {object} Object where each key is the name of a reference and each value is the number of shared features between the test and reference daatasets.\n     */\n    fetchNumberOfSharedFeatures() {\n        let output = {};\n        for (const key of Object.keys(this.#cache.results)) {\n            output[key] = this.#cache.prepared[key].built.raw.sharedFeatures();\n        }\n        return output;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults() {\n        return {\n            references: [],\n            automatic: true,\n            species: [],\n            gene_id_column: null,\n            gene_id_type: \"ENSEMBL\"\n        };\n    }\n\n    static configureFeatureParameters(guesses) {\n        let best_key = null;\n        let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n        if (\"row_names\" in guesses) {\n            let val = guesses.row_names;\n            if (val.confidence > best.confidence) {\n                best = val;\n            }\n        }\n\n        for (const [key, val] of Object.entries(guesses.columns)) {\n           if (val.confidence > best.confidence) {\n                best = val;\n                best_key = key;\n            }\n        }\n\n        return {\n            gene_id_column: best_key,\n            species: [best.species],\n            gene_id_type: best.type.toUpperCase()\n        };\n    }\n\n    /**\n     * Available references for each species.\n     * Each key is a taxonomy ID and each value is an array of strings containing the names of references for that species.\n     * @type {object}\n     */\n    static availableReferences = {\n        \"9606\": [ \"BlueprintEncode\", \"DatabaseImmuneCellExpression\", \"HumanPrimaryCellAtlas\", \"MonacoImmune\", \"NovershternHematopoietic\" ],\n        \"10090\": [ \"ImmGen\", \"MouseRNAseq\" ]\n    };\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    async #load_reference(name) {\n        let all_loaded = CellLabellingState.#all_loaded;\n        if (name in all_loaded) {\n            return;\n        }\n\n        const suffixes = [ \n            \"genes.csv.gz\",\n            \"labels_fine.csv.gz\",\n            \"label_names_fine.csv.gz\",\n            \"markers_fine.gmt.gz\",\n            \"matrix.csv.gz\"\n        ];\n\n        let contents = await Promise.all(\n            suffixes.map(\n                async suffix => {\n                    let full = name + \"_\" + suffix;\n                    let b = await CellLabellingState.#downloadFun(baseUrl + \"/\" + full);\n                    return new rutils.SimpleFile(b, { name: full })\n                }\n            )\n        );\n\n        let loaded;\n        try {\n            loaded = scran.loadLabelledReferenceFromBuffers(\n                contents[4].buffer(), // rank matrix\n                contents[3].buffer(), // markers\n                contents[1].buffer()  // label per sample\n            );\n\n            let gene_lines = await rutils.readLines2(contents[0].content(), { compression: \"gz\" }); // gene names\n            let ensembl = [];\n            let symbol = [];\n            let entrez = [];\n            let empty2null = x => (x == \"\" ? null : x);\n\n            gene_lines.forEach(x => {\n                let fields = x.split(\",\");\n                ensembl.push(empty2null(fields[0]));\n                symbol.push(empty2null(fields[1]));\n                entrez.push(empty2null(fields[2]));\n            });\n\n            let labels = await rutils.readLines2(contents[2].content(), { compression: \"gz\" }); // full label names\n            all_loaded[name] = { \n                \"raw\": loaded, \n                \"genes\": {\n                    \"ENSEMBL\": ensembl,\n                    \"SYMBOL\": symbol,\n                    \"ENTREZ\": entrez\n                },\n                \"labels\": labels\n            };\n\n        } catch (e) {\n            utils.freeCache(loaded);\n            throw e;\n        }\n    }\n\n    static #all_loaded = {};\n\n    /**\n     * Flush all cached references.\n     *\n     * By default, {@linkcode CellLabellingState#compute compute} will cache the loaded references in a static member for re-use across {@linkplain CellLabellingState} instances.\n     * These cached references are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        for (const [k, v] of Object.entries(CellLabellingState.#all_loaded)) {\n            v.raw.free();\n        }\n        CellLabellingState.#all_loaded = {};\n        return;\n    }\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * Specify a function to download references for the cell labelling step.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step. \n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        let previous = CellLabellingState.#downloadFun;\n        CellLabellingState.#downloadFun = fun;\n        return previous;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #build_reference(name, gene_ids, gene_id_type) {\n        let built;\n        let output;\n        try {\n            let current = CellLabellingState.#all_loaded[name];\n            let loaded = current.raw;\n\n            if (!(gene_id_type in current.genes)) {\n                throw new Error(\"unknown gene type '\" + gene_id_type + \"'\");\n            }\n            let chosen_ids = current.genes[gene_id_type];\n\n            built = scran.buildLabelledReference(gene_ids, loaded, chosen_ids); \n            output = {\n                \"loaded\": current,\n                \"built\": {\n                    \"features\": chosen_ids,\n                    \"raw\": built\n                }\n            };\n\n        } catch (e) {\n            utils.freeCache(built);\n            throw e;\n        }\n\n        return output;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `cell_labelling` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {Array} parameters.references - Array of strings specifying the names of the reference datasets, see {@linkcode CellLabellingState.availableReferences availableReferences} for more details.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If `true`, the column of the annotation that best matches human/mouse Ensembl/symbols is identified and used to set `species`, `gene_id_column` and `gene_id_type`.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species involved in this dataset.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode CellLabellingState.availableReferences availableReferences}.\n     * This is used internally to filter `references` to the entries relevant to these species. \n     * Ignored if `automatic = true`.\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the RNA entry of {@linkcode InputsState#fetchFeatureAnnotations InputsState.fetchFeatureAnnotations} containing the identity of each gene. \n     * If `null`, identifiers are taken from the row names.\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Type of feature identifier in `gene_id_column`.\n     * This should be one of `\"ENSEMBL\"`, `\"SYMBOL\"` or `\"ENTREZ\"`\n     * Ignored if `automatic = true`.\n     *\n     * @return The object is updated with the new results.\n     * @async\n     */\n    async compute(parameters) {\n        let references;\n        let automatic;\n        let species;\n        let gene_id_column;\n        let gene_id_type;\n\n        if (\"references\" in parameters) {\n            references = parameters.references;\n            automatic = parameters.automatic;\n            species = parameters.species;\n            gene_id_column = parameters.gene_id_column;\n            gene_id_type = parameters.gene_id_type;\n        } else {\n            references = [ ...(parameters.human_references), ...(parameters.mouse_references) ];\n            automatic = true;\n            let def = CellLabellingState.defaults();\n            species = def.species;\n            gene_id_column = def.gene_id_column;\n            gene_id_type = def.gene_id_type;\n        }\n\n        this.changed = false;\n\n        if (this.valid()) {\n            // Gathering the references.\n            if (\n                this.#inputs.changed ||\n                automatic !== this.#parameters.automatic ||\n                utils.changedParameters(references, this.#parameters.references) ||\n                (\n                    !automatic &&\n                    (\n                        species !== this.#parameters.species ||\n                        gene_id_column !== this.#parameters.gene_id_column ||\n                        gene_id_type !== this.#parameters.gene_id_type\n                    )\n                )\n            ) {\n                let species2 = species;\n                let gene_id_column2 = gene_id_column;\n                let gene_id_type2 = gene_id_type;\n\n                if (automatic) {\n                    let guesses = this.#inputs.guessRnaFeatureTypes();\n                    let auto = CellLabellingState.configureFeatureParameters(guesses);\n                    species2 = auto.species;\n                    gene_id_column2 = auto.gene_id_column;\n                    gene_id_type2 = auto.gene_id_type;\n                }\n\n                let allowable = new Set;\n                for (const s of species2) {\n                    if (s in CellLabellingState.availableReferences) {\n                        CellLabellingState.availableReferences[s].forEach(x => { allowable.add(x); });\n                    }\n                }\n\n                // Building each individual reference.\n                let feats = this.#inputs.fetchFeatureAnnotations()[\"RNA\"];\n                let gene_ids = (gene_id_column2 == null ? feats.rowNames() : feats.column(gene_id_column2));\n                this.#cache.gene_ids = gene_ids;\n\n                let valid = {};\n                if (gene_ids !== null) {\n                    for (const ref of references) {\n                        if (allowable.has(ref)) {\n                            await this.#load_reference(ref);\n                            valid[ref] = this.#build_reference(ref, gene_ids, gene_id_type2);\n                        }\n                    }\n                }\n\n                this.#flush_prepared();\n                this.#cache.prepared = valid;\n\n                // Building an integrated reference, if necessary.\n                let used_refs = Object.keys(valid);\n                if (used_refs.length > 1) {\n                    let arr = Object.values(valid);\n                    let loaded = arr.map(x => x.loaded.raw);\n                    let feats = arr.map(x => x.built.features);\n                    let built = arr.map(x => x.built.raw);\n\n                    utils.freeCache(this.#cache.integrated);\n                    this.#cache.integrated = scran.integrateLabelledReferences(gene_ids, loaded, feats, built);\n                } else {\n                    utils.freeCache(this.#cache.integrated);\n                    delete this.#cache.integrated;\n                }\n                this.#cache.used_refs = used_refs;\n\n                this.changed = true;\n            }\n\n            let marker_results = this.#markers.fetchResults()[\"RNA\"];\n            let ngroups = marker_results.numberOfGroups();\n            let ngenes = (this.#cache.gene_ids !== null ? this.#cache.gene_ids.length : null);\n            let cluster_means = this.#cache.buffer;\n\n            if (this.#markers.changed) {\n                if (ngenes !== null) {\n                    // Creating a column-major array of mean vectors for each cluster.\n                    cluster_means = utils.allocateCachedArray(ngroups * ngenes, \"Float64Array\", this.#cache);\n                    for (var g = 0; g < ngroups; g++) {\n                        let means = marker_results.means(g, { copy: false }); // Warning: direct view in wasm space - be careful.\n                        let cluster_array = cluster_means.array();\n                        cluster_array.set(means, g * ngenes);\n                    }\n                }\n                this.changed = true;\n            }\n\n            if (this.changed) {\n                // Running classifications on the cluster means. This is a\n                // no-op if gene_ids = null as 'valid' should be empty.\n                let valid = this.#cache.prepared;\n\n                this.#cache.results = {};\n                for (const [key, ref] of Object.entries(valid)) {\n                    let output = scran.labelCells(cluster_means, ref.built.raw, { numberOfFeatures: ngenes, numberOfCells: ngroups });\n                    let labels = [];\n                    for (const o of output) {\n                        labels.push(ref.loaded.labels[o]);\n                    }\n                    this.#cache.results[key] = labels;\n                }\n\n                // Performing additional integration, if necessary. \n                if (\"integrated\" in this.#cache) {\n                    let results = [];\n                    for (const key of this.#cache.used_refs) {\n                        results.push(this.#cache.results[key]);\n                    }\n\n                    let out = scran.integrateCellLabels(cluster_means, results, this.#cache.integrated, { numberOfFeatures: ngenes, numberOfCells: ngroups });\n                    let as_names = [];\n                    out.forEach(i => {\n                        as_names.push(this.#cache.used_refs[i]);\n                    });\n                    this.#cache.integrated_results = as_names;\n                } else {\n                    delete this.#cache.integrated_results;\n                }\n            }\n        } else {\n            this.#cache.results = {};\n            delete this.#cache.integrated_results;\n        }\n\n        this.#parameters.references = bioc.CLONE(references); // make a copy to avoid pass-by-reference behavior.\n        this.#parameters.automatic = automatic;\n        this.#parameters.species = bioc.CLONE(species);\n        this.#parameters.gene_id_column = gene_id_column;\n        this.#parameters.gene_id_type = gene_id_type;\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, markers) {\n    let parameters =  {\n        mouse_references: [],\n        human_references: []\n    };\n    let cache = { results: {} };\n\n    // Protect against old analysis states that don't have cell_labelling.\n    if (\"cell_labelling\" in handle.children) {\n        let ghandle = handle.open(\"cell_labelling\");\n        \n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.mouse_references = phandle.open(\"mouse_references\", { load: true }).values;\n            parameters.human_references = phandle.open(\"human_references\", { load: true }).values;\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"per_reference\" in rhandle.children) {\n                let perhandle = rhandle.open(\"per_reference\");\n                for (const key of Object.keys(perhandle.children)) {\n                    cache.results[key] = perhandle.open(key, { load: true }).values;\n                }\n                if (\"integrated\" in rhandle.children) {\n                    cache.integrated_results = rhandle.open(\"integrated\", { load: true }).values;\n                }\n            }\n        }\n    }\n\n    return new CellLabellingState(inputs, markers, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as bioc from \"bioconductor\";\n\n// Monkey-patching these methods so that we can use these WasmArrays\n// as columns in a bioc.DataFrame.\nwa.Uint8WasmArray.prototype._bioconductor_LENGTH = function() { return this.length; };\nwa.Int32WasmArray.prototype._bioconductor_LENGTH = function() { return this.length; };\nwa.Float64WasmArray.prototype._bioconductor_LENGTH = function() { return this.length; };\n\nexport function writeHdf5DataFrame(x, path, { group = \"data\", forceBuffer = false } = {}) {\n    let metadata = {\n        \"path\": path + \"/simple.h5\",\n        \"$schema\": \"hdf5_data_frame/v1.json\",\n        \"data_frame\": {\n            \"dimensions\": [ x.numberOfRows(), x.numberOfColumns() ],\n            \"columns\": [],\n            \"row_names\": false\n        },\n        \"hdf5_data_frame\": {\n            \"group\": group\n        }\n    };\n\n    let temppath = scran.chooseTemporaryPath({ extension: \".csv.gz\" });\n    let contents = temppath;\n    let children = [];\n\n    let fhandle = scran.createNewHDF5File(temppath);\n    try {\n        let ghandle = fhandle.createGroup(group);\n\n        ghandle.writeDataSet(\"column_names\", \"String\", null, x.columnNames());\n        let rn = x.rowNames();\n        if (rn !== null) {\n            metadata.data_frame.row_names = true;\n            ghandle.writeDataSet(\"row_names\", \"String\", null, rn);\n        }\n\n        let dhandle = ghandle.createGroup(\"data\");\n        let coltypes = metadata.data_frame.columns;\n\n        for (var i = 0; i < x.numberOfColumns(); i++) {\n            const curcol = x.column(i);\n            const colname = x.columnNames()[i];\n\n            if (curcol instanceof Array) {\n                let all_types = new Set;\n                let has_null = false;\n                for (const y of curcol) {\n                    if (y === null) {\n                        has_null = true;\n                    } else {\n                        all_types.add(typeof y);\n                    }\n                }\n\n                if (all_types.size > 1) {\n                    throw new Error(\"column '\" + colname + \"' has multiple types\");\n                }\n\n                if (all_types.has(\"string\")) {\n                    coltypes.push({ name: colname, type: \"string\" });\n                    if (!has_null) {\n                        dhandle.writeDataSet(String(i), \"String\", null, curcol);\n                    } else {\n                        let contents = new Set(curcol);\n                        let placeholder = \"NA\";\n                        while (contents.has(placeholder)) {\n                            placeholder = placeholder + \"_\";\n                        }\n\n                        let copy = curcol.slice();\n                        for (var i = 0; i < copy.length; i++) {\n                            if (copy[i] === null) {\n                                copy[i] = placeholder;\n                            }\n                        }\n\n                        let shandle = dhandle.writeDataSet(String(i), \"String\", null, copy);\n                        shandle.writeAttribute(\"missing-value-placeholder\", \"String\", null, placeholder);\n                    }\n\n                } else if (all_types.has(\"number\")) {\n                    coltypes.push({ name: colname, type: \"number\" });\n                    let temp = scran.createFloat64WasmArray(curcol.length);\n                    try {\n                        if (!has_null) {\n                            temp.set(curcol);\n                        } else {\n                            let temparr = temp.array();\n                            for (var i = 0; i < curcol.length; i++) {\n                                if (curcol[i] === null) {\n                                    temparr[i] = Number.NaN;\n                                } else {\n                                    temparr[i] = curcol[i];\n                                }\n                            }\n                        }\n                        dhandle.writeDataSet(String(i), \"Float64\", null, temp);\n                    } finally {\n                        temp.free();\n                    }\n\n                } else if (all_types.size == 0 || all_types.has(\"boolean\")) {\n                    coltypes.push({ name: colname, type: \"boolean\" });\n                    if (has_null) {\n                        let temp = scran.createInt32WasmArray(curcol.length);\n                        try {\n                            for (var i = 0; i < curcol.length; i++) {\n                                if (curcol[i] === null) {\n                                    temparr[i] = -2147483648;\n                                } else {\n                                    temparr[i] = curcol[i];\n                                }\n                            }\n                            dhandle.writeDataSet(String(i), \"Int32\", null, temp);\n                        } finally {\n                            temp.free();\n                        }\n                    } else {\n                        let temp = scran.createUint8WasmArray(curcol.length);\n                        try {\n                            temp.fill(curcol);\n                            dhandle.writeDataSet(String(i), \"Uint8\", null, temp);\n                        } finally {\n                            temp.free();\n                        }\n                    }\n\n                } else {\n                    throw new Error(\"unknown type '\" + Array.from(all_types)[0] + \"' for column '\" + colname + \"'\");\n                }\n\n            } else if (curcol instanceof Uint8Array || curcol instanceof wa.Uint8WasmArray) {\n                coltypes.push({ name: colname, type: \"boolean\" });\n                dhandle.writeDataSet(String(i), \"Uint8\", null, curcol);\n                \n            } else if (curcol instanceof Int32Array || curcol instanceof wa.Int32WasmArray) {\n                coltypes.push({ name: colname, type: \"integer\" });\n                dhandle.writeDataSet(String(i), \"Int32\", null, curcol);\n\n            } else if (curcol instanceof Float64Array || curcol instanceof wa.Float64WasmArray) {\n                coltypes.push({ name: colname, type: \"number\" });\n                dhandle.writeDataSet(String(i), \"Float64\", null, curcol);\n\n            } else if (curcol instanceof bioc.DataFrame) {\n                let subpath = path + \"/column\" + String(i);\n                let child = writeHdf5DataFrame(curcol, subpath, { group, forceBuffer });\n                coltypes.push({ name: colname, type: \"other\", resource: { type: \"local\", path: child.self.metadata.path } });\n                child.self.metadata.is_child = true;\n                children.push(child.self);\n                for (const x of child.children) {\n                    children.push(x);\n                }\n\n            } else {\n                throw new Error(\"unknown type for column '\" + colname + \"'\");\n            }\n        }\n\n        if (forceBuffer) {\n            contents = scran.readFile(temppath);\n            scran.removeFile(temppath);\n        }\n    } catch (e) {\n        scran.removeFile(temppath);\n        throw e;\n    }\n\n    return {\n        self: {\n            metadata: metadata,\n            contents: contents\n        },\n        children: children\n    };\n}\n","import * as bioc from \"bioconductor\";\n\nexport function cloneCached(x, cached) {\n    return (cached ? bioc.CLONE(x) : x);\n}\n\n/**\n * A representation of a matrix of expression values, where the values are hosted on the Wasm heap for easier compute via [**scran.js**](https://github.com/jkanche/scran.js).\n * See [here](https://jkanche.github.io/scran.js/ScranMatrix.html) for more details.\n *\n * @external ScranMatrix\n */ \n\n/**\n * A representation of multiple {@linkplain external:ScranMatrix ScranMatrix} objects, where each object contains data for the same cells but across a different feature space, e.g., for different data modalities.\n * See [here](https://jkanche.github.io/scran.js/MultiMatrix.html) for more details.\n *\n * @external MultiMatrix\n */ \n\n\n/**\n * A DataFrame from the [**bioconductor**](https://github.com/LTLA/bioconductor.js) package, where each column is represented by some arbitrary vector-like object.\n * See [here](https://ltla.github.io/bioconductor.js/DataFrame.html) for more details.\n *\n * @external DataFrame\n */ \n\n/**\n * Representation of a file that is agnostic to the environment (Node.js or browser) or the nature of the contents (buffer or file path).\n * See [here](https://ltla.github.io/bakana/SimpleFile.html) for more details.\n *\n * @external SimpleFile\n */ \n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as bakana from \"bakana\";\nimport * as utils from \"./utils.js\";\n\nconst baseUrl = \"https://experimenthub.bioconductor.org/fetch\";\n\nconst registry = {\n    \"zeisel-brain\": { \"counts\": \"2596\", \"coldata\": \"2598\", \"rowdata\": \"2597\" }, // corresponding to EH2580, 2582 and 2581, for whatever reason.\n    \"segerstolpe-pancreas\": { \"counts\": \"2591\", \"coldata\": \"2593\", \"rowdata\": \"2592\" }, // corresponding to EH2575, 2577 and 2576.\n    \"nestorowa-hsc\": { \"counts\": \"2710\", \"ncol\": 1920 }, // corresponding to EH2694; the coldata doesn't contain much that's useful here.\n    \"aztekin-tail\": { \"counts\": \"3124\", \"coldata\": \"3125\" }, // corresponding to EH3108 and 3109.\n    \"wu-kidney\": { \"counts\": \"3594\", \"coldata\": \"3595\" }, // corresponding to EH3558 and 3559.\n    \"zilionis-mouse-lung\": { \"counts\": \"3478\", \"coldata\": \"3479\" } // corresponding to EH3462 and 3463.\n};\n\nfunction check_class(handle, accepted, base) {\n    if (!(handle instanceof scran.RdsS4Object)) {\n        throw new Error(\"expected an S4 object\");\n    }\n\n    for (const [k, v] of Object.entries(accepted)) {\n        if (handle.className() == k && handle.packageName() == v) {\n            return;\n        }\n    }\n    throw new Error(\"object is not a \" + base + \" or one of its recognized subclasses\");\n}\n\nfunction load_listData_names(lhandle) {\n    let ndx = lhandle.findAttribute(\"names\");\n    if (ndx < 0) {\n        return null;\n    }\n\n    let nhandle;\n    let names;\n    try {\n        nhandle = lhandle.attribute(ndx);\n        names = nhandle.values();\n    } catch(e) {\n        throw new Error(\"failed to load listData names; \" + e.message);\n    } finally {\n        scran.free(nhandle);\n    }\n\n    if (names.length != lhandle.length()) {\n        throw new Error(\"expected names to have same length as listData\");\n    }\n    return names;\n}\n\nfunction populate_list_columns(lhandle, output) {\n    let colnames = load_listData_names(lhandle);\n    if (colnames == null) {\n        throw new Error(\"expected the listData list to be named\");\n    }\n    let columns = {};\n\n    for (var i = 0; i < lhandle.length(); i++) {\n        let curhandle;\n        try {\n            curhandle = lhandle.load(i);\n            if (curhandle instanceof scran.RdsVector && !(curhandle instanceof scran.RdsGenericVector)) {\n                let curcol = curhandle.values();\n                columns[colnames[i]] = curcol;\n                output.nrow = curcol.length;\n            }\n        } finally {\n            scran.free(curhandle);\n        }\n    }\n\n    output.columns = columns;\n    return;\n}\n\nfunction load_data_frame(handle) {\n    let output = {};\n\n    if (handle.type() == \"S4\") {\n        check_class(handle, { \"DFrame\": \"S4Vectors\", \"DataFrame\": \"S4Vectors\" }, \"DFrame\");\n\n        // Loading the atomic columns.\n        let lhandle;\n        try {\n            lhandle = handle.attribute(\"listData\");\n            if (!(lhandle instanceof scran.RdsGenericVector)) {\n                throw new Error(\"listData slot should be a generic list\");\n            }\n            populate_list_columns(lhandle, output);\n        } catch(e) {\n            throw new Error(\"failed to retrieve data from DataFrame's listData; \" + e.message);\n        } finally {\n            scran.free(lhandle);\n        }\n    } else {\n        if (handle.type() != \"vector\") {\n            throw new Error(\"expected a data.frame or DataFrame instance\");\n        }\n        populate_list_columns(handle, output);\n    }\n\n    // Loading the row names.\n    let rnhandle;\n    try {\n        let rndx = handle.findAttribute(\"rownames\");\n        if (rndx >= 0) {\n            rnhandle = handle.attribute(rndx);\n            if (rnhandle instanceof scran.RdsStringVector) {\n                output.row_names = rnhandle.values();\n                output.nrow = output.row_names.length;\n            }\n        }\n    } catch(e) {\n        throw new Error(\"failed to retrieve row names from DataFrame; \" + e.message);\n    } finally {\n        scran.free(rnhandle);\n    }\n\n    // Loading the number of rows.\n    if (!(\"nrow\" in output)) {\n        let nrhandle;\n        try {\n            nrhandle = handle.attribute(\"nrows\");\n            if (!(nrhandle instanceof scran.RdsIntegerVector)) {\n                throw new Error(\"expected an integer vector as the 'nrows' slot\");\n            }\n            let NR = nrhandle.values();\n            if (NR.length != 1) {\n                throw new Error(\"expected an integer vector of length 1 as the 'nrows' slot\");\n            }\n            output.nrow = NR[0];\n        } catch (e) {\n            throw new Error(\"failed to retrieve nrows from DataFrame; \" + e.message);\n        } finally {\n            scran.free(nrhandle);\n        }\n    }\n\n    return output;\n}\n\nfunction extract_matrix_rownames(handle) {\n    let idx;\n\n    if (handle.type() == \"S4\") {\n        check_class(handle, { \"dgCMatrix\": \"Matrix\", \"dgTMatrix\": \"Matrix\" }, \"Matrix\");\n        idx = handle.findAttribute(\"Dimnames\");\n    } else {\n        idx = handle.findAttribute(\"dimnames\");\n    }\n\n    if (idx < 0) {\n        throw new Error(\"count matrix does not have dimnames\");\n    }\n\n    let dimhandle;\n    let firsthandle;\n    let output;\n    \n    try {\n        dimhandle = handle.attribute(idx);\n        if (dimhandle.type() != \"vector\" && dimhandle.size() != 2) {\n            throw new Error(\"dimnames of the count matrix should be a list of length 2\");\n        }\n\n        firsthandle = dimhandle.load(0);\n        if (firsthandle.type() != \"string\") {\n            throw new Error(\"expected a character vector in the first dimnames\");\n        }\n\n        output = firsthandle.values();\n    } finally {\n        scran.free(dimhandle);\n        scran.free(firsthandle);\n    }\n\n    return output;\n}\n\n/**\n * Dataset derived from a SummarizedExperiment-like representation on Bioconductor's [ExperimentHub](https://bioconductor.org/packages/ExperimentHub).\n */\nexport class ExperimentHubDataset {\n    #id;\n\n    #rowdata;\n    #coldata;\n\n    #counts_handle;\n    #counts_loaded;\n\n    // We should _know_ which experiments correspond to which modality for each\n    // dataset in our registry, so there's no need to provide options for that.\n    // However, we might not know how to choose an appropriate primary\n    // identifier for combining datasets, hence these options.\n    #primaryRnaFeatureIdColumn;\n\n    #dump_options() {\n        return {\n            primaryRnaFeatureIdColumn: this.#primaryRnaFeatureIdColumn\n        };\n    }\n\n    /****************************************\n     ****************************************/\n\n    static #downloadFun = async url => {\n        let resp = await fetch(url);\n        if (!resp.ok) {\n            throw new Error(\"failed to fetch content at \" + url + \" (\" + resp.status + \")\");\n        }\n        return new Uint8Array(await resp.arrayBuffer());\n    }\n\n    /** \n     * @param {function} fun - Function that accepts a URL string and downloads the resource,\n     * returning a Uint8Array of its contents.\n     * Alternatively, on Node.js, the funciton may return a string containing the path to the downloaded resource.\n     * @return {function} Previous setting of the download function.\n     */\n    static setDownloadFun(fun) {\n        let previous = ExperimentHubDataset.#downloadFun;\n        ExperimentHubDataset.#downloadFun = fun;\n        return previous;\n    }\n\n    /****************************************\n     ****************************************/\n\n    /**\n     * @return {Array} Array of strings containing identifiers of available datasets.\n     * @static\n     */\n    static availableDatasets() {\n        return Object.keys(registry);\n    }\n\n    /**\n     * @param {string} id - Identifier of a dataset to load.\n     * This should be a string in {@linkcode ExperimentHubDataset.availableDatasets availableDatasets}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn=0] - See {@linkcode TenxHdf5Dataset#setPrimaryRnaFeatureIdColumn setPrimaryRnaFeatureIdColumn}.\n     */\n    constructor(id, { \n        primaryRnaFeatureIdColumn = 0\n    } = {}) {\n        this.#id = id;\n        if (!(this.#id in registry)) {\n            throw new Error(\"unrecognized identifier '\" + this.#id + \"' for ExperimentHub-based datasets\");\n        }\n\n        this.#primaryRnaFeatureIdColumn = primaryRnaFeatureIdColumn;\n\n        this.clear();\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"ExperimentHub\";\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode ExperimentHubDataset#load load} or {@linkcodeExperimentHubDataset#annotations annotations}. \n     */\n    clear() {\n        scran.free(this.#counts_handle);\n        scran.free(this.#counts_loaded);\n        this.#counts_handle = null;\n        this.#counts_loaded = null;\n        this.#rowdata = null;\n        this.#coldata = null;\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset.\n     */\n    abbreviate() {\n        return { \"id\": this.#id, \"options\": this.#dump_options() };\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setPrimaryRnaFeatureIdColumn(i) {\n        this.#primaryRnaFeatureIdColumn = i;\n        return;\n    }\n\n    async #counts() {\n        if (this.#counts_handle !== null) {\n            return;\n        }\n\n        let details = registry[this.#id];\n        let counts_deets = await ExperimentHubDataset.#downloadFun(baseUrl + \"/\" + details.counts);\n        try {\n            this.#counts_loaded = scran.readRds(counts_deets);\n            this.#counts_handle = this.#counts_loaded.value();\n        } catch(e) {\n            scran.free(this.#counts_handle);\n            scran.free(this.#counts_loaded);\n            throw e;\n        }\n    }\n\n    async #features() {\n        if (this.#rowdata !== null) {\n            return;\n        }\n\n        let details = registry[this.#id];\n\n        if (\"rowdata\" in details) {\n            let rowdata_deets = await ExperimentHubDataset.#downloadFun(baseUrl + \"/\" + details.rowdata);\n\n            let rowdata_load;\n            let rowdata_handle;\n            try {\n                rowdata_load = scran.readRds(rowdata_deets);\n                rowdata_handle = rowdata_load.value();\n                let rowdata = load_data_frame(rowdata_handle);\n                let names = rowdata.row_names;\n\n                let output = {};\n                if (names) {\n                    output.id = names;\n                }\n\n                for (const [k, v] of Object.entries(rowdata.columns)) {\n                    if (k.match(/^sym/)) {\n                        output[k] = v;\n                    }\n                }\n\n                if (Object.keys(output).length == 0) {\n                    throw new Error(\"no acceptable feature identifiers found in the rowData DataFrame\");\n                }\n                this.#rowdata = new bioc.DataFrame(output);\n            } finally {\n                scran.free(rowdata_handle);\n                scran.free(rowdata_load);\n            }\n            return;\n        }\n\n        // Otherwise we pull the details from the counts.\n        await this.#counts();\n        let ids = extract_matrix_rownames(this.#counts_handle);\n        this.#rowdata = new bioc.DataFrame({ id: ids });\n    }\n\n    async #cells() {\n        if (this.#coldata !== null) {\n            return;\n        }\n\n        let details = registry[this.#id];\n        if (\"coldata\" in details) {\n            let coldata_deets = await ExperimentHubDataset.#downloadFun(baseUrl + \"/\" + details.coldata);\n\n            let coldata_load;\n            let coldata_handle; \n            let cd_df;\n            try {\n                coldata_load = scran.readRds(coldata_deets);\n                coldata_handle = coldata_load.value();\n                cd_df = load_data_frame(coldata_handle);\n            } finally {\n                scran.free(coldata_handle);\n                scran.free(coldata_load);\n            }\n\n            this.#coldata = new bioc.DataFrame(cd_df.columns, { numberOfRows: cd_df.nrow });\n        } else {\n            this.#coldata = new bioc.DataFrame({}, { numberOfRows: details.ncol });\n        }\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode ExperimentHubDataset#load load}.\n     * If `true`, users should consider calling {@linkcode ExperimentHubDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode ExperimentHubDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = { cells: utils.cloneCached(this.#coldata, cache) };\n        let my_rd = utils.cloneCached(this.#rowdata, cache);\n        output.modality_features = { \"RNA\": my_rd };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode TenxHdf5Dataset#summary summary}.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an integer array containing the feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * It is assumed that an appropriate mapping from the feature types inside the `featureFile` was previously declared,\n     * either in the constructor or in setters like {@linkcode setFeatureTypeRnaName}.\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#counts();\n\n        let output = {\n            cells: utils.cloneCached(this.#coldata, cache)\n        };\n\n        // Hard-coding the fact that we're dealing with RNA here, as all\n        // registry entries are currently RNA-only anyway.\n        let details = registry[this.#id];\n        try {\n            output.matrix = new scran.MultiMatrix;\n            let counts = scran.initializeSparseMatrixFromRds(this.#counts_handle, { consume: !cache });\n\n            output.matrix.add(\"RNA\", counts.matrix);\n            output.row_ids = { \"RNA\": counts.row_ids };\n\n            let perm_features = bioc.SLICE(this.#rowdata, counts.row_ids);\n            output.features = { \"RNA\": perm_features };\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        // Setting the primary identifiers.\n        let curfeat = output.features[\"RNA\"];\n        let id = this.primaryRnaFeatureIdColumn;\n        output.primary_ids = { RNA: null }; \n        if ((typeof id == \"string\" && curfeat.hasColumn(id)) || (typeof id == \"number\" && id < curfeat.numberOfColumns())) {\n            output.primary_ids.RNA = curfeat.column(id);\n        } else {\n            output.primary_ids.RNA = curfeat.rowNames();\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        const enc = new TextEncoder;\n        let buffer = enc.encode(this.#id);\n\n        // Storing it as a string in the buffer.\n        let output = {\n            type: \"id\",\n            file: new bakana.SimpleFile(buffer, { name: \"id\" })\n        };\n\n        return {\n            files: [ output ],\n            options: this.#dump_options()\n        }\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode ExperimentHubDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {ExperimentHubDataset} A new instance of this class.\n     * @static\n     */\n    static unserialize(files, options) {\n        let args = {};\n\n        // This should contain 'id'.\n        for (const x of files) {\n            const dec = new TextDecoder;\n            args[x.type] = dec.decode(x.file.buffer());\n        }\n\n        if (!(\"id\" in args)) {\n            throw new Error(\"expected a file of type 'id' when unserializing ExperimentHub dataset\"); \n        }\n        return new ExperimentHubDataset(args.id, options);\n    }\n}\n","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n      _cache.set(Class, Wrapper);\n    }\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","/**\n * Representation of a HTTP response error.\n * The error message is captured in `message` as usual, but the HTTP status code may also be retrieved via the `statusCode` property.\n */\nexport class HttpError extends Error {\n    constructor(message, code) {\n        super(message);\n        this.statusCode = code;\n    }\n}\n\nexport async function checkHttpResponse(res, msg) {\n    if (res.ok) {\n        return;\n    }\n\n    let info = await res.json();\n    if (info.status == \"error\") {\n        throw new HttpError(msg + \"; \" + info.reason, res.status);\n    } \n\n    throw new HttpError(msg, res.status);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as markers from \"./utils/markers.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as rna_norm_module from \"./rna_normalization.js\";\nimport * as adt_norm_module from \"./adt_normalization.js\";\nimport * as crispr_norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"custom_selections\";\n\n/************************\n ****** Internals *******\n ************************/\n\nclass SelectionManager {\n    constructor(selections = null, cache = null) {\n        this._selections = (selections == null ? {} : selections);\n        this._cache = (cache == null ? { results: {} } : cache);\n    }\n\n    #liberate(i) {\n        for (const [k, v] of Object.entries(this._cache.results[i].raw)) {\n            v.free();                                                \n        }\n    }\n\n    free() {\n        utils.freeCache(this._cache.buffer);\n        delete this._cache.buffer;\n\n        for (const k of Object.keys(this._cache.results)) {\n            this.#liberate(k);\n        }\n        this._cache.results = {};        \n\n        markers.freeVersusResults(this._cache.versus);\n        delete this._cache.versus;\n    }\n\n    addSelection(id, selection, to_use, matfun, block, copy, lfc_threshold, compute_auc) {\n        let mat = matfun(to_use[0]);\n        let ncells = mat.numberOfColumns();\n        utils.checkIndices(selection, ncells);\n\n        // Assumes that we have at least one cell in and outside the selection!\n        var buffer = utils.allocateCachedArray(ncells, \"Int32Array\", this._cache);\n        buffer.fill(0);\n        var tmp = buffer.array();\n        selection.forEach(element => { tmp[element] = 1; });\n\n        let res = {};\n        for (const k of to_use) {\n            let mat = matfun(k);\n            res[k] = scran.scoreMarkers(mat, buffer, { block: block, lfcThreshold: lfc_threshold, computeAuc: compute_auc }); \n        }\n              \n        // Removing previous results, if there were any.\n        if (id in this._cache.results) {\n            this.#liberate(id);\n        }\n      \n        this._cache.results[id] = { \"raw\": res };\n\n        // making a copy to take ownership.\n        if (copy) {\n            selection = selection.slice();\n        }\n        this._selections[id] = selection;\n        return;\n    }\n\n    removeSelection(id) {\n        this.#liberate(id);\n        delete this._cache.results[id];\n        delete this._selections[id];\n        return;\n    }\n\n    fetchResults(id) {\n        return this._cache.results[id].raw;\n    }\n\n    fetchSelectionIndices(id, { copy = true } = {}) {\n        let raw = this._selections[id];\n        if (copy) {\n            raw = raw.slice();\n        }\n        return raw;\n    }\n\n    fetchSelections({ copy = true, force = null } = {}) {\n        let replacement = {};\n\n        for (const [k, v] of Object.entries(this._selections)) {\n            let store = v;\n            let needs_copy = copy;\n\n            if (force !== null) {\n                if (force == \"Array\") {\n                    if (!(v instanceof Array)) {\n                        store = Array.from(v);\n                        needs_copy = false;\n                    }\n                } else if (force == \"Int32Array\") {\n                    if (!(v instanceof Int32Array)) {\n                        store = new Int32Array(v);\n                        needs_copy = false;\n                    }\n                }\n            } \n\n            if (needs_copy) {\n                store = store.slice();\n            }\n            replacement[k] = store;\n        }\n        return replacement;        \n    }\n\n    computeVersus(left, right, to_use, matfun, block, lfc_threshold, compute_auc) {\n        if (!(\"versus\" in this._cache)) {\n            this._cache[\"versus\"] = {};\n        }\n        let cache = this._cache.versus;\n\n        let cache_info = markers.locateVersusCache(left, right, cache);\n        let left_index = (cache_info.left_small ? 0 : 1);\n        let right_index = (cache_info.left_small ? 1 : 0);\n\n        if (cache_info.run) {\n            // No need to free this afterwards; we don't own the normalized matrices anyway.\n            let matrices = new scran.MultiMatrix;\n            for (const modality of to_use) {\n                matrices.add(modality, matfun(modality));\n            }\n\n            let selections = this._selections;\n            if (!(left in selections && right in selections)) {\n                throw new Error(\"invalid selection ID requested in versus mode\");\n            }\n\n            let leftsel = selections[left];\n            let rightsel = selections[right];\n            if (leftsel.length == 0 || rightsel.length == 0) {\n                throw new Error(\"non-zero entries should be present for both requested selections in versus mode\");\n            }\n\n            let triplets = [];\n            leftsel.forEach(x => {\n                triplets.push({ \"index\": x, \"cluster\": left_index });\n            });\n            rightsel.forEach(x => {\n                triplets.push({ \"index\": x, \"cluster\": right_index });\n            });\n\n            triplets.sort((a, b) => a.index - b.index);\n            let keep = triplets.map(x => x.index);\n            let new_clusters = triplets.map(x => x.cluster);\n            markers.computeVersusResults(matrices, new_clusters, block, keep, cache_info.cached, lfc_threshold, compute_auc);\n        }\n\n        return { \n            results: cache_info.cached,\n            left: left_index,\n            right: right_index\n        };\n    }\n}\n\n/********************\n ****** State *******\n ********************/\n\n/**\n * Applications can perform marker detection on custom selections of cells.\n * This allows users to dynamically select cells on a UI and quickly obtain a list of distinguishing markers for that selection.\n * This wraps the [`scoreMarkers`](https://kanaverse.github.io/scran.js/global.html#scoreMarkers) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Users should not construct these instances manually; instead, they are automatically assembled by {@linkcode createAnalysis}.\n * Similarly, users should not directly call the {@linkcode CustomSelectionsCore#compute compute} method, which is instead invoked by {@linkcode runAnalysis}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CustomSelectionsState {\n    #filter;\n    #norm_states;\n\n    #manager;\n    #parameters;\n\n    constructor(filter, norm_states, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm_states.RNA instanceof rna_norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm_states.RNA' should be an RnaNormalizationState object\");\n        }\n        if (!(norm_states.ADT instanceof adt_norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm_states.ADT' should be an AdtNormalizationState object\");\n        }\n        if (!(norm_states.CRISPR instanceof crispr_norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm_states.CRISPR' should be an CrisprNormalizationState object\");\n        }\n        this.#norm_states = norm_states;\n\n        let selections = null;\n        if (parameters !== null && \"selections\" in parameters) {\n            selections = parameters.selections;\n        }\n\n        this.#manager = new SelectionManager(selections, cache);\n        this.#parameters = {};\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        this.#manager.free();\n        return;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return {\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        };\n    }\n\n    /**\n     * Add a custom selection and compute its markers.\n     * It is assumed that {@linkcode runAnalysis} was already run on this instance before calling this method.\n     *\n     * @param {string} id A unique identifier for the new custom selection.\n     * @param {Array|TypedArray} selection The indices of the cells in the selection.\n     * Indices should refer to positions of cells in the QC-filtered matrix, not the original matrix.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to make a copy of `selection` before storing it inside this object.\n     * If `false`, it is assumed that the caller makes no further modifications to the passed `selection`.\n     *\n     * @return The custom selection is added to the state and calculation of its markers is performed.\n     * Nothing is returned.\n     */\n    addSelection(id, selection, { copy = true } = {}) {\n        this.#addSelection(id, selection, copy, this.#parameters.lfc_threshold, this.#parameters.compute_auc);\n    }\n\n    #addSelection(id, selection, copy, lfc_threshold, compute_auc) {\n        let to_use = utils.findValidUpstreamStates(this.#norm_states);\n        this.#manager.addSelection(\n            id, \n            selection, \n            to_use, \n            modality => this.#norm_states[modality].fetchNormalizedMatrix(),\n            this.#filter.fetchFilteredBlock(),\n            copy,\n            lfc_threshold,\n            compute_auc\n        );\n        return;\n    }\n\n    /**\n     * Remove a custom selection and its results from the state.\n     *\n     * @param {string} id - An identifier for the selection to be removed.\n     *\n     * @return The specified selection and its results are removed from the state.\n     * Nothing is returned.\n     */\n    removeSelection(id) {\n        this.#manager.removeSelection(id);\n        return;\n    }\n\n    /**\n     * @param {string} id - An identifier for the desired selection.\n     *\n     * @return {object} Object containing the markers for the desired selection.\n     * Each key is a modality name while each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object,\n     * containing the marker detection results across all features of the corresponding modality.\n     * The set of cells in the selection is denoted as group 1, while all cells outside of the selection are denoted as group 0.\n     */\n    fetchResults(id) {\n        return this.#manager.fetchResults(id);\n    }\n\n    /**\n     * Retrieve the indices for a selection of interest.\n     *\n     * @param {string} id - The identifier for the selection.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to make a copy of `selection` before returning it.\n     * If `false`, it is assumed that the caller does not modify the selection.\n     *\n     * @return {Array|TypedArray} Array of indices in the requested selection.\n     * Note that indices are relative to the filtered matrix - \n     * use {@linkcode CellFilteringState#undoFiltering CellFilteringState.undoFiltering} to convert them to indices on the original dataset.\n     */\n    fetchSelectionIndices(id, { copy = true } = {}) {\n        return this.#manager.fetchSelectionIndices(id, { copy });\n    }\n\n    /**\n     * Retrieve indices for all selections.\n     *\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to make a copy of `selection` before returning it.\n     * If `false`, it is assumed that the caller does not modify the selection.\n     * @param {?string} [force=null] - Whether to force each `selection` to be an `\"Array\"` or \"`Int32Array\"`.\n     * If `null`, the existing type of each selection is used.\n     *\n     * @return {object} Object where the keys are the selection names and the values are arrays of indices for each selection.\n     * Each array is a copy and can be modified without affecting the CustomSelectionsState.\n     * See {@linkcode CustomSelectionsState#fetchSelectionIndices fetchSelectionIndices} for more details on the interpretation of the indices.\n     */\n    fetchSelections({ copy = true, force = null } = {}) {\n        return this.#manager.fetchSelections({ copy, force });\n    }\n\n    /**\n     * @param {object} parameters - Parameter object, equivalent to the `custom_selections` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.lfc_threshold - Log-fold change threshold to use when computing the Cohen's d and AUC for each pairwise comparison.\n     * @param {boolean} parameters.compute_auc - Whether to compute the AUCs.\n     * Setting this to `false` will skip AUC calculations and improve speed and memory efficiency.\n     *\n     * @return The state is updated by removing stale selections if the QC filter was altered.\n     */\n    compute(parameters) {\n        let { lfc_threshold, compute_auc } = parameters;\n        this.changed = false;\n\n        /* If the QC filter was re-run, all of the selections are invalidated as\n         * the identity of the indices may have changed.\n         */\n        if (this.#filter.changed) {\n            this.#manager.free();\n            this.#manager = new SelectionManager;\n            this.changed = true;\n        }\n\n        /* If the parameters changed, we recompute all the per-selection markers.\n         * Technically we would need to re-run detection on the existing selections\n         * if the normalization changed but the QC was the same. In practice, this\n         * never happens, so we'll deal with it later.\n         */\n        if (lfc_threshold !== this.#parameters.lfc_threshold || compute_auc != this.#parameters.compute_auc) {\n            for (const [key, value] of Object.entries(this.#manager._selections)) {\n                this.#addSelection(key, value, false, lfc_threshold, compute_auc);\n            }\n            this.#parameters.lfc_threshold = lfc_threshold;\n            this.#parameters.compute_auc = compute_auc;\n            this.changed = true;\n        }\n\n        return;\n    }\n\n    /**\n     * @return {object} Default parameters that may be modified and fed into {@linkcode MarkerDetectionCore#compute compute}.\n     */\n    static defaults() {\n        return {\n            lfc_threshold: 0,\n            compute_auc: true\n        };\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two selections for more detailed examination of the differences between them.\n     *\n     * @param {string} left - Identifier of one selection in which to find upregulated markers.\n     * @param {string} right - Identifier of another selection to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two clusters.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` selection in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` selection are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` selection in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `right` selection are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        let to_use = utils.findValidUpstreamStates(this.#norm_states);\n        return this.#manager.computeVersus(\n            left, \n            right, \n            to_use,\n            modality => this.#norm_states[modality].fetchNormalizedMatrix(),\n            this.#filter.fetchFilteredBlock(),\n            this.#parameters.lfc_threshold,\n            this.#parameters.compute_auc\n        );\n    }\n}\n\n/*************************\n ****** Standalone *******\n *************************/\n\n/**\n * Standalone version of {@linkplain CustomSelectionsState} that provides the same functionality outside of {@linkcode runAnalysis}.\n * Users can supply their own normalized matrices and blocking factor to compute the various marker statistics for each custom selection.\n * Users are also responsible for ensuring that the lifetime of the supplied objects exceeds that of the constructed CustomSelectionsStandalone instance,\n * i.e., the Wasm-related `free()` methods are not called while the MarkerDetectionStandalone instance is still in operation.\n */\nexport class CustomSelectionsStandalone {\n    #normalized;\n    #block;\n    #block_levels;\n\n    #manager;\n    #parameters;\n\n    #missing_map;\n\n    /**\n     * @param {external:MultiMatrix} normalized - A {@linkplain external:MultiMatrix MultiMatrix} of log-normalized values for multiple modalities.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.block=null] - Array of length equal to the number of columns in any value of `normalized`, containing the block assignments for each column.\n     * If `null`, all columns are assigned to the same block.\n     */\n    constructor(normalized, { block = null } = {}) {\n        let N = null;\n        for (const k of normalized.available()) {\n            let alt = normalized.get(k).numberOfColumns();\n            if (N != null) {\n                if (alt != N) {\n                    throw new Error(\"all matrices in 'normalized' should have the same number of columns as the length of 'groups'\");\n                }\n            } else {\n                N = alt;\n            }\n        }\n\n        this.#block = null;\n        this.#block_levels = null;\n        this.#missing_map = null;\n\n        if (block !== null) {\n            if (block.length != N) {\n                throw new Error(\"'block' should have the same length as the number of columns in each entry of 'normalized'\");\n            }\n\n            let dump = utils.subsetInvalidFactors([ block ]);\n            if (dump.retain !== null) {\n                let revmap = new Int32Array(N);\n                revmap.fill(-1);\n                dump.retain.forEach((y, i) => { revmap[y] = i; });\n                this.#missing_map = { to: revmap, from: dump.retain };\n\n                let new_matrices = new scran.MultiMatrix;\n                let temp = scran.createInt32WasmArray(dump.retain.length);\n                try {\n                    temp.set(dump.retain);\n                    for (const k of normalized.available()) {\n                        new_matrices.add(k, scran.subsetColumns(normalized.get(k), temp))\n                    }\n                } catch (e) {\n                    scran.free(new_matrices);\n                    throw e;\n                } finally {\n                    scran.free(temp);\n                }\n\n                this.#normalized = new_matrices;\n            } else {\n                this.#normalized = normalized.clone();\n            }\n\n            this.#block = dump.arrays[0].ids;\n            this.#block_levels = dump.arrays[0].levels;\n        } else {\n            this.#normalized = normalized.clone();\n        }\n\n        this.#manager = new SelectionManager;\n        this.#parameters = CustomSelectionsState.defaults();\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        this.#manager.free();\n        return;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return {\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the blocking factor.\n     * Block indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchBlockLevels({ copy = true } = {}) {\n        let ret = this.#block_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    // Testing functions to check that the sanitization worked correctly.\n    _peekMatrices() {\n        return this.#normalized;\n    }\n\n    _peekBlock() {\n        return this.#block;\n    }\n\n    /**\n     * If this method is not called, the parameters default to those in {@linkcode CustomSelectionsState#defaults CustomSelectionsState.defaults}.\n     *\n     * @param {object} parameters - Parameter object, see the argument of the same name in {@linkcode CustomSelectionsState#compute CustomSelectionsState.compute} for more details.\n     *\n     * @return The state is updated with the new parameters.\n     */\n    setParameters(parameters) {\n        if (this.#parameters.lfc_threshold !== parameters.lfc_threshold || this.#parameters.compute_auc !== parameters.compute_auc) {\n            this.free();\n        }\n        this.#parameters = parameters;\n        return;\n    }\n\n    /**\n     * Add a custom selection and compute its markers.\n     * Users should run {@linkcode CustomSelectionsCore#compute compute} at least once before calling this function.\n     *\n     * @param {string} id - A unique identifier for the new custom selection.\n     * @param {Array|TypedArray} selection - The indices of the cells in the selection.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to make a copy of `selection` before storing it inside this object.\n     * If `false`, it is assumed that the caller makes no further modifications to the passed `selection`.\n     *\n     * @return The custom selection is added to the state and calculation of its markers is performed.\n     * Nothing is returned.\n     */\n    addSelection(id, selection, { copy = true } = {}) {\n        let selection_internal = selection;\n\n        // Removing the invalid observations.\n        if (this.#missing_map !== null) { \n            let collected = [];\n            let revmap = this.#missing_map.to;\n            for (const i of selection) {\n                let j = revmap[i];\n                if (j >= 0) {\n                    collected.push(j);\n                }\n            }\n            selection_internal = collected;\n        }\n\n        this.#manager.addSelection(\n            id, \n            selection_internal,\n            this.#normalized.available(),\n            modality => this.#normalized.get(modality),\n            this.#block,\n            copy,\n            this.#parameters.lfc_threshold,\n            this.#parameters.compute_auc\n        );\n\n        return;\n    }\n\n    /**\n     * Remove a custom selection and its results from the state.\n     *\n     * @param {string} id - An identifier for the selection to be removed.\n     *\n     * @return The specified selection and its results are removed from the state.\n     * Nothing is returned.\n     */\n    removeSelection(id) {\n        this.#manager.removeSelection(id);\n        return;\n    }\n\n    /**\n     * @param {string} id - An identifier for the desired selection.\n     *\n     * @return {object} Object containing the markers for the desired selection.\n     * Each key is a modality name while each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object,\n     * containing the marker detection results across all features of the corresponding modality.\n     * The set of cells in the selection is denoted as group 1, while all cells outside of the selection are denoted as group 0.\n     */\n    fetchResults(id) {\n        return this.#manager.fetchResults(id);\n    }\n\n    #unmap(ids) {\n        // Restoring the indices after adjusting for the invalid observations,\n        // so that users get back indices relative to the input matrices.\n        if (this.#missing_map !== null) {\n            ids.forEach((x, i) => {\n                ids[i] = this.#missing_map.from[x];\n            });\n        }\n        return;\n    }\n\n    /**\n     * Retrieve the indices for a selection of interest.\n     *\n     * @param {string} id - The identifier for the selection.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to make a copy of `selection` before returning it.\n     * If `false`, it is assumed that the caller does not modify the selection.\n     *\n     * @return {Array|TypedArray} Array of indices in the requested selection.\n     */\n    fetchSelectionIndices(id, { copy = true } = {}) {\n        let output = this.#manager.fetchSelectionIndices(id, { copy });\n        this.#unmap(output);\n        return output;\n    }\n\n    /**\n     * Retrieve indices for all selections.\n     *\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to make a copy of `selection` before returning it.\n     * If `false`, it is assumed that the caller does not modify the selection.\n     * @param {?string} [force=null] - Whether to force each `selection` to be an `\"Array\"` or \"`Int32Array\"`.\n     * If `null`, the existing type of each selection is used.\n     *\n     * @return {object} Object where the keys are the selection names and the values are arrays of indices for each selection.\n     * Each array is a copy and can be modified without affecting the CustomSelectionsState.\n     */\n    fetchSelections({ copy = true, force = null } = {}) {\n        let output = this.#manager.fetchSelections({ copy, force });\n        for (const [k, v] of Object.entries(output)) {\n            this.#unmap(v);\n        }\n        return output;\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two selections, \n     * for more detailed examination of the differences between them.\n     *\n     * @param {string} left - Identifier of one selection in which to find upregulated markers.\n     * @param {string} right - Identifier of another selection to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two clusters.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` selection in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` selection are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` selection in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `right` selection are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        return this.#manager.computeVersus(\n            left, \n            right, \n            this.#normalized.available(),\n            modality => this.#normalized.get(modality),\n            this.#block,\n            this.#parameters.lfc_threshold,\n            this.#parameters.compute_auc\n        );\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nfunction fill_results(stats) {\n    let ngenes = stats.means.length;\n    let object = scran.emptyScoreMarkersResults(ngenes, \n        /* number of groups */ 2, \n        /* number of blocks */ 1,\n        { computeAuc: (\"auc\" in stats) }\n    );\n\n    object.means(1, { fillable: true }).set(stats.means);\n    object.detected(1, { fillable: true }).set(stats.detected);\n\n    for (const index of Object.values(markers.summaries2int)) {\n        object.cohen(1, { summary: index, fillable: true }).set(stats.cohen);\n        object.lfc(1, { summary: index, fillable: true }).set(stats.lfc);\n        object.deltaDetected(1, { summary: index, fillable: true }).set(stats.delta_detected);\n        if (\"auc\" in stats) {\n            object.auc(1, { summary: index, fillable: true }).set(stats.auc);\n        }\n    }\n\n    return object;\n}\n\nexport function unserialize(handle, permuters, filter, norm_states) {\n    let ghandle = handle.open(\"custom_selections\");\n\n    let parameters = CustomSelectionsState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        if (\"lfc_threshold\" in phandle.children) {\n            parameters.lfc_threshold = phandle.open(\"lfc_threshold\", { load: true }).values[0];\n        }\n        if (\"compute_auc\" in phandle.children) {\n            parameters.compute_auc = phandle.open(\"compute_auc\", { load: true }).values[0] > 0;\n        }\n\n        parameters.selections = {};\n        let shandle = phandle.open(\"selections\");\n        for (const key of Object.keys(shandle.children)) {\n            let vals = shandle.open(key, { load: true }).values;\n\n            // v1 wasn't sorted, so we make sure to sort things.\n            for (var i = 1; i < vals.length; i++) {\n                if (vals[i] < vals[i-1]) {\n                    vals.sort();\n                    break;\n                }\n            }\n\n            parameters.selections[key] = vals;\n        }\n    }\n\n    let cache = { results: {} };\n    {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"markers\" in rhandle.children) {\n            // before v2.0\n            let mhandle = rhandle.open(\"markers\");\n            for (const sel of Object.keys(mhandle.children)) {\n                let current = markers.unserializeGroupStats(mhandle.open(sel), permuters[\"RNA\"], { no_summaries: true, compute_auc: parameters.compute_auc });\n                cache.results[sel] = { raw: { RNA: fill_results(current) } };\n            }\n        } else {\n            // after v2.0.\n            let phandle = rhandle.open(\"per_selection\");\n            for (const sel of Object.keys(phandle.children)) {\n                let shandle = phandle.open(sel);\n                let collected = {};\n                for (const feat of Object.keys(shandle.children)) {\n                    let current = markers.unserializeGroupStats(shandle.open(feat), permuters[feat], { no_summaries: true, compute_auc: parameters.compute_auc });\n                    collected[feat] = fill_results(current);\n                }\n                cache.results[sel] = { raw: collected };\n            }\n        }\n    }\n\n    return new CustomSelectionsState(filter, norm_states, parameters, cache);\n}\n\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as gesel from \"gesel\";\n\nimport * as utils from \"./utils/general.js\";\nimport * as mutils from \"./utils/markers.js\";\nimport * as rutils from \"../readers/index.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\nimport * as markers_module from \"./marker_detection.js\";\n\nexport const step_name = \"feature_set_enrichment\";\n\n/****************************\n ******** Internals *********\n ****************************/\n\nclass FeatureSetManager {\n    #cache;\n\n    constructor() {\n        this.#cache = {};\n    }\n\n    free() {\n        utils.freeCache(this.#cache.set_buffer);\n        this.#cache = {};\n    }\n\n    static flush() {\n        // TODO: call a gesel flush() function.\n        return;\n    }\n\n    static setDownload(fun) {\n        console.warn(\"'FeatureSetState.setDownload' is a no-op, uses 'gesel.setReferenceDownload' and 'gesel.setGeneDownload' instead\");\n        return;\n    }\n\n    async prepare(feats, species, gene_id_column, gene_id_type) {\n        let data_id_col;\n        if (gene_id_column == null) {\n            data_id_col = feats.rowNames();\n            if (data_id_col == null) {\n                // If there truly is no annotation, then we avoid throwing,\n                // and we just make the rest of this function a no-op.\n                species = []; \n            }\n        } else {\n            data_id_col = feats.column(gene_id_column);\n        }\n\n        let search_options = { types: [ gene_id_type.toLowerCase() ] };\n\n        // To avoid repeated rellocations on array resizing, we create\n        // preallocated arrays within each species and then do a single COMBINE\n        // across species. We provide an initial element so that COMBINE works\n        // correctly when there are no species.\n        let collection_offset = 0;\n        let all_collection_names = [[]];\n        let all_collection_descriptions = [[]];\n        let all_collection_species = [[]];\n\n        let set_offset = 0;\n        let all_set_names = [[]];\n        let all_set_descriptions = [[]];\n        let all_set_indices = [[]];\n        let all_set_sizes = [new Int32Array];\n        let all_set_collections = [new Int32Array];\n\n        let mapped_genes = new Set;\n        let remapped = new Array(feats.numberOfRows());\n        for (var r = 0; r < remapped.length; r++) {\n            remapped[r] = [];\n        }\n\n        for (const spec of species) {\n            // Mapping our features to those in the gesel database. \n            let gene_mapping = await gesel.searchGenes(spec, data_id_col, search_options);\n            for (var i = 0; i < gene_mapping.length; i++) {\n                if (gene_mapping[i].length > 0) {\n                    mapped_genes.add(i);\n                }\n            }\n\n            // Formatting the details for each set. This includes reindexing\n            // the gesel gene IDs to refer to row indices of 'feats'.\n            let all_sets2genes = await gesel.fetchGenesForAllSets(spec);\n            let set_indices = gesel.reindexGenesForAllSets(gene_mapping, all_sets2genes);\n\n            let all_sets = await gesel.fetchAllSets(spec);\n            let nsets = all_sets.length;\n            let set_names = new Array(nsets);\n            let set_descriptions = new Array(nsets);\n            let set_sizes = new Int32Array(nsets);\n            let set_collections = new Int32Array(nsets);\n\n            for (var i = 0; i < nsets; i++) {\n                let current = all_sets[i];\n                set_names[i] = current.name;\n                set_descriptions[i] = current.description;\n                set_collections[i] = current.collection + collection_offset; // offset effectively \"namespaces\" collections from different species.\n                set_sizes[i] = set_indices[i].length;\n            }\n\n            all_set_names.push(set_names);\n            all_set_descriptions.push(set_descriptions);\n            all_set_indices.push(set_indices);\n            all_set_sizes.push(set_sizes);\n            all_set_collections.push(set_collections);\n\n            // Updating the gene->set mapping for input features.\n            let all_genes2sets = await gesel.fetchSetsForAllGenes(spec);\n            let current_remapped = gesel.reindexSetsForAllGenes(gene_mapping, all_genes2sets);\n            for (var i = 0; i < gene_mapping.length; i++) {\n                let current = current_remapped[i];\n                for (var j = 0; j < current.length; j++) {\n                    current[j] += set_offset; // offset effectively \"namespaces\" sets from different species.\n                }\n                remapped[i].push(current);\n            }\n\n            // Sticking the collection details somewhere.\n            let all_collections = await gesel.fetchAllCollections(spec);\n            let ncollections = all_collections.length;\n            let collection_names = new Array(ncollections);\n            let collection_descriptions = new Array(ncollections);\n            let collection_species = new Array(ncollections);\n\n            for (var i = 0; i < ncollections; i++) {\n                collection_names[i] = all_collections[i].title;\n                collection_descriptions[i] = all_collections[i].description;\n                collection_species[i] = spec;\n            }\n\n            all_collection_names.push(collection_names);\n            all_collection_descriptions.push(collection_descriptions);\n            all_collection_species.push(collection_species);\n\n            set_offset += nsets;\n            collection_offset += ncollections;\n        }\n\n        this.#cache.universe = (new Int32Array(mapped_genes)).sort();\n\n        this.#cache.sets = {\n            names: bioc.COMBINE(all_set_names),\n            descriptions: bioc.COMBINE(all_set_descriptions),\n            sets: bioc.COMBINE(all_set_indices),\n            sizes: bioc.COMBINE(all_set_sizes),\n            collections: bioc.COMBINE(all_set_collections)\n        };\n\n        this.#cache.collections = {\n            names: bioc.COMBINE(all_collection_names),\n            descriptions: bioc.COMBINE(all_collection_descriptions),\n            species: bioc.COMBINE(all_collection_species)\n        };\n\n        if (species.length > 0) {\n            for (var r = 0; r < remapped.length; r++) {\n                remapped[r] = bioc.COMBINE(remapped[r]);\n            }\n        } else {\n            for (var r = 0; r < remapped.length; r++) {\n                remapped[r] = new Uint32Array;\n            }\n        }\n        this.#cache.mapping_to_sets = remapped;\n\n        return;\n    }\n\n    fetchCollectionDetails() {\n        return this.#cache.collections;\n    }\n\n    fetchSetDetails() {\n        return { \n            names: this.#cache.sets.names,\n            descriptions: this.#cache.sets.descriptions,\n            sizes: this.#cache.sets.sizes,\n            collections: this.#cache.sets.collections\n        };\n    }\n\n    fetchUniverseSize() {\n        return this.#cache.universe.length;\n    }\n\n    computeEnrichment(group, effect_size, summary, markers, top_markers) {\n        if (effect_size == \"delta_detected\") {\n            effect_size = \"deltaDetected\";\n        }\n\n        // Avoid picking down-regulated genes in the marker set.\n        let min_threshold = effect_size == \"auc\" ? 0.5 : 0;\n\n        // Larger is better except for 'min_rank'.\n        let use_largest = effect_size !== \"min_rank\"; \n        let sumidx = mutils.summaries2int[summary];\n\n        let stats = markers[effect_size](group, { summary: sumidx, copy: false });\n        let curstats = bioc.SLICE(stats, this.#cache.universe);\n        let threshold = scran.computeTopThreshold(curstats, top_markers, { largest: use_largest });\n\n        let in_set = [];\n        let add = i => {\n            let gene = this.#cache.universe[i];\n            in_set.push(this.#cache.mapping_to_sets[gene]);\n        };\n\n        if (use_largest) {\n            if (threshold < min_threshold) {\n                threshold = min_threshold;\n            }\n            curstats.forEach((x, i) => {\n                if (x >= threshold) {\n                    add(i);\n                }\n            });\n        } else {\n            curstats.forEach((x, i) => {\n                if (x <= threshold) {\n                    add(i);\n                }\n            });\n        }\n\n        let overlaps = gesel.countSetOverlaps(in_set);\n        let set_ids = new Int32Array(overlaps.length);\n        let counts = new Int32Array(overlaps.length);\n        let sizes = new Int32Array(overlaps.length);\n        let indices = new Int32Array(overlaps.length);\n        for (var i = 0; i < overlaps.length; i++) {\n            indices[i] = i;\n            let x = overlaps[i];\n            set_ids[i] = x.id;\n            counts[i] = x.count;\n            sizes[i] = this.#cache.sets.sizes[x.id];\n        }\n\n        let num_top = in_set.length;\n        let pvalues = scran.hypergeometricTest(counts, num_top, sizes, this.#cache.universe.length);\n        indices.sort((a, b) => pvalues[a] - pvalues[b]); // Sorting by p-value.\n        return {\n            set_ids: bioc.SLICE(set_ids, indices),\n            counts: bioc.SLICE(counts, indices),\n            pvalues: bioc.SLICE(pvalues, indices),\n            num_markers: num_top\n        };\n    }\n\n    fetchFeatureSetIndices(set_id) {\n        return this.#cache.sets.sets[set_id];\n    }\n\n    computePerCellScores(set_id, normalized, block) {\n        let indices = this.fetchFeatureSetIndices(set_id);\n        // console.log(bioc.SLICE(this.#inputs.fetchFeatureAnnotations().RNA.column(\"id\"), indices));\n\n        let features = utils.allocateCachedArray(normalized.numberOfRows(), \"Uint8Array\", this.#cache, \"set_buffer\");\n        features.fill(0);\n        let farr = features.array();\n        indices.forEach(x => { farr[x] = 1; }); \n\n        return scran.scoreFeatureSet(normalized, features, { block: block });\n    }\n}\n\n// More internal functions, mostly related to wrangling with parameters.\n\nfunction _configureFeatureParameters(guesses) {\n    let best_key = null;\n    let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n    if (\"row_names\" in guesses) {\n        let val = guesses.row_names;\n        if (val.confidence > best.confidence) {\n            best = val;\n        }\n    }\n\n    for (const [key, val] of Object.entries(guesses.columns)) {\n        if (val.confidence > best.confidence) {\n            best = val;\n            best_key = key;\n        }\n    }\n\n    return {\n        gene_id_column: best_key,\n        gene_id_type: best.type.toUpperCase(),\n        species: [best.species]\n    };\n}\n\nasync function _buildCollections(old_parameters, manager, automatic, species, gene_id_column, gene_id_type, annofun, guessfun) {\n    if (\n        automatic !== old_parameters.automatic ||\n        (\n            !automatic && \n            (\n                old_parameters.gene_id_column !== gene_id_column || \n                old_parameters.gene_id_type !== gene_id_type ||\n                utils.changedParameters(old_parameters.species, species)\n            )\n        )\n    ) {\n        let gene_id_column2 = gene_id_column;\n        let gene_id_type2 = gene_id_type;\n        let species2 = species;\n\n        if (automatic) {\n            let auto = _configureFeatureParameters(guessfun());\n            gene_id_column2 = auto.gene_id_column;\n            gene_id_type2 = auto.gene_id_type;\n            species2 = auto.species;\n        }\n\n        await manager.prepare(annofun(), species2, gene_id_column2, gene_id_type2);\n        return true;\n    }\n\n    return false;\n}\n\nfunction _transplantParameters(parameters, automatic, species, gene_id_column, gene_id_type, top_markers) {\n    parameters.automatic = automatic;\n    parameters.species = bioc.CLONE(species); // make a copy to avoid pass-by-ref behavior.\n    parameters.gene_id_column = gene_id_column;\n    parameters.gene_id_type = gene_id_type;\n    parameters.top_markers = top_markers;\n}\n\nfunction _fetchParameters(parameters) {\n    // Avoid pass-by-reference behavior.\n    let out = { ...parameters };\n    out.species = bioc.CLONE(out.species);\n    return out;\n}\n\n/************************\n ******** State *********\n ************************/\n\n/**\n * This step tests for enrichment of particular feature sets in the set of top marker genes,\n * based on marker rankings from {@linkplain MarkerDetectionState}.\n * It wraps the [`testFeatureSetEnrichment`](https://kanaverse.github.io/scran.js/global.html#testFeatureSetEnrichment) \n * and [`scoreFeatureSet`](https://kanaverse.github.io/scran.js/global.html#scoreFeatureSet) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * This class uses the [**gesel**](https://npmjs.org/package/gesel) package to download the default gene set databases for the relevant organisms.\n * Its behavior can be tuned by setting global **gesel** variables, e.g., using the [`referenceDownload`](https://ltla.github.io/gesel/global.html#referenceDownload) function.\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class FeatureSetEnrichmentState {\n    #inputs;\n    #filter;\n    #normalized;\n\n    #parameters;\n    #manager;\n\n    constructor(inputs, filter, normalized, markers, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(normalized instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'normalized' should be a RnaNormalizationState object from './rna_normalization.js'\");\n        }\n        this.#normalized = normalized;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#manager = new FeatureSetManager;\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        this.#manager.free();\n        return; \n    }\n\n    valid() {\n        let mat = this.#inputs.fetchCountMatrix();\n        return mat.has(\"RNA\");\n    }\n\n    /**\n     * Obtain the details about the feature set collections in the reference database.\n     * It is assumed that {@linkcode runAnalysis} was already run on this FeatureSetEnrichmentState instance before calling this method.\n     *\n     * @return {object} Object with the following properties:\n     *\n     * - `names`: Array of strings of length equal to the number of feature set collections, containing the names of the collections.\n     * - `descriptions`: Array of strings of length equal to `names`, containing the descriptions for all collections.\n     * - `species`: Array of strings of length equal to `names`, containing the taxonomy IDs for all collections.\n     */\n    fetchCollectionDetails() {\n        return this.#manager.fetchCollectionDetails();\n    }\n\n    /**\n     * Obtain the details about the feature sets in the reference database.\n     * It is assumed that {@linkcode runAnalysis} was already run on this FeatureSetEnrichmentState instance before calling this method.\n     *\n     * @return {object} Object with the following properties:\n     *\n     * - `names`: Array of strings of length equal to the number of feature sets across all collections, containing the names of those sets.\n     * - `descriptions`: Array of strings of length equal to `names`, containing the set descriptions.\n     * - `sizes`: Int32Array of length equal to `names`, containing the set sizes.\n     *   Each set's size is defined as the number of features in the dataset that are successfully mapped to a member of the set.\n     * - `collections`: Int32Array of length equal to `names`, specifying the collection to which the set belongs.\n     *   This is interpreted as the index of the arrays in {@linkcode fetchCollectionDetails}.\n     */\n    fetchSetDetails() {\n        return this.#manager.fetchSetDetails();\n    }\n\n    /**\n     * Obtain the size of the universe of features that were successfully mapped to features in the reference database.\n     * It is assumed that {@linkcode runAnalysis} was already run on this FeatureSetEnrichmentState instance before calling this method.\n     *\n     * @return {number} Number of features from the input dataset that were successfully mapped to at least one gene in the reference database.\n     */\n    fetchUniverseSize() {\n        return this.#manager.fetchUniverseSize();\n    }\n\n    /**\n     * Compute enrichment of top markers in each feature set.\n     * It is assumed that {@linkcode runAnalysis} was already run on this FeatureSetEnrichmentState instance before calling this method.\n     *\n     * @param {external:ScoreMarkersResults} markers - Arbitrary marker detection results for an RNA modality, with the same order and identity of genes as from the upstream {@linkplain InputsState}.\n     * This is most typically the output from {@linkcode MarkerDetectionState#fetchResults MarkerDetectionState.fetchResults} or equivalents from {@linkplain CustomSelectionsState}.\n     * @param {number} group - Index of the group of interest inside `markers`.\n     * @param {string} effect_size - Effect size to use for ranking.\n     * This should be one of `\"cohen\"`, `\"auc\"`, `\"lfc\"` or `\"delta_detected\"`.\n     * @param {string} summary - Summary statistic to use for ranking.\n     * This should be one of `\"min\"`, `\"mean\"` or `\"min_rank\"`.\n     *\n     * @return {object} Object containing the following properties:\n     *\n     * - `set_ids`: Int32Array of length equal to the number of sets, containing the set IDs.\n     *   Each entry is an index into the arrays returned by {@linkcode FeatureSetEnrichmentState#fetchSetDetails fetchSetDetails}.\n     * - `counts`: Int32Array of length equal to `set_ids`, containing the number of markers present in each set.\n     * - `pvalues`: Float64Array of length equal to `counts`, containing the enrichment p-values for each set.\n     * - `num_markers`: number of markers selected for testing.\n     *\n     * Sets are guaranteed to be sorted by increasing p-value in `pvalues`.\n     */\n    computeEnrichment(markers, group, effect_size, summary) {\n        return this.#manager.computeEnrichment(group, effect_size, summary, markers, this.#parameters.top_markers);\n    }\n\n    /**\n     * Extract row indices of the members of a desired feature set of interest.\n     * It is assumed that {@linkcode runAnalysis} was already run on this FeatureSetEnrichmentState instance before calling this method.\n     *\n     * @param {number} set_id - Feature set ID, defined as an index into the arrays returned by {@linkcode FeatureSetEnrichmentState#fetchSetDetails fetchSetDetails}.\n     *\n     * @return {Int32Array} Array containing the row indices of the RNA count matrix corresponding to the genes in the specified set.\n     */\n    fetchFeatureSetIndices(set_id) {\n        return this.#manager.fetchFeatureSetIndices(set_id);\n    }\n\n    /**\n     * Compute per-cell scores for the activity of a feature set.\n     * It is assumed that {@linkcode runAnalysis} was already run on this FeatureSetEnrichmentState instance before calling this method.\n     *\n     * @param {number} set_id - Feature set ID, defined as an index into the arrays returned by {@linkcode FeatureSetEnrichmentState#fetchSetDetails fetchSetDetails}.\n     *\n     * @return {Object} Object containing:\n     *\n     * - `indices`: Int32Array containing the row indices of the genes in the set, relative to the RNA count matrix.\n     * - `weights`: Float64Array containing the weights of each gene in the set.\n     * - `scores`: Float64Array containing the feature set score for each cell.\n     */\n    computePerCellScores(set_id) {\n        return this.#manager.computePerCellScores(set_id, this.#normalized.fetchNormalizedMatrix(), this.#filter.fetchFilteredBlock());\n    }\n\n    // Soft-deprecated.\n    fetchPerCellScores(collection, set_index) {\n        return this.computePerCellScores(collection, set_index);\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return _fetchParameters(this.#parameters);\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    /**\n     * @return {object} Default parameters that may be modified and fed into {@linkcode FeatureSetEnrichmentState#compute compute}.\n     */\n    static defaults() {\n        return {\n            skip: false,\n            automatic: true,\n            species: [],\n            gene_id_column: null, \n            gene_id_type: \"ENSEMBL\", \n            top_markers: 100\n        };\n    }\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    static flush() {\n        return;\n    }\n\n    static setDownload(fun) {\n        return FeatureSetManager.setDownload(fun);\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `feature_set_enrichment` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.skip - Whether to skip the preparation of feature set collections.\n     * If `true`, none of the other methods (e.g., {@linkcode computeEnrichment}, {@linkcode computePerCellScores}) should be called.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If `true`, the column of the annotation that best matches human/mouse Ensembl/symbols is identified and used to set `species`, `gene_id_column`, `gene_id_type`.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species involved in this dataset.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode FeatureSetEnrichmentState#availableCollections availableCollections}.\n     * This is used internally to filter `collections` to the entries relevant to these species. \n     * Ignored if `automatic = true`.\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the RNA entry of {@linkcode InputsState#fetchFeatureAnnotations InputsState.fetchFeatureAnnotations} containing the identity of each gene. \n     * If `null`, identifiers are taken from the row names.\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Type of feature identifier in `gene_id_column`.\n     * This should be one of `\"ENSEMBL\"`, `\"SYMBOL\"` or `\"ENTREZ\"`\n     * Ignored if `automatic = true`.\n     * @param {number} parameters.top_markers - Number of top markers to use when testing for enrichment.\n     *\n     * @return The state is updated with new results.\n     */\n    async compute(parameters) {\n        this.changed = false;\n        if (this.#inputs.changed) {\n            this.changed = true;\n        }\n\n        let { skip, automatic, species, gene_id_column, gene_id_type, top_markers } = parameters;\n        if (skip !== this.#parameters.skip) {\n            this.changed = true;\n        }\n\n        if (this.valid() && !skip) {\n            if (this.changed) { // Force an update.\n                this.#parameters = {};\n            }\n\n            let modified = await _buildCollections(\n                this.#parameters, \n                this.#manager,\n                automatic, \n                species, \n                gene_id_column, \n                gene_id_type, \n                () => this.#inputs.fetchFeatureAnnotations()[\"RNA\"],\n                () => this.#inputs.guessRnaFeatureTypes()\n            );\n            if (modified) {\n                this.changed = true;\n            }\n\n            if (top_markers !== this.#parameters.top_markers) {\n                this.changed = true;\n            }\n        }\n\n        _transplantParameters(this.#parameters, automatic, species, gene_id_column, gene_id_type, top_markers);\n        this.#parameters.skip = skip;\n        return;\n    }\n}\n\n/*****************************\n ******** Standalone *********\n *****************************/\n\n/**\n * Standalone version of {@linkplain FeatureSetEnrichmentState} that provides the same functionality outside of {@linkcode runAnalysis}.\n * Users can supply their own annotation and marker results to compute the enrichment statistics for each group.\n * Users are also responsible for ensuring that the lifetime of the supplied objects exceeds that of the constructed instance,\n * i.e., the Wasm-related `free()` methods of the inputs are not called while the FeatureSetEnrichmentInstance is still in operation.\n *\n * Users should await on the return value of the {@linkcode FeatureSetEnrichmentStandalone#ready ready} method after construction.\n * Once resolved, other methods in this class may be used.\n *\n * This class uses the [**gesel**](https://npmjs.org/package/gesel) package to download the default gene set databases for the relevant organisms.\n * Its behavior can be tuned by setting global **gesel** variables, e.g., using the [`referenceDownload`](https://ltla.github.io/gesel/global.html#referenceDownload) function.\n */\nexport class FeatureSetEnrichmentStandalone {\n    #annotations;\n    #guesses;\n\n    #normalized;\n    #block;\n    #backmap;\n\n    #parameters;\n    #manager;\n\n    /**\n     * @param {external:DataFrame} annotations - A {@linkplain external:DataFrame DataFrame} of per-gene annotations, where each row corresponds to a gene.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(external:ScranMatrix)} [options.normalized=null] - A {@linkcode external:ScranMatrix ScranMatrix} of log-normalized expression values,\n     * to be used in {@linkcode FeatureSetEnrichmentStandalone#computePerCellScores FeatureSetEnrichmentStandalone.computePerCellScores}.\n     * Each row corresponds to a gene in the same order as `annotations`. \n     * @param {?(Array|TypedArray)} [options.block=null] - Array of length equal to the number of columns in `normalized`, containing the block assignments for each column. \n     * If `null`, all columns are assigned to the same block.\n     */\n    constructor(annotations, { normalized = null, block = null } = {}) {\n        this.#annotations = annotations;\n        this.#guesses = null;\n\n        this.#normalized = null;\n        this.#block = null;\n        this.#backmap = null;\n\n        if (normalized !== null) {\n            if (normalized.numberOfRows() !== this.#annotations.numberOfRows()) {\n                throw new Error(\"number of rows of 'annotations' and 'normalized' should be identical\");\n            }\n\n            if (block !== null) {\n                if (normalized.numberOfColumns() !== block.length) {\n                    throw new Error(\"number of columns of 'normalized' should equal the length of 'block'\");\n                }\n\n                let dump = utils.subsetInvalidFactors([ block ]);\n                if (dump.retain !== null) {\n                    this.#normalized = scran.subsetColumns(normalized, dump.retain);\n                    this.#backmap = dump.retain;\n                } else {\n                    this.#normalized = normalized.clone();\n                }\n\n                this.#block = dump.arrays[0].ids;\n            } else {\n                this.#normalized = normalized.clone();\n            }\n        }\n\n        this.#parameters = FeatureSetEnrichmentState.defaults();\n        this.#manager = null;\n    }\n\n    #guessFeatureTypes() {\n        if (this.#guesses == null) {\n            this.#guesses = utils.guessFeatureTypes(this.#annotations);\n        }\n        return this.#guesses;\n    }\n\n    // Testing functions to check that the sanitization worked correctly.\n    _peekMatrices() {\n        return this.#normalized;\n    }\n\n    _peekBlock() {\n        return this.#block;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        scran.free(this.#block);\n        scran.free(this.#normalized);\n        this.#manager.free();\n        return; // nothing extra to free here.\n    }\n\n    /**\n     * If this method is not called, the parameters default to those in {@linkcode FeatureSetEnrichmentState#defaults FeatureSetEnrichmentState.defaults}.\n     *\n     * @param {object} parameters - Parameter object, see the argument of the same name in {@linkcode FeatureSetEnrichmentState#compute FeatureSetEnrichmentState.compute} for more details.\n     * Note that any `skip` property is ignored here.\n     *\n     * @return The object is updated with new parameters.\n     * Note that the {@linkcode FeatureSetEnrichmentStandalone#ready ready} method should be called in order for the new parameters to take effect.\n     */\n    setParameters(parameters) {\n        let { automatic, species, gene_id_column, gene_id_type, top_markers } = parameters;\n        _transplantParameters(this.#parameters, automatic, species, gene_id_column, gene_id_type, top_markers);\n    }\n\n    /**\n     * This should be called after construction and/or {@linkcode FeatureSetEnrichmenStandalone#setParameters setParameters}. \n     * Users should wait for the return value to resolve before calling any other methods of this class.\n     * \n     * @return Feature set collections are loaded into memory. \n     * @async\n     */\n    async ready() {\n        let { automatic, species, gene_id_column, gene_id_type, top_markers } = this.#parameters;\n\n        let params = this.#parameters;\n        let init = this.#manager == null;\n        if (init) {\n            this.#manager = new FeatureSetManager; \n            params = {}; // trigger _buildCollections to run if the parameters have not changed from the defaults.\n        }\n\n        await _buildCollections(\n            params,\n            this.#manager,\n            automatic, \n            species, \n            gene_id_column, \n            gene_id_type, \n            () => this.#annotations,\n            () => this.#guessFeatureTypes()\n        );\n\n        if (!init) {\n            _transplantParameters(this.#parameters, automatic, species, gene_id_column, gene_id_type, top_markers);\n        }\n    }\n\n    /**\n     * Obtain the details about the feature set collections in the reference database.\n     * It is assumed that the {@linkcode FeatureSetEnrichmenStandalone#ready ready} method has already resolved before calling this method.\n     *\n     * @return {object} Object containing the details about the available feature set collections,\n     * see {@linkcode FeatureSetEnrichmentState#fetchCollectionDetails FeatureSetEnrichmentState.fetchCollectionDetails} for more details.\n     */\n    fetchCollectionDetails() {\n        return this.#manager.fetchCollectionDetails();\n    }\n\n    /**\n     * Obtain the details about the feature sets in the reference database.\n     * It is assumed that the {@linkcode FeatureSetEnrichmenStandalone#ready ready} method has already resolved before calling this method.\n     *\n     * @return {object} Object containing the details about the available feature sets,\n     * see {@linkcode FeatureSetEnrichmentState#fetchSetDetails FeatureSetEnrichmentState.fetchSetDetails} for more details.\n     */\n    fetchSetDetails() {\n        return this.#manager.fetchSetDetails();\n    }\n\n    /**\n     * Obtain the size of the universe of features that were successfully mapped to features in the reference database.\n     * It is assumed that the {@linkcode FeatureSetEnrichmenStandalone#ready ready} method has already resolved before calling this method.\n     *\n     * @return {number} Number of features from the input dataset that were successfully mapped to at least one gene in the reference database.\n     */\n    fetchUniverseSize() {\n        return this.#manager.fetchUniverseSize();\n    }\n\n    /**\n     * Compute enrichment of top markers in each feature set.\n     * It is assumed that the {@linkcode FeatureSetEnrichmenStandalone#ready ready} method has already resolved before calling this method.\n     *\n     * @param {external:ScoreMarkersResults} markers - Marker detection results for an RNA modality.\n     * @param {number} group - Group index of interest.\n     * @param {string} effect_size - Effect size to use for ranking.\n     * This should be one of `\"cohen\"`, `\"auc\"`, `\"lfc\"` or `\"delta_detected\"`.\n     * @param {string} summary - Summary statistic to use for ranking.\n     * This should be one of `\"min\"`, `\"mean\"` or `\"min_rank\"`.\n     *\n     * @return {object} Object containing statistics for the enrichment of the top marker genes in each feature set.\n     * See {@linkcode FeatureSetEnrichmentState#computeEnrichment FeatureSetEnrichmentState.computeEnrichment} for more details.\n     */\n    computeEnrichment(markers, group, effect_size, summary) {\n        return this.#manager.computeEnrichment(group, effect_size, summary, markers, this.#parameters.top_markers);\n    }\n\n    /**\n     * Extract row indices of the members of a desired feature set of interest.\n     * It is assumed that the {@linkcode FeatureSetEnrichmenStandalone#ready ready} method has already resolved before calling this method.\n     *\n     * @param {number} set_id - Feature set ID, defined as an index into the arrays returned by {@linkcode FeatureSetEnrichmentStandlone#fetchSetDetails fetchSetDetails}.\n     *\n     * @return {Int32Array} Array containing the row indices of the RNA count matrix corresponding to the genes in the specified set.\n     */\n    fetchFeatureSetIndices(set_id) {\n        return this.#manager.fetchFeatureSetIndices(set_id);\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return _fetchParameters(this.#parameters);\n    }\n\n    /**\n     * Compute per-cell scores for the activity of a feature set.\n     * It is assumed that the {@linkcode FeatureSetEnrichmenStandalone#ready ready} method has already resolved before calling this method.\n     *\n     * @param {number} set_id - Feature set ID, defined as an index into the arrays returned by {@linkcode FeatureSetEnrichmentStandlone#fetchSetDetails fetchSetDetails}.\n     *\n     * @return {Object} Object containing the per-cell scores for the feature set activity.\n     * See {@linkcode FeatureSetEnrichmentState#computePerCellScores FeatureSetEnrichmentState.computePerCellScores} for more details.\n     */\n    computePerCellScores(set_id) {\n        if (this.#normalized == null) {\n            throw new Error(\"no normalized matrix supplied in constructor\");\n        }\n\n        let output = this.#manager.computePerCellScores(set_id, this.#normalized, this.#block);\n\n        if (this.#backmap !== null) {\n            let backfilled = new Float64Array(output.scores.length);\n            backfilled.fill(Number.NaN);\n            this.#backmap.forEach((x, i) => {\n                backfilled[x] = output.scores[i];\n            });\n            output.scores = backfilled;\n        }\n\n        return output;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, filter, normalized, markers) {\n    let parameters = {};\n    let cache = {};\n\n    // Protect against old analysis states that don't have cell_labelling.\n    if (\"feature_set_enrichment\" in handle.children) {\n        let ghandle = handle.open(\"feature_set_enrichment\");\n\n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.collections = phandle.open(\"collections\", { load: true }).values;\n            for (const k of [ \"gene_id_column\", \"gene_id_type\", \"top_markers\" ]) {\n                parameters[k] = phandle.open(k, { load: true }).values[0];\n            }\n        }\n    }\n\n    return new FeatureSetEnrichmentState(inputs, filter, normalized, markers, parameters, cache);\n}\n","import * as inputs from \"./steps/inputs.js\";\nimport * as qc from \"./steps/rna_quality_control.js\";\nimport * as qcadt from \"./steps/adt_quality_control.js\";\nimport * as qccrispr from \"./steps/crispr_quality_control.js\";\nimport * as filter from \"./steps/cell_filtering.js\";\nimport * as norm from \"./steps/rna_normalization.js\";\nimport * as normadt from \"./steps/adt_normalization.js\";\nimport * as normcrispr from \"./steps/crispr_normalization.js\";\nimport * as pca from \"./steps/rna_pca.js\";\nimport * as pcaadt from \"./steps/adt_pca.js\";\nimport * as pcacrispr from \"./steps/crispr_pca.js\";\nimport * as combine from \"./steps/combine_embeddings.js\";\nimport * as correct from \"./steps/batch_correction.js\";\nimport * as index from \"./steps/neighbor_index.js\";\nimport * as snngraph from \"./steps/snn_graph_cluster.js\";\nimport * as markers from \"./steps/marker_detection.js\";\nimport * as custom from \"./steps/custom_selections.js\";\nimport * as enrichment from \"./steps/feature_set_enrichment.js\";\nimport * as labelling from \"./steps/cell_labelling.js\";\n\n/**\n * Generate an object containing all of the default analysis parameters.\n *\n * @return An object where each property corresponds to an analysis step and contains the default parameters for that step.\n * See the documentation for each step's `compute` method for more details:\n * \n * - {@linkcode InputsState#compute inputs}\n * - {@linkcode RnaQualityControlState#compute rna_quality_control}\n * - {@linkcode AdtQualityControlState#compute adt_quality_control}\n * - {@linkcode CrisprQualityControlState#compute crispr_quality_control}\n * - {@linkcode CellFiltering#compute cell_filtering}\n * - {@linkcode RnaNormalizationState#compute rna_normalization}\n * - {@linkcode AdtNormalizationState#compute adt_normalization}\n * - {@linkcode CrisprNormalizationState#compute crispr_normalization}\n * - {@linkcode FeatureSelectionState#compute feature_selection}\n * - {@linkcode RnaPcaState#compute rna_pca}\n * - {@linkcode AdtPcaState#compute adt_pca}\n * - {@linkcode CrisprPcaState#compute crispr_pca}\n * - {@linkcode NeighborIndexState#compute neighbor_index}\n * - {@linkcode TsneState#compute tsne}\n * - {@linkcode UmapState#compute umap}\n * - {@linkcode KmeansClusterState#compute kmeans_cluster}\n * - {@linkcode SnnGraphClusterState#compute snn_graph_cluster}\n * - {@linkcode ChooseClusteringState#compute choose_clustering}\n * - {@linkcode CellLabellingState#compute cell_labelling}\n * - {@linkcode FeatureSetEnrichmentState#compute feature_set_enrichment}\n *\n * See also {@linkcode configureBatchCorrection} and {@linkcode configureApproximateNeighbors} to synchronize certain parameter settings across multiple steps.\n */\nexport function analysisDefaults() {\n    var output = {\n        feature_selection: {\n            span: 0.3\n        },\n        combine_embeddings: {\n            weights: null\n        },\n        batch_correction: {\n            method: \"none\"\n        },\n        tsne: {\n            perplexity: 30,\n            iterations: 500,\n            animate: false\n        },\n        umap: {\n            num_neighbors: 15,\n            num_epochs: 500,\n            min_dist: 0.1,\n            animate: false\n        },\n        kmeans_cluster: {\n            k: 10\n        },\n        choose_clustering: {\n            method: \"snn_graph\"\n        }\n    };\n\n    output[inputs.step_name] = inputs.InputsState.defaults();\n\n    output[qc.step_name] = qc.RnaQualityControlState.defaults();\n    output[qcadt.step_name] = qcadt.AdtQualityControlState.defaults();\n    output[qccrispr.step_name] = qccrispr.CrisprQualityControlState.defaults();\n    output[filter.step_name] = filter.CellFilteringState.defaults();\n\n    output[norm.step_name] = norm.RnaNormalizationState.defaults();\n    output[normadt.step_name] = normadt.AdtNormalizationState.defaults();\n    output[normcrispr.step_name] = normcrispr.CrisprNormalizationState.defaults();\n\n    output[pca.step_name] = pca.RnaPcaState.defaults();\n    output[pcaadt.step_name] = pcaadt.AdtPcaState.defaults();\n    output[pcacrispr.step_name] = pcacrispr.CrisprPcaState.defaults();\n\n    output[combine.step_name] = combine.CombineEmbeddingsState.defaults();\n    output[correct.step_name] = correct.BatchCorrectionState.defaults();\n\n    output[index.step_name] = index.NeighborIndexState.defaults();\n    output[snngraph.step_name] = snngraph.SnnGraphClusterState.defaults();\n\n    output[markers.step_name] = markers.MarkerDetectionState.defaults();\n    output[custom.step_name] = custom.CustomSelectionsState.defaults();\n\n    output[enrichment.step_name] = enrichment.FeatureSetEnrichmentState.defaults();\n    output[labelling.step_name] = labelling.CellLabellingState.defaults();\n\n    return output;\n}\n\nconst correctible_pca_steps = [pca.step_name, pcaadt.step_name, pcacrispr.step_name];\n\n/**\n * Set the batch correction parameters across multiple steps.\n * This is a convenient helper as the correction process is split across the PCA and batch correction steps.\n * For MNN, we need to weight by block in the {@linkplain PcaState} before performing MNN correction in {@linkplain BatchCorrectionState};\n * for linear regression, we need to regress by block in {@linkplain PcaState} without any additional correctioni in {@linkplain BatchCorrectionState};\n * and for no correction, we need to turn off any block handling in {@linkplain PcaState}as well as removing any additional correction in {@linkplain BatchCorrectionState}.\n *\n * @param {object} parameters Object containing parameters for all steps, e.g., from {@linkcode analysisDefaults}.\n * @param {string} method Correction method to perform, one of `\"mnn\"`, \"`regress\"` or `\"none\"`.\n * \n * @return `parameters` is modified with appropriate parameters in `batch_correction`, `pca` and `adt_pca`.\n */\nexport function configureBatchCorrection(parameters, method) {\n    let correct_method;\n    let pca_blocker;\n\n    if (method == \"mnn\") {\n        correct_method = method;\n        pca_blocker = \"weight\";\n    } else if (method == \"regress\") {\n        correct_method = \"none\";\n        pca_blocker = method;\n    } else if (method == \"none\") {\n        correct_method = method;\n        pca_blocker = method;\n    } else {\n        throw new Error(\"unknown correction method '\" + method + \"'\");\n    }\n\n    parameters[correct.step_name].method = correct_method;\n    for (const x of correctible_pca_steps) {\n        parameters[x].block_method = pca_blocker;\n    }\n\n    return parameters;\n}\n\n/**\n * Guess the `method` value from {@linkcode configureBatchCorrection} based on the parameter object.\n * This effectively consolidates the various correction parameters into a single setting.\n *\n * @param {object} parameters - Object containing parameters for all steps, typically after {@linkcode configureBatchCorrection}.\n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.strict] - Whether to only report the `method` when the set of parameters modified by {@linkcode configureBatchCorrection} are consistent.\n *\n * @return {?string} One of `\"mnn\"`, `\"regress\"` or `\"none\"`, based on the expected set of modifications from {@linkcode configureBatchCorrection}.\n * If `strict = false` and there is no exact match to the expected set, the most appropriate method is returned;\n * otherwise, if `strict = true`, `null` is returned.\n */\nexport function guessBatchCorrectionConfig(parameters, { strict = false } = {}) {\n    let pca_blockers = new Set(correctible_pca_steps.map(x => parameters[x].block_method));\n\n    let resp;\n    if (parameters[correct.step_name].method == \"mnn\") {\n        resp = \"mnn\";\n        if (strict) {\n            if (pca_blockers.size > 1 || !pca_blockers.has(\"weight\")) {\n                resp = null;\n            }\n        }\n    } else {\n        if (pca_blockers.has(\"regress\")) {\n            if (strict && pca_blockers.size > 1) {\n                resp = null;\n            } else {\n                resp = \"regress\";\n            }\n        } else if (pca_blockers.has(\"none\")) {\n            if (strict && pca_blockers.size > 1) {\n                resp = null;\n            } else {\n                resp = \"none\";\n            }\n        } else {\n            // If pca block_methods are set to 'weight',\n            // this doesn't really correspond to anything,\n            // but is closest to 'none'.\n            if (strict) {\n                resp = null;\n            } else {\n                resp = \"none\";\n            }\n        }\n    }\n\n    return resp;\n}\n\nconst approximatable_steps = [correct.step_name, combine.step_name, index.step_name];\n\n/**\n * Specify whether approximate neighbor searches should be performed across all affected steps.\n * This is a convenient helper as it is generally unnecessary to switch between exact and approximate searches in different steps.\n * Affected steps are {@linkplain BatchCorrectionState}, {@linkplain CombineEmbeddingsState} and {@linkplain NeighborIndexState}.\n *\n * @param {object} parameters Object containing parameters for all steps, e.g., from {@linkcode analysisDefaults}.\n * @param {boolean} approximate Whether to perform approximate nearest neighbor searces.\n * \n * @return `parameters` is modified with appropriate parameters in relevant steps, e.g., `batch_correction`, `combine_embeddings` and `neighbor_index`.\n */\nexport function configureApproximateNeighbors(parameters, approximate) {\n    for (const step of approximatable_steps) {\n        parameters[step].approximate = approximate;\n    }\n    return parameters;\n}\n\n/**\n * Guess the value of `approximate` from {@linkcode configureApproximateNeighbors} based on the parameter object.\n * This effectively consolidates the various approximation parameters into a single setting.\n *\n * @param {object} parameters - Object containing parameters for all steps, typically after {@linkcode configureApproximateNeighbors}.\n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.strict] - Whether to only report `approximate` when the set of parameters modified by {@linkcode configureApproximateNeighbors} are consistent.\n *\n * @return {?boolean} Whether or not approximate neighbor search was used.\n * If `strict = false` and there is a mixture of approximate and exact matches, an approximate search is reported;\n * otherwise, if `strict = true`, `null` is returned.\n */\nexport function guessApproximateNeighborsConfig(parameters, { strict = false } = {}) {\n    let approximates = new Set(approximatable_steps.map(x => parameters[x].approximate));\n    if (strict && approximates.size > 1) {\n        return null;\n    } else {\n        return approximates.has(true);\n    }\n}\n","import * as scran from \"scran.js\";\n\nimport * as inputs from \"./steps/inputs.js\";\n\nimport * as qc from \"./steps/rna_quality_control.js\";\nimport * as qcadt from \"./steps/adt_quality_control.js\";\nimport * as qccrispr from \"./steps/crispr_quality_control.js\";\nimport * as filters from \"./steps/cell_filtering.js\";\n\nimport * as normalization from \"./steps/rna_normalization.js\";\nimport * as normadt from \"./steps/adt_normalization.js\";\nimport * as normcrispr from \"./steps/crispr_normalization.js\";\n\nimport * as variance from \"./steps/feature_selection.js\";\n\nimport * as pca from \"./steps/rna_pca.js\";\nimport * as pcaadt from \"./steps/adt_pca.js\";\nimport * as pcacrispr from \"./steps/crispr_pca.js\";\nimport * as combine from \"./steps/combine_embeddings.js\";\nimport * as correct from \"./steps/batch_correction.js\";\n\nimport * as index from \"./steps/neighbor_index.js\";\nimport * as cluster_choice from \"./steps/choose_clustering.js\";\nimport * as kmeans_cluster from \"./steps/kmeans_cluster.js\";\nimport * as snn_cluster from \"./steps/snn_graph_cluster.js\";\n\nimport * as tsne from \"./steps/tsne.js\";\nimport * as umap from \"./steps/umap.js\";\n\nimport * as cluster_markers from \"./steps/marker_detection.js\";\nimport * as label_cells from \"./steps/cell_labelling.js\";\nimport * as custom_markers from \"./steps/custom_selections.js\";\n\nimport * as feature_set_enrichment from \"./steps/feature_set_enrichment.js\";\n\nimport { FORMAT_VERSION } from \"./abstract/utils/serialize.js\";\n\nexport { setCreateLink, setResolveLink } from \"./steps/inputs.js\";\nexport { MarkerDetectionState } from \"./steps/marker_detection.js\";\nexport { CustomSelectionsState } from \"./steps/custom_selections.js\";\n\nconst step_inputs = inputs.step_name;\nconst step_qc = qc.step_name;\nconst step_qc_adt = qcadt.step_name;\nconst step_qc_crispr = qccrispr.step_name;\nconst step_filter = filters.step_name;\nconst step_norm = normalization.step_name;\nconst step_norm_adt = normadt.step_name;\nconst step_norm_crispr = normcrispr.step_name;\nconst step_feat = \"feature_selection\";\nconst step_pca = pca.step_name;\nconst step_pca_adt = pcaadt.step_name;\nconst step_pca_crispr = pcacrispr.step_name;\nconst step_combine = \"combine_embeddings\";\nconst step_correct = \"batch_correction\";\nconst step_neighbors = index.step_name;\nconst step_tsne = \"tsne\";\nconst step_umap = \"umap\";\nconst step_kmeans = \"kmeans_cluster\";\nconst step_snn = snn_cluster.step_name;\nconst step_choice = \"choose_clustering\";\nconst step_markers = cluster_markers.step_name;\nconst step_labels = \"cell_labelling\";\nconst step_custom = custom_markers.step_name;\nconst step_enrichment = feature_set_enrichment.step_name;\n\nconst load_flag = \"_loaded\";\n\n/**\n * Create a new analysis state in preparation for calling {@linkcode runAnalysis}.\n * Multiple states can be created and used interchangeably within the same Javascript runtime.\n *\n * @return A promise that resolves to an object containing states for all analysis steps.\n * This object can be used as input into {@linkcode runAnalysis}.\n */\nexport async function createAnalysis() {\n    return create_analysis(new inputs.InputsState);\n}\n\nfunction create_analysis(input_state) {\n    let output = {};\n    output[step_inputs] = input_state;\n\n    output[step_qc] = new qc.RnaQualityControlState(output[step_inputs]);\n    output[step_qc_adt] = new qcadt.AdtQualityControlState(output[step_inputs]);\n    output[step_qc_crispr] = new qccrispr.CrisprQualityControlState(output[step_inputs]);\n\n    let qc_states = { \"RNA\": output[step_qc], \"ADT\": output[step_qc_adt], \"CRISPR\": output[step_qc_crispr] }\n    output[step_filter] = new filters.CellFilteringState(output[step_inputs], qc_states);\n\n    output[step_norm] = new normalization.RnaNormalizationState(output[step_qc], output[step_filter]);\n    output[step_norm_adt] = new normadt.AdtNormalizationState(output[step_qc_adt], output[step_filter]);\n    output[step_norm_crispr] = new normcrispr.CrisprNormalizationState(output[step_qc_crispr], output[step_filter]);\n\n    output[step_feat] = new variance.FeatureSelectionState(output[step_filter], output[step_norm]);\n\n    output[step_pca] = new pca.RnaPcaState(output[step_filter], output[step_norm], output[step_feat]);\n    output[step_pca_adt] = new pcaadt.AdtPcaState(output[step_filter], output[step_norm_adt]);\n    output[step_pca_crispr] = new pcacrispr.CrisprPcaState(output[step_filter], output[step_norm_crispr]);\n\n    let pca_states = { \"RNA\": output[step_pca], \"ADT\": output[step_pca_adt], \"CRISPR\": output[step_pca_crispr] }\n    output[step_combine] = new combine.CombineEmbeddingsState(pca_states);\n    output[step_correct] = new correct.BatchCorrectionState(output[step_filter], output[step_combine]);\n\n    output[step_neighbors] = new index.NeighborIndexState(output[step_correct]);\n\n    output[step_tsne] = new tsne.TsneState(output[step_neighbors]);\n    output[step_umap] = new umap.UmapState(output[step_neighbors]);\n\n    output[step_kmeans] = new kmeans_cluster.KmeansClusterState(output[step_correct]);\n    output[step_snn] = new snn_cluster.SnnGraphClusterState(output[step_neighbors]);\n    output[step_choice] = new cluster_choice.ChooseClusteringState(output[step_snn], output[step_kmeans]);\n\n    let norm_states = { \"RNA\": output[step_norm], \"ADT\": output[step_norm_adt], \"CRISPR\": output[step_norm_crispr] };\n    output[step_markers] = new cluster_markers.MarkerDetectionState(output[step_filter], norm_states, output[step_choice]);\n    output[step_labels] = new label_cells.CellLabellingState(output[step_inputs], output[step_markers]);\n    output[step_enrichment] = new feature_set_enrichment.FeatureSetEnrichmentState(output[step_inputs], output[step_filter], output[step_norm]);\n    output[step_custom] = new custom_markers.CustomSelectionsState(output[step_filter], norm_states);\n\n    return Promise.all([output[step_tsne].ready(), output[step_umap].ready()]).then(val => output);\n}\n\n/**\n * Free the contents of an analysis state.\n * This releases memory on the **scran.js** Wasm heap and terminates any workers associated with this analysis.\n *\n * @param state An existing analysis state, produced by {@linkcode createAnalysis} or {@linkcode loadAnalysis}.\n *\n * @return A promise that resolves to `null` when all states are freed.\n */\nexport function freeAnalysis(state) {\n    let promises = [];\n    for (const [k, v] of Object.entries(state)) {\n        if (k == load_flag) {\n            continue;\n        }\n        let p = v.free();\n        if (p) { // not null, not undefined.\n            promises.push(p); \n        }\n    }\n    return Promise.all(promises).then(x => null);\n}\n\n/**\n * Run a basic single-cell RNA-seq analysis with the specified files and parameters.\n * This will cache the results from each step so that, if the parameters change, only the affected steps will be rerun.\n *\n * @param {object} state - Object containing the analysis state, produced by {@linkcode createAnalysis} or {@linkcode loadAnalysis}.\n * @param {object} datasets - Object where each (arbitrarily named) property corresponds to an input dataset.\n * Each dataset should be a object that satisfies the {@linkplain Dataset} contract.\n *\n * Alternatively, `datasets` may be `null` if the input datasets were already loaded and cached in `state`.\n * This avoids the need to respecify the inputs after a previous call to {@linkcode runAnalysis} or from {@linkcode loadAnalysis}.\n * @param {object} params - An object containing parameters for all steps.\n * See {@linkcode analysisDefaults} for more details.\n * @param {object} [options] - Optional parameters.\n * @param {?function} [options.startFun=null] - Function that is called when each step is started.\n * This should accept a single argument - the name of the step.\n * The return value is ignored, but any promises will be awaited before the analysis proceeds to the next step.\n * If `null`, nothing is executed.\n * @param {?function} [options.finishFun=null] - Function that is called on successful execution of each step.\n * This should accept a single argument - the name of the step.\n * The return value is ignored, but any promises will be awaited before the analysis proceeds to the next step.\n * If `null`, nothing is executed.\n * \n * @return A promise that resolves to `null` when all asynchronous analysis steps are complete.\n * The contents of `state` are modified by reference to reflect the latest state of the analysis with the supplied parameters.\n */\nexport async function runAnalysis(state, datasets, params, { startFun = null, finishFun = null } = {}) {\n    let quickStart = async step => {\n        if (startFun !== null) {\n            await startFun(step);\n        }\n    }\n\n    let quickFinish = async step => {\n        if (finishFun !== null) {\n            await finishFun(step);\n        }\n    }\n\n    let promises = [];\n    let deferredQuickFinish = (step, p) => {\n        if (finishFun !== null) {\n            if (state[step].changed) {\n                p = p.then(out => finishFun(step, state[step]));\n            } else {\n                p = p.then(out => finishFun(step));\n            }\n        }\n        promises.push(p);\n    }\n\n    /*** Loading ***/\n    await quickStart(step_inputs);\n    await state[step_inputs].compute(datasets, params[step_inputs]);\n    await quickFinish(step_inputs);\n\n    if (load_flag in state) {\n        // Force recompute for all downstream steps. This avoids mixing results\n        // from different versions if we're re-running off a reloaded state; if\n        // some steps rerun, but others don't, we end up with a bastard state\n        // from possibly different versions of this pipeline. It's also\n        // difficult to guarantee that enough results were saved for use in\n        // downstream steps, given that not everything is saved to file (and\n        // indeed, the requirements of downstream steps may change in future\n        // versions). So we just keep it simple and flush the whole state.\n        state[step_inputs].changed = true;\n        delete state[load_flag];\n    }\n\n    /*** Preprocessing steps ***/\n    let basic_steps = [\n        step_qc, step_qc_adt, step_qc_crispr,\n        step_filter,\n        step_norm, step_norm_adt, step_norm_crispr,\n        step_feat,\n        step_pca, step_pca_adt, step_pca_crispr,\n        step_combine,\n        step_correct,\n        step_neighbors\n    ];\n\n    for (const step of basic_steps) {\n        await quickStart(step);\n        await state[step].compute(params[step]);\n        await quickFinish(step);\n    }\n\n    /*** Visualization ***/\n    for (const step of [ step_tsne, step_umap ]) {\n        await quickStart(step);\n        let p = state[step].compute(params[step]);\n        deferredQuickFinish(step, p);\n    }\n\n    /*** Clustering ***/\n    let method = params[step_choice][\"method\"];\n\n    await quickStart(step_kmeans);\n    state[step_kmeans].compute(method == \"kmeans\", params[step_kmeans]);\n    await quickFinish(step_kmeans);\n\n    await quickStart(step_snn);\n    state[step_snn].compute(method == \"snn_graph\", params[step_snn]);\n    await quickFinish(step_snn);\n\n    await quickStart(step_choice);\n    state[step_choice].compute(params[step_choice]);\n    await quickFinish(step_choice);\n\n    /*** Markers and labels ***/\n    let remaining = [\n        step_markers,\n        step_labels,\n        step_custom,\n        step_enrichment\n    ];\n\n    for (const step of remaining) {\n        await quickStart(step);\n        await state[step].compute(params[step]);\n        await quickFinish(step);\n    }\n\n    await Promise.all(promises);\n    return null;\n}\n\n/**\n * Retrieve analysis parameters from a state object.\n *\n * @param {object} state - Object containing the analysis state, produced by {@linkcode createAnalysis} or {@linkcode loadAnalysis}.\n *\n * @return {object} Object containing the analysis parameters for each step, similar to that created by {@linkcode analysisDefaults}.\n */\nexport function retrieveParameters(state) {\n    let params = {};\n    for (const [k, v] of Object.entries(state)) {\n        if (k == load_flag) {\n            continue;\n        }\n        params[k] = v.fetchParameters();\n    }\n    return params;\n}\n\n/**\n * Create a new analysis state object consisting of a subset of cells from an existing analysis state.\n * This assumes that the existing state already contains loaded matrix data in its `inputs` property,\n * which allows us to create a cheap reference without reloading the data into memory.\n *\n * @param {object} state - State object such as that produced by {@linkcode createAnalysis} or {@linkcode linkAnalysis}.\n * This should already contain loaded data, e.g., after a run of {@linkcode runAnalysis}.\n * @param {TypedArray|Array} indices - Array containing the indices for the desired subset of cells.\n * This should be sorted and non-duplicate.\n * Any existing subset in `state` will be overridden by `indices`.\n * @param {object} [options] - Optional parameters.\n * @param {boolean} [options.copy=true] - Whether to make a copy of `indices` before storing it inside the returned state object.\n * If `false`, it is assumed that the caller makes no further use of the passed `indices`.\n * @param {boolean} [options.onOriginal=false] - Whether `indices` contains indices on the original dataset or on the dataset in `state`.\n * This distinction is only relevant if `state` itself contains an analysis of a subsetted dataset.\n * If `false`, the `indices` are assumed to refer to the columns of the already-subsetted dataset that exists in `state`;\n * if `true`, the `indices` are assumed to refer to the columns of the original dataset from which the subset in `state` was created.\n *\n * @return {object} A state object containing loaded matrix data in its `inputs` property.\n * Note that the other steps do not have any results, so this object should be passed through {@linkcode runAnalysis} before it can be used.\n */\nexport async function subsetInputs(state, indices, { copy = true, onOriginal = false } = {}) {\n    return create_analysis(state.inputs.createDirectSubset(indices, { copy: copy, onOriginal: onOriginal }));\n}\n\n/****************************\n ********* LEGACY ***********\n ****************************/\n\n/**\n * Load an analysis state from a HDF5 state file, usually excised from a `*.kana` file.\n *\n * @param {string} path - Path to the HDF5 file containing the analysis state.\n * On browsers, this should lie inside the virtual file system of the **scran.js** module.\n * @param {function} loadFun - Function to load each embedded data file.\n * This function is typically generated by {@linkcode parseKanaFile} and has the following characteristics:\n *\n * - It should accept two arguments, `offset` and `size`.\n *   `offset` is a number containing the offset to the start of any given file in the embedded file buffer.\n *   `size` is, of course, the size of the file.\n * - It should return any argument that can be used in the {@linkplain SimpleFile} constructor.\n *   This may be a Uint8Array, a File (on browsers) or a string containing a file path (on Node.js).\n *   Alternatively, the function may return a promise that resolves to the expected values.\n *\n * Note that this function is only used if the state file at `path` contains information for embedded files; \n * otherwise, links are resolved using reader-specific functions (see {@linkcode setResolveLink} for the common use cases).\n * @param {object} [options] - Optional parameters.\n * @param {function} [options.finishFun] - Function that is called on after extracting results for each step.\n * This should accept two arguments - the name of the step and an object containing the results of that step.\n * The function may optionally be `async`.\n * If `null`, a no-op function is automatically created.\n *\n * @return An object containing the loaded analysis state.\n * This is conceptually equivalent to creating a state with {@linkcode createAnalysis} and running it through {@linkcode runAnalysis}.\n */\nexport async function loadAnalysis(path, loadFun, { finishFun = null } = {}) {\n    let state = {};\n    let handle = new scran.H5File(path);\n    let quickFun = async step => {\n        if (finishFun !== null) {\n            await finishFun(step);\n        }\n    }\n\n    /*** Loading ***/\n    let permuters;\n    {\n        let out = await inputs.unserialize(handle, loadFun);\n        state[step_inputs] = out.state;\n        permuters = out.permuters;\n        await quickFun(step_inputs);\n    }\n\n    /*** Quality control ***/\n    {\n        state[step_qc] = qc.unserialize(handle, state[step_inputs]);\n        await quickFun(step_qc);\n    }\n\n    {\n        state[step_qc_adt] = qcadt.unserialize(handle, state[step_inputs]);\n        await quickFun(step_qc_adt);\n    }\n\n    {\n        state[step_qc_crispr] = qccrispr.unserialize(handle, state[step_inputs]);\n        await quickFun(step_qc_crispr);\n    }\n\n    {\n        let qc_states = { RNA: state[step_qc], ADT: state[step_qc_adt], CRISPR: state[step_qc_crispr] };\n        state[step_filter] = filters.unserialize(handle, state[step_inputs], qc_states);\n        await quickFun(step_filter);\n    }\n\n    /*** Normalization ***/\n    {\n        state[step_norm] = normalization.unserialize(handle, state[step_qc], state[step_filter]);\n        await quickFun(step_norm);\n    }\n\n    {\n        state[step_norm_adt] = normadt.unserialize(handle, state[step_qc_adt], state[step_filter]);\n        await quickFun(step_norm_adt);\n    }\n\n    {\n        state[step_norm_crispr] = normcrispr.unserialize(handle, state[step_qc_crispr], state[step_filter]);\n        await quickFun(step_norm_crispr);\n    }\n\n    /*** Feature selection ***/\n    {\n        state[step_feat] = variance.unserialize(handle, permuters[\"RNA\"], state[step_filter], state[step_norm]);\n        await quickFun(step_feat);\n    }\n\n    /*** Dimensionality reduction ***/\n    {\n        state[step_pca] = pca.unserialize(handle, state[step_filter], state[step_norm], state[step_feat]);\n        await quickFun(step_pca);\n    }\n\n    {\n        state[step_pca_adt] = pcaadt.unserialize(handle, state[step_filter], state[step_norm_adt]);\n        await quickFun(step_pca_adt);\n    }\n\n    {\n        state[step_pca_crispr] = pcacrispr.unserialize(handle, state[step_filter], state[step_norm_crispr]);\n        await quickFun(step_pca_crispr);\n    }\n\n    {\n        let pca_states = { RNA: state[step_pca], ADT: state[step_pca_adt], CRISPR: state[step_pca_crispr] };\n        state[step_combine] = combine.unserialize(handle, pca_states);\n        await quickFun(step_combine);\n    }\n\n    {\n        state[step_correct] = correct.unserialize(handle, state[step_filter], state[step_combine]);\n        await quickFun(step_correct);\n    }\n\n    /*** Nearest neighbors ***/\n    {\n        state[step_neighbors] = index.unserialize(handle, state[step_correct]);\n        await quickFun(step_neighbors);\n    }\n\n    /*** Visualization ***/\n    {\n        state[step_tsne] = await tsne.unserialize(handle, state[step_neighbors]);\n        await quickFun(step_tsne);\n    }\n\n    {\n        state[step_umap] = await umap.unserialize(handle, state[step_neighbors]);\n        await quickFun(step_umap);\n    }\n\n    /*** Clustering ***/\n    {\n        state[step_kmeans] = kmeans_cluster.unserialize(handle, state[step_correct]);\n        await quickFun(step_kmeans);\n    }\n\n    {\n        state[step_snn] = snn_cluster.unserialize(handle, state[step_neighbors]);\n        await quickFun(step_snn);\n    }\n\n    {\n        state[step_choice] = cluster_choice.unserialize(handle, state[step_snn], state[step_kmeans]);\n        await quickFun(step_choice);\n    }\n\n    /*** Markers and labels ***/\n    let norm_states = { \"RNA\": state[step_norm], \"ADT\": state[step_norm_adt], \"CRISPR\": state[step_norm_crispr] };\n    {\n        state[step_markers] = cluster_markers.unserialize(handle, permuters, state[step_filter], norm_states, state[step_choice]);\n        await quickFun(step_markers);\n    }\n\n    {\n        state[step_labels] = label_cells.unserialize(handle, state[step_inputs], state[step_markers]);\n        await quickFun(step_labels);\n    }\n\n    {\n        state[step_enrichment] = feature_set_enrichment.unserialize(handle, state[step_inputs], state[step_filter], state[step_norm]);\n    }\n\n    {\n        state[step_custom] = custom_markers.unserialize(handle, permuters, state[step_filter], norm_states);\n        await quickFun(step_custom);\n    }\n\n    // Adding a tripwire for runAnalysis.\n    state[load_flag] = true;\n\n    return state;\n}\n","import * as aserialize from \"./abstract/serialize.js\";\nimport * as readers from \"./readers/index.js\";\nimport * as anal from \"./analysis.js\";\nimport { bakana_version } from \"./version.js\";\n\n/**\n * Format a collection of {@linkplain Dataset} objects so that they can be saved to file.\n *\n * @param {object} datasets - Object containing Dataset instances, just like that used in {@linkcode InputsState#compute InputsState.compute}.\n * @param {function} saver - Function that converts a {@linkplain SimpleFile} instance into an identifier string.\n * Specifically, it should accept three arguments:\n *\n * 1. A string containing the name of the Dataset.\n * 2. A string containing the format of the Dataset, e.g., `\"10X\"`, `\"MatrixMarket\"`.\n * 3. A SimpleFile object representing one of the files of that Dataset.\n *\n * It should then return a string that uniquely identifies this file within `datasets`.\n * The nature of this string is left to the application, e.g., it may be a file path for Node.js, a virtual file path in the browser, or some database identifier.\n * This function may be async.\n *\n * @return {object} Object containing information about the files and datasets in `datasets`.\n * @async\n */\nexport async function serializeDatasets(datasets, saver) {\n    let output = {};\n\n    for (const [key, val] of Object.entries(datasets)) {\n        let dformat = val.constructor.format();\n        let { files, options } = await val.serialize();\n\n        let current = {\n            format: dformat,\n            options: options,\n            files: []\n        };\n\n        for (const obj of files) {\n            current.files.push({\n                type: obj.type,\n                name: obj.file.name(),\n                id: await saver(key, dformat, obj.file)\n            });\n        }\n\n        output[key] = current;\n    }\n\n    return output;\n}\n\n/**\n * Unserialize dataset information into their corresponding {@linkplain Dataset} instances.\n * This assumes that {@linkcode availableReaders} has been configured for all dataset formats that might be present.\n *\n * @param {object} serialized - Object containing the output of {@linkcode serializeDatasets}.\n * @param {function} loader - Function that accepts a single argument, the identifier string produced by `saver` in {@linkcode serializeDatasets};\n * and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n * This may be async.\n *\n * @return {object} An object containing {@linkplain Dataset} instances that can be directly used in {@linkcode InputsState#compute InputsState.compute}.\n * @async\n */\nexport async function unserializeDatasets(serialized, loader) {\n    let output = {};\n    let known = readers.availableReaders;\n\n    for (const [key, val] of Object.entries(serialized)) {\n        if (!(val.format in known)) {\n            throw new Error(\"unknown dataset format '\" + val.format + \"'\");\n        }\n        let cls = readers.availableReaders[val.format];\n\n        let handles = [];\n        for (const obj of val.files) {\n            let b = await loader(obj.id);\n            let handle = new readers.SimpleFile(b, { name: obj.name }) \n            handles.push({ type: obj.type, file: handle });\n        }\n\n        output[key] = await cls.unserialize(handles, val.options);\n    }\n\n    return output;\n}\n\n/**\n * Save the analysis configuration to file, including the parameters and datasets.\n * This can be stringified and saved to file, or it can be used in {@linkcode unserializeConfiguration}.\n *\n * @param {object} state - State object produced by {@linkcode createAnalysis} and run through {@linkcode runAnalysis}.\n * @param {function} saver - Function to save files, see {@linkcode serializeDatasets} for more details.\n *\n * @return {object} Object containing the serialized analysis configuration, with the following properties:\n *\n * - `parameters`, an object containing parameters that can be used in {@linkcode runAnalysis}.\n * - `datasets`, an object containing serialized datasets that can be used in {@linkcode unserializeDatasets}.\n * - `other`, an object containing more parameters that need special handling outside of `parameters`.\n *   This typically involves calling setter functions directly on the State objects:\n *   - `inputs.direct_subset` contains a direct subset that can be used in {@linkcode InputsState#setDirectSubset InputsState.setDirectSubset} before calling {@linkcode runAnalysis}.\n *   - `custom_selections.selections` contains selections that can be used in {@linkcode CustomSelectionsState#addSelection CustomSelectionsState.addSelection} after {@linkcode runAnalysis}.\n *\n * @async\n */\nexport async function serializeConfiguration(state, saver) {\n    let parameters = anal.retrieveParameters(state);\n    let datasets = await serializeDatasets(state.inputs.fetchDatasets(), saver);\n\n    let isub = state.inputs.fetchDirectSubset({ copy: false });\n    if (isub !== null) {\n        isub = Array.from(isub);\n    }\n\n    return {\n        version: bakana_version,\n        parameters: parameters,\n        datasets: datasets,\n\n        // Other parameters that need special handling.\n        other: {\n            inputs: {\n                direct_subset: isub,\n            },\n            custom_selections: {\n                selections: state.custom_selections.fetchSelections({ force: \"Array\" })\n            }\n        }\n    };\n}\n\n/**\n * Load the analysis configuration from its serialized format.\n * This is effectively the reverse operation of {@linkcode serializeConfiguration}.\n *\n * @param {object} serialized - Configuration object produced by {@linkcode serializeConfiguration}.\n * @param {function} loader - Function to load files, see {@linkcode unserializeDatasets} for more details.\n * @param {object} [options={}] - Optional parameters.\n * @param {object} [options.state=null] - Existing state object to fill with parameters, typically created by {@linkcode createAnalysis}.\n * This may need to be specified by the caller when `state` is also required to define the `startFun` and `finishFun` callbacks.\n * If `null`, a new state object is created within this function.\n * @param {?function} [options.startFun=null] - Passed directly to {@linkcode runAnalysis}.\n * @param {?function} [options.finishFun=null] - Passed directly to {@linkcode runAnalysis}.\n *\n * @return {object} State object containing analysis results.\n * This is identical to the `state` passed into {@linkcode serializeConfiguration}.\n *\n * If `state` is supplied, it is used directly as the return value.\n * @async\n */\nexport async function unserializeConfiguration(serialized, loader, { state = null, startFun = null, finishFun = null } = {}) {\n    if (state === null) {\n        state = await anal.createAnalysis();\n    }\n\n    // Set this before running the analysis.\n    if (\"other\" in serialized && \"inputs\" in serialized.other && \"direct_subset\" in serialized.other.inputs) {\n        if (serialized.other.inputs.direct_subset !== null) {\n            state.inputs.setDirectSubset(new Int32Array(serialized.other.inputs.direct_subset));\n        }\n    }\n\n    let datasets = await unserializeDatasets(serialized.datasets, loader);\n    await anal.runAnalysis(state, datasets, serialized.parameters, { startFun, finishFun });\n\n    // Set this after the analysis is done, as the markers get computed directly.\n    if (\"other\" in serialized && \"custom_selections\" in serialized.other && \"selections\" in serialized.other.custom_selections) {\n        for (const [k, v] of Object.entries(serialized.other.custom_selections.selections)) {\n            state.custom_selections.addSelection(k, new Int32Array(v), { copy: false });\n        }\n    }\n\n    return state;\n}\n\n/****************************\n ********* LEGACY ***********\n ****************************/\n\n/**\n * Parse a `*.kana` file by extracting the HDF5 state file and returning a function to extract embeddded data files.\n *\n * @param {string|Uint8Array} input - The input `*.kana` file.\n * In general, this should be a Uint8Array containing the full file contents.\n * For Node.js, this may also be a string containing a path to the file.\n * @param {string} statePath - String containing a file path to save the HDF5 state file.\n * This will also be the path supplied to {@linkcode loadAnalysis} to load the state into memory.\n * On browsers, this will exist inside the virtual file system of the **scran.js** module.\n * @param {object} [options] - Further options. \n * For Node.js, callers can specify `stageDir`, a string containing a path to a staging directory for the extracted data files.\n *\n * @return {object|Promise<object>}\n * An object containing:\n *\n * - `version`: the version number of the `kana` format, as XXXYYYZZZ for \"X.Y.Z\".\n * - `embedded`: whether the data files are embedded in `input`. \n * - `loader`: a function that extracts each data file given its offset and size.\n *   This should be used as `loadFun` in {@linkcode loadAnalysis}.\n *   If `embedded = false`, this is set to `null` instead.\n *\n * For Node.js, a promise is returned that evaluates to the above object.\n *\n * The HDF5 state file is also written to `statePath`.\n */\nexport function parseKanaFile(input, statePath, options = {}) {\n    return aserialize.parseKanaFileInternal(input, statePath, options);\n}\n","import * as scran from \"scran.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as bioc from \"bioconductor\";\n\n// Monkey-patching these methods so that we can use these WasmArrays\n// as columns in a bioc.DataFrame.\nwa.Uint8WasmArray.prototype._bioconductor_LENGTH = function() { return this.length; };\nwa.Int32WasmArray.prototype._bioconductor_LENGTH = function() { return this.length; };\nwa.Float64WasmArray.prototype._bioconductor_LENGTH = function() { return this.length; };\n\nexport function writeHdf5DataFrame(x, path, { group = \"data\", forceBuffer = false } = {}) {\n    let metadata = {\n        \"path\": path + \"/simple.h5\",\n        \"$schema\": \"hdf5_data_frame/v1.json\",\n        \"data_frame\": {\n            \"dimensions\": [ x.numberOfRows(), x.numberOfColumns() ],\n            \"columns\": [],\n            \"row_names\": false\n        },\n        \"hdf5_data_frame\": {\n            \"group\": group\n        }\n    };\n\n    let temppath = scran.chooseTemporaryPath({ extension: \".csv.gz\" });\n    let contents = temppath;\n    let children = [];\n\n    let fhandle = scran.createNewHDF5File(temppath);\n    try {\n        let ghandle = fhandle.createGroup(group);\n\n        ghandle.writeDataSet(\"column_names\", \"String\", null, x.columnNames());\n        let rn = x.rowNames();\n        if (rn !== null) {\n            metadata.data_frame.row_names = true;\n            ghandle.writeDataSet(\"row_names\", \"String\", null, rn);\n        }\n\n        let dhandle = ghandle.createGroup(\"data\");\n        let coltypes = metadata.data_frame.columns;\n\n        for (var i = 0; i < x.numberOfColumns(); i++) {\n            const curcol = x.column(i);\n            const colname = x.columnNames()[i];\n\n            if (curcol instanceof Array) {\n                let all_types = new Set;\n                let has_null = false;\n                for (const y of curcol) {\n                    if (y === null) {\n                        has_null = true;\n                    } else {\n                        all_types.add(typeof y);\n                    }\n                }\n\n                if (all_types.size > 1) {\n                    throw new Error(\"column '\" + colname + \"' has multiple types\");\n                }\n\n                if (all_types.has(\"string\")) {\n                    coltypes.push({ name: colname, type: \"string\" });\n                    if (!has_null) {\n                        dhandle.writeDataSet(String(i), \"String\", null, curcol);\n                    } else {\n                        let contents = new Set(curcol);\n                        let placeholder = \"NA\";\n                        while (contents.has(placeholder)) {\n                            placeholder = placeholder + \"_\";\n                        }\n\n                        let copy = curcol.slice();\n                        for (var i = 0; i < copy.length; i++) {\n                            if (copy[i] === null) {\n                                copy[i] = placeholder;\n                            }\n                        }\n\n                        let shandle = dhandle.writeDataSet(String(i), \"String\", null, copy);\n                        shandle.writeAttribute(\"missing-value-placeholder\", \"String\", null, placeholder);\n                    }\n\n                } else if (all_types.has(\"number\")) {\n                    coltypes.push({ name: colname, type: \"number\" });\n                    let temp = scran.createFloat64WasmArray(curcol.length);\n                    try {\n                        if (!has_null) {\n                            temp.set(curcol);\n                        } else {\n                            let temparr = temp.array();\n                            for (var i = 0; i < curcol.length; i++) {\n                                if (curcol[i] === null) {\n                                    temparr[i] = Number.NaN;\n                                } else {\n                                    temparr[i] = curcol[i];\n                                }\n                            }\n                        }\n                        dhandle.writeDataSet(String(i), \"Float64\", null, temp);\n                    } finally {\n                        temp.free();\n                    }\n\n                } else if (all_types.size == 0 || all_types.has(\"boolean\")) {\n                    coltypes.push({ name: colname, type: \"boolean\" });\n                    if (has_null) {\n                        let temp = scran.createInt32WasmArray(curcol.length);\n                        try {\n                            for (var i = 0; i < curcol.length; i++) {\n                                if (curcol[i] === null) {\n                                    temparr[i] = -2147483648;\n                                } else {\n                                    temparr[i] = curcol[i];\n                                }\n                            }\n                            dhandle.writeDataSet(String(i), \"Int32\", null, temp);\n                        } finally {\n                            temp.free();\n                        }\n                    } else {\n                        let temp = scran.createUint8WasmArray(curcol.length);\n                        try {\n                            temp.fill(curcol);\n                            dhandle.writeDataSet(String(i), \"Uint8\", null, temp);\n                        } finally {\n                            temp.free();\n                        }\n                    }\n\n                } else {\n                    throw new Error(\"unknown type '\" + Array.from(all_types)[0] + \"' for column '\" + colname + \"'\");\n                }\n\n            } else if (curcol instanceof Uint8Array || curcol instanceof wa.Uint8WasmArray) {\n                coltypes.push({ name: colname, type: \"boolean\" });\n                dhandle.writeDataSet(String(i), \"Uint8\", null, curcol);\n                \n            } else if (curcol instanceof Int32Array || curcol instanceof wa.Int32WasmArray) {\n                coltypes.push({ name: colname, type: \"integer\" });\n                dhandle.writeDataSet(String(i), \"Int32\", null, curcol);\n\n            } else if (curcol instanceof Float64Array || curcol instanceof wa.Float64WasmArray) {\n                coltypes.push({ name: colname, type: \"number\" });\n                dhandle.writeDataSet(String(i), \"Float64\", null, curcol);\n\n            } else if (curcol instanceof bioc.DataFrame) {\n                let subpath = path + \"/column\" + String(i);\n                let child = writeHdf5DataFrame(curcol, subpath, { group, forceBuffer });\n                coltypes.push({ name: colname, type: \"other\", resource: { type: \"local\", path: child.self.metadata.path } });\n                child.self.metadata.is_child = true;\n                children.push(child.self);\n                for (const x of child.children) {\n                    children.push(x);\n                }\n\n            } else {\n                throw new Error(\"unknown type for column '\" + colname + \"'\");\n            }\n        }\n\n        if (forceBuffer) {\n            contents = scran.readFile(temppath);\n            scran.removeFile(temppath);\n        }\n    } catch (e) {\n        scran.removeFile(temppath);\n        throw e;\n    }\n\n    return {\n        self: {\n            metadata: metadata,\n            contents: contents\n        },\n        children: children\n    };\n}\n","import * as scran from \"scran.js\";\n\nexport function dumpCountMatrix(mat, path, forceBuffer) {\n    let temppath = scran.chooseTemporaryPath({ extension: \".h5\" });\n    let contents = temppath;\n\n    try {\n        scran.writeSparseMatrixToHdf5(mat, temppath, \"matrix\", { format: \"tenx_matrix\" });\n        if (forceBuffer) {\n            contents = scran.readFile(temppath);\n            scran.removeFile(temppath);\n        }\n    } catch (e) {\n        scran.removeFile(temppath);\n        throw e;\n    }\n\n    return {\n        metadata: {\n            \"$schema\": \"hdf5_sparse_matrix/v1.json\",\n            \"path\": path + \"/matrix.h5\",\n            \"array\": {\n                \"dimensions\": [mat.numberOfRows(), mat.numberOfColumns()],\n                \"type\": \"integer\"\n            },\n            \"hdf5_sparse_matrix\": {\n                \"group\": \"matrix\",\n                \"format\": \"tenx_matrix\"\n            }\n        },\n        contents: contents\n    };\n}\n\nexport function dumpNormalizedMatrix(mat, sf, path, countPath, forceBuffer) {\n    let temppath = scran.chooseTemporaryPath({ extension: \".h5\" });\n    let contents = temppath;\n\n    try {\n        let fhandle = scran.createNewHDF5File(temppath);\n\n        // Saving the division by log(2).\n        let dhandle = fhandle.createGroup(\"logcounts\");\n        dhandle.writeAttribute(\"delayed_type\", \"String\", null, \"operation\");\n        dhandle.writeAttribute(\"delayed_operation\", \"String\", null, \"unary arithmetic\");\n        dhandle.writeDataSet(\"value\", \"Float64\", null, Math.log(2));\n        dhandle.writeDataSet(\"method\", \"String\", null, \"/\");\n        dhandle.writeDataSet(\"side\", \"String\", null, \"right\");\n\n        // Saving the log-transformation.\n        let l1phandle = dhandle.createGroup(\"seed\");\n        l1phandle.writeAttribute(\"delayed_type\", \"String\", null, \"operation\");\n        l1phandle.writeAttribute(\"delayed_operation\", \"String\", null, \"unary math\");\n        l1phandle.writeDataSet(\"method\", \"String\", null, \"log1p\");\n\n        // Saving the division by the size factors.\n        let sfhandle = l1phandle.createGroup(\"seed\");\n        sfhandle.writeAttribute(\"delayed_type\", \"String\", null, \"operation\");\n        sfhandle.writeAttribute(\"delayed_operation\", \"String\", null, \"unary arithmetic\");\n        sfhandle.writeDataSet(\"value\", \"Float64\", null, sf);\n        sfhandle.writeDataSet(\"method\", \"String\", null, \"/\");\n        sfhandle.writeDataSet(\"side\", \"String\", null, \"right\");\n        sfhandle.writeDataSet(\"along\", \"Int32\", null, 1);\n\n        // Saving the original seed as a custom array.\n        let xhandle = sfhandle.createGroup(\"seed\");\n        xhandle.writeAttribute(\"delayed_type\", \"String\", null, \"array\");\n        xhandle.writeAttribute(\"delayed_array\", \"String\", null, \"custom alabaster local array\");\n        xhandle.writeDataSet(\"dimensions\", \"Int32\", null, [mat.numberOfRows(), mat.numberOfColumns()]);\n        xhandle.writeDataSet(\"type\", \"String\", null, \"FLOAT\");\n        xhandle.writeDataSet(\"path\", \"String\", null, countPath);\n\n        if (forceBuffer) {\n            contents = scran.readFile(temppath);\n            scran.removeFile(temppath);\n        }\n    } catch (e) {\n        scran.removeFile(temppath);\n        throw e;\n    }\n\n    return {\n        metadata: {\n            \"$schema\": \"hdf5_delayed_array/v1.json\",\n            \"path\": path + \"/array.h5\",\n            \"array\": {\n                \"dimensions\": [mat.numberOfRows(), mat.numberOfColumns()],\n                \"type\": \"number\"\n            },\n            \"hdf5_delayed_array\": {\n                \"group\": \"logcounts\"\n            }\n        },\n        contents: contents\n    };\n}\n","import * as bioc from \"bioconductor\";\n\nconst translate_effects = { \"lfc\": \"lfc\", \"delta_detected\": \"deltaDetected\", \"auc\": \"auc\", \"cohen\": \"cohen\" };\n\nexport function dumpMarkerDetectionResults(state, modalities, all_rowdata) {\n    const translate_summary = { \"min\": 0, \"mean\": 1, \"min_rank\": 4 };\n    const do_auc = state.marker_detection.fetchParameters().compute_auc;\n\n    for (const m of modalities) {\n        let res = state.marker_detection.fetchResults()[m];\n        let ngroups = res.numberOfGroups();\n        let nfeatures = all_rowdata[m].numberOfRows();\n        let rdf = new bioc.DataFrame({}, { numberOfRows: nfeatures });\n\n        for (var group = 0; group < ngroups; group++) {\n            let mdf = new bioc.DataFrame({}, { numberOfRows: nfeatures });\n\n            for (const x of [ \"means\", \"detected\" ]) {\n                mdf.$setColumn(x, res[x](group, { copy: \"view\" }));\n            }\n\n            for (const [eff, trans_eff] of Object.entries(translate_effects)) {\n                if (eff == \"auc\" && !do_auc) {\n                    continue;\n                }\n                for (const [summ, trans_summ] of Object.entries(translate_summary)) {\n                    mdf.$setColumn(eff + \"-\" + summ, res[trans_eff](group, { summary: trans_summ }));\n                }\n            }\n\n            rdf.$setColumn(String(group), mdf); \n        }\n\n        all_rowdata[m] = all_rowdata[m].setColumn(\"marker_detection\", rdf);\n    }\n\n    return;\n}\n\nexport function dumpCustomSelectionResults(state, modalities, main, all_rowdata, all_other_metadata) {\n    const do_auc = state.custom_selections.fetchParameters().compute_auc;\n\n    let all_sel = state.custom_selections.fetchSelections();\n    let processed_sel = { ...all_sel };\n    for (const [k, v] of Object.entries(processed_sel)) {\n        if (!(v instanceof Int32Array)) {\n            processed_sel[k] = new Int32Array(v);\n        }\n    }\n    all_other_metadata[main].custom_selections = processed_sel;\n\n    for (const m of modalities) {\n        let nfeatures = all_rowdata[m].numberOfRows();\n        let rdf = new bioc.DataFrame({}, { numberOfRows: nfeatures });\n\n        for (const sel of Object.keys(all_sel)) {\n            let res = state.custom_selections.fetchResults(sel)[m];\n            let mdf = new bioc.DataFrame({}, { numberOfRows: nfeatures });\n\n            for (const x of [ \"means\", \"detected\" ]) {\n                mdf.$setColumn(x, res[x](1, { copy: \"view\" }));\n            }\n\n            for (const [eff, trans_eff] of Object.entries(translate_effects)) {\n                if (eff == \"auc\" && !do_auc) {\n                    continue;\n                }\n                mdf.$setColumn(eff, res[trans_eff](1, { copy: \"view\" }));\n            }\n\n            rdf.$setColumn(sel, mdf);\n        }\n        all_rowdata[m] = all_rowdata[m].setColumn(\"custom_selections\", rdf);\n    }\n}\n","import * as scran from \"scran.js\";\n\nexport function dumpPcaResultsToHdf5(pcs, path, forceBuffer) {\n    let ncells = pcs.numberOfCells();\n    let npcs = pcs.numberOfPCs();\n\n    let temppath = scran.chooseTemporaryPath({ extension: \".h5\" });\n    let content = temppath;\n\n    let fhandle = scran.createNewHDF5File(temppath);\n    let buffer;\n\n    try {\n        buffer = scran.createFloat64WasmArray(ncells * npcs);\n\n        // Transposing so that cells are the fastest-changing dimension.\n        let comp = pcs.principalComponents({ copy: false });\n        let arr = buffer.array();\n        for (var c = 0; c < ncells; c++) {\n            for (var p = 0; p < npcs; p++) {\n                arr[c + p * ncells] = comp[p + c * npcs];\n            }\n        }\n\n        fhandle.writeDataSet(\n            \"data\", \n            \"Float64\", \n            [npcs, ncells],\n            buffer\n        ); \n\n        if (forceBuffer) {\n            content = scran.readFile(temppath);\n            scran.removeFile(temppath);\n        }\n    } catch (e) {\n        scran.removeFile(temppath);\n        throw e;\n    } finally {\n        scran.free(buffer);\n    }\n\n    return { \n        metadata: {\n            \"$schema\": \"hdf5_dense_array/v1.json\",\n            \"path\": path + \"/matrix.h5\",\n            \"array\": {\n                \"dimensions\": [ncells, npcs]\n            },\n            \"hdf5_dense_array\": {\n                \"dataset\": \"data\",\n            }\n        },\n        contents: content\n    };\n}\n\nexport function dumpOtherReducedDimensionsToHdf5(dimensions, path, forceBuffer) {\n    let ncells = dimensions[0].length;\n    let ndims = dimensions.length;\n\n    let temppath = scran.chooseTemporaryPath({ extension: \".h5\" });\n    let content = temppath;\n\n    let fhandle = scran.createNewHDF5File(temppath);\n    let buffer;\n\n    try {\n        buffer = scran.createFloat64WasmArray(ncells * ndims);\n\n        for (var d = 0; d < ndims; d++) {\n            if (dimensions[d].length !== ncells) {\n                throw new Error(\"all dimensions must have the same length\");\n            }\n            buffer.set(dimensions[d], ncells * d);            \n        }\n\n        fhandle.writeDataSet(\n            \"data\", \n            \"Float64\", \n            [ndims, ncells],\n            buffer\n        ); \n\n        if (forceBuffer) {\n            content = scran.readFile(temppath);\n            scran.removeFile(temppath);\n        }\n    } catch (e) {\n        scran.removeFile(temppath);\n        throw e;\n    } finally {\n        scran.free(buffer);\n    }\n\n    return { \n        metadata: {\n            \"$schema\": \"hdf5_dense_array/v1.json\",\n            \"path\": path + \"/matrix.h5\",\n            \"array\": {\n                \"dimensions\": [ncells, ndims]\n            },\n            \"hdf5_dense_array\": {\n                \"dataset\": \"data\",\n            }\n        },\n        contents: content\n    };\n}\n\n\n\n","import * as pako from \"pako\";\nimport * as wa from \"wasmarrays.js\";\n\nfunction dump_internal(x) {\n    let output;\n\n    if (x instanceof Array) {\n        output = { \"type\": \"list\", \"values\": [] };\n\n        if (x.length) {\n            let all_strings = true;\n            let all_bools = true;\n            let all_numbers = true;\n            for (const e of x) {\n                if (e !== null) {\n                    if (typeof e !== \"string\") {\n                        all_strings = false;\n                    }\n                    if (typeof e !== \"boolean\") {\n                        all_bools = false;\n                    }\n                    if (typeof e !== \"number\") {\n                        all_numbers = false;\n                    }\n                }\n            }\n\n            if (all_strings) {\n                output.type = \"string\";\n                output.values = x;\n            } else if (all_bools) {\n                output.type = \"boolean\";\n                output.values = x;\n            } else if (all_numbers) {\n                output.type = \"number\";\n                output.values = x;\n            } else {\n                for (const e of x) {\n                    output.values.push(dump_internal(e));\n                }\n            }\n        }\n\n    } else if (x.constructor === Object) {\n        output = { \"type\": \"list\", \"values\": [], \"names\": [] };\n        for (const [k, v] of Object.entries(x)) {\n            output.names.push(k);\n            output.values.push(dump_internal(v));\n        }\n\n    } else if (x instanceof Int32Array) {\n        output = { \"type\": \"integer\", \"values\": Array.from(x) }\n\n    } else if (x instanceof wa.Int32WasmArray) {\n        output = { \"type\": \"integer\", \"values\": Array.from(x.array()) }\n\n    } else if (x instanceof Float64Array) {\n        // Stringify will automatically convert NaNs to nulls. Unfortunately,\n        // this will also corrupt Infs to nulls, but whatever.\n        output = { \"type\": \"number\", \"values\": Array.from(x) }\n\n    } else if (x instanceof wa.Float64WasmArray) {\n        output = { \"type\": \"number\", \"values\": Array.from(x.array()) }\n\n    } else if (typeof x == \"number\") {\n        output = { \"type\": \"number\", \"values\": x };\n\n    } else if (typeof x == \"string\") {\n        output = { \"type\": \"string\", \"values\": x };\n\n    } else if (typeof x == \"boolean\") {\n        output = { \"type\": \"boolean\", \"values\": x };\n\n    } else {\n        throw new Error(\"don't know how to save entry of type '\" + typeof x + \"'\");\n    }\n\n    return output;\n}\n\nexport function dumpList(x, path) {\n    let values = dump_internal(x);\n    let encoded = JSON.stringify(values, null, 2) + \"\\n\"; // add trailing newline to terminate file.\n    let contents = pako.gzip(encoded);\n    return {\n        metadata: {\n            \"$schema\": \"json_simple_list/v1.json\",\n            \"path\": path + \"/simple.json.gz\",\n            \"simple_list\": {\n                \"children\": []\n            },\n            \"json_simple_list\": {\n                \"compression\": \"gzip\"\n            }\n        },\n        contents: contents\n    };\n}\n","import * as bioc from \"bioconductor\";\nimport * as df from \"./DataFrame.js\";\nimport * as assay from \"./assays.js\";\nimport * as markers from \"./markers.js\";\nimport * as reddim from \"./reducedDimensions.js\";\nimport * as list from \"./List.js\";\n\n/************************************************\n ************************************************/\n\nfunction dumpColumnData(state, modality_prefixes, main_modality, all_sce_metadata, all_other_metadata, all_files, forceBuffer) {\n    let keep = [];\n    state.cell_filtering.fetchDiscards().forEach((x, i) => {\n        if (!x) { keep.push(i); }\n    });\n    let retained = keep.length;\n\n    let all_coldata = {};\n    for (const m of Object.keys(modality_prefixes)) {\n        all_coldata[m] = new bioc.DataFrame({}, { numberOfRows: retained });\n    }\n\n    // Quality control.\n    if (state.rna_quality_control.valid()) {\n        let rdf = new bioc.DataFrame({}, { numberOfRows: retained });\n        rdf.$setColumn(\"sums\", state.cell_filtering.applyFilter(state.rna_quality_control.fetchMetrics().sums({ copy: false })));\n        rdf.$setColumn(\"detected\", state.cell_filtering.applyFilter(state.rna_quality_control.fetchMetrics().detected({ copy: false })));\n        rdf.$setColumn(\"proportions\", state.cell_filtering.applyFilter(state.rna_quality_control.fetchMetrics().subsetProportions(0, { copy: false })));\n        all_coldata.RNA.$setColumn(\"rna_quality_control\", rdf);\n\n        all_other_metadata.RNA[\"rna_quality_control\"] = { \n            \"filters\": {\n                \"sums\": state.rna_quality_control.fetchFilters().thresholdsSums(),\n                \"detected\": state.rna_quality_control.fetchFilters().thresholdsDetected(),\n                \"proportions\": state.rna_quality_control.fetchFilters().thresholdsSubsetProportions(0)\n            }\n        };\n    }\n\n    if (state.adt_quality_control.valid()) {\n        let adf = new bioc.DataFrame({}, { numberOfRows: retained });\n        adf.$setColumn(\"sums\", state.cell_filtering.applyFilter(state.adt_quality_control.fetchMetrics().sums({ copy: false })));\n        adf.$setColumn(\"detected\", state.cell_filtering.applyFilter(state.adt_quality_control.fetchMetrics().detected({ copy: false })));\n        adf.$setColumn(\"igg_totals\", state.cell_filtering.applyFilter(state.adt_quality_control.fetchMetrics().subsetTotals(0, { copy: false })));\n        all_coldata.ADT.$setColumn(\"adt_quality_control\", adf);\n\n        all_other_metadata.ADT[\"adt_quality_control\"] = {\n            \"filters\": {\n                \"detected\": state.adt_quality_control.fetchFilters().thresholdsDetected(),\n                \"igg_totals\": state.adt_quality_control.fetchFilters().thresholdsSubsetTotals(0)\n            }\n        };\n    }\n\n    if (state.crispr_quality_control.valid()) {\n        let cdf = new bioc.DataFrame({}, { numberOfRows: retained });\n        cdf.$setColumn(\"sums\", state.cell_filtering.applyFilter(state.crispr_quality_control.fetchMetrics().sums({ copy: false })));\n        cdf.$setColumn(\"detected\", state.cell_filtering.applyFilter(state.crispr_quality_control.fetchMetrics().detected({ copy: false })));\n        cdf.$setColumn(\"max_proportion\", state.cell_filtering.applyFilter(state.crispr_quality_control.fetchMetrics().maxProportions({ copy: false })));\n        cdf.$setColumn(\"max_index\", state.cell_filtering.applyFilter(state.crispr_quality_control.fetchMetrics().maxIndex({ copy: false })));\n        all_coldata.CRISPR.$setColumn(\"crispr_quality_control\", cdf);\n\n        all_other_metadata.CRISPR[\"crispr_quality_control\"] = {\n            \"filters\": {\n                \"max_count\": state.crispr_quality_control.fetchFilters().thresholdsMaxCount()\n            }\n        };\n    }\n\n    // Size Factors.\n    if (state.rna_normalization.valid()) {\n        all_coldata.RNA.$setColumn(\"sizeFactor\", state.rna_normalization.fetchSizeFactors());\n    }\n\n    if (state.adt_normalization.valid()) {\n        all_coldata.ADT.$setColumn(\"sizeFactor\", state.adt_normalization.fetchSizeFactors());\n    }\n\n    if (state.crispr_normalization.valid()) {\n        all_coldata.CRISPR.$setColumn(\"sizeFactor\", state.crispr_normalization.fetchSizeFactors());\n    }\n\n    // Other bits and pieces.\n    all_coldata[main_modality].$setColumn(\"retained\", keep);\n    all_coldata[main_modality].$setColumn(\"clusters\", state.choose_clustering.fetchClusters());\n\n    {\n        let block = state.cell_filtering.fetchFilteredBlock();\n        if (block !== null) {\n            all_coldata[main_modality].$setColumn(\"block\", block);\n\n            let stringy = new Array(block.length);\n            let levels = state.inputs.fetchBlockLevels();\n            block.forEach((x, i) => { stringy[i] = levels[x]; }); \n            all_coldata[main_modality].$setColumn(\"named_block\", stringy);\n\n            all_other_metadata[main_modality].block_levels = levels;\n        }\n    }\n\n    // Dumping everything to file.\n    for (const [name, prefix] of Object.entries(modality_prefixes)) {\n        let collected = df.writeHdf5DataFrame(all_coldata[name], prefix + \"coldata\", { forceBuffer });\n        collected.self.metadata.is_child = true;\n        all_sce_metadata[name].summarized_experiment.column_data.resource.path = collected.self.metadata.path;\n        all_files.push(collected.self);\n        for (const x of collected.children) {\n            all_files.push(x);\n        }\n    }\n\n    return;\n}\n\n/************************************************\n ************************************************/\n\nfunction dumpRowData(state, modality_prefixes, main_modality, all_sce_metadata, all_other_metadata, all_files, forceBuffer) {\n    let row_info = state.inputs.fetchFeatureAnnotations();\n\n    let all_rowdata = {};\n    for (const m of Object.keys(modality_prefixes)) {\n        all_rowdata[m] = row_info[m];\n    }\n\n    if (\"RNA\" in modality_prefixes) {\n        let res = state.feature_selection.fetchResults();\n        let df = new bioc.DataFrame(\n            {\n                mean: res.means({ copy: \"view\" }),\n                variance: res.variances({ copy: \"view\" }),\n                fitted: res.fitted({ copy: \"view\" }),\n                residual: res.residuals({ copy: \"view\" })\n            }, \n            { \n            columnOrder: [ \"mean\", \"variance\", \"fitted\", \"residual\" ] \n            }\n        );\n        all_rowdata.RNA = all_rowdata.RNA.setColumn(\"feature_selection\", df);\n    }\n\n    markers.dumpMarkerDetectionResults(state, Object.keys(modality_prefixes), all_rowdata);\n\n    markers.dumpCustomSelectionResults(state, Object.keys(modality_prefixes), main_modality, all_rowdata, all_other_metadata);\n\n    for (const [name, prefix] of Object.entries(modality_prefixes)) {\n        let collected = df.writeHdf5DataFrame(all_rowdata[name], prefix + \"rowdata\", { forceBuffer });\n        collected.self.metadata.is_child = true;\n        all_sce_metadata[name].summarized_experiment.row_data.resource.path = collected.self.metadata.path;\n        all_files.push(collected.self);\n        for (const x of collected.children) {\n            all_files.push(x);\n        }\n    }\n}\n\n/************************************************\n ************************************************/\n\nfunction mockSingleCellExperimentMetadata(p) {\n    return {\n        \"$schema\": \"single_cell_experiment/v1.json\",\n        \"path\": p,\n        \"summarized_experiment\": {\n            \"row_data\": {\n                \"resource\": {\n                    \"type\": \"local\",\n                    \"path\": null\n                }\n            },\n            \"column_data\": {\n                \"resource\": {\n                    \"type\": \"local\",\n                    \"path\": null\n                }\n            },\n            \"assays\": [],\n            \"other_data\": {\n                \"resource\": {\n                    \"type\": \"local\",\n                    \"path\": null\n                }\n            }\n        },\n        \"single_cell_experiment\": {\n            \"alternative_experiments\": [],\n            \"reduced_dimensions\": []\n        }\n    };\n}\n\n/************************************************\n ************************************************/\n\nexport async function dumpSingleCellExperiment(state, path, { forceBuffer = false } = {}) {\n    let row_info = state.inputs.fetchFeatureAnnotations();\n\n    let modalities = Object.keys(row_info);\n    let main = \"RNA\";\n    if (!(main in row_info)) {\n        main = modalities[0];\n    } else {\n        // Make sure it's always first.\n        let replacement = [main];\n        for (const m of modalities) {\n            if (m !== main) {\n                replacement.push(m);\n            }\n        }\n    }\n\n    let all_files = [];\n    let all_top_meta = {};\n    let all_prefixes = {};\n    let all_metadata = {};\n\n    for (const m of modalities) {\n        let mprefix = path + \"/\";\n        if (m != main) {\n            mprefix += \"altexp-\" + m + \"/\";\n        }\n        all_prefixes[m] = mprefix;\n\n        let sce_path = mprefix + \"experiment.json\";\n        all_top_meta[m] = mockSingleCellExperimentMetadata(sce_path);\n\n        let mat = state.cell_filtering.fetchFilteredMatrix().get(m);\n        all_top_meta[m].summarized_experiment.dimensions = [mat.numberOfRows(), mat.numberOfColumns()];\n\n        if (m == main) {\n            all_top_meta[m].single_cell_experiment.main_experiment_name = m;\n        } else {\n            // As main modality is first, it's always guaranteed to exist by the time we want to push to it.\n            all_top_meta[main].single_cell_experiment.alternative_experiments.push({ name: m, resource: { type: \"local\", path: sce_path } });\n        }\n\n        all_metadata[m] = {};\n    }\n\n    // Saving the column and row data.\n    dumpColumnData(state, all_prefixes, main, all_top_meta, all_metadata, all_files, forceBuffer);\n\n    dumpRowData(state, all_prefixes, main, all_top_meta, all_metadata, all_files, forceBuffer);\n\n    // Saving the count assay.\n    for (const [m, prefix] of Object.entries(all_prefixes)) {\n        let mat = state.cell_filtering.fetchFilteredMatrix().get(m);\n        let saved = assay.dumpCountMatrix(mat, prefix + \"assay-counts\", forceBuffer);\n        saved.metadata.is_child = true;\n\n        all_top_meta[m].summarized_experiment.assays.push({ name: \"counts\", resource: { type: \"local\", path: saved.metadata.path } });\n        all_files.push(saved);\n    }\n\n    // Saving the log-normalized assay.\n    for (const [m, prefix] of Object.entries(all_prefixes)) {\n        let step = null;\n        switch (m) {\n            case \"RNA\":\n                step = state.rna_normalization;\n                break;\n            case \"ADT\":\n                step = state.adt_normalization;\n                break;\n            case \"CRISPR\":\n                step = state.crispr_normalization;\n                break;\n        }\n        if (step == null) {\n            continue;\n        }\n\n        let mat = step.fetchNormalizedMatrix();\n        let sf = step.fetchSizeFactors();\n        let saved = assay.dumpNormalizedMatrix(mat, sf, prefix + \"assay-logcounts\", all_top_meta[m].summarized_experiment.assays[0].resource.path, forceBuffer);\n        saved.metadata.is_child = true;\n\n        all_top_meta[m].summarized_experiment.assays.push({ name: \"logcounts\", resource: { type: \"local\", path: saved.metadata.path } });\n        all_files.push(saved);\n    }\n\n    // Saving the dimensionality reduction results.\n    for (const [m, prefix] of Object.entries(all_prefixes)) {\n        let step = null;\n        switch (m) {\n            case \"RNA\":\n                step = state.rna_pca;\n                break;\n            case \"ADT\":\n                step = state.adt_pca;\n                break;\n            case \"CRISPR\":\n                step = state.crispr_pca;\n                break;\n        }\n        if (step == null) {\n            continue;\n        }\n\n        let pcs = step.fetchPCs();\n        let saved = reddim.dumpPcaResultsToHdf5(pcs, prefix + \"reddim-pca\", forceBuffer);\n        saved.metadata.is_child = true;\n        all_files.push(saved);\n\n        let tv = pcs.totalVariance();\n        all_metadata[m].pca = { variance_explained: pcs.varianceExplained({ copy: \"view\" }).map(x => x / tv) };\n        all_top_meta[m].single_cell_experiment.reduced_dimensions.push({ name: \"PCA\", resource: { type: \"local\", path: saved.metadata.path } });\n    }\n\n    for (const name of [ \"tsne\", \"umap\" ]) {\n        let res = await state[name].fetchResults({ copy: false });\n        let saved = reddim.dumpOtherReducedDimensionsToHdf5([ res.x, res.y ], all_prefixes[main] + \"reddim-\" + name, forceBuffer);\n        saved.metadata.is_child = true;\n\n        all_top_meta[main].single_cell_experiment.reduced_dimensions.push({ name: name.toUpperCase(), resource: { type: \"local\", path: saved.metadata.path } });\n        all_files.push(saved);\n    }\n\n    // Saving extra metadata (including cluster labelling assignments).\n    all_metadata[main].cell_labelling = await state.cell_labelling.fetchResults();\n\n    for (const [m, prefix] of Object.entries(all_prefixes)) {\n        let saved = list.dumpList(all_metadata[m], prefix + \"other\");\n        all_top_meta[m].summarized_experiment.other_data.resource.path = saved.metadata.path;\n        saved.metadata.is_child = true;\n        all_files.push(saved);\n    }\n\n    for (const m of modalities) {\n        if (m !== main) {\n            all_files.push({ metadata: all_top_meta[m] });\n        }\n    }\n\n    return { metadata: all_top_meta[main], files: all_files };\n}\n","import { md5 } from 'hash-wasm';\nimport * as scran from \"scran.js\";\n\nexport async function attachMd5sums(files) {\n    for (const x of files) {\n        if (!(\"contents\" in x)) {\n            continue;\n        }\n        x.metadata.md5sum = await md5(x.contents);\n    }\n}\n\nexport function realizeDirectory(files, directory) {\n    throw new Error(\"cannot realize files into a directory in a web context\");\n    return;\n}\n\nexport function loadFilePath(p) {\n    return scran.readFile(p);\n}\n","import * as sce from \"./SingleCellExperiment.js\";\nimport * as adump from \"./abstract/dump.js\";\nimport JSZip from \"jszip\";\n\n/**\n * Save the analysis results into an [**ArtifactDB** representation](https://github.com/ArtifactDB/BiocObjectSchemas) of a SingleCellExperiment.\n * This uses a language-agnostic format mostly based on HDF5 and JSON, which can be read into a variety of frameworks like R and Python.\n * The aim is to facilitate downstream analysis procedures that are not supported by **bakana** itself; \n * for example, a bench scientist can do a first pass with **kana** before passing the results to a computational collaborator for deeper inspection.\n *\n * Note that all indices are 0-based and should be incremented by 1 before use in 1-based languages like R.\n * This involves the block assignments (indexing the block levels), the cluster assignments (indexing the marker results), and the custom selections (indexing the matrix columns).\n *\n * @param {object} state - Existing analysis state containing results, after one or more runs of {@linkcode runAnalysis}.\n * @param {string} name - Name of the SingleCellExperiment to be saved.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceBuffer=true] - Whether to force all files to be loaded into memory as Uint8Array buffers.\n * @param {?directory} [options.directory=null] - Project directory in which to save the file components of the SingleCellExperiment.\n * Only used for Node.js; if supplied, it overrides any setting of `forceBuffer`.\n *\n * @return {Array} Array of objects where each object corresponds to a file in the SingleCellExperiment's representation.\n * Each inner object contains `metadata`, another object containing the metadata for the corresponding file.\n *\n * For files that are not purely metadata, the inner object will also contain  `contents`, the contents of the file.\n * The type of `contents` depends on the context and optional parameters.\n *\n * - If `forceBuffer = true`, `contents` is a Uint8Array of the file contents.\n *   This is probably the most advisable setting for browser environments.\n * - If `forceBuffer = false`, `contents` may be either a Uint8Array or a string to a temporary file path. \n *   In a browser context, the temporary path is located on the **scran.js** virtual file system,\n *   see [here](https://kanaverse.github.io/scran.js/global.html#readFile) to extract its contents and to clean up afterwards.\n * - If the function is called from Node.js and `directory` is supplied, `contents` is a string to a file path inside `directory`.\n *   This overrides any expectations from the setting of `forceBuffer` and is the most efficient approach for Node.js.\n */\nexport async function saveSingleCellExperiment(state, name, { forceBuffer = null, directory = null } = {}) {\n    if (directory !== null) {\n        forceBuffer = false;\n    } \n\n    let { metadata, files } = await sce.dumpSingleCellExperiment(state, name, { forceBuffer });\n    files.push({ metadata });\n\n    // Added a redirection document.\n    files.push({\n        \"metadata\": {\n            \"$schema\": \"redirection/v1.json\",\n            \"path\": name,\n            \"redirection\": {\n                \"targets\": [\n                    {\n                        \"type\": \"local\",\n                        \"location\": metadata.path\n                    }\n                ]\n            }\n        }\n    });\n\n    await adump.attachMd5sums(files);\n\n    // Either dumping everything to file or returning all the buffers.\n    if (!forceBuffer && directory !== null) {\n        await adump.realizeDirectory(files, directory, name);\n    }\n\n    return files;\n}\n\n/**\n * Zip a set of files, typically corresponding to the contents of an **ArtifactDB** project directory.\n *\n * @param {Array} files - Array of objects describing files in the project directory.\n * See the output of {@linkcode saveSingleCellExperiment} for more details on the expected format.\n *\n * @return {Promise<Uint8Array>} Uint8Array with the contents of the ZIP file containing all `files`.\n */\nexport function zipFiles(files) {\n    var zip = new JSZip();\n\n    for (const x of files) {\n        let suffix;\n        if (\"contents\" in x) {\n            suffix = \".json\";\n            if (x.contents instanceof Uint8Array) {\n                zip.file(x.metadata.path, x.contents);\n            } else {\n                zip.file(x.metadata.path, adump.loadFilePath(x.contents));\n            }\n        } else if (x.metadata[\"$schema\"].startsWith(\"redirection/\")) {\n            suffix = \".json\";\n        } else {\n            suffix = \"\";\n        }\n\n        // Add a trailing newline to avoid no-newline warnings. \n        zip.file(x.metadata.path + suffix, JSON.stringify(x.metadata, null, 2) + \"\\n\");\n    }\n\n    return zip.generateAsync({ type: \"uint8array\" });\n}\n","export * from \"./defaults.js\";\nexport * from \"./analysis.js\";\nexport * from \"./serialize.js\";\nexport * from \"./readers/index.js\";\nexport * from \"./dump/index.js\";\n\nexport { setVisualizationAnimate } from \"./steps/utils/viz_parent.js\";\nexport { formatMarkerResults } from \"./steps/utils/markers.js\";\n\n// Need these exports to get their static methods.\nexport { RnaQualityControlState } from \"./steps/rna_quality_control.js\";\nexport { CellLabellingState } from \"./steps/cell_labelling.js\";\nexport { FeatureSetEnrichmentState } from \"./steps/feature_set_enrichment.js\"\n\n// Need these exports for manual construction.\nexport { MarkerDetectionStandalone } from \"./steps/marker_detection.js\";\nexport { CustomSelectionsStandalone } from \"./steps/custom_selections.js\";\nexport { FeatureSetEnrichmentStandalone } from \"./steps/feature_set_enrichment.js\";\n\nimport { RnaQualityControlState } from \"./steps/rna_quality_control.js\";\nimport { CellLabellingState } from \"./steps/cell_labelling.js\";\nimport { FeatureSetEnrichmentState } from \"./steps/feature_set_enrichment.js\";\n\nimport * as scran from \"scran.js\";\nimport * as vizutils from \"./steps/utils/viz_parent.js\";\n\n/**\n * Initialize the backend for computation.\n * This is required prior to running any other **bakana** function.\n *\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.numberOfThreads] - Number of threads used by **scran.js**.\n * @param {boolean} [options.localFile] - Whether to use local file paths for imported modules in **scran.js**.\n * This only needs to be `true` for old Node versions that do not support file URIs.\n * \n * @return A promise that resolves to `null` when initialization is complete.\n */\nexport function initialize({ numberOfThreads = 1, localFile = false } = {}) {\n    let s = scran.initialize({ \n        numberOfThreads: numberOfThreads,\n        localFile: localFile\n    });\n    vizutils.scranOptions.localFile = localFile;\n    return s.then(x => null); \n}\n\n/**\n * Terminate the backend, in particular shutting down all workers.\n * This is typically necessary for a clean shutdown in Node.js applications.\n *\n * @return A promise that resolves to `null` when all workers are terminated.\n */\nexport function terminate() {\n    RnaQualityControlState.flush();\n    CellLabellingState.flush();\n    FeatureSetEnrichmentState.flush();\n    let s = scran.terminate();\n    let w = vizutils.killAllWorkers();\n    return Promise.all([s, w]).then(x => null);\n}\n\n/**\n * Call a **scran.js** function.\n * This allows client applications to operate in the same **scran.js** memory space as **bakana** functions,\n * which is not guaranteed if applications import **scran.js** on their own (e.g., due to name mangling with Webpack).\n *\n * @param {function} fun - A function that accepts the **scran.js** module object and presumably calls some of its functions.\n *\n * @return The return value of `fun`.\n */\nexport function callScran(fun) {\n    return fun(scran);\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\nimport * as afile from \"./abstract/file.js\";\n\n/**************************\n ******* Internals ********\n **************************/\n\nfunction fetch_assay_details(handle, path) {\n    let available = [];\n    if (\"X\" in handle.children) {\n        available.push(\"X\");\n    } \n\n    if (\"layers\" in handle.children) {\n        let lhandle = handle.open(\"layers\");\n        if (!(lhandle instanceof scran.H5Group)) {\n            throw new Error(\"expected a 'layers' group in a H5AD file\");\n        }\n\n        for (const k of Object.keys(lhandle.children)) {\n            available.push(\"layers/\" + k);\n        }\n    }\n\n    if (available.length == 0) {\n        throw new Error(\"failed to find any assay in the H5AD file\");\n    }\n\n    let deets = scran.extractHDF5MatrixDetails(path, available[0]);\n    return {\n        names: available,\n        rows: deets.rows,\n        columns: deets.columns\n    };\n}\n\nfunction load_data_frame(handle) {\n    let columns = {};\n\n    for (const [key, val] of Object.entries(handle.children)) {\n        if (val == \"DataSet\") {\n            let dhandle = handle.open(key, { load: true });\n            columns[key] = dhandle.values;\n        } else if (val == \"Group\") {\n            // Factor encoding for H5AD versions >= 0.8.0.\n            let subhandle = handle.open(key);\n            if (\"categories\" in subhandle.children && \"codes\" in subhandle.children) {\n                let current_levels = eutils.extractHDF5Strings(subhandle, \"categories\");\n                let codes = subhandle.open(\"codes\", { load: true }).values;\n                columns[key] = bioc.SLICE(current_levels, codes);\n            }\n        }\n    }\n\n    // Factor encoding for H5AD versions < 0.8.0.\n    if (\"__categories\" in handle.children && handle.children[\"__categories\"] == \"Group\") {\n        let chandle = handle.open(\"__categories\");\n\n        for (const [key, val] of Object.entries(chandle.children)) {\n            if (key in columns) {\n                let current_levels = eutils.extractHDF5Strings(chandle, key);\n                columns[key] = bioc.SLICE(current_levels, columns[key]);\n            }\n        }\n    }\n\n    if (Object.keys(columns).length == 0) {\n        return null;\n    } else {\n        let rn = null;\n        if (\"_index\" in columns) {\n            rn = columns._index;\n            delete columns._index;\n        }\n        return new bioc.DataFrame(columns, { rowNames: rn });\n    }\n}\n\nfunction fetch_features(handle) {\n    if (\"var\" in handle.children && handle.children[\"var\"] == \"Group\") {\n        let vhandle = handle.open(\"var\");\n        return load_data_frame(vhandle);\n    }\n    return null;\n}\n\nfunction fetch_cells(handle) {\n    if (\"obs\" in handle.children && handle.children[\"obs\"] == \"Group\") {\n        let ohandle = handle.open(\"obs\");\n        return load_data_frame(ohandle);\n    }\n    return null;\n}\n\n/************************\n ******* Dataset ********\n ************************/\n\n/**\n * Dataset in the H5AD format.\n */\nexport class H5adDataset {\n    #h5_file;\n    #h5_path;\n    #h5_flush;\n    #h5_handle;\n\n    #raw_features;\n    #raw_cells;\n    #assay_details;\n\n    #countMatrixName;\n    #featureTypeColumnName;\n\n    #featureTypeRnaName;\n    #featureTypeAdtName;\n    #featureTypeCrisprName;\n\n    #primaryRnaFeatureIdColumn;\n    #primaryAdtFeatureIdColumn;\n    #primaryCrisprFeatureIdColumn;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"h5\", file: fun(this.#h5_file) }]; \n        let options = {\n            countMatrixName: this.#countMatrixName,\n            featureTypeColumnName: this.#featureTypeColumnName,\n            featureTypeRnaName: this.#featureTypeRnaName,\n            featureTypeAdtName: this.#featureTypeAdtName,\n            featureTypeCrisprName: this.#featureTypeCrisprName,\n            primaryRnaFeatureIdColumn: this.#primaryRnaFeatureIdColumn,\n            primaryAdtFeatureIdColumn: this.#primaryAdtFeatureIdColumn,\n            primaryCrisprFeatureIdColumn: this.#primaryCrisprFeatureIdColumn\n        };\n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} h5File - Contents of a H5AD file.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?string} [options.countMatrixName=null] - See {@linkcode H5adDataset#setCountMatrixName setCountMatrixName}.\n     * @param {?string} [options.featureTypeColumnName=null] - See {@linkcode H5adDataset#setFeatureTypeColumnName setFeatureTypeColumnName}.\n     * @param {?string} [options.featureTypeRnaName=\"Gene Expression\"] - See {@linkcode H5adDataset#setFeatureTypeRnaName setFeatureTypeRnaName}.\n     * @param {?string} [options.featureTypeAdtName=\"Antibody Capture\"] - See {@linkcode H5adDataset#setFeatureTypeAdtName setFeatureTypeAdtName}.\n     * @param {?string} [options.featureTypeCrisprName=\"CRISPR Guide Capture\"] - See {@linkcode H5adDataset#setFeatureTypeCrisprName setFeatureTypeCrisprName}.\n     * @param {?(string|number)} [options.primaryRnaFeatureIdColumn=null] - See {@linkcode H5adDataset#setPrimaryRnaFeatureIdColumn setPrimaryRnaFeatureIdColumn}.\n     * @param {?(string|number)} [options.primaryAdtFeatureIdColumn=null] - See {@linkcode H5adDataset#setPrimaryAdtFeatureIdColumn setPrimaryAdtFeatureIdColumn}.\n     * @param {?(string|number)} [options.primaryCrisprFeatureIdColumn=null] - See {@linkcode H5adDataset#setPrimaryCrisprFeatureIdColumn setPrimaryCrisprFeatureIdColumn}.\n     */\n    constructor(h5File, { \n        countMatrixName = null, \n        featureTypeColumnName = null, \n        featureTypeRnaName = \"Gene Expression\", \n        featureTypeAdtName = \"Antibody Capture\", \n        featureTypeCrisprName = \"CRISPR Guide Capture\", \n        primaryRnaFeatureIdColumn = \"_index\", \n        primaryAdtFeatureIdColumn = \"_index\",\n        primaryCrisprFeatureIdColumn = \"_index\" \n    } = {}) {\n        if (h5File instanceof afile.SimpleFile) {\n            this.#h5_file = h5File;\n        } else {\n            this.#h5_file = new afile.SimpleFile(h5File);\n        }\n\n        this.#countMatrixName = countMatrixName;\n        this.#featureTypeColumnName = featureTypeColumnName;\n        \n        this.#featureTypeRnaName = featureTypeRnaName;\n        this.#featureTypeAdtName = featureTypeAdtName;\n        this.#featureTypeCrisprName = featureTypeCrisprName;\n\n        this.#primaryRnaFeatureIdColumn = primaryRnaFeatureIdColumn;\n        this.#primaryAdtFeatureIdColumn = primaryAdtFeatureIdColumn;\n        this.#primaryCrisprFeatureIdColumn = primaryCrisprFeatureIdColumn;\n\n        this.clear();\n    }\n\n    /**\n     * @param {?string} name - Name of the layer containing the count matrix.\n     * If `null`, the \"X\" dataset is used if it is present in the file, or the first available layer if no \"X\" dataset is present.\n     */\n    setCountMatrixName(name) {\n        this.#countMatrixName = name;\n        return;\n    }\n\n    /**\n     * @param {?string} name - Name of the per-feature annotation column containing the feature types.\n     * If `null`, no column is assumed to contain the feature types, and all features are assumed to be genes (i.e., only the RNA modality is present).\n     */\n    setFeatureTypeColumnName(name) {\n        this.#featureTypeColumnName = name;\n        return;\n    }\n\n    /**\n     * @param {?string} name - Name of the feature type for gene expression.\n     * Alternatively `null`, to indicate that no RNA features are to be loaded.\n     */\n    setFeatureTypeRnaName(name) {\n        this.#featureTypeRnaName = name;\n        return;\n    }\n\n    /**\n     * @param {string} name - Name of the feature type for ADTs.\n     * Alternatively `null`, to indicate that no ADT features are to be loaded.\n     */\n    setFeatureTypeAdtName(name) {\n        this.#featureTypeAdtName = name;\n        return;\n    }\n\n    /**\n     * @param {?string} name - Name of the feature type for CRISPR guides.\n     * Alternatively `null`, to indicate that no guides are to be loaded.\n     */\n    setFeatureTypeCrisprName(name) {\n        this.#featureTypeCrisprName = name;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the row names (from the `_index` group) are used as the primary identifiers.\n     * If no row names are present in this situation, no primary identifier is defined.\n     */\n    setPrimaryRnaFeatureIdColumn(i) {\n        this.#primaryRnaFeatureIdColumn = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the row names (from the `_index` group) are used as the primary identifiers.\n     * If no row names are present in this situation, no primary identifier is defined.\n     */\n    setPrimaryAdtFeatureIdColumn(i) {\n        this.#primaryAdtFeatureIdColumn = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the row names (from the `_index` group) are used as the primary identifiers.\n     * If no row names are present in this situation, no primary identifier is defined.\n     */\n    setPrimaryCrisprFeatureIdColumn(i) {\n        this.#primaryCrisprFeatureIdColumn = i;\n        return;\n    }\n\n    #instantiate() {\n        if (this.#h5_path != null) {\n            return;\n        }\n\n        let info = scran.realizeFile(this.#h5_file.content());\n        this.#h5_path = info.path;\n        this.#h5_flush = info.flush;\n        this.#h5_handle = new scran.H5File(this.#h5_path);\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory. \n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode H5adDataset#load load} or {@linkcodeH5adDataset#summary summary}.\n     */\n    clear() {\n        if (typeof this.#h5_flush == \"function\") {\n            this.#h5_flush();\n        }\n        this.#h5_flush = null;\n        this.#h5_path = null;\n        this.#h5_handle = null;\n\n        this.#raw_features = null;\n        this.#raw_cells = null;\n        this.#assay_details = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"H5AD\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset.\n     */\n    abbreviate() {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #fetch_assay_details() {\n        if (this.#assay_details !== null) {\n            return;\n        }\n        this.#instantiate();\n        this.#assay_details = fetch_assay_details(this.#h5_handle, this.#h5_path);\n    }\n\n    #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#instantiate();\n\n        let feats = fetch_features(this.#h5_handle);\n        if (feats == null) {\n            this.#fetch_assay_details();\n            feats = new bioc.DataFrame({}, { numberOfRows: this.#assay_details.rows });\n        }\n\n        this.#raw_features = feats;\n        return;\n    }\n\n    #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        this.#instantiate();\n\n        let cells = fetch_cells(this.#h5_handle);\n        if (cells === null) {\n            this.#fetch_assay_details();\n            cells = new bioc.DataFrame({}, { numberOfRows: this.#assay_details.columns })\n        }\n\n        this.#raw_cells = cells;\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode H5adDataset#load load}.\n     * If `true`, users should consider calling {@linkcode H5adDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `all_features`: a {@linkplain external:DataFrame DataFrame} of per-feature annotations.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `all_assay_names`: an Array of strings containing names of potential count matrices.\n     */\n    summary({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n        this.#fetch_assay_details();\n\n        let output = {\n            all_features: this.#raw_features,\n            cells: this.#raw_cells,\n            all_assay_names: this.#assay_details.names\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode H5adDataset#summary summary}.\n     * If `true`, users should consider calling {@linkcode H5adDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array of strings containing the feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"` or `\"ADT\"`.\n     * It is assumed that an appropriate mapping from the feature types inside the `featureFile` was previously declared,\n     * either in the constructor or in {@linkcode setFeatureTypeRnaName} and {@linkcode setFeatureTypeAdtName}.\n     */\n    load({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n        this.#fetch_assay_details();\n\n        let chosen_assay = this.#countMatrixName;\n        if (chosen_assay == null) {\n            chosen_assay = this.#assay_details.names[0];\n        }\n        let loaded = scran.initializeSparseMatrixFromHDF5(this.#h5_path, chosen_assay);\n\n        let mappings = { \n            RNA: this.#featureTypeRnaName, \n            ADT: this.#featureTypeAdtName,\n            CRISPR: this.#featureTypeCrisprName\n        };\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, this.#featureTypeColumnName, mappings, \"RNA\");\n        output.cells = this.#raw_cells;\n\n        let primaries = { \n            RNA: this.#primaryRnaFeatureIdColumn, \n            ADT: this.#primaryAdtFeatureIdColumn,\n            CRISPR: this.#primaryCrisprFeatureIdColumn\n        };\n        output.primary_ids = futils.extractPrimaryIds(output.features, primaries);\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode H5adDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {H5adDataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        if (files.length != 1 || files[0].type != \"h5\") {\n            throw new Error(\"expected exactly one file of type 'h5' for H5AD unserialization\");\n        }\n        return new H5adDataset(files[0].file, options);\n    }\n}\n\n/************************\n ******* Results ********\n ************************/\n\n/**\n * Pre-computed analysis results in the H5AD format.\n */\nexport class H5adResult {\n    #h5_file;\n    #h5_path;\n    #h5_flush;\n    #h5_handle;\n\n    #raw_features;\n    #raw_cells;\n    #assay_details;\n    #reddim_details;\n\n    #primaryMatrixName;\n    #isPrimaryNormalized;\n    #featureTypeColumnName;\n    #reducedDimensionNames;\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} h5File - Contents of a H5AD file.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?string} [options.primaryMatrixName=null] - See {@linkcode H5adResult#setPrimaryMatrixName setPrimaryMatrixName}.\n     * @param {boolean} [options.isPrimaryNormalized=true] - See {@linkcode H5adResult#setIsPrimaryNormalized setIsPrimaryNormalized}.\n     * @param {?string} [options.featureTypeColumnName=null] - See {@linkcode H5adResult#setFeatureTypeColumnName setFeatureTypeColumnName}.\n     * @param {?Array} [options.reducedDimensionNames=null] - See {@linkcode H5adResult#setReducedDimensionNames setReducedDimensionNames}.\n     */\n    constructor(h5File, { \n        primaryMatrixName = null, \n        isPrimaryNormalized=true,\n        featureTypeColumnName = null, \n        reducedDimensionNames = null\n    } = {}) {\n        if (h5File instanceof afile.SimpleFile) {\n            this.#h5_file = h5File;\n        } else {\n            this.#h5_file = new afile.SimpleFile(h5File);\n        }\n\n        this.#primaryMatrixName = primaryMatrixName;\n        this.#isPrimaryNormalized = isPrimaryNormalized;\n        this.#featureTypeColumnName = featureTypeColumnName;\n        this.#reducedDimensionNames = bioc.CLONE(reducedDimensionNames); // avoid pass-by-reference links.\n\n        this.clear();\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory. \n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode H5adResult#load load} or {@linkcodeH5adResult#summary summary}.\n     */\n    clear() {\n        if (typeof this.#h5_flush == \"function\") {\n            this.#h5_flush();\n        }\n        this.#h5_flush = null;\n        this.#h5_path = null;\n        this.#h5_handle = null;\n\n        this.#raw_features = null;\n        this.#raw_cells = null;\n        this.#assay_details = null;\n        this.#reddim_details = null;\n    }\n\n    /**\n     * @param {?string} name - Name of the layer containing the primary matrix.\n     * If `null`, the \"X\" dataset is used if it is present in the file, or the first available layer if no \"X\" dataset is present.\n     */\n    setPrimaryMatrixName(name) {\n        this.#primaryMatrixName = name;\n        return;\n    }\n\n    /**\n     * @param {boolean} normalized - Whether the primary matrix is already normalized.\n     * If `false`, it is assumed to contain count data and is subjected to library size normalization within each modality.\n     */\n    setIsPrimaryNormalized(normalized) {\n        this.#isPrimaryNormalized = normalized;\n    }\n\n    /**\n     * @param {?string} name - Name of the per-feature annotation column containing the feature types.\n     * If `null`, no column is assumed to contain the feature types, and all features are assumed to be genes (i.e., only the RNA modality is present).\n     */\n    setFeatureTypeColumnName(name) {\n        this.#featureTypeColumnName = name;\n        return;\n    }\n\n    /**\n     * @param {?Array} names - Array of names of the reduced dimensions to load.\n     * If `null`, all reduced dimensions found in the file are loaded.\n     */\n    setReducedDimensionNames(names) {\n        this.#reducedDimensionNames = bioc.CLONE(names);\n        return;\n    }\n\n    #instantiate() {\n        if (this.#h5_path != null) {\n            return;\n        }\n\n        let info = scran.realizeFile(this.#h5_file.content());\n        this.#h5_path = info.path;\n        this.#h5_flush = info.flush;\n        this.#h5_handle = new scran.H5File(this.#h5_path);\n    }\n\n    #fetch_assay_details() {\n        if (this.#assay_details !== null) {\n            return;\n        }\n        this.#instantiate();\n        this.#assay_details = fetch_assay_details(this.#h5_handle, this.#h5_path);\n        return;\n    }\n\n    #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#instantiate();\n\n        let feats = fetch_features(this.#h5_handle);\n        if (feats == null) {\n            this.#fetch_assay_details();\n            feats = new bioc.DataFrame({}, { numberOfRows: this.#assay_details.rows });\n        }\n\n        this.#raw_features = feats;\n        return;\n    }\n\n    #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        this.#instantiate();\n\n        let cells = fetch_cells(this.#h5_handle);\n        if (cells === null) {\n            this.#fetch_assay_details();\n            cells = new bioc.DataFrame({}, { numberOfRows: this.#assay_details.columns })\n        }\n\n        this.#raw_cells = cells;\n        return;\n    }\n\n    #fetch_reddim_details() {\n        if (this.#reddim_details !== null) {\n            return;\n        }\n        this.#instantiate();\n        \n        let available = [];\n        if (\"obsm\" in this.#h5_handle.children && this.#h5_handle.children[\"obsm\"] == \"Group\") {\n            let ohandle = this.#h5_handle.open(\"obsm\");\n            for (const [k, v] of Object.entries(ohandle.children)) {\n                if (v == \"DataSet\") {\n                    available.push(k);\n                }\n            }\n        }\n\n        this.#reddim_details = { names: available };\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode H5adDataset#load load}.\n     * If `true`, users should consider calling {@linkcode H5adDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `all_features`: a {@linkplain external:DataFrame DataFrame} of per-feature annotations.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `all_assay_names`: an Array of strings containing names of potential primary matrices.\n     * - `reduced_dimension_names`: an Array of strings containing names of dimensionality reduction results.\n     */\n    summary({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n        this.#fetch_assay_details();\n        this.#fetch_reddim_details();\n\n        let output = {\n            all_features: this.#raw_features,\n            cells: this.#raw_cells,\n            all_assay_names: this.#assay_details.names,\n            reduced_dimension_names: this.#reddim_details.names\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode H5adResult#summary summary}.\n     * If `true`, users should consider calling {@linkcode H5adResult#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `reduced_dimensions`: an object containing the dimensionality reduction results.\n     *   Each value is an array of arrays, where each inner array contains the coordinates for one dimension.\n     */\n    load({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n        this.#fetch_assay_details();\n        this.#fetch_reddim_details();\n\n        let chosen_assay = this.#primaryMatrixName;\n        if (chosen_assay == null) {\n            chosen_assay = this.#assay_details.names[0];\n        }\n        let loaded = scran.initializeSparseMatrixFromHDF5(this.#h5_path, chosen_assay, { forceInteger: !this.#isPrimaryNormalized });\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, this.#featureTypeColumnName, null, \"\");\n        output.cells = this.#raw_cells;\n        delete output.row_ids;\n\n        if (!this.#isPrimaryNormalized) {\n            for (const mod of output.matrix.available()) {\n                let mat = output.matrix.get(mod);\n                output.matrix.add(mod, scran.logNormCounts(mat, { allowZeros: true }));\n            }\n        }\n\n        // Loading the dimensionality reduction results.\n        let chosen_reddims = this.#reducedDimensionNames;\n        if (chosen_reddims == null) {\n            chosen_reddims = this.#reddim_details.names;\n        }\n\n        let reddims = {};\n        if (chosen_reddims.length) {\n            let ohandle = this.#h5_handle.open(\"obsm\");\n            for (const k of chosen_reddims) {\n                let loaded = ohandle.open(k, { load: true });\n                let shape = loaded.shape;\n                let ndims = shape[1];\n                let ncells = shape[0];\n\n                let contents = [];\n                for (var d = 0; d < ndims; d++) {\n                    contents.push(new Float64Array(ncells));\n                }\n\n                for (var c = 0; c < ncells; c++) {\n                    for (var d = 0; d < ndims; d++) {\n                        contents[d][c] = loaded.values[c * ndims + d];\n                    }\n                }\n\n                reddims[k] = contents;\n            }\n        }\n        output.reduced_dimensions = reddims;\n        \n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n}\n\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as afile from \"./abstract/file.js\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\n\n/**************************\n ******* Internals ********\n **************************/\n\nfunction load_listData_names(lhandle) {\n    let ndx = lhandle.findAttribute(\"names\");\n    if (ndx < 0) {\n        return null;\n    }\n\n    let nhandle;\n    let names;\n    try {\n        nhandle = lhandle.attribute(ndx);\n        names = nhandle.values();\n    } catch(e) {\n        throw new Error(\"failed to load listData names; \" + e.message);\n    } finally {\n        scran.free(nhandle);\n    }\n\n    if (names.length != lhandle.length()) {\n        throw new Error(\"expected names to have same length as listData\");\n    }\n    return names;\n}\n\nconst acceptable_df_subclasses = { \"DFrame\": \"S4Vectors\" };\n\nfunction load_data_frame(handle) {\n    check_class(handle, acceptable_df_subclasses, \"DFrame\");\n\n    let columns = {};\n    let colnames = [];\n    let lhandle;\n    try {\n        lhandle = handle.attribute(\"listData\");\n        if (!(lhandle instanceof scran.RdsGenericVector)) {\n            throw new Error(\"listData slot should be a generic list\");\n        }\n\n        colnames = load_listData_names(lhandle);\n        if (colnames == null) {\n            throw new Error(\"expected the listData list to be named\");\n        }\n\n        for (var i = 0; i < lhandle.length(); i++) {\n            let curhandle;\n            try {\n                curhandle = lhandle.load(i);\n\n                if (curhandle instanceof scran.RdsVector && !(curhandle instanceof scran.RdsGenericVector)) {\n                    let curcol = curhandle.values();\n\n                    // Expand factors, if we detect them.\n                    if (curhandle.findAttribute(\"class\") >= 0) {\n                        let clshandle;\n                        let levhandle;\n                        try {\n                            clshandle = curhandle.attribute(\"class\");\n                            if (clshandle.values().indexOf(\"factor\") >= 0 && curhandle.findAttribute(\"levels\") >= 0) {\n                                levhandle = curhandle.attribute(\"levels\");\n                                let copy = curcol.slice();\n                                copy.forEach((x, i) => { copy[i] = x - 1 }); // get back to 0-based indices.\n                                curcol = bioc.SLICE(levhandle.values(), copy);\n                            }\n                        } finally {\n                            scran.free(clshandle);\n                            scran.free(levhandle);\n                        }\n                    }\n\n                    columns[colnames[i]] = curcol;\n\n                } else if (curhandle instanceof scran.RdsS4Object && check_acceptable_class(curhandle, acceptable_df_subclasses)) {\n                    // Handle nested DataFrames.\n                    columns[colnames[i]] = load_data_frame(curhandle);\n                }\n\n            } finally {\n                scran.free(curhandle);\n            }\n        }\n    } catch(e) {\n        throw new Error(\"failed to retrieve data from DataFrame's listData; \" + e.message);\n    } finally {\n        scran.free(lhandle);\n    }\n\n    // Loading the row names.\n    let rnhandle;\n    let rownames = null;\n    try {\n        rnhandle = handle.attribute(\"rownames\");\n        if (rnhandle instanceof scran.RdsStringVector) {\n            rownames = rnhandle.values();\n        }\n    } catch(e) {\n        throw new Error(\"failed to retrieve row names from DataFrame; \" + e.message);\n    } finally {\n        scran.free(rnhandle);\n    }\n\n    // Loading the number of rows.\n    let nrows = null;\n    if (colnames.length == 0 && rownames == null) {\n        let nrhandle;\n        try {\n            nrhandle = handle.attribute(\"nrows\");\n            if (!(nrhandle instanceof scran.RdsIntegerVector)) {\n                throw new Error(\"expected an integer vector as the 'nrows' slot\");\n            }\n            let NR = nrhandle.values();\n            if (NR.length != 1) {\n                throw new Error(\"expected an integer vector of length 1 as the 'nrows' slot\");\n            }\n            nrows = NR[0];\n        } catch (e) {\n            throw new Error(\"failed to retrieve nrows from DataFrame; \" + e.message);\n        } finally {\n            scran.free(nrhandle);\n        }\n    }\n\n    return new bioc.DataFrame(columns, { columnOrder: colnames, rowNames: rownames, numberOfRows: nrows });\n}\n\nfunction check_acceptable_class(handle, accepted) {\n    for (const [k, v] of Object.entries(accepted)) {\n        if (handle.className() == k && handle.packageName() == v) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction check_class(handle, accepted, base) {\n    if (!(handle instanceof scran.RdsS4Object)) {\n        throw new Error(\"expected an S4 object as the data frame\");\n    }\n    if (!check_acceptable_class(handle, accepted)) {\n        throw new Error(\"object is not a \" + base + \" or one of its recognized subclasses\");\n    }\n}\n\nfunction extract_NAMES(handle) {\n    let nidx = handle.findAttribute(\"NAMES\");\n    if (nidx < 0) {\n        return null;\n    }\n\n    let nhandle;\n    let output = null;\n    try {\n        nhandle = handle.attribute(nidx);\n        if (nhandle instanceof scran.RdsStringVector) {\n            output = nhandle.values();\n        }\n    } catch(e) {\n        throw new Error(\"failed to extract NAMES; \" + e.message);\n    } finally {\n        scran.free(nhandle);\n    }\n\n    return output;\n}\n\nfunction extract_features(handle) {\n    let rowdata;\n    let names = null;\n\n    let rrdx = handle.findAttribute(\"rowRanges\");\n    if (rrdx < 0) {\n        // This is a base SummarizedExperiment.\n        let rhandle;\n        try {\n            rhandle = handle.attribute(\"elementMetadata\");\n            rowdata = load_data_frame(rhandle);\n        } catch(e) {\n            throw new Error(\"failed to extract features from the rowData; \" + e.message);\n        } finally {\n            scran.free(rhandle);\n        }\n        names = extract_NAMES(handle);\n\n    } else {\n        // Everything else is assumed to be an RSE.\n        let rrhandle;\n        let output;\n        try {\n            rrhandle = handle.attribute(rrdx);\n            let ehandle = rrhandle.attribute(\"elementMetadata\");\n            try {\n                rowdata = load_data_frame(ehandle);\n            } catch(e) {\n                throw new Error(\"failed to extract mcols from the rowRanges; \" + e.message);\n            } finally {\n                scran.free(ehandle);\n            }\n\n            let pidx = rrhandle.findAttribute(\"partitioning\");\n            if (pidx < 0) { // if absent, we'll assume it's a GRanges.\n                let r2handle;\n                try {\n                    r2handle = rrhandle.attribute(\"ranges\");\n                    names = extract_NAMES(r2handle);\n                } catch(e) {\n                    throw new Error(\"failed to extract names from the rowRanges; \" + e.message);\n                } finally {\n                    scran.free(r2handle);\n                }\n            } else { // otherwise, it's a GRangesList.\n                let phandle;\n                try {\n                    phandle = rrhandle.attribute(pidx);\n                    names = extract_NAMES(phandle);\n                } catch(e) {\n                    throw new Error(\"failed to extract names from the rowRanges; \" + e.message);\n                } finally {\n                    scran.free(phandle);\n                }\n            }\n\n        } catch(e) {\n            throw new Error(\"failed to extract features from the rowRanges; \" + e.message);\n        } finally {\n            scran.free(rrhandle);\n        }\n    }\n\n    if (names !== null) {\n        rowdata.$setRowNames(names);\n    }\n    return rowdata;\n}\n\nfunction extract_assay_names(handle) {\n    let output;\n    let ahandle;\n    let dhandle;\n    let lhandle;\n\n    try {\n        ahandle = handle.attribute(\"assays\");\n        dhandle = ahandle.attribute(\"data\");\n        lhandle = dhandle.attribute(\"listData\");\n\n        output = load_listData_names(lhandle);\n        if (output == null) {\n            output = new Array(lhandle.length());\n            output.fill(null);\n        }\n    } catch(e) {\n        throw new Error(\"failed to extract assay data; \" + e.message);\n    } finally {\n        scran.free(ahandle);\n        scran.free(lhandle);\n        scran.free(dhandle);\n    }\n\n    return output;\n}\n\nfunction extract_assay(handle, assay, forceInteger) {\n    let output;\n    let ahandle;\n    let dhandle;\n    let lhandle;\n\n    try {\n        ahandle = handle.attribute(\"assays\");\n        dhandle = ahandle.attribute(\"data\");\n        lhandle = dhandle.attribute(\"listData\");\n\n        // Choosing the assay index.\n        let chosen = null;\n        if (typeof assay == \"string\") {\n            let names = load_listData_names(lhandle);\n            if (assay !== null && names != null) {\n                for (var n = 0; n < names.length; n++) {\n                    if (names[n] == assay) {\n                        chosen = n;\n                        break;\n                    }\n                }\n            }\n            if (chosen == null) {\n                throw new Error(\"no assay named '\" + assay + \"'\");\n            }\n        } else {\n            if (assay >= lhandle.length()) {\n                throw new Error(\"assay index \" + String(assay) + \" out of range\");\n            }\n            chosen = assay;\n        }\n\n        let xhandle;\n        try {\n            xhandle = lhandle.load(chosen);\n            output = scran.initializeSparseMatrixFromRds(xhandle, { forceInteger });\n        } catch(e) {\n            throw new Error(\"failed to initialize sparse matrix from assay; \" + e.message);\n        } finally {\n            scran.free(xhandle);\n        }\n\n    } catch(e) {\n        throw new Error(\"failed to extract assay data; \" + e.message);\n    } finally {\n        scran.free(ahandle);\n        scran.free(lhandle);\n        scran.free(dhandle);\n    }\n\n    return output;\n}\n\nfunction extract_alt_exps(handle) {\n    let output = { handles: {}, order: [] };\n    let indx = handle.findAttribute(\"int_colData\");\n    if (indx < 0) {\n        return output;\n    }\n\n    let in_handle;\n    let inld_handle;\n    let innn_handle;\n    let ae_handle;\n    let aeld_handle;\n    let aenn_handle;\n\n    try {\n        in_handle = handle.attribute(indx);\n        let inld_dx = in_handle.findAttribute(\"listData\");\n        if (inld_dx < 0) {\n            return output;\n        }\n\n        inld_handle = in_handle.attribute(inld_dx);\n        let innn_dx = inld_handle.findAttribute(\"names\");\n        if (innn_dx < 0) {\n            return output;\n        }\n\n        innn_handle = inld_handle.attribute(innn_dx);\n        let in_names = innn_handle.values();\n        let ae_dx = in_names.indexOf(\"altExps\");\n        if (ae_dx < 0) {\n            return output;\n        }\n\n        ae_handle = inld_handle.load(ae_dx);\n        let aeld_dx = ae_handle.findAttribute(\"listData\");\n        if (aeld_dx < 0) {\n            return output;\n        }\n\n        aeld_handle = ae_handle.attribute(aeld_dx);\n        let aenn_dx = aeld_handle.findAttribute(\"names\");\n        if (aenn_dx < 0) {\n            return output;\n        }\n\n        aenn_handle = aeld_handle.attribute(aenn_dx);\n        let ae_names = aenn_handle.values();\n\n        for (var i = 0; i < ae_names.length; i++) {\n            let curhandle;\n            try {\n                curhandle = aeld_handle.load(i);\n                let asehandle = curhandle.attribute(\"se\");\n                output.handles[ae_names[i]] = asehandle;\n                output.order.push(ae_names[i]);\n                check_for_se(asehandle);\n            } catch (e) {\n                throw new Error(\"failed to load alternative Experiment '\" + ae_names[i] + \"'; \" + e.message);\n            } finally {\n                scran.free(curhandle);\n            }\n        }\n\n    } catch(e) {\n        for (const v of Object.values(output.handles)) {\n            scran.free(v);\n        }\n        throw e;\n\n    } finally {\n        scran.free(aenn_handle);\n        scran.free(aeld_handle);\n        scran.free(innn_handle);\n        scran.free(inld_handle);\n        scran.free(in_handle);\n    }\n\n    return output;\n}\n\nfunction extract_reduced_dims(handle) {\n    let output = { handles: {}, order: [] };\n    let indx = handle.findAttribute(\"int_colData\");\n    if (indx < 0) {\n        return output;\n    }\n\n    let in_handle;\n    let inld_handle;\n    let innn_handle;\n    let rd_handle;\n    let rdld_handle;\n    let rdnn_handle;\n\n    try {\n        in_handle = handle.attribute(indx);\n        let inld_dx = in_handle.findAttribute(\"listData\");\n        if (inld_dx < 0) {\n            return output;\n        }\n\n        inld_handle = in_handle.attribute(inld_dx);\n        let innn_dx = inld_handle.findAttribute(\"names\");\n        if (innn_dx < 0) {\n            return output;\n        }\n\n        innn_handle = inld_handle.attribute(innn_dx);\n        let in_names = innn_handle.values();\n        let rd_dx = in_names.indexOf(\"reducedDims\");\n        if (rd_dx < 0) {\n            return output;\n        }\n\n        rd_handle = inld_handle.load(rd_dx);\n        let rdld_dx = rd_handle.findAttribute(\"listData\");\n        if (rdld_dx < 0) {\n            return output;\n        }\n\n        rdld_handle = rd_handle.attribute(rdld_dx);\n        let rdnn_dx = rdld_handle.findAttribute(\"names\");\n        if (rdnn_dx < 0) {\n            return output;\n        }\n\n        rdnn_handle = rdld_handle.attribute(rdnn_dx);\n        let rd_names = rdnn_handle.values();\n\n        for (var i = 0; i < rd_names.length; i++) {\n            let curhandle;\n            try {\n                curhandle = rdld_handle.load(i);\n                let okay = false;\n\n                if (curhandle.type() == \"double\" && curhandle.findAttribute(\"dim\") >= 0) { // only accepting double-precision matrics.\n                    let dimhandle = curhandle.attribute(\"dim\");\n                    if (dimhandle.length() == 2) {\n                        output.handles[rd_names[i]] = { handle: curhandle, dimensions: dimhandle.values() };\n                        output.order.push(rd_names[i]);\n                        okay = true;\n                    }\n                }\n\n                if (!okay) {\n                    scran.free(curhandle);\n                }\n            } catch (e) {\n                throw new Error(\"failed to load reduced dimension '\" + rd_names[i] + \"'; \" + e.message);\n            }\n        }\n\n    } catch(e) {\n        for (const v of Object.values(output.handles)) {\n            scran.free(v.handle);\n        }\n        throw e;\n\n    } finally {\n        scran.free(rdnn_handle);\n        scran.free(rdld_handle);\n        scran.free(innn_handle);\n        scran.free(inld_handle);\n        scran.free(in_handle);\n    }\n\n    return output;\n}\n\nfunction check_for_se(handle) {\n    check_class(handle, { \n        \"SummarizedExperiment\": \"SummarizedExperiment\",\n        \"RangedSummarizedExperiment\": \"SummarizedExperiment\",\n        \"SingleCellExperiment\": \"SingleCellExperiment\",\n        \"SpatialExperiment\": \"SpatialExperiment\"\n    }, \"SummarizedExperiment\");\n}\n\nconst main_experiment_name = \"\";\n\n/************************\n ******* Dataset ********\n ************************/\n\n/**\n * Dataset stored as a SummarizedExperiment object (or one of its subclasses) inside an RDS file.\n */\nexport class SummarizedExperimentDataset {\n    #rds_file;\n\n    #rds_handle;\n    #se_handle;\n    #alt_handles;\n    #alt_handle_order;\n\n    #raw_features;\n    #raw_cells;\n\n    #rnaCountAssay;\n    #adtCountAssay;\n    #crisprCountAssay;\n\n    #rnaExperiment;\n    #adtExperiment;\n    #crisprExperiment;\n\n    #primaryRnaFeatureIdColumn;\n    #primaryAdtFeatureIdColumn;\n    #primaryCrisprFeatureIdColumn;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"rds\", file: fun(this.#rds_file) }];\n        let options = {\n            rnaCountAssay: this.#rnaCountAssay,\n            adtCountAssay: this.#adtCountAssay,\n            crisprCountAssay: this.#crisprCountAssay,\n            rnaExperiment: this.#rnaExperiment,\n            adtExperiment: this.#adtExperiment,\n            crisprExperiment: this.#crisprExperiment,\n            primaryRnaFeatureIdColumn: this.#primaryRnaFeatureIdColumn,\n            primaryAdtFeatureIdColumn: this.#primaryAdtFeatureIdColumn,\n            primaryCrisprFeatureIdColumn: this.#primaryCrisprFeatureIdColumn\n        };\n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} rdsFile - Contents of a RDS file.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string|number} [options.rnaCountAssay=0] - See {@linkcode SummarizedExperimentDataset#setRnaCountAssay setRnaCountAssay}.\n     * @param {string|number} [options.adtCountAssay=0] - See {@linkcode SummarizedExperimentDataset#setAdtCountAssay setAdtCountAssay}.\n     * @param {string|number} [options.crisprCountAssay=0] - See {@linkcode SummarizedExperimentDataset#setCrisprCountAssay setCrisprCountAssay}.\n     * @param {?(string|number)} [options.rnaExperiment=\"\"] - See {@linkcode SummarizedExperimentDataset#setRnaExperiment setRnaExperiment}.\n     * @param {?(string|number)} [options.adtExperiment=\"Antibody Capture\"] - See {@linkcode SummarizedExperimentDataset#setAdtExperiment setAdtExperiment}.\n     * @param {?(string|number)} [options.crisprExperiment=\"CRISPR Guide Capture\"] - See {@linkcode SummarizedExperimentDataset#setCrisprExperiment setCrisprExperiment}.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn=null] - See {@linkcode SummarizedExperimentDataset#setPrimaryRnaFeatureIdColumn setPrimaryRnaFeatureIdColumn}.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn=null] - See {@linkcode SummarizedExperimentDataset#setPrimaryAdtFeatureIdColumn setPrimaryAdtFeatureIdColumn}.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn=null] - See {@linkcode SummarizedExperimentDataset#setPrimaryCrisprFeatureIdColumn setPrimaryCrisprFeatureIdColumn}.\n     */\n    constructor(rdsFile, { \n        rnaCountAssay = 0, \n        adtCountAssay = 0, \n        crisprCountAssay = 0,\n        rnaExperiment = \"\", \n        adtExperiment = \"Antibody Capture\", \n        crisprExperiment = \"CRISPR Guide Capture\",\n        primaryRnaFeatureIdColumn = null, \n        primaryAdtFeatureIdColumn = null,\n        primaryCrisprFeatureIdColumn = null \n    } = {}) {\n        if (rdsFile instanceof afile.SimpleFile) {\n            this.#rds_file = rdsFile;\n        } else {\n            this.#rds_file = new afile.SimpleFile(rdsFile);\n        }\n\n        this.#rnaCountAssay = rnaCountAssay;\n        this.#adtCountAssay = adtCountAssay;\n        this.#crisprCountAssay = crisprCountAssay;\n\n        this.#rnaExperiment = rnaExperiment;\n        this.#adtExperiment = adtExperiment;\n        this.#crisprExperiment = crisprExperiment;\n\n        this.#primaryRnaFeatureIdColumn = primaryRnaFeatureIdColumn;\n        this.#primaryAdtFeatureIdColumn = primaryAdtFeatureIdColumn;\n        this.#primaryCrisprFeatureIdColumn = primaryCrisprFeatureIdColumn;\n\n        this.clear();\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the assay containing the RNA count matrix.\n     */\n    setRnaCountAssay(i) {\n        this.#rnaCountAssay = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the assay containing the ADT count matrix.\n     */\n    setAdtCountAssay(i) {\n        this.#adtCountAssay = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the assay containing the CRISPR count matrix.\n     */\n    setCrisprCountAssay(i) {\n        this.#adtCountAssay = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the alternative experiment containing gene expression data.\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no RNA data is assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the gene expression data.\n     */\n    setRnaExperiment(i) {\n        this.#rnaExperiment = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the alternative experiment containing ADT data.\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no ADTs are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the ADT data.\n     */\n    setAdtExperiment(i) {\n        this.#adtExperiment = i;\n        return;\n    }\n\n    /**\n     * @param {?(string|number)} i - Name or index of the alternative experiment containing CRISPR guide data.\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no CRISPR guides are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the guide data.\n     */\n    setCrisprExperiment(i) {\n        this.#crisprExperiment = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setPrimaryRnaFeatureIdColumn(i) {\n        this.#primaryRnaFeatureIdColumn = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setPrimaryAdtFeatureIdColumn(i) {\n        this.#primaryAdtFeatureIdColumn = i;\n        return;\n    }\n\n    /**\n     * @param {string|number} i - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the existing row names (if they exist) are used as the primary identifier.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setPrimaryCrisprFeatureIdColumn(i) {\n        this.#primaryCrisprFeatureIdColumn = i;\n        return;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode SummarizedExperimentDataset#load load} or {@linkcodeSummarizedExperimentDataset#summary summary}.\n     */\n    clear() {\n        scran.free(this.#se_handle);\n        if (typeof this.#alt_handles != 'undefined' && this.#alt_handles !== null) {\n            for (const v of Object.values(this.#alt_handles)) {\n                scran.free(v);\n            }\n        }\n        scran.free(this.#rds_handle);\n\n        this.#se_handle = null;\n        this.#alt_handles = null;\n        this.#rds_handle = null;\n\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"SummarizedExperiment\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset.\n     */\n    abbreviate() {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #initialize() {\n        if (this.#rds_handle !== null) {\n            return;\n        }\n\n        this.#rds_handle = scran.readRds(this.#rds_file.content());\n        this.#se_handle = this.#rds_handle.value();\n        try {\n            check_for_se(this.#se_handle);\n            const { handles, order } = extract_alt_exps(this.#se_handle);\n            this.#alt_handles = handles;\n            this.#alt_handle_order = order;\n        } catch (e) {\n            this.#se_handle.free();\n            this.#rds_handle.free();\n            throw e;\n        }\n    }\n\n    #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#initialize();\n        this.#raw_features = {};\n        this.#raw_features[main_experiment_name] = extract_features(this.#se_handle);\n\n        for (const [k, v] of Object.entries(this.#alt_handles)) {\n            try {\n                this.#raw_features[k] = extract_features(v);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + k + \"'; \" + e.message);\n            }\n        }\n\n        return;\n    }\n\n    #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#initialize();\n        let chandle = this.#se_handle.attribute(\"colData\");\n        try {\n            this.#raw_cells = load_data_frame(chandle);\n        } catch(e) {\n            throw new Error(\"failed to extract colData from a SummarizedExperiment; \" + e.message);\n        } finally {\n            scran.free(chandle);\n        }\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode SummarizedExperimentDataset#load load}.\n     * If `true`, users should consider calling {@linkcode SummarizedExperimentDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     */\n    summary({ cache = false } = {}) {\n        this.#initialize();\n        this.#features();\n        this.#cells();\n\n        let assays = {};\n        assays[main_experiment_name] = extract_assay_names(this.#se_handle);\n        for (const [k, v] of Object.entries(this.#alt_handles)) {\n            try {\n                assays[k] = extract_assay_names(v);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + k + \"'; \" + e.message);\n            }\n        }\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: assays\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode SummarizedExperimentDataset#summary summary}.\n     * If `true`, users should consider calling {@linkcode SummarizedExperimentDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an integer array containing the feature identifiers for each row in that modality.\n     */\n    load({ cache = false } = {}) {\n        this.#initialize();\n        this.#features();\n        this.#cells();\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            row_ids: {},\n            features: {},\n            cells: this.#raw_cells\n        };\n\n        let mapping = { \n            RNA: { exp: this.#rnaExperiment, assay: this.#rnaCountAssay },\n            ADT: { exp: this.#adtExperiment, assay: this.#adtCountAssay },\n            CRISPR: { exp: this.#crisprExperiment, assay: this.#crisprCountAssay }\n        };\n\n        try {\n            for (const [k, v] of Object.entries(mapping)) {\n                if (v.exp === null) {\n                    continue;\n                }\n\n                let handle;\n                let name = v.exp;\n                if (typeof v.exp == \"string\") {\n                    if (v.exp === \"\") {\n                        handle = this.#se_handle;\n                    } else {\n                        if (!(v.exp in this.#alt_handles)) {\n                            continue;\n                        }\n                        handle = this.#alt_handles[v.exp];\n                    }\n                } else {\n                    if (v.exp >= this.#alt_handle_order.length) {\n                        continue;\n                    }\n                    name = this.#alt_handle_order[v.exp];\n                    handle = this.#alt_handles[name];\n                }\n\n                let loaded = extract_assay(handle, v.assay, true);\n                output.matrix.add(k, loaded.matrix);\n                let out_ids = loaded.row_ids;\n                output.row_ids[k] = out_ids;\n                output.features[k] = bioc.SLICE(this.#raw_features[name], out_ids);\n            }\n\n            let primaries = { \n                RNA: this.#primaryRnaFeatureIdColumn, \n                ADT: this.#primaryAdtFeatureIdColumn,\n                CRISPR: this.#primaryCrisprFeatureIdColumn\n            };\n            output.primary_ids = futils.extractPrimaryIds(output.features, primaries);\n\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode SummarizedExperimentDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {SummarizedExperimentDataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        if (files.length != 1 || files[0].type != \"rds\") {\n            throw new Error(\"expected exactly one file of type 'rds' for SummarizedExperiment unserialization\");\n        }\n        return new SummarizedExperimentDataset(files[0].file, options);\n    }\n}\n\n/***********************\n ******* Result ********\n ***********************/\n\n/**\n * Pre-computed analysis results stored as a SummarizedExperiment object (or one of its subclasses) inside an RDS file.\n */\nexport class SummarizedExperimentResult {\n    #rds_file;\n\n    #rds_handle;\n    #se_handle;\n    #alt_handles;\n    #alt_handle_order;\n\n    #raw_features;\n    #raw_cells;\n    #rd_handles;\n    #rd_handle_order;\n\n    #primaryAssay;\n    #isPrimaryNormalized;\n    #reducedDimensionNames;\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} rdsFile - Contents of a RDS file.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {object|string|number} [options.primaryAssay=0] - See {@linkcode SummarizedExperimentResult#setPrimaryAssay setPrimaryAssay}.\n     * @param {object|boolean} [options.isPrimaryNormalized={}] - See {@linkcode SummarizedExperimentResult#setIsPrimaryNormalized setIsPrimaryNormalized}.\n     * @param {?Array} [options.reducedDimensionNames=null] - See {@linkcode SummarizedExperimentResult#setReducedDimensionNames setReducedDimensionNames}.\n     */\n    constructor(rdsFile, { \n        primaryAssay = 0,\n        isPrimaryNormalized = true,\n        reducedDimensionNames = null\n    } = {}) {\n        if (rdsFile instanceof afile.SimpleFile) {\n            this.#rds_file = rdsFile;\n        } else {\n            this.#rds_file = new afile.SimpleFile(rdsFile);\n        }\n\n        // Cloning to avoid pass-by-reference links.\n        this.#primaryAssay = bioc.CLONE(primaryAssay);\n        this.#isPrimaryNormalized = bioc.CLONE(isPrimaryNormalized);\n        this.#reducedDimensionNames = bioc.CLONE(reducedDimensionNames);\n\n        this.clear();\n    }\n\n    /**\n     * @param {object|string|number} primary - Assay containing the relevant data for each modality.\n     *\n     * - If a string, this is used as the name of the assay across all modalities.\n     * - If a number, this is used as the index of the assay across all modalities.\n     * - If any object, the key should be the name of a modality and the value may be either a string or number specifying the assay to use for that modality.\n     *   Modalities absent from this object will not be loaded.\n     */\n    setPrimaryAssay(primary) {\n        this.#primaryAssay = bioc.CLONE(primary);\n        return;\n    }\n\n    /**\n     * @param {object|boolean} normalized - Whether or not the assay for a particular modality has already been normalized.\n     *\n     * - If a boolean, this is used to indicate normalization status of assays across all modalities.\n     *   If `false`, that modality's assay is assumed to contain count data and is subjected to library size normalization. \n     * - If any object, the key should be the name of a modality and the value should be a boolean indicating whether that modality's assay has been normalized.\n     *   Modalities absent from this object are assumed to have been normalized.\n     */\n    setIsPrimaryNormalized(normalized) {\n        this.#isPrimaryNormalized = bioc.CLONE(normalized);\n        return;\n    }\n\n    /**\n     * @param {?Array} names - Array of names of the reduced dimensions to load.\n     * If `null`, all reduced dimensions found in the file are loaded.\n     */\n    setReducedDimensionNames(names) {\n        this.#reducedDimensionNames = bioc.CLONE(names);\n        return;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode SummarizedExperimentDataset#load load} or {@linkcodeSummarizedExperimentDataset#summary summary}.\n     */\n    clear() {\n        scran.free(this.#se_handle);\n\n        if (typeof this.#alt_handles != 'undefined' && this.#alt_handles !== null) {\n            for (const v of Object.values(this.#alt_handles)) {\n                scran.free(v);\n            }\n        }\n\n        if (typeof this.#rd_handles != 'undefined' && this.#rd_handles !== null) {\n            for (const v of Object.values(this.#rd_handles)) {\n                scran.free(v.handle);\n            }\n        }\n\n        scran.free(this.#rds_handle);\n\n        this.#se_handle = null;\n        this.#alt_handles = null;\n        this.#rds_handle = null;\n\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    #initialize() {\n        if (this.#rds_handle !== null) {\n            return;\n        }\n\n        this.#rds_handle = scran.readRds(this.#rds_file.content());\n        this.#se_handle = this.#rds_handle.value();\n        try {\n            check_for_se(this.#se_handle);\n\n            {\n                const { handles, order } = extract_alt_exps(this.#se_handle);\n                this.#alt_handles = handles;\n                this.#alt_handle_order = order;\n            }\n\n            {\n                const { handles, order } = extract_reduced_dims(this.#se_handle);\n                this.#rd_handles = handles;\n                this.#rd_handle_order = order;\n            }\n\n        } catch (e) {\n            this.#se_handle.free();\n            this.#rds_handle.free();\n            throw e;\n        }\n    }\n\n    #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n\n        this.#initialize();\n        this.#raw_features = {};\n        this.#raw_features[main_experiment_name] = extract_features(this.#se_handle);\n\n        for (const [k, v] of Object.entries(this.#alt_handles)) {\n            try {\n                this.#raw_features[k] = extract_features(v);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + k + \"'; \" + e.message);\n            }\n        }\n\n        return;\n    }\n\n    #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#initialize();\n        let chandle = this.#se_handle.attribute(\"colData\");\n        try {\n            this.#raw_cells = load_data_frame(chandle);\n        } catch(e) {\n            throw new Error(\"failed to extract colData from a SummarizedExperiment; \" + e.message);\n        } finally {\n            scran.free(chandle);\n        }\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode SummarizedExperimentDataset#load load}.\n     * If `true`, users should consider calling {@linkcode SummarizedExperimentDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     * - `reduced_dimension_names`: an Array of strings containing names of dimensionality reduction results.\n     */\n    summary({ cache = false } = {}) {\n        this.#initialize();\n        this.#features();\n        this.#cells();\n\n        let assays = {};\n        assays[main_experiment_name] = extract_assay_names(this.#se_handle);\n        for (const [k, v] of Object.entries(this.#alt_handles)) {\n            try {\n                assays[k] = extract_assay_names(v);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + k + \"'; \" + e.message);\n            }\n        }\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: assays,\n            reduced_dimension_names: this.#rd_handle_order\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode SummarizedExperimentDataset#summary summary}.\n     * If `true`, users should consider calling {@linkcode SummarizedExperimentDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `reduced_dimensions`: an object containing the dimensionality reduction results.\n     *   Each value is an array of arrays, where each inner array contains the coordinates for one dimension.\n     */\n    load({ cache = false } = {}) {\n        this.#initialize();\n        this.#features();\n        this.#cells();\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            features: {},\n            cells: this.#raw_cells,\n            reduced_dimensions: {}\n        };\n\n        // Fetch the reduced dimensions first.\n        let reddims = this.#reducedDimensionNames;\n        if (reddims == null) {\n            reddims = this.#rd_handle_order;\n        }\n\n        for (const k of reddims) {\n            let v = this.#rd_handles[k];\n            let acquired = [];\n            let dims = v.dimensions;\n            let contents = v.handle.values();\n            for (var d = 0; d < dims[1]; d++) {\n                acquired.push(contents.slice(d * dims[0], (d + 1) * dims[0]));\n            }\n            output.reduced_dimensions[k] = acquired;\n        }\n\n        // Now fetching the assay matrix.\n        try {\n            for (const [k, v] of Object.entries(this.#raw_features)) {\n                let curassay = this.#primaryAssay;\n                if (typeof curassay == \"object\") {\n                    if (k in curassay) {\n                        curassay = curassay[k];\n                    } else {\n                        continue;\n                    }\n                }\n\n                let curnormalized = this.#isPrimaryNormalized;\n                if (typeof curnormalized == \"object\") {\n                    if (k in curnormalized) {\n                        curnormalized = curnormalized[k];\n                    } else {\n                        curnormalized = true;\n                    }\n                }\n\n                let handle;\n                if (k === \"\") {\n                    handle = this.#se_handle;\n                } else {\n                    handle = this.#alt_handles[k];\n                }\n\n                let loaded = extract_assay(handle, curassay, !curnormalized);\n                output.matrix.add(k, loaded.matrix);\n\n                if (!curnormalized) {\n                    let normed = scran.logNormCounts(loaded.matrix, { allowZeros: true });\n                    output.matrix.add(k, normed);\n                    output.features[k] = bioc.SLICE(this.#raw_features[k], loaded.row_ids);\n                } else {\n                    output.features[k] = this.#raw_features[k];\n                }\n            }\n\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n","export * from \"./10x.js\";\nexport * from \"./h5ad.js\";\nexport * from \"./mtx.js\"\nexport * from \"./se.js\";\nexport * from \"./ArtifactDB-abstract.js\";\nexport * from \"./ArtifactDB-zipped.js\";\nexport * from \"./utils/extract.js\";\nexport * from \"./abstract/file.js\";\n\nimport { TenxHdf5Dataset } from \"./10x.js\";\nimport { H5adDataset } from \"./h5ad.js\";\nimport { TenxMatrixMarketDataset } from \"./mtx.js\"\nimport { SummarizedExperimentDataset } from \"./se.js\";\n\n/**\n * Any class that satisfies the [Dataset contract](https://github.com/LTLA/bakana/blob/master/docs/related/custom_readers.md).\n * Each class contains methods to load data from some arbitrary data source into {@linkplain ScranMatrix} objects (for the counts)\n * and {@linkplain DataFrame} objects (for the feature or cell annotations).\n * The default set of known dataset reader classes is listed in the {@linkcode availableReaders} object\n * and includes {@linkplain TenxHdf5Dataset}, {@linkplain TenxMatrixMarketDataset}, {@linkplain H5adDataset} and {@linkplain SummarizedExperimentDataset} instances.\n *\n * @typedef Dataset\n */\n\n/**\n * A representation of a matrix of expression values, where the values are hosted on the Wasm heap for easier compute via [**scran.js**](https://github.com/kanaverse/scran.js).\n * See [here](https://kanaverse.github.io/scran.js/ScranMatrix.html) for more details.\n *\n * @external ScranMatrix\n */ \n\n/**\n * A representation of multiple {@linkplain external:ScranMatrix ScranMatrix} objects, where each object contains data for the same cells but across a different feature space, e.g., for different data modalities.\n * See [here](https://kanaverse.github.io/scran.js/MultiMatrix.html) for more details.\n *\n * @external MultiMatrix\n */ \n\n/**\n * A DataFrame from the [**bioconductor**](https://github.com/LTLA/bioconductor.js) package, where each column is represented by some arbitrary vector-like object.\n * See [here](https://ltla.github.io/bioconductor.js/DataFrame.html) for more details.\n *\n * @external DataFrame\n */ \n\n/**\n * All known dataset readers.\n * Each entry contains a {@linkplain Dataset} class with the key defined as the {@linkcode Dataset#format format} return value.\n */\nexport const availableReaders = {\n    \"10X\": TenxHdf5Dataset,\n    \"MatrixMarket\": TenxMatrixMarketDataset,\n    \"H5AD\": H5adDataset,\n    \"SummarizedExperiment\": SummarizedExperimentDataset\n};\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as iutils from \"../readers/index.js\";\nexport const step_name = \"inputs\";\n\nconst RAW_SUBSET_OVERRIDE = \"raw_subset_indices\";\n\n/**\n * This step handles the loading of all datasets into memory.\n * This wraps various matrix initialization functions in [**scran.js**](https://github.com/kanaverse/scran.js),\n * depending on the format of the supplied datasets.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class InputsState {\n    #parameters;\n    #cache;\n    #abbreviated;\n    #preserve_dataset_cache;\n\n    constructor(parameters = null, cache = null, abbreviated = null) {\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.#abbreviated = (abbreviated === null ? {} : abbreviated);\n        this.#preserve_dataset_cache = false;\n        this.changed = false;\n        return;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.raw_matrix);\n        utils.freeCache(this.#cache.block_ids);\n        utils.freeCache(this.#cache.raw_block_ids);\n        utils.freeCache(this.#cache.multi_block_ids);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {external:MultiMatrix} A {@linkplain external:MultiMatrix MultiMatrix} object containing counts for one or more modalities.\n     * Each modality is represented by a separate count matrix, where each row of the matrix represents a feature of that modality.\n     * All matrices have the same number and ordering of cells in their columns.\n     */\n    fetchCountMatrix() {\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {object} Object where each key is the name of a modality and each value is a {@linkplain external:DataFrame DataFrame}.\n     * Each row of the DataFrame corresponds to a feature in that modality \n     * (i.e., a row in the corresponding matrix from {@linkcode InputsState#fetchCountMatrix fetchCountMatrix})\n     * and each column represents a per-feature annotation field.\n     */\n    fetchFeatureAnnotations() {\n        return this.#cache.genes;\n    }\n\n    /**\n     * @return {object} Object where each key is the name of a modality and each value is an Int32Array.\n     * Each entry of an Int32Array specifies the identity of the corresponding row of its count matrix from {@linkcode InputsState#fetchCountMatrix fetchCountMatrix}.\n     */\n    fetchRowIds() {\n        return this.#cache.row_ids;\n    }\n\n    /**\n     * @return {external:DataFrame} {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * Each row of the DataFrame corresponds to a cell in {@linkcode InputsState#fetchCountMatrix fetchCountMatrix},\n     * and each column represents a per-cell annotation field.\n     *\n     * Note that this considers all cells in the dataset before QC filtering - \n     * see {@linkcode QualityControlState#applyFilter QualityControlState.applyFilter} to obtain a filtered version of each column.\n     */\n    fetchCellAnnotations() {\n        return this.#cache.annotations;\n    }\n\n    /**\n     * @return {?Int32Array} Array of length equal to the number of cells in the dataset,\n     * identifying the block to which each cell is assigned.\n     * Alternatively `null`, if no blocking is performed.\n     */\n    fetchBlock() {\n        return this.#cache.block_ids;\n    }\n\n    /**\n     * @return {?Array} Array of names of the blocks, or `null` if no blocking is performed.\n     */\n    fetchBlockLevels() {\n        return this.#cache.block_levels;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Cloning the parameters to avoid pass-by-reference behavior affecting the\n        // InputsState object. We don't pass the files back here.\n        let output = { ...this.#parameters };\n        output.subset = this.constructor.#cloneSubset(output.subset);\n        return output;\n    }\n\n    fetchDatasets() {\n        return this.#cache.datasets;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to return a copy of the subsets to avoid pass-by-reference behaviors.\n     *\n     * @return {?Int32Array} Array containing the indices to use for direct subsetting -\n     * see {@linkcode InputsState#setDirectSubset setDirectSubset} for more information.\n     * Alternatively `null`, if direct subsetting is not performed.\n     */\n    fetchDirectSubset({ copy = true } = {}) {\n        if (RAW_SUBSET_OVERRIDE in this.#cache) {\n            let candidate = this.#cache[RAW_SUBSET_OVERRIDE];\n            return (copy ? candidate.slice() : candidate);\n        } else {\n            return null;\n        }\n    }\n\n    guessRnaFeatureTypes() {\n        if (!(\"RNA\" in this.#cache.genes)) {\n            return null;\n        }\n\n        if (!(\"inferred_rna_types\" in this.#cache)) {\n            this.#cache.inferred_rna_types = utils.guessFeatureTypes(this.#cache.genes[\"RNA\"]);\n        }\n\n        return this.#cache.inferred_rna_types;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            block_factor: null,\n            subset: null\n        };\n    }\n\n    /**\n     * Allow each {@linkplain Dataset} reader (i.e., the `datasets` in {@linkcode InputsState#compute compute}) to cache any intermediate results during loading.\n     * By default, this is disabled as caching increases memory usage of the analysis without any major runtime improvements to `compute` when the `datasets` do not change.\n     *\n     * Setting `cache = true` is only useful if the instances in `datasets` are to be re-used outside of **bakana**, or if they are to be re-used in `compute()` in different combinations. \n     * In such cases, there may be a runtime improvement that warrants the increase in memory usage.\n     * If caching is used, the user is responsible for releasing cached resources via each instance's `clear()` method once they are no longer needed.\n     *\n     * @param {boolean} cache - Whether to allow {@linkplain Dataset} instances to cache their results.\n     */\n    enableDatasetCache(cache) {\n        this.#preserve_dataset_cache = cache;\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} datasets - An object containing data for one or more datasets.\n     * Each property corresponds to a single dataset and its value should satisfy the {@linkplain Dataset} contract.\n     * See the description of the argument of the same name in {@linkcode runAnalysis}.\n     * @param {object} parameters - Parameter object, equivalent to the `inputs` property of the `parameters` in {@linkcode runAnalysis}.\n     * @param {?string} parameters.block_factor - Name of the column of the cell annotations specifying the sample of origin for each cell.\n     * This is only used if a single count matrix is supplied.\n     *\n     * If `null`, all cells are assumed to originate from the same sample.\n     * @param {?subset} parameters.subset - Object describing if any pre-analysis subsetting should be applied.\n     * This should contain `field`, a string specifying a field of the column annotation.\n     *\n     * - For categorical variables, the object should also contain `values`, an array of allowed values for that annotation.\n     *   Cells are only retained if they are associated with any of the allowable values for that annotation field.\n     * - For continuous variables, the object should also contain `ranges`, an array of arrays.\n     *   Each inner array should contain two numbers defining the start and end of a range.\n     *   Ranges should be sorted and non-overlapping (boundaries excepted).\n     *\n     * If `subset` is `null`, no subsetting is performed and all cells are used in the downstream analysis.\n     *\n     * @return The object is updated with the new results.\n     * A promise is returned that resolves to `null` once input loading is complete - this should be resolved before any downstream steps are run.\n     */\n    async compute(datasets, parameters) {\n        let { block_factor, subset } = parameters;\n        this.changed = false;\n\n        // Don't bother proceeding with any of the below\n        // if we're operating from a reloaded state.\n        if (datasets !== null) {\n            let tmp_abbreviated = {};\n            for (const [key, val] of Object.entries(datasets)) {\n                tmp_abbreviated[key] = { format: val.constructor.format(), details: val.abbreviate() };\n            }\n\n            if (utils.changedParameters(tmp_abbreviated, this.#abbreviated)) {\n                await load_and_cache(datasets, this.#cache, this.#preserve_dataset_cache);\n                this.#abbreviated = tmp_abbreviated;\n                this.#cache.datasets = { ...datasets }; // making a deep-ish copy to avoid pass-by-reference links.\n                delete this.#cache.inferred_rna_types;\n                this.changed = true;\n            }\n        }\n\n        if (this.changed || this.#parameters.block_factor !== block_factor) {\n            block_and_cache(block_factor, this.#cache);\n            this.#parameters.block_factor = block_factor;\n            this.changed = true;\n        }\n\n        // final condition handles loss of 'matrix' when setDirectSubset() is called.\n        if (this.changed || (!(RAW_SUBSET_OVERRIDE in this.#cache) && utils.changedParameters(subset, this.#parameters.subset)) || !(\"matrix\" in this.#cache)) { \n            subset_and_cache(subset, this.#cache);\n            this.#parameters.subset = this.constructor.#cloneSubset(subset);\n            this.changed = true;\n        }\n\n        return null;\n    }\n\n    /******************************\n     ******** Subsetting **********\n     ******************************/\n\n    static #cloneSubset(subset) {\n        // We use a dedicated cloning function to handle Infs,\n        // as these get converted to nulls by the JSON stringify.\n        if (subset == null) {\n            return subset;\n        }\n\n        let clone = { ...subset };\n        if (\"values\" in clone) {\n            clone.values = clone.values.slice();\n        }\n\n        if (\"ranges\" in clone) {\n            clone.ranges = clone.ranges.map(x => x.slice());\n        }\n\n        return clone;\n    }\n\n    /**\n     * Undo the effect of subsetting on an array of indices.\n     *\n     * @param {Array|TypedArray} indices - Array of column indices to the subsetted matrix.\n     * Note that this will be modified in-place.\n     *\n     * @return Entries of `indices` are replaced with indices to the pre-subsetted matrix.\n     */\n    undoSubset(indices) {\n        if (\"matrix\" in this.#cache) {\n            let max_index = this.fetchCountMatrix().numberOfColumns();\n            for (const x of indices) {\n                if (x < 0 || x >= max_index) {\n                    throw new Error(\"entries of 'indices' should be less than the number of cells in the dataset\");\n                }\n            }\n        }\n\n        // Setting the subset to null, if the parameter-level subset hasn't\n        // been set yet. This is because we might get indirectly called via\n        // setDirectSubset() before compute() has been run.\n        let subset = null;\n        if (\"subset\" in this.#parameters) {\n            subset = this.#parameters.subset;\n        }\n\n        let keep = harvest_subset_indices(subset, this.#cache);\n        if (keep !== null) {\n            indices.forEach((x, i) => { indices[i] = keep[x] });\n        }\n    }\n\n    #configureIndices(indices, copy, onOriginal) {\n        // scran.js's subset functions will pick up out-of-range indices.\n        utils.checkIndices(indices, null);\n\n        // We make a copy here to take ownership of the underlying memory,\n        // otherwise any edits in the caller would mutate the new InputsState's\n        // indices by reference.\n        if (copy) {\n            indices = indices.slice();\n        }\n\n        if (!onOriginal) {\n            this.undoSubset(indices);\n        }\n\n        return indices;\n    }\n\n    /**\n     * Unlike most of the other methods, `setDirectSubset` can be called on an InputsState before {@linkcode InputsState#compute compute}.\n     * This means that a user can create the state object from {@linkcode createAnalysis},\n     * specify a subset of cells via `setDirectSubset` on the (currently empty) InputsState object in `inputs`,\n     * and then call {@linkcode runAnalysis} to execute an analysis on the desired subset of cells.\n     * \n     * @param {TypedArray|Array} indices - Array containing the indices for the desired subset of cells.\n     * This should be sorted and non-duplicate.\n     * Any existing subset in this object will be overridden by `indices`.\n     * @param {object} [options] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to make a copy of `indices` before storing it inside the returned state object.\n     * If `false`, it is assumed that the caller makes no further use of the passed `indices`.\n     * @param {boolean} [options.onOriginal=false] - Whether `indices` contains indices on the original dataset or on the dataset in `state`.\n     * This distinction is only relevant if the current InputsState object already contains a specified subset.\n     * If `false`, the `indices` are assumed to refer to the already-subsetted dataset that exists in `state`;\n     * if `true`, the `indices` are assumed to refer to the original dataset from which the subset in `state` was created.\n     *\n     * @return The dataset in this InputsState object is subsetted to the desired `indices`.\n     */\n    setDirectSubset(indices, { copy = true, onOriginal = false } = {}) {\n        if (indices !== null) {\n            this.#cache[RAW_SUBSET_OVERRIDE] = this.#configureIndices(indices, copy, onOriginal);\n        } else {\n            delete this.#cache[RAW_SUBSET_OVERRIDE];            \n        }\n\n        // Flag that it needs to be rerun.\n        scran.free(this.#cache.matrix);\n        delete this.#cache.matrix;\n    }\n\n    createDirectSubset(indices, { copy = true, onOriginal = false } = {}) {\n        let new_cache = {};\n        new_cache[RAW_SUBSET_OVERRIDE] = this.#configureIndices(indices, copy, onOriginal);\n\n        // Need to manually copy everything in 'this.#cache' that is set in\n        // load_and_cache or block_and_cache.\n\n        // Making explicit clones to take ownership.\n        new_cache.raw_matrix = this.#cache.raw_matrix.clone();\n        for (const x of [ \"multi_block_ids\", \"raw_block_ids\" ]) {\n            if (x in this.#cache) {\n                if (this.#cache[x] === null) {\n                    new_cache[x] = null;\n                } else {\n                    new_cache[x] = this.#cache[x].clone();\n                }\n            }\n        }\n\n        // These can probably be copied directly, given that they are always\n        // replaced wholesale in the various *_and_cache functions, rather than\n        // being modified in-place.\n        for (const x of [ \"row_ids\", \"raw_annotations\", \"genes\", \"multi_block_levels\", \"raw_block_levels\" ]) {\n            if (x in this.#cache) {\n                new_cache[x] = this.#cache[x];\n            }\n        }\n\n        subset_and_cache(null, new_cache);\n\n        let new_params = this.fetchParameters();\n        new_params.subset = null;\n\n        return new InputsState(new_params, new_cache, this.#abbreviated);\n    }\n}\n\n/************************************\n ******* Internals - loading ********\n ************************************/\n\nconst known_modalities = [ \"RNA\", \"ADT\", \"CRISPR\" ];\n\nfunction bind_single_modality(modality, loaded) {\n    let output = {};\n\n    try {\n        let gnames = [];\n        let mats = [];\n        for (var i = 0; i < loaded.length; i++) {\n            mats.push(loaded[i].matrix.get(modality));\n\n            let primary_id = loaded[i].primary_ids[modality];\n            if (primary_id == null) {\n                throw new Error(\"modality '\" + modality + \"' lacks a primary identifier for dataset \" + String(i));\n            }\n            gnames.push(primary_id);\n        }\n\n        let merged = scran.cbindWithNames(mats, gnames);\n        output.matrix = merged.matrix;\n\n        // Extracting gene information from the first object. We won't make\n        // any attempt at merging and deduplication across objects.\n        output.features = bioc.SLICE(loaded[0].features[modality], merged.indices);\n        output.row_ids = bioc.SLICE(loaded[0].row_ids[modality], merged.indices);\n\n    } catch (e) {\n        utils.freeCache(output.matrix);\n        throw e;\n    }\n\n    return output;\n}\n\nfunction bind_datasets(names, loaded) {\n    let common_modes = [];\n    for (const mod of known_modalities) {\n        let okay = true;\n        for (const l of loaded) {\n            if (!l.matrix.has(mod)) {\n                okay = false;\n                break;\n            }\n        }\n        if (okay) {\n            common_modes.push(mod);\n        }\n    }\n\n    if (common_modes.length == 0) {\n        throw new Error(\"failed to find common modalities across all datasets\");\n    }\n\n    let blocks;\n    let output = { \n        matrix: new scran.MultiMatrix, \n        features: {},\n        row_ids: {}\n    };\n\n    try {\n        for (const k of common_modes) {\n            let current = bind_single_modality(k, loaded);\n            output.matrix.add(k, current.matrix);\n            output.features[k] = current.features;\n            output.row_ids[k] = current.row_ids;\n        }\n\n        let annos = loaded.map(x => x.cells);\n        output.cells = bioc.flexibleCombineRows(annos);\n\n        // Generating a block vector.\n        let ncells = new Array(loaded.length);\n        loaded.forEach((x, i) => { ncells[i] = x.matrix.numberOfColumns(); });\n        blocks = scran.createBlock(ncells);\n        output.block_ids = blocks;\n        output.block_levels = names;\n\n        let nice_barr = new Array(blocks.length);\n        blocks.forEach((x, i) => { nice_barr[i] = names[x]; })\n        output.cells.$setColumn(\"__batch__\", nice_barr);\n\n    } catch (e) {\n        utils.freeCache(blocks);\n        utils.freeCache(output.matrix);\n        throw e;\n    } \n\n    return output;\n}\n\nfunction rename_dataset(single) {\n    let modalities = single.matrix.available();\n    if (modalities.length == 0) {\n        throw new Error(\"\");\n    }\n\n    let output = { \n        matrix: new scran.MultiMatrix, \n        features: {},\n        row_ids: {}\n    };\n\n    try {\n        for (const k of known_modalities) {\n            if (!single.matrix.has(k)) {\n                continue;\n            }\n\n            output.matrix.add(k, single.matrix.get(k));\n            output.features[k] = single.features[k];\n            output.row_ids[k] = single.row_ids[k];\n        }\n    } catch (e) {\n        scran.free(output.matrix);\n        throw e;\n    }\n\n    output.cells = single.cells;\n    output.block_ids = null;\n    output.block_levels = null;\n\n    return output;\n}\n\nasync function load_datasets(datasets, preserve_dataset_cache) {\n    // Ensure we have a reproducible order; otherwise the batch\n    // order becomes dependent on the JS engine's ordering.\n    let names = Object.keys(datasets);\n    names.sort();\n\n    let loaded = [];\n    try {\n        for (const key of names) {\n            // Too much hassle to convert this into a Promise.all(), because we\n            // need to make sure it gets freed properly on failure.\n            loaded.push(await datasets[key].load({ cache: preserve_dataset_cache }));\n        }\n    } catch (e) {\n        // If any one fails, we free the rest.\n        for (const x of loaded) {\n            scran.free(x.matrix);\n        }\n        throw e;\n    }\n\n    let output;\n    if (names.length == 1) {\n        try {\n            output = rename_dataset(loaded[0]);\n        } catch (e) {\n            scran.free(loaded[0].matrix);\n            throw e;\n        }\n    } else {\n        try {\n            output = bind_datasets(names, loaded);\n        } finally {\n            // No need to hold references to the individual matrices once the\n            // binding is complete, so we release them.\n             for (const x of loaded) {\n                scran.free(x.matrix);\n            }\n        }\n    }\n\n    return output;\n}\n\n/******************************************\n ******* Internals - miscellaneous ********\n ******************************************/\n\nconst invalid_block_id = -1;\n\nfunction harvest_subset_indices(subset, cache) {\n    let keep;\n\n    if (RAW_SUBSET_OVERRIDE in cache) {\n        keep = cache[RAW_SUBSET_OVERRIDE];\n    } else if (subset == null) {\n        keep = null;\n    } else {\n        if (!cache.raw_annotations.hasColumn(subset.field)) {\n            throw new Error(\"failed to find '\" + subset.field + \"' in the column annotations\");\n        }\n\n        let anno = cache.raw_annotations.column(subset.field);\n        keep = [];\n\n        if (\"values\" in subset) {\n            let allowed = new Set(subset.values);\n            anno.forEach((x, i) => {\n                if (allowed.has(x)) {\n                    keep.push(i);\n                }\n            });\n        } else {\n            // Check each entry to see whether it belongs to the range.\n            // This is cheaper than sorting anything, assuming there \n            // aren't that many ranges.\n            anno.forEach((x, i) => {\n                for (const r of subset.ranges) {\n                    if (x >= r[0] && x <= r[1]) {\n                        keep.push(i);\n                        return;\n                    }\n                }\n            });\n        }\n    }\n\n    // Filter out invalid block IDs. Note that this might get called\n    // before compute() is run (via undoSubset), so we need to protect\n    // against the case where the raw_block_ids has not been set yet.\n    if (\"raw_block_ids\" in cache && cache.raw_block_ids !== null) {\n        let bids = cache.raw_block_ids.array();\n\n        let keep2 = [];\n        if (keep !== null) {\n            for (const i of keep) {\n                if (bids[i] !== invalid_block_id) {\n                    keep2.push(i);\n                }\n            }\n        } else {\n            for (var i = 0; i < bids.length; i++) {\n                if (bids[i] !== invalid_block_id) {\n                    keep2.push(i);\n                }\n            }\n        }\n        keep = keep2;\n    }\n\n    return keep;\n}\n\nfunction check_subset_ranges(ranges) { \n    if (ranges.length % 2 !== 0) {\n        throw new Error(\"'ranges' should have two columns in 'subset'\");\n    }\n    for (var i = 1; i < ranges.length; i++) {\n        if (ranges[i] < ranges[i-1]) {\n            throw new Error(\"'ranges' should be sorted in increasing order\");\n        }\n    }\n}\n\n/************************************\n ******* Internals - caching ********\n ************************************/\n\nasync function load_and_cache(new_datasets, cache, preserve_dataset_cache) {\n    utils.freeCache(cache.raw_matrix);\n    utils.freeCache(cache.matrix); // freeing this as well, to release all references and potentially release memory.\n    utils.freeCache(cache.multi_block_ids);\n\n    let res = await load_datasets(new_datasets, preserve_dataset_cache);\n    cache.raw_matrix = res.matrix;\n    cache.row_ids = res.row_ids;\n    cache.raw_annotations = res.cells;\n    cache.multi_block_ids = res.block_ids;\n    cache.multi_block_levels = res.block_levels;\n    cache.genes = res.features;\n}\n\nfunction block_and_cache(block_factor, cache) {\n    utils.freeCache(cache.raw_block_ids);\n\n    let blocks = null;\n    let block_levels = null;\n\n    if (block_factor !== null) {\n        // Single matrix with a batch factor.\n        try {\n            let anno_batch = cache.raw_annotations.column(block_factor);\n            if (anno_batch.length != cache.raw_matrix.numberOfColumns()) {\n                throw new Error(\"length of blocking factor '\" + block_factor + \"' should be equal to the number of cells\"); \n            }\n            let converted = scran.factorize(anno_batch, { action: \"none\", placeholder: invalid_block_id });\n            blocks = converted.ids;\n            block_levels = converted.levels;\n        } catch (e) {\n            utils.freeCache(blocks);\n            throw e;\n        }\n    } else {\n        if (cache.multi_block_ids !== null) { \n            // Creating a view so that freeing of this object is a no-op.\n            // We're downstream of load_and_cache so any freeing of\n            // multi_block_ids would require block_and_cache to rerun\n            // anyway, so we don't have to worry about invalidation.\n            blocks = cache.multi_block_ids.view();\n        } else {\n            blocks = null;\n        }\n        block_levels = cache.multi_block_levels;\n    }\n\n    cache.raw_block_ids = blocks;\n    cache.raw_block_levels = block_levels;\n}\n\nfunction subset_and_cache(subset, cache) {\n    utils.freeCache(cache.matrix);\n    utils.freeCache(cache.block_ids);\n\n    let keep = harvest_subset_indices(subset, cache);\n\n    let new_annotations;\n    let new_matrix;\n    let new_block_ids;\n    let new_block_levels;\n\n    try {\n        if (keep === null) {\n            new_annotations = cache.raw_annotations;\n\n            // Need to make a clone so that it can be freed independently of the original.\n            // This is cheap as only the shared pointer is cloned, not the underlying data.\n            new_matrix = cache.raw_matrix.clone();\n\n            if (cache.raw_block_ids !== null) {\n                // A view also works, given that we're downstream of the generating\n                // process for raw_block_ids and thus our lifetime is always tied to it.\n                new_block_ids = cache.raw_block_ids.view();\n                new_block_levels = cache.raw_block_levels;\n            } else {\n                new_block_ids = null;\n                new_block_levels = null;\n            }\n\n        } else {\n            new_annotations = bioc.SLICE(cache.raw_annotations, keep);\n\n            if (cache.raw_block_ids !== null) {\n                new_block_ids = scran.subsetBlock(cache.raw_block_ids, keep);\n                let dropped = scran.dropUnusedBlock(new_block_ids);\n                new_block_levels = dropped.map(x => cache.raw_block_levels[x]);\n            } else {\n                new_block_ids = null;\n                new_block_levels = null;\n            }\n\n            new_matrix = new scran.MultiMatrix;\n            for (const key of cache.raw_matrix.available()) {\n                let current = cache.raw_matrix.get(key);\n                new_matrix.add(key, scran.subsetColumns(current, keep));\n            }\n        }\n\n    } catch (e) {\n        utils.freeCache(new_matrix);\n        utils.freeCache(new_block_ids);\n        throw e;\n    }\n\n    cache.annotations = new_annotations;\n    cache.block_levels = new_block_levels;\n    cache.block_ids = new_block_ids;\n    cache.matrix = new_matrix;\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function updateRowIdentities(current, old) {\n    if (current.length == old.length) {\n        if (current.every((x, i) => x == old[i])) {\n            return y => y;\n        }\n    }\n\n    let mapping = {};\n    old.forEach((x, i) => {\n        mapping[x] = i;\n    });\n\n    let perm = new Int32Array(current.length);\n    current.forEach((x, i) => {\n        if (x in mapping) {\n            perm[i] = mapping[x];\n        } else {\n            perm[i] = -1;\n        }\n    });\n\n    return y => {\n        let copy = new y.constructor(perm.length);\n        perm.forEach((i, j) => {\n            if (i == -1) {\n                if (copy instanceof Array) {\n                    copy[j] = null;\n                } else if (copy instanceof Float64Array) {\n                    copy[j] = Number.NaN;\n                } else {\n                    copy[j] = -1; // dunno what else to do here.\n                }\n            } else {\n                copy[j] = y[i];\n            }\n        });\n        return copy;\n    };\n}\n\nfunction extract_serialized_files(handle) {\n    let kids = handle.children;\n    let all_files = new Array(kids.length);\n\n    for (const x of Object.keys(kids)) {\n        let current = handle.open(x);\n\n        let curfile = {};\n        for (const field of [\"type\", \"name\"]) {\n            let dhandle = current.open(field, { load: true });\n            curfile[field] = dhandle.values[0];\n        }\n\n        if (\"id\" in current.children) {\n            curfile.id = current.open(\"id\", { load: true }).values[0];\n        } else {\n            for (const field of [\"offset\", \"size\"]) {\n                curfile[field] = current.open(field, { load: true }).values[0];\n            }\n        }\n\n        let idx = Number(x);\n        all_files[idx] = curfile;\n    }\n\n    return all_files;\n}\n\nasync function unserialize_Dataset(format, all_files, all_options, loader) {\n    if (!(format in iutils.availableReaders)) {\n        throw new Error(\"unknown format '\" + format + \"' during unserialization\");\n    }\n    let cls = iutils.availableReaders[format];\n\n    let handles = [];\n    for (const f of all_files) {\n        let b;\n        if (loader == null) {\n            if (link2file == null) {\n                throw new Error(\"no valid linking function from 'setResolveLink'\");\n            }\n            b = await link2file(f.id);\n        } else {\n            b = await loader(f.offset, f.size);\n        }\n        let handle = new iutils.SimpleFile(b, { name: f.name }) \n        handles.push({ type: f.type, file: handle });\n    }\n\n    return await cls.unserialize(handles, all_options);\n}\n\nexport async function unserialize(handle, embeddedLoader) {\n    let ghandle = handle.open(\"inputs\");\n    let phandle = ghandle.open(\"parameters\");\n\n    let readers = {};\n    let parameters = { block_factor: null };\n    let solofile = false; // legacy argument.\n\n    if (\"datasets\" in phandle.children) {\n        let dhandle = phandle.open(\"datasets\");\n        for (const k of Object.keys(dhandle.children)) {\n            let curdhandle = dhandle.open(k);\n            let format = curdhandle.open(\"format\", { load: true }).values[0];\n            let name = curdhandle.open(\"name\", { load: true }).values[0];\n\n            let fihandle = curdhandle.open(\"files\");\n            let curfiles = extract_serialized_files(fihandle);\n\n            let options = {};\n            if (\"options\" in curdhandle.children) {\n                options = JSON.parse(curdhandle.open(\"options\", { load: true }).values[0]);\n            }\n\n            readers[name] = await unserialize_Dataset(format, curfiles, options, embeddedLoader);\n        }\n\n        if (\"block_factor\" in phandle.children) {\n            parameters.block_factor = phandle.open(\"block_factor\", { load: true }).values[0];\n        }\n\n    } else {\n        // Extracting the files.\n        let fihandle = phandle.open(\"files\");\n        let all_files = extract_serialized_files(fihandle);\n\n        // Extracting the format and organizing the files.\n        let fohandle = phandle.open(\"format\", { load: true });\n        solofile = (fohandle.shape.length == 0);\n\n        if (solofile) {\n            let format = fohandle.values[0];\n            readers[\"default\"] = await unserialize_Dataset(format, all_files, {}, embeddedLoader);\n            if (\"sample_factor\" in phandle.children) {\n                parameters.block_factor = phandle.open(\"sample_factor\", { load: true }).values[0];\n            }\n\n        } else {\n            let formats = fohandle.values;\n            let sample_names = phandle.open(\"sample_names\", { load: true }).values;\n            let sample_groups = phandle.open(\"sample_groups\", { load: true }).values;\n\n            let sofar = 0;\n            for (var i = 0; i < formats.length; i++) {\n                let start = sofar;\n                sofar += sample_groups[i];\n                let curfiles = all_files.slice(start, sofar);\n                let format = formats[i];\n                readers[sample_names[i]] = await unserialize_Dataset(format, curfiles, {}, embeddedLoader);\n            }\n        }\n    }\n\n    // Figuring out the subset.\n    let subset = null;\n    let raw_indices = null;\n    if (\"subset\" in phandle.children) {\n        let shandle = phandle.open(\"subset\");\n\n        if (\"cells\" in shandle.children) {\n            let schandle = shandle.open(\"cells\");\n            if (\"indices\" in schandle.children) {\n                raw_indices = schandle.open(\"indices\", { load: true }).values;\n            } else if (\"field\" in schandle.children) {\n                subset = { field: schandle.open(\"field\", { load: true }).values[0] };\n\n                if (\"values\" in schandle.children) {\n                    subset.values = schandle.open(\"values\", { load: true }).values;\n                } else {\n                    let ranges = schandle.open(\"ranges\", { load: true }).values;\n                    check_subset_ranges(ranges);\n                    let reranges = [];\n                    for (var i = 0; i < ranges.length/2; i++) {\n                        reranges.push([ ranges[2*i], ranges[2*i + 1] ]);\n                    }\n                    subset.ranges = reranges;\n                }\n            } else {\n                throw new Error(\"unrecognized specification for 'subset'\");\n            }\n        }\n    }\n\n    parameters.subset = subset;\n\n    // Loading matrix data.\n    let cache = { readers: readers };\n    await load_and_cache(readers, cache);\n    block_and_cache(parameters.block_factor, cache);\n\n    if (raw_indices !== null) {\n        cache[RAW_SUBSET_OVERRIDE] = raw_indices;\n    }\n    subset_and_cache(parameters.subset, cache);\n\n    // We need to do something if the permutation is not the same.\n    let rhandle = ghandle.open(\"results\");\n    let perm = {};\n\n    if (\"feature_identities\" in rhandle.children) { \n        // v3.0\n        let ihandle = rhandle.open(\"feature_identities\");\n        for (const a of Object.keys(ihandle.children)) {\n            if (cache.matrix.has(a)) {\n                let dhandle = ihandle.open(a, { load: true });\n                perm[a] = updateRowIdentities(cache.row_ids[a], dhandle.values);\n            }\n        }\n    } else {\n        if (solofile) {\n            if (\"permutation\" in rhandle.children) {\n                // v1.0-v1.1\n                let dhandle = rhandle.open(\"permutation\", { load: true });\n                let ids = new Int32Array(dhandle.values.length);\n                dhandle.values.forEach((x, i) => { ids[x] = i; });\n                perm.RNA = updateRowIdentities(cache.row_ids[\"RNA\"], ids);\n            } else if (\"identities\" in rhandle.children) {\n                if (rhandle.children[\"identities\"] == \"DataSet\") {\n                    // v1.2\n                    let dhandle = rhandle.open(\"identities\", { load: true });\n                    perm.RNA = updateRowIdentities(cache.row_ids[\"RNA\"], dhandle.values);\n                } else {\n                    // v2.0\n                    let ihandle = rhandle.open(\"identities\");\n                    for (const a of Object.keys(ihandle.children)) {\n                        if (cache.matrix.has(a)) {\n                            let dhandle = ihandle.open(a, { load: true });\n                            perm[a] = updateRowIdentities(cache.row_ids[a], dhandle.values);\n                        }\n                    }\n                }\n            } else {\n                // Otherwise, we're dealing with v0 states. We'll just\n                // assume it was the same, I guess. Should be fine as we didn't change\n                // the permutation code in v0.\n            }\n        } else {\n            let old_ids;\n            if (\"indices\" in rhandle.children) {\n                // v1.1\n                old_ids = rhandle.open(\"indices\", { load: true }).values;\n\n                let ref = cache.row_ids[\"RNA\"].slice().sort();\n                let old_ids2 = old_ids.slice().sort();\n                for (var i = 0; i < old_ids2.length; i++) {\n                    if (ref[i] != old_ids2[i]) {\n                        console.log([i, ref[i], old_ids2[i]]);\n                        break;\n                    }\n                }\n                perm.RNA = updateRowIdentities(cache.row_ids[\"RNA\"], old_ids);\n            } else {\n                if (rhandle.children[\"identities\"] == \"DataSet\") {\n                    // v1.2+\n                    old_ids = rhandle.open(\"identities\", { load: true }).values;\n                    perm.RNA = updateRowIdentities(cache.row_ids[\"RNA\"], old_ids);\n                } else {\n                    // v2.0\n                    let ihandle = rhandle.open(\"identities\");\n                    for (const a of Object.keys(ihandle.children)) {\n                        if (cache.matrix.has(a)) {\n                            let dhandle = ihandle.open(a, { load: true });\n                            perm[a] = updateRowIdentities(cache.row_ids[a], dhandle.values);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Any missing modalities, for whatever reason.\n    for (const a of cache.matrix.available()) {\n        if (!(a in perm)) {\n            perm[a] = y => y;\n        }\n    }\n\n    /*\n     * We could try to construct 'abbreviated', but there isn't really\n     * any point because callers are expected to set 'datasets = null'\n     * in their calls to 'compute()' on an unserialized analysis, so \n     * any setting of '#abbreviated' wouldn't even get used.\n     */\n\n    return { \n        state: new InputsState(parameters, cache),\n        permuters: perm\n    };\n}\n\n/**************************\n ******** Linking *********\n **************************/\n\nvar file2link = null;\nvar link2file = null;\n\n/**\n * Specify a function to create links for data files.\n *\n * @param {function} fun - Function that accepts:\n *\n * - `format`: the string containing the format of the dataset that owns the file.\n * - `file`: a {@linkplain SimpleFile} representing the file contents.\n *\n * It should return a string containing some unique identifier to the file.\n * This is most typically used to register the file with some user-specified database system for later retrieval.\n *\n * @return `fun` is set as the global link creator for this step. \n * The _previous_ value of the creator is returned.\n */\nexport function setCreateLink(fun) {\n    let previous = file2link;\n    file2link = fun;\n    return previous;\n}\n\n/**\n * Specify a function to resolve links for data files.\n *\n * @param {function} fun - Function that accepts a string containing a linking idenfier and returns any value that can be used in the {@linkplain SimpleFile} constructor\n * i.e., a Uint8Array, File (on browser) or string containing a file path (on Node.js).\n * This is most typically used to retrieve a file from some user-specified database system.\n *\n * @return `fun` is set as the global resolver for this step. \n * The _previous_ value of the resolver is returned.\n */\nexport function setResolveLink(fun) {\n    let previous = link2file;\n    link2file = fun;\n    return previous;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./general.js\";\nimport * as aworkers from \"./abstract/workers_parent.js\";\n\nvar animateFun = (x, y, i) => null;\n\n/**\n * Specify a function to handle animation iterations for the low-dimensional embeddings.\n * The exact nature of this handling is arbitrary - developers may post the contents to another thread, save them to file, etc.\n *\n * @param {function} fun - Function to process each animation iteration.\n * This should accept four arguments, in the following order:\n * - A string containing either `\"tsne\"` or `\"umap\"`.\n * - A `Float64Array` containing the x-coordinates for each cell.\n * - A `Float64Array` containing the y-coordinates for each cell.\n * - An integer specifying the iteration number.\n *\n * @return `fun` is set as the global animator function for t-SNE and UMAP.\n * The _previous_ value of the animator is returned.\n */\nexport function setVisualizationAnimate(fun) {\n    let previous = animateFun;\n    animateFun = fun;\n    return previous;\n}\n\nexport var scranOptions = { numberOfThreads: 1 };\n\nexport function computeNeighbors(index, k) {\n    var nn_index = index.fetchIndex();\n\n    var output = { \"num_obs\": nn_index.numberOfCells() };\n    var results = null, rbuf = null, ibuf = null, dbuf = null;\n    try {\n        results = scran.findNearestNeighbors(nn_index, k);\n\n        rbuf = scran.createInt32WasmArray(results.numberOfCells());\n        ibuf = scran.createInt32WasmArray(results.size());\n        dbuf = scran.createFloat64WasmArray(results.size());\n\n        results.serialize({ runs: rbuf, indices: ibuf, distances: dbuf });\n        output[\"size\"] = results.size();\n        output[\"runs\"] = rbuf.array().slice();\n        output[\"indices\"] = ibuf.array().slice();\n        output[\"distances\"] = dbuf.array().slice();\n\n    } finally {\n        if (results !== null) {\n            results.free();\n        }\n        if (rbuf !== null) {\n            rbuf.free();\n        }\n        if (ibuf !== null) {\n            ibuf.free();\n        }\n        if (dbuf !== null) {\n            dbuf.free();\n        }\n    }\n\n    return output;\n}\n\nconst worker_registry = [];\nconst worker_cache_registry = [];\n\nfunction message_type(info) {\n    return info.type;\n}\n\nfunction handle_message(functions, info) {\n    if (message_type(info) == \"error\") {\n        functions.reject(info.error);\n    } else {\n        functions.resolve(info.data);\n    }\n}\n\nexport function sendTask(worker_id, payload, transferrable = []) {\n    let worker = worker_registry[worker_id];\n    let cache = worker_cache_registry[worker_id];\n\n    var i = cache.counter;\n    var p = new Promise((resolve, reject) => {\n        let functions = { \"resolve\": resolve, \"reject\": reject };\n        if (i in cache.promises) {\n            // Not sure if the JS engine guarantees that the resolve/reject is\n            // set up before the worker returns the message; for all we know,\n            // we could send the message (and hit the worker callback) before\n            // we run the set-up code. If that's the case, we simply resolve \n            // this Promise using the information provided in the callback.\n            handle_message(functions, cache.promises[i]);\n            delete cache.promises[i];\n        } else {\n            cache.promises[i] = functions;\n        }\n    });\n\n    cache.counter++;\n    payload.id = i;\n    aworkers.sendMessage(worker, payload, transferrable);\n    return p;\n}\n\nexport function initializeWorker(worker, scranOptions) { \n    let n = worker_registry.length;\n    worker_registry.push(worker);\n    let cache = { counter: 0, promises: {} };\n    worker_cache_registry.push(cache);\n\n    aworkers.registerCallback(worker, msg => {\n        var type = message_type(msg.data);\n        if (type.endsWith(\"_iter\")) {\n            animateFun(type.slice(0, -5), msg.data.x, msg.data.y, msg.data.iteration);\n            return;\n        }\n\n        var id = msg.data.id;\n        if (id in cache.promises) {\n            handle_message(cache.promises[id], msg.data);\n            delete cache.promises[id];\n        } else {\n            // If the Promise setup in sendTask has not yet been scheduled in\n            // the event loop, we store the message so that it can be used\n            // directly to resolve the Promise during setup.\n            cache.promises[id] = msg.data;\n        }\n    });\n\n    return {\n        \"worker_id\": n,\n        \"ready\": sendTask(n, { \"cmd\": \"INIT\", scranOptions: scranOptions })\n    };\n}\n\nexport async function killWorker(worker_id) {\n    await sendTask(worker_id, { \"cmd\": \"KILL\" });\n    let worker = worker_registry[worker_id];\n    worker_registry[worker_id] = null;\n    return aworkers.terminateWorker(worker);\n}\n\nexport function killAllWorkers() {\n    let p = [];\n    for (var i = 0; i < worker_registry.length; i++) {\n        if (worker_registry[i] !== null) {\n            let p_ = killWorker(i);\n            if (p_) { // not null, not undefined.\n                p.push(p_);\n            }\n        }\n    }\n    return Promise.all(p).then(x => null);\n}\n\nexport function runWithNeighbors(worker_id, args, nn_out) {\n    var run_msg = {\n        \"cmd\": \"RUN\",\n        \"params\": args \n    };\n\n    var transferrable = [];\n    if (nn_out !== null) {\n        transferrable = [\n            nn_out.runs.buffer,\n            nn_out.indices.buffer,\n            nn_out.distances.buffer\n        ];\n        run_msg.neighbors = nn_out;\n    }\n\n    return sendTask(worker_id, run_msg, transferrable);\n}\n","export const bakana_version=\"2.0.8\";\n","\n/*! pako 2.1.0 https://github.com/nodeca/pako @license (MIT AND Zlib) */\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//const Z_FILTERED          = 1;\n//const Z_HUFFMAN_ONLY      = 2;\n//const Z_RLE               = 3;\nconst Z_FIXED$1               = 4;\n//const Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nconst Z_BINARY              = 0;\nconst Z_TEXT                = 1;\n//const Z_ASCII             = 1; // = Z_TEXT\nconst Z_UNKNOWN$1             = 2;\n\n/*============================================================================*/\n\n\nfunction zero$1(buf) { let len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nconst STORED_BLOCK = 0;\nconst STATIC_TREES = 1;\nconst DYN_TREES    = 2;\n/* The three kinds of block type */\n\nconst MIN_MATCH$1    = 3;\nconst MAX_MATCH$1    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nconst LENGTH_CODES$1  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nconst LITERALS$1      = 256;\n/* number of literal bytes 0..255 */\n\nconst L_CODES$1       = LITERALS$1 + 1 + LENGTH_CODES$1;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nconst D_CODES$1       = 30;\n/* number of distance codes */\n\nconst BL_CODES$1      = 19;\n/* number of codes used to transfer the bit lengths */\n\nconst HEAP_SIZE$1     = 2 * L_CODES$1 + 1;\n/* maximum heap size */\n\nconst MAX_BITS$1      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nconst MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nconst END_BLOCK   = 256;\n/* end of block literal code */\n\nconst REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nconst REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nconst REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nconst extra_lbits =   /* extra bits for each length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]);\n\nconst extra_dbits =   /* extra bits for each distance code */\n  new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]);\n\nconst extra_blbits =  /* extra bits for each bit length code */\n  new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]);\n\nconst bl_order =\n  new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nconst DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nconst static_ltree  = new Array((L_CODES$1 + 2) * 2);\nzero$1(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nconst static_dtree  = new Array(D_CODES$1 * 2);\nzero$1(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nconst _dist_code    = new Array(DIST_CODE_LEN);\nzero$1(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nconst _length_code  = new Array(MAX_MATCH$1 - MIN_MATCH$1 + 1);\nzero$1(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nconst base_length   = new Array(LENGTH_CODES$1);\nzero$1(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nconst base_dist     = new Array(D_CODES$1);\nzero$1(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nlet static_l_desc;\nlet static_d_desc;\nlet static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nconst d_code = (dist) => {\n\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n};\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nconst put_short = (s, w) => {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n};\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nconst send_bits = (s, value, length) => {\n\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n};\n\n\nconst send_code = (s, c, tree) => {\n\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n};\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nconst bi_reverse = (code, len) => {\n\n  let res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nconst bi_flush = (s) => {\n\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n};\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nconst gen_bitlen = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n\n  const tree            = desc.dyn_tree;\n  const max_code        = desc.max_code;\n  const stree           = desc.stat_desc.static_tree;\n  const has_stree       = desc.stat_desc.has_stree;\n  const extra           = desc.stat_desc.extra_bits;\n  const base            = desc.stat_desc.extra_base;\n  const max_length      = desc.stat_desc.max_length;\n  let h;              /* heap index */\n  let n, m;           /* iterate over the tree elements */\n  let bits;           /* bit length */\n  let xbits;          /* extra bits */\n  let f;              /* frequency */\n  let overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE$1; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Tracev((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Tracev((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nconst gen_codes = (tree, max_code, bl_count) => {\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n\n  const next_code = new Array(MAX_BITS$1 + 1); /* next code value for each bit length */\n  let code = 0;              /* running code value */\n  let bits;                  /* bit index */\n  let n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS$1; bits++) {\n    code = (code + bl_count[bits - 1]) << 1;\n    next_code[bits] = code;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    let len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n};\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nconst tr_static_init = () => {\n\n  let n;        /* iterates over tree elements */\n  let bits;     /* bit counter */\n  let length;   /* length value */\n  let code;     /* code value */\n  let dist;     /* distance index */\n  const bl_count = new Array(MAX_BITS$1 + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES$1 - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES$1; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS$1; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES$1 + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES$1; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS$1 + 1, L_CODES$1, MAX_BITS$1);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES$1, MAX_BITS$1);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES$1, MAX_BL_BITS);\n\n  //static_init_done = true;\n};\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nconst init_block = (s) => {\n\n  let n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES$1;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES$1;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES$1; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.sym_next = s.matches = 0;\n};\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nconst bi_windup = (s) =>\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n};\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nconst smaller = (tree, n, m, depth) => {\n\n  const _n2 = n * 2;\n  const _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n};\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nconst pqdownheap = (s, tree, k) => {\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n\n  const v = s.heap[k];\n  let j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n};\n\n\n// inlined manually\n// const SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nconst compress_block = (s, ltree, dtree) => {\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n\n  let dist;           /* distance of matched string */\n  let lc;             /* match length or unmatched char (if dist == 0) */\n  let sx = 0;         /* running index in sym_buf */\n  let code;           /* the code to send */\n  let extra;          /* number of extra bits to send */\n\n  if (s.sym_next !== 0) {\n    do {\n      dist = s.pending_buf[s.sym_buf + sx++] & 0xff;\n      dist += (s.pending_buf[s.sym_buf + sx++] & 0xff) << 8;\n      lc = s.pending_buf[s.sym_buf + sx++];\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS$1 + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and sym_buf is ok: */\n      //Assert(s->pending < s->lit_bufsize + sx, \"pendingBuf overflow\");\n\n    } while (sx < s.sym_next);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n};\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nconst build_tree = (s, desc) => {\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n\n  const tree     = desc.dyn_tree;\n  const stree    = desc.stat_desc.static_tree;\n  const has_stree = desc.stat_desc.has_stree;\n  const elems    = desc.stat_desc.elems;\n  let n, m;          /* iterate over heap elements */\n  let max_code = -1; /* largest code with non zero frequency */\n  let node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE$1;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n};\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nconst scan_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nconst send_tree = (s, tree, max_code) => {\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n\n  let n;                     /* iterates over all tree elements */\n  let prevlen = -1;          /* last emitted length */\n  let curlen;                /* length of current code */\n\n  let nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  let count = 0;             /* repeat count of the current code */\n  let max_count = 7;         /* max repeat count */\n  let min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n};\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nconst build_bl_tree = (s) => {\n\n  let max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES$1 - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n};\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nconst send_all_trees = (s, lcodes, dcodes, blcodes) => {\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n\n  let rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n};\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"block list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"allow list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nconst detect_data_type = (s) => {\n  /* block_mask is the bit mask of block-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  let block_mask = 0xf3ffc07f;\n  let n;\n\n  /* Check for non-textual (\"block-listed\") bytes. */\n  for (n = 0; n <= 31; n++, block_mask >>>= 1) {\n    if ((block_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"allow-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS$1; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"block-listed\" or \"allow-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n};\n\n\nlet static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nconst _tr_init$1 = (s) =>\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n};\n\n\n/* ===========================================================================\n * Send a stored block\n */\nconst _tr_stored_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  bi_windup(s);        /* align on byte boundary */\n  put_short(s, stored_len);\n  put_short(s, ~stored_len);\n  if (stored_len) {\n    s.pending_buf.set(s.window.subarray(buf, buf + stored_len), s.pending);\n  }\n  s.pending += stored_len;\n};\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nconst _tr_align$1 = (s) => {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n};\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and write out the encoded block.\n */\nconst _tr_flush_block$1 = (s, buf, stored_len, last) => {\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n\n  let opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  let max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN$1) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->sym_next / 3));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block$1(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED$1 || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n};\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nconst _tr_tally$1 = (s, dist, lc) => {\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist;\n  s.pending_buf[s.sym_buf + s.sym_next++] = dist >> 8;\n  s.pending_buf[s.sym_buf + s.sym_next++] = lc;\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS$1 + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n  return (s.sym_next === s.sym_end);\n};\n\nvar _tr_init_1  = _tr_init$1;\nvar _tr_stored_block_1 = _tr_stored_block$1;\nvar _tr_flush_block_1  = _tr_flush_block$1;\nvar _tr_tally_1 = _tr_tally$1;\nvar _tr_align_1 = _tr_align$1;\n\nvar trees = {\n\t_tr_init: _tr_init_1,\n\t_tr_stored_block: _tr_stored_block_1,\n\t_tr_flush_block: _tr_flush_block_1,\n\t_tr_tally: _tr_tally_1,\n\t_tr_align: _tr_align_1\n};\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst adler32 = (adler, buf, len, pos) => {\n  let s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n};\n\n\nvar adler32_1 = adler32;\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nconst makeTable = () => {\n  let c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n};\n\n// Create table on load. Just 255 signed longs. Not a problem.\nconst crcTable = new Uint32Array(makeTable());\n\n\nconst crc32 = (crc, buf, len, pos) => {\n  const t = crcTable;\n  const end = pos + len;\n\n  crc ^= -1;\n\n  for (let i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n};\n\n\nvar crc32_1 = crc32;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar messages = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar constants$2 = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  Z_MEM_ERROR:       -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst { _tr_init, _tr_stored_block, _tr_flush_block, _tr_tally, _tr_align } = trees;\n\n\n\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$2, Z_PARTIAL_FLUSH, Z_FULL_FLUSH: Z_FULL_FLUSH$1, Z_FINISH: Z_FINISH$3, Z_BLOCK: Z_BLOCK$1,\n  Z_OK: Z_OK$3, Z_STREAM_END: Z_STREAM_END$3, Z_STREAM_ERROR: Z_STREAM_ERROR$2, Z_DATA_ERROR: Z_DATA_ERROR$2, Z_BUF_ERROR: Z_BUF_ERROR$1,\n  Z_DEFAULT_COMPRESSION: Z_DEFAULT_COMPRESSION$1,\n  Z_FILTERED, Z_HUFFMAN_ONLY, Z_RLE, Z_FIXED, Z_DEFAULT_STRATEGY: Z_DEFAULT_STRATEGY$1,\n  Z_UNKNOWN,\n  Z_DEFLATED: Z_DEFLATED$2\n} = constants$2;\n\n/*============================================================================*/\n\n\nconst MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nconst MAX_WBITS$1 = 15;\n/* 32K LZ77 window */\nconst DEF_MEM_LEVEL = 8;\n\n\nconst LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nconst LITERALS      = 256;\n/* number of literal bytes 0..255 */\nconst L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nconst D_CODES       = 30;\n/* number of distance codes */\nconst BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nconst HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nconst MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nconst MIN_MATCH = 3;\nconst MAX_MATCH = 258;\nconst MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nconst PRESET_DICT = 0x20;\n\nconst INIT_STATE    =  42;    /* zlib header -> BUSY_STATE */\n//#ifdef GZIP\nconst GZIP_STATE    =  57;    /* gzip header -> BUSY_STATE | EXTRA_STATE */\n//#endif\nconst EXTRA_STATE   =  69;    /* gzip extra block -> NAME_STATE */\nconst NAME_STATE    =  73;    /* gzip file name -> COMMENT_STATE */\nconst COMMENT_STATE =  91;    /* gzip comment -> HCRC_STATE */\nconst HCRC_STATE    = 103;    /* gzip header CRC -> BUSY_STATE */\nconst BUSY_STATE    = 113;    /* deflate -> FINISH_STATE */\nconst FINISH_STATE  = 666;    /* stream complete */\n\nconst BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nconst BS_BLOCK_DONE     = 2; /* block flush performed */\nconst BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nconst BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nconst OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nconst err = (strm, errorCode) => {\n  strm.msg = messages[errorCode];\n  return errorCode;\n};\n\nconst rank = (f) => {\n  return ((f) * 2) - ((f) > 4 ? 9 : 0);\n};\n\nconst zero = (buf) => {\n  let len = buf.length; while (--len >= 0) { buf[len] = 0; }\n};\n\n/* ===========================================================================\n * Slide the hash table when sliding the window down (could be avoided with 32\n * bit values at the expense of memory usage). We slide even when level == 0 to\n * keep the hash table consistent if we switch back to level > 0 later.\n */\nconst slide_hash = (s) => {\n  let n, m;\n  let p;\n  let wsize = s.w_size;\n\n  n = s.hash_size;\n  p = n;\n  do {\n    m = s.head[--p];\n    s.head[p] = (m >= wsize ? m - wsize : 0);\n  } while (--n);\n  n = wsize;\n//#ifndef FASTEST\n  p = n;\n  do {\n    m = s.prev[--p];\n    s.prev[p] = (m >= wsize ? m - wsize : 0);\n    /* If n is not on any hash chain, prev[n] is garbage but\n     * its value will never be used.\n     */\n  } while (--n);\n//#endif\n};\n\n/* eslint-disable new-cap */\nlet HASH_ZLIB = (s, prev, data) => ((prev << s.hash_shift) ^ data) & s.hash_mask;\n// This hash causes less collisions, https://github.com/nodeca/pako/issues/135\n// But breaks binary compatibility\n//let HASH_FAST = (s, prev, data) => ((prev << 8) + (prev >> 8) + (data << 4)) & s.hash_mask;\nlet HASH = HASH_ZLIB;\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output, except for\n * some deflate_stored() output, goes through this function so some\n * applications may wish to modify it to avoid allocating a large\n * strm->next_out buffer and copying into it. (See also read_buf()).\n */\nconst flush_pending = (strm) => {\n  const s = strm.state;\n\n  //_tr_flush_bits(s);\n  let len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  strm.output.set(s.pending_buf.subarray(s.pending_out, s.pending_out + len), strm.next_out);\n  strm.next_out  += len;\n  s.pending_out  += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending      -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n};\n\n\nconst flush_block_only = (s, last) => {\n  _tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n};\n\n\nconst put_byte = (s, b) => {\n  s.pending_buf[s.pending++] = b;\n};\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nconst putShortMSB = (s, b) => {\n\n  //  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n};\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nconst read_buf = (strm, buf, start, size) => {\n\n  let len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  buf.set(strm.input.subarray(strm.next_in, strm.next_in + len), start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32_1(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32_1(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n};\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nconst longest_match = (s, cur_match) => {\n\n  let chain_length = s.max_chain_length;      /* max hash chain length */\n  let scan = s.strstart; /* current string */\n  let match;                       /* matched string */\n  let len;                           /* length of current match */\n  let best_len = s.prev_length;              /* best match length so far */\n  let nice_match = s.nice_match;             /* stop if match long enough */\n  const limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  const _win = s.window; // shortcut\n\n  const wmask = s.w_mask;\n  const prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  const strend = s.strstart + MAX_MATCH;\n  let scan_end1  = _win[scan + best_len - 1];\n  let scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n};\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nconst fill_window = (s) => {\n\n  const _w_size = s.w_size;\n  let n, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      s.window.set(s.window.subarray(_w_size, _w_size + _w_size - more), 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n      if (s.insert > s.strstart) {\n        s.insert = s.strstart;\n      }\n      slide_hash(s);\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + 1]);\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    const curr = s.strstart + s.lookahead;\n//    let init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n};\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n *\n * In case deflateParams() is used to later switch to a non-zero compression\n * level, s->matches (otherwise unused when storing) keeps track of the number\n * of hash table slides to perform. If s->matches is 1, then one hash table\n * slide will be done when switching. If s->matches is 2, the maximum value\n * allowed here, then the hash table will be cleared, since two or more slides\n * is the same as a clear.\n *\n * deflate_stored() is written to minimize the number of times an input byte is\n * copied. It is most efficient with large input and output buffers, which\n * maximizes the opportunites to have a single copy from next_in to next_out.\n */\nconst deflate_stored = (s, flush) => {\n\n  /* Smallest worthy block size when not flushing or finishing. By default\n   * this is 32K. This can be as small as 507 bytes for memLevel == 1. For\n   * large input and output buffers, the stored block size will be larger.\n   */\n  let min_block = s.pending_buf_size - 5 > s.w_size ? s.w_size : s.pending_buf_size - 5;\n\n  /* Copy as many min_block or larger stored blocks directly to next_out as\n   * possible. If flushing, copy the remaining available input to next_out as\n   * stored blocks, if there is enough space.\n   */\n  let len, left, have, last = 0;\n  let used = s.strm.avail_in;\n  do {\n    /* Set len to the maximum size block that we can copy directly with the\n     * available input data and output space. Set left to how much of that\n     * would be copied from what's left in the window.\n     */\n    len = 65535/* MAX_STORED */;     /* maximum deflate stored block length */\n    have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    if (s.strm.avail_out < have) {         /* need room for header */\n      break;\n    }\n      /* maximum stored block length that will fit in avail_out: */\n    have = s.strm.avail_out - have;\n    left = s.strstart - s.block_start;  /* bytes left in window */\n    if (len > left + s.strm.avail_in) {\n      len = left + s.strm.avail_in;   /* limit len to the input */\n    }\n    if (len > have) {\n      len = have;             /* limit len to the output */\n    }\n\n    /* If the stored block would be less than min_block in length, or if\n     * unable to copy all of the available input when flushing, then try\n     * copying to the window and the pending buffer instead. Also don't\n     * write an empty block when flushing -- deflate() does that.\n     */\n    if (len < min_block && ((len === 0 && flush !== Z_FINISH$3) ||\n                        flush === Z_NO_FLUSH$2 ||\n                        len !== left + s.strm.avail_in)) {\n      break;\n    }\n\n    /* Make a dummy stored block in pending to get the header bytes,\n     * including any pending bits. This also updates the debugging counts.\n     */\n    last = flush === Z_FINISH$3 && len === left + s.strm.avail_in ? 1 : 0;\n    _tr_stored_block(s, 0, 0, last);\n\n    /* Replace the lengths in the dummy stored block with len. */\n    s.pending_buf[s.pending - 4] = len;\n    s.pending_buf[s.pending - 3] = len >> 8;\n    s.pending_buf[s.pending - 2] = ~len;\n    s.pending_buf[s.pending - 1] = ~len >> 8;\n\n    /* Write the stored block header bytes. */\n    flush_pending(s.strm);\n\n//#ifdef ZLIB_DEBUG\n//    /* Update debugging counts for the data about to be copied. */\n//    s->compressed_len += len << 3;\n//    s->bits_sent += len << 3;\n//#endif\n\n    /* Copy uncompressed bytes from the window to next_out. */\n    if (left) {\n      if (left > len) {\n        left = len;\n      }\n      //zmemcpy(s->strm->next_out, s->window + s->block_start, left);\n      s.strm.output.set(s.window.subarray(s.block_start, s.block_start + left), s.strm.next_out);\n      s.strm.next_out += left;\n      s.strm.avail_out -= left;\n      s.strm.total_out += left;\n      s.block_start += left;\n      len -= left;\n    }\n\n    /* Copy uncompressed bytes directly from next_in to next_out, updating\n     * the check value.\n     */\n    if (len) {\n      read_buf(s.strm, s.strm.output, s.strm.next_out, len);\n      s.strm.next_out += len;\n      s.strm.avail_out -= len;\n      s.strm.total_out += len;\n    }\n  } while (last === 0);\n\n  /* Update the sliding window with the last s->w_size bytes of the copied\n   * data, or append all of the copied data to the existing window if less\n   * than s->w_size bytes were copied. Also update the number of bytes to\n   * insert in the hash tables, in the event that deflateParams() switches to\n   * a non-zero compression level.\n   */\n  used -= s.strm.avail_in;    /* number of input bytes directly copied */\n  if (used) {\n    /* If any input was used, then no unused input remains in the window,\n     * therefore s->block_start == s->strstart.\n     */\n    if (used >= s.w_size) {  /* supplant the previous history */\n      s.matches = 2;     /* clear hash */\n      //zmemcpy(s->window, s->strm->next_in - s->w_size, s->w_size);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - s.w_size, s.strm.next_in), 0);\n      s.strstart = s.w_size;\n      s.insert = s.strstart;\n    }\n    else {\n      if (s.window_size - s.strstart <= used) {\n        /* Slide the window down. */\n        s.strstart -= s.w_size;\n        //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n        s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n        if (s.matches < 2) {\n          s.matches++;   /* add a pending slide_hash() */\n        }\n        if (s.insert > s.strstart) {\n          s.insert = s.strstart;\n        }\n      }\n      //zmemcpy(s->window + s->strstart, s->strm->next_in - used, used);\n      s.window.set(s.strm.input.subarray(s.strm.next_in - used, s.strm.next_in), s.strstart);\n      s.strstart += used;\n      s.insert += used > s.w_size - s.insert ? s.w_size - s.insert : used;\n    }\n    s.block_start = s.strstart;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* If the last block was written to next_out, then done. */\n  if (last) {\n    return BS_FINISH_DONE;\n  }\n\n  /* If flushing and all input has been consumed, then done. */\n  if (flush !== Z_NO_FLUSH$2 && flush !== Z_FINISH$3 &&\n    s.strm.avail_in === 0 && s.strstart === s.block_start) {\n    return BS_BLOCK_DONE;\n  }\n\n  /* Fill the window with any remaining input. */\n  have = s.window_size - s.strstart;\n  if (s.strm.avail_in > have && s.block_start >= s.w_size) {\n    /* Slide the window down. */\n    s.block_start -= s.w_size;\n    s.strstart -= s.w_size;\n    //zmemcpy(s->window, s->window + s->w_size, s->strstart);\n    s.window.set(s.window.subarray(s.w_size, s.w_size + s.strstart), 0);\n    if (s.matches < 2) {\n      s.matches++;       /* add a pending slide_hash() */\n    }\n    have += s.w_size;      /* more space now */\n    if (s.insert > s.strstart) {\n      s.insert = s.strstart;\n    }\n  }\n  if (have > s.strm.avail_in) {\n    have = s.strm.avail_in;\n  }\n  if (have) {\n    read_buf(s.strm, s.window, s.strstart, have);\n    s.strstart += have;\n    s.insert += have > s.w_size - s.insert ? s.w_size - s.insert : have;\n  }\n  if (s.high_water < s.strstart) {\n    s.high_water = s.strstart;\n  }\n\n  /* There was not enough avail_out to write a complete worthy or flushed\n   * stored block to next_out. Write a stored block to pending instead, if we\n   * have enough input for a worthy block, or if flushing and there is enough\n   * room for the remaining input as a stored block in the pending buffer.\n   */\n  have = (s.bi_valid + 42) >> 3;     /* number of header bytes */\n    /* maximum stored block length that will fit in pending: */\n  have = s.pending_buf_size - have > 65535/* MAX_STORED */ ? 65535/* MAX_STORED */ : s.pending_buf_size - have;\n  min_block = have > s.w_size ? s.w_size : have;\n  left = s.strstart - s.block_start;\n  if (left >= min_block ||\n     ((left || flush === Z_FINISH$3) && flush !== Z_NO_FLUSH$2 &&\n     s.strm.avail_in === 0 && left <= have)) {\n    len = left > have ? have : left;\n    last = flush === Z_FINISH$3 && s.strm.avail_in === 0 &&\n         len === left ? 1 : 0;\n    _tr_stored_block(s, s.block_start, len, last);\n    s.block_start += len;\n    flush_pending(s.strm);\n  }\n\n  /* We've done all we can with the available input and output. */\n  return last ? BS_FINISH_STARTED : BS_NEED_MORE;\n};\n\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nconst deflate_fast = (s, flush) => {\n\n  let hash_head;        /* head of the hash chain */\n  let bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + 1]);\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nconst deflate_slow = (s, flush) => {\n\n  let hash_head;          /* head of hash chain */\n  let bflush;              /* set if current block must be flushed */\n\n  let max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = _tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = HASH(s, s.ins_h, s.window[s.strstart + MIN_MATCH - 1]);\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n};\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nconst deflate_rle = (s, flush) => {\n\n  let bflush;            /* set if current block must be flushed */\n  let prev;              /* byte at distance one to match */\n  let scan, strend;      /* scan goes up to strend for length of run */\n\n  const _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH$2) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = _tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = _tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nconst deflate_huff = (s, flush) => {\n\n  let bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH$2) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = _tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH$3) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.sym_next) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n};\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nconst configuration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nconst lm_init = (s) => {\n\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n};\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED$2; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new Uint16Array(HEAP_SIZE * 2);\n  this.dyn_dtree  = new Uint16Array((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new Uint16Array((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new Uint16Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new Uint16Array(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new Uint16Array(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.sym_buf = 0;        /* buffer for distances and literals/lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.sym_next = 0;      /* running index in sym_buf */\n  this.sym_end = 0;       /* symbol table full when sym_next reaches this */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\n/* =========================================================================\n * Check for a valid deflate stream state. Return 0 if ok, 1 if not.\n */\nconst deflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const s = strm.state;\n  if (!s || s.strm !== strm || (s.status !== INIT_STATE &&\n//#ifdef GZIP\n                                s.status !== GZIP_STATE &&\n//#endif\n                                s.status !== EXTRA_STATE &&\n                                s.status !== NAME_STATE &&\n                                s.status !== COMMENT_STATE &&\n                                s.status !== HCRC_STATE &&\n                                s.status !== BUSY_STATE &&\n                                s.status !== FINISH_STATE)) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst deflateResetKeep = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  const s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status =\n//#ifdef GZIP\n    s.wrap === 2 ? GZIP_STATE :\n//#endif\n    s.wrap ? INIT_STATE : BUSY_STATE;\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = -2;\n  _tr_init(s);\n  return Z_OK$3;\n};\n\n\nconst deflateReset = (strm) => {\n\n  const ret = deflateResetKeep(strm);\n  if (ret === Z_OK$3) {\n    lm_init(strm.state);\n  }\n  return ret;\n};\n\n\nconst deflateSetHeader = (strm, head) => {\n\n  if (deflateStateCheck(strm) || strm.state.wrap !== 2) {\n    return Z_STREAM_ERROR$2;\n  }\n  strm.state.gzhead = head;\n  return Z_OK$3;\n};\n\n\nconst deflateInit2 = (strm, level, method, windowBits, memLevel, strategy) => {\n\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR$2;\n  }\n  let wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION$1) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED$2 ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED || (windowBits === 8 && wrap !== 1)) {\n    return err(strm, Z_STREAM_ERROR$2);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  const s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n  s.status = INIT_STATE;     /* to pass state test in deflateReset() */\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new Uint8Array(s.w_size * 2);\n  s.head = new Uint16Array(s.hash_size);\n  s.prev = new Uint16Array(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  /* We overlay pending_buf and sym_buf. This works since the average size\n   * for length/distance pairs over any compressed block is assured to be 31\n   * bits or less.\n   *\n   * Analysis: The longest fixed codes are a length code of 8 bits plus 5\n   * extra bits, for lengths 131 to 257. The longest fixed distance codes are\n   * 5 bits plus 13 extra bits, for distances 16385 to 32768. The longest\n   * possible fixed-codes length/distance pair is then 31 bits total.\n   *\n   * sym_buf starts one-fourth of the way into pending_buf. So there are\n   * three bytes in sym_buf for every four bytes in pending_buf. Each symbol\n   * in sym_buf is three bytes -- two for the distance and one for the\n   * literal/length. As each symbol is consumed, the pointer to the next\n   * sym_buf value to read moves forward three bytes. From that symbol, up to\n   * 31 bits are written to pending_buf. The closest the written pending_buf\n   * bits gets to the next sym_buf symbol to read is just before the last\n   * code is written. At that time, 31*(n-2) bits have been written, just\n   * after 24*(n-2) bits have been consumed from sym_buf. sym_buf starts at\n   * 8*n bits into pending_buf. (Note that the symbol buffer fills when n-1\n   * symbols are written.) The closest the writing gets to what is unread is\n   * then n+14 bits. Here n is lit_bufsize, which is 16384 by default, and\n   * can range from 128 to 32768.\n   *\n   * Therefore, at a minimum, there are 142 bits of space between what is\n   * written and what is read in the overlain buffers, so the symbols cannot\n   * be overwritten by the compressed data. That space is actually 139 bits,\n   * due to the three-bit fixed-code block header.\n   *\n   * That covers the case where either Z_FIXED is specified, forcing fixed\n   * codes, or when the use of fixed codes is chosen, because that choice\n   * results in a smaller compressed block than dynamic codes. That latter\n   * condition then assures that the above analysis also covers all dynamic\n   * blocks. A dynamic-code block will only be chosen to be emitted if it has\n   * fewer bits than a fixed-code block would for the same set of symbols.\n   * Therefore its average symbol length is assured to be less than 31. So\n   * the compressed data for a dynamic block also cannot overwrite the\n   * symbols from which it is being constructed.\n   */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n  s.pending_buf = new Uint8Array(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->sym_buf = s->pending_buf + s->lit_bufsize;\n  s.sym_buf = s.lit_bufsize;\n\n  //s->sym_end = (s->lit_bufsize - 1) * 3;\n  s.sym_end = (s.lit_bufsize - 1) * 3;\n  /* We avoid equality with lit_bufsize*3 because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n};\n\nconst deflateInit = (strm, level) => {\n\n  return deflateInit2(strm, level, Z_DEFLATED$2, MAX_WBITS$1, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY$1);\n};\n\n\n/* ========================================================================= */\nconst deflate$2 = (strm, flush) => {\n\n  if (deflateStateCheck(strm) || flush > Z_BLOCK$1 || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR$2) : Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n\n  if (!strm.output ||\n      (strm.avail_in !== 0 && !strm.input) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH$3)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR$1 : Z_STREAM_ERROR$2);\n  }\n\n  const old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH$3) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR$1);\n  }\n\n  /* Write the header */\n  if (s.status === INIT_STATE && s.wrap === 0) {\n    s.status = BUSY_STATE;\n  }\n  if (s.status === INIT_STATE) {\n    /* zlib header */\n    let header = (Z_DEFLATED$2 + ((s.w_bits - 8) << 4)) << 8;\n    let level_flags = -1;\n\n    if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n      level_flags = 0;\n    } else if (s.level < 6) {\n      level_flags = 1;\n    } else if (s.level === 6) {\n      level_flags = 2;\n    } else {\n      level_flags = 3;\n    }\n    header |= (level_flags << 6);\n    if (s.strstart !== 0) { header |= PRESET_DICT; }\n    header += 31 - (header % 31);\n\n    putShortMSB(s, header);\n\n    /* Save the adler32 of the preset dictionary: */\n    if (s.strstart !== 0) {\n      putShortMSB(s, strm.adler >>> 16);\n      putShortMSB(s, strm.adler & 0xffff);\n    }\n    strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#ifdef GZIP\n  if (s.status === GZIP_STATE) {\n    /* gzip header */\n    strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n    put_byte(s, 31);\n    put_byte(s, 139);\n    put_byte(s, 8);\n    if (!s.gzhead) { // s->gzhead == Z_NULL\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, 0);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, OS_CODE);\n      s.status = BUSY_STATE;\n\n      /* Compression must start with an empty pending buffer */\n      flush_pending(strm);\n      if (s.pending !== 0) {\n        s.last_flush = -1;\n        return Z_OK$3;\n      }\n    }\n    else {\n      put_byte(s, (s.gzhead.text ? 1 : 0) +\n                  (s.gzhead.hcrc ? 2 : 0) +\n                  (!s.gzhead.extra ? 0 : 4) +\n                  (!s.gzhead.name ? 0 : 8) +\n                  (!s.gzhead.comment ? 0 : 16)\n      );\n      put_byte(s, s.gzhead.time & 0xff);\n      put_byte(s, (s.gzhead.time >> 8) & 0xff);\n      put_byte(s, (s.gzhead.time >> 16) & 0xff);\n      put_byte(s, (s.gzhead.time >> 24) & 0xff);\n      put_byte(s, s.level === 9 ? 2 :\n                  (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                   4 : 0));\n      put_byte(s, s.gzhead.os & 0xff);\n      if (s.gzhead.extra && s.gzhead.extra.length) {\n        put_byte(s, s.gzhead.extra.length & 0xff);\n        put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n      }\n      if (s.gzhead.hcrc) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending, 0);\n      }\n      s.gzindex = 0;\n      s.status = EXTRA_STATE;\n    }\n  }\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let left = (s.gzhead.extra.length & 0xffff) - s.gzindex;\n      while (s.pending + left > s.pending_buf_size) {\n        let copy = s.pending_buf_size - s.pending;\n        // zmemcpy(s.pending_buf + s.pending,\n        //    s.gzhead.extra + s.gzindex, copy);\n        s.pending_buf.set(s.gzhead.extra.subarray(s.gzindex, s.gzindex + copy), s.pending);\n        s.pending = s.pending_buf_size;\n        //--- HCRC_UPDATE(beg) ---//\n        if (s.gzhead.hcrc && s.pending > beg) {\n          strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n        }\n        //---//\n        s.gzindex += copy;\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n        beg = 0;\n        left -= copy;\n      }\n      // JS specific: s.gzhead.extra may be TypedArray or Array for backward compatibility\n      //              TypedArray.slice and TypedArray.from don't exist in IE10-IE11\n      let gzhead_extra = new Uint8Array(s.gzhead.extra);\n      // zmemcpy(s->pending_buf + s->pending,\n      //     s->gzhead->extra + s->gzindex, left);\n      s.pending_buf.set(gzhead_extra.subarray(s.gzindex, s.gzindex + left), s.pending);\n      s.pending += left;\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = NAME_STATE;\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n      s.gzindex = 0;\n    }\n    s.status = COMMENT_STATE;\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      let beg = s.pending;   /* start of bytes to update crc */\n      let val;\n      do {\n        if (s.pending === s.pending_buf_size) {\n          //--- HCRC_UPDATE(beg) ---//\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          //---//\n          flush_pending(strm);\n          if (s.pending !== 0) {\n            s.last_flush = -1;\n            return Z_OK$3;\n          }\n          beg = 0;\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n      //--- HCRC_UPDATE(beg) ---//\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32_1(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      //---//\n    }\n    s.status = HCRC_STATE;\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n        if (s.pending !== 0) {\n          s.last_flush = -1;\n          return Z_OK$3;\n        }\n      }\n      put_byte(s, strm.adler & 0xff);\n      put_byte(s, (strm.adler >> 8) & 0xff);\n      strm.adler = 0; //crc32(0L, Z_NULL, 0);\n    }\n    s.status = BUSY_STATE;\n\n    /* Compression must start with an empty pending buffer */\n    flush_pending(strm);\n    if (s.pending !== 0) {\n      s.last_flush = -1;\n      return Z_OK$3;\n    }\n  }\n//#endif\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH$2 && s.status !== FINISH_STATE)) {\n    let bstate = s.level === 0 ? deflate_stored(s, flush) :\n                 s.strategy === Z_HUFFMAN_ONLY ? deflate_huff(s, flush) :\n                 s.strategy === Z_RLE ? deflate_rle(s, flush) :\n                 configuration_table[s.level].func(s, flush);\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK$3;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        _tr_align(s);\n      }\n      else if (flush !== Z_BLOCK$1) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        _tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH$1) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK$3;\n      }\n    }\n  }\n\n  if (flush !== Z_FINISH$3) { return Z_OK$3; }\n  if (s.wrap <= 0) { return Z_STREAM_END$3; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK$3 : Z_STREAM_END$3;\n};\n\n\nconst deflateEnd = (strm) => {\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const status = strm.state.status;\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR$2) : Z_OK$3;\n};\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nconst deflateSetDictionary = (strm, dictionary) => {\n\n  let dictLength = dictionary.length;\n\n  if (deflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  const s = strm.state;\n  const wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR$2;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32_1(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    let tmpDict = new Uint8Array(s.w_size);\n    tmpDict.set(dictionary.subarray(dictLength - s.w_size, dictLength), 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  const avail = strm.avail_in;\n  const next = strm.next_in;\n  const input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    let str = s.strstart;\n    let n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = HASH(s, s.ins_h, s.window[str + MIN_MATCH - 1]);\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK$3;\n};\n\n\nvar deflateInit_1 = deflateInit;\nvar deflateInit2_1 = deflateInit2;\nvar deflateReset_1 = deflateReset;\nvar deflateResetKeep_1 = deflateResetKeep;\nvar deflateSetHeader_1 = deflateSetHeader;\nvar deflate_2$1 = deflate$2;\nvar deflateEnd_1 = deflateEnd;\nvar deflateSetDictionary_1 = deflateSetDictionary;\nvar deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.deflateBound = deflateBound;\nmodule.exports.deflateCopy = deflateCopy;\nmodule.exports.deflateGetDictionary = deflateGetDictionary;\nmodule.exports.deflateParams = deflateParams;\nmodule.exports.deflatePending = deflatePending;\nmodule.exports.deflatePrime = deflatePrime;\nmodule.exports.deflateTune = deflateTune;\n*/\n\nvar deflate_1$2 = {\n\tdeflateInit: deflateInit_1,\n\tdeflateInit2: deflateInit2_1,\n\tdeflateReset: deflateReset_1,\n\tdeflateResetKeep: deflateResetKeep_1,\n\tdeflateSetHeader: deflateSetHeader_1,\n\tdeflate: deflate_2$1,\n\tdeflateEnd: deflateEnd_1,\n\tdeflateSetDictionary: deflateSetDictionary_1,\n\tdeflateInfo: deflateInfo\n};\n\nconst _has = (obj, key) => {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n};\n\nvar assign = function (obj /*from1, from2, from3, ...*/) {\n  const sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    const source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (const p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// Join array of chunks to single array.\nvar flattenChunks = (chunks) => {\n  // calculate data length\n  let len = 0;\n\n  for (let i = 0, l = chunks.length; i < l; i++) {\n    len += chunks[i].length;\n  }\n\n  // join chunks\n  const result = new Uint8Array(len);\n\n  for (let i = 0, pos = 0, l = chunks.length; i < l; i++) {\n    let chunk = chunks[i];\n    result.set(chunk, pos);\n    pos += chunk.length;\n  }\n\n  return result;\n};\n\nvar common = {\n\tassign: assign,\n\tflattenChunks: flattenChunks\n};\n\n// String encode/decode helpers\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nlet STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nconst _utf8len = new Uint8Array(256);\nfor (let q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nvar string2buf = (str) => {\n  if (typeof TextEncoder === 'function' && TextEncoder.prototype.encode) {\n    return new TextEncoder().encode(str);\n  }\n\n  let buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new Uint8Array(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper\nconst buf2binstring = (buf, len) => {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if (buf.subarray && STR_APPLY_UIA_OK) {\n      return String.fromCharCode.apply(null, buf.length === len ? buf : buf.subarray(0, len));\n    }\n  }\n\n  let result = '';\n  for (let i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n};\n\n\n// convert array to string\nvar buf2string = (buf, max) => {\n  const len = max || buf.length;\n\n  if (typeof TextDecoder === 'function' && TextDecoder.prototype.decode) {\n    return new TextDecoder().decode(buf.subarray(0, max));\n  }\n\n  let i, out;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  const utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    let c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    let c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nvar utf8border = (buf, max) => {\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  let pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n\nvar strings = {\n\tstring2buf: string2buf,\n\tbuf2string: buf2string,\n\tutf8border: utf8border\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nvar zstream = ZStream;\n\nconst toString$1 = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH: Z_NO_FLUSH$1, Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH: Z_FINISH$2,\n  Z_OK: Z_OK$2, Z_STREAM_END: Z_STREAM_END$2,\n  Z_DEFAULT_COMPRESSION,\n  Z_DEFAULT_STRATEGY,\n  Z_DEFLATED: Z_DEFLATED$1\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n *   , chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate$1(options) {\n  this.options = common.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED$1,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY\n  }, options || {});\n\n  let opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new zstream();\n  this.strm.avail_out = 0;\n\n  let status = deflate_1$2.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK$2) {\n    throw new Error(messages[status]);\n  }\n\n  if (opt.header) {\n    deflate_1$2.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    let dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString$1.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = deflate_1$2.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK$2) {\n      throw new Error(messages[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must\n * have `flush_mode` Z_FINISH (or `true`). That will flush internal pending\n * buffers and call [[Deflate#onEnd]].\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  let status, _flush_mode;\n\n  if (this.ended) { return false; }\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH$2 : Z_NO_FLUSH$1;\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString$1.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    // Make sure avail_out > 6 to avoid repeating markers\n    if ((_flush_mode === Z_SYNC_FLUSH || _flush_mode === Z_FULL_FLUSH) && strm.avail_out <= 6) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    status = deflate_1$2.deflate(strm, _flush_mode);\n\n    // Ended => flush and finish\n    if (status === Z_STREAM_END$2) {\n      if (strm.next_out > 0) {\n        this.onData(strm.output.subarray(0, strm.next_out));\n      }\n      status = deflate_1$2.deflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return status === Z_OK$2;\n    }\n\n    // Flush if out buffer full\n    if (strm.avail_out === 0) {\n      this.onData(strm.output);\n      continue;\n    }\n\n    // Flush if requested and has data\n    if (_flush_mode > 0 && strm.next_out > 0) {\n      this.onData(strm.output.subarray(0, strm.next_out));\n      strm.avail_out = 0;\n      continue;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array): output data.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK$2) {\n    this.result = common.flattenChunks(this.chunks);\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const data = new Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate$1(input, options) {\n  const deflator = new Deflate$1(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || messages[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate$1(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array\n * - data (Uint8Array|ArrayBuffer|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip$1(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate$1(input, options);\n}\n\n\nvar Deflate_1$1 = Deflate$1;\nvar deflate_2 = deflate$1;\nvar deflateRaw_1$1 = deflateRaw$1;\nvar gzip_1$1 = gzip$1;\nvar constants$1 = constants$2;\n\nvar deflate_1$1 = {\n\tDeflate: Deflate_1$1,\n\tdeflate: deflate_2,\n\tdeflateRaw: deflateRaw_1$1,\n\tgzip: gzip_1$1,\n\tconstants: constants$1\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nconst BAD$1 = 16209;       /* got a data error -- remain here until reset */\nconst TYPE$1 = 16191;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nvar inffast = function inflate_fast(strm, start) {\n  let _in;                    /* local strm.input */\n  let last;                   /* have enough input while in < last */\n  let _out;                   /* local strm.output */\n  let beg;                    /* inflate()'s initial strm.output */\n  let end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  let dmax;                   /* maximum distance from zlib header */\n//#endif\n  let wsize;                  /* window size or zero if not using window */\n  let whave;                  /* valid bytes in the window */\n  let wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  let s_window;               /* allocated sliding window, if wsize != 0 */\n  let hold;                   /* local strm.hold */\n  let bits;                   /* local strm.bits */\n  let lcode;                  /* local strm.lencode */\n  let dcode;                  /* local strm.distcode */\n  let lmask;                  /* mask for first level of length codes */\n  let dmask;                  /* mask for first level of distance codes */\n  let here;                   /* retrieved table entry */\n  let op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  let len;                    /* match length, unused bytes */\n  let dist;                   /* match distance */\n  let from;                   /* where to copy match from */\n  let from_source;\n\n\n  let input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  const state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD$1;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD$1;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD$1;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE$1;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD$1;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nconst MAXBITS = 15;\nconst ENOUGH_LENS$1 = 852;\nconst ENOUGH_DISTS$1 = 592;\n//const ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst CODES$1 = 0;\nconst LENS$1 = 1;\nconst DISTS$1 = 2;\n\nconst lbase = new Uint16Array([ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n]);\n\nconst lext = new Uint8Array([ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n]);\n\nconst dbase = new Uint16Array([ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n]);\n\nconst dext = new Uint8Array([ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n]);\n\nconst inflate_table = (type, lens, lens_index, codes, table, table_index, work, opts) =>\n{\n  const bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  let len = 0;               /* a code's length in bits */\n  let sym = 0;               /* index of code symbols */\n  let min = 0, max = 0;          /* minimum and maximum code lengths */\n  let root = 0;              /* number of index bits for root table */\n  let curr = 0;              /* number of index bits for current table */\n  let drop = 0;              /* code bits to drop for sub-table */\n  let left = 0;                   /* number of prefix codes available */\n  let used = 0;              /* code entries in table used */\n  let huff = 0;              /* Huffman code */\n  let incr;              /* for incrementing code, index */\n  let fill;              /* index for replicating entries */\n  let low;               /* low bits for current root entry */\n  let mask;              /* mask for low root bits */\n  let next;             /* next available space in table */\n  let base = null;     /* base value table to use */\n//  let shoextra;    /* extra bits table to use */\n  let match;                  /* use base and extra for symbol >= match */\n  const count = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  const offs = new Uint16Array(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  let extra = null;\n\n  let here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES$1 || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES$1) {\n    base = extra = work;    /* dummy value--not used */\n    match = 20;\n\n  } else if (type === LENS$1) {\n    base = lbase;\n    extra = lext;\n    match = 257;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    match = 0;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n    (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] + 1 < match) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] >= match) {\n      here_op = extra[work[sym] - match];\n      here_val = base[work[sym] - match];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS$1 && used > ENOUGH_LENS$1) ||\n        (type === DISTS$1 && used > ENOUGH_DISTS$1)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n\n\nvar inftrees = inflate_table;\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n\n\n\n\n\nconst CODES = 0;\nconst LENS = 1;\nconst DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_FINISH: Z_FINISH$1, Z_BLOCK, Z_TREES,\n  Z_OK: Z_OK$1, Z_STREAM_END: Z_STREAM_END$1, Z_NEED_DICT: Z_NEED_DICT$1, Z_STREAM_ERROR: Z_STREAM_ERROR$1, Z_DATA_ERROR: Z_DATA_ERROR$1, Z_MEM_ERROR: Z_MEM_ERROR$1, Z_BUF_ERROR,\n  Z_DEFLATED\n} = constants$2;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nconst    HEAD = 16180;       /* i: waiting for magic header */\nconst    FLAGS = 16181;      /* i: waiting for method and flags (gzip) */\nconst    TIME = 16182;       /* i: waiting for modification time (gzip) */\nconst    OS = 16183;         /* i: waiting for extra flags and operating system (gzip) */\nconst    EXLEN = 16184;      /* i: waiting for extra length (gzip) */\nconst    EXTRA = 16185;      /* i: waiting for extra bytes (gzip) */\nconst    NAME = 16186;       /* i: waiting for end of file name (gzip) */\nconst    COMMENT = 16187;    /* i: waiting for end of comment (gzip) */\nconst    HCRC = 16188;       /* i: waiting for header crc (gzip) */\nconst    DICTID = 16189;    /* i: waiting for dictionary check value */\nconst    DICT = 16190;      /* waiting for inflateSetDictionary() call */\nconst        TYPE = 16191;      /* i: waiting for type bits, including last-flag bit */\nconst        TYPEDO = 16192;    /* i: same, but skip check to exit inflate on new block */\nconst        STORED = 16193;    /* i: waiting for stored size (length and complement) */\nconst        COPY_ = 16194;     /* i/o: same as COPY below, but only first time in */\nconst        COPY = 16195;      /* i/o: waiting for input or output to copy stored block */\nconst        TABLE = 16196;     /* i: waiting for dynamic block table lengths */\nconst        LENLENS = 16197;   /* i: waiting for code length code lengths */\nconst        CODELENS = 16198;  /* i: waiting for length/lit and distance code lengths */\nconst            LEN_ = 16199;      /* i: same as LEN below, but only first time in */\nconst            LEN = 16200;       /* i: waiting for length/lit/eob code */\nconst            LENEXT = 16201;    /* i: waiting for length extra bits */\nconst            DIST = 16202;      /* i: waiting for distance code */\nconst            DISTEXT = 16203;   /* i: waiting for distance extra bits */\nconst            MATCH = 16204;     /* o: waiting for output space to copy string */\nconst            LIT = 16205;       /* o: waiting for output space to write literal */\nconst    CHECK = 16206;     /* i: waiting for 32-bit check value */\nconst    LENGTH = 16207;    /* i: waiting for 32-bit length (gzip) */\nconst    DONE = 16208;      /* finished check, done -- remain here until reset */\nconst    BAD = 16209;       /* got a data error -- remain here until reset */\nconst    MEM = 16210;       /* got an inflate() memory error -- remain here until reset */\nconst    SYNC = 16211;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nconst ENOUGH_LENS = 852;\nconst ENOUGH_DISTS = 592;\n//const ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nconst MAX_WBITS = 15;\n/* 32K LZ77 window */\nconst DEF_WBITS = MAX_WBITS;\n\n\nconst zswap32 = (q) => {\n\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n};\n\n\nfunction InflateState() {\n  this.strm = null;           /* pointer back to this zlib stream */\n  this.mode = 0;              /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip,\n                                 bit 2 true to validate check value */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib), or\n                                 -1 if raw or no header yet */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new Uint16Array(320); /* temporary storage for code lengths */\n  this.work = new Uint16Array(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new Int32Array(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\n\nconst inflateStateCheck = (strm) => {\n\n  if (!strm) {\n    return 1;\n  }\n  const state = strm.state;\n  if (!state || state.strm !== strm ||\n    state.mode < HEAD || state.mode > SYNC) {\n    return 1;\n  }\n  return 0;\n};\n\n\nconst inflateResetKeep = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.flags = -1;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new Int32Array(ENOUGH_LENS);\n  state.distcode = state.distdyn = new Int32Array(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK$1;\n};\n\n\nconst inflateReset = (strm) => {\n\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n};\n\n\nconst inflateReset2 = (strm, windowBits) => {\n  let wrap;\n\n  /* get the state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 5;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR$1;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n};\n\n\nconst inflateInit2 = (strm, windowBits) => {\n\n  if (!strm) { return Z_STREAM_ERROR$1; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  const state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.strm = strm;\n  state.window = null/*Z_NULL*/;\n  state.mode = HEAD;     /* to pass state test in inflateReset2() */\n  const ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK$1) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n};\n\n\nconst inflateInit = (strm) => {\n\n  return inflateInit2(strm, DEF_WBITS);\n};\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nlet virgin = true;\n\nlet lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\n\nconst fixedtables = (state) => {\n\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    lenfix = new Int32Array(512);\n    distfix = new Int32Array(32);\n\n    /* literal/length table */\n    let sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inftrees(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inftrees(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n};\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nconst updatewindow = (strm, src, end, copy) => {\n\n  let dist;\n  const state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new Uint8Array(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    state.window.set(src.subarray(end - state.wsize, end), 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    state.window.set(src.subarray(end - copy, end - copy + dist), state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      state.window.set(src.subarray(end - copy, end), 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n};\n\n\nconst inflate$2 = (strm, flush) => {\n\n  let state;\n  let input, output;          // input/output buffers\n  let next;                   /* next input INDEX */\n  let put;                    /* next output INDEX */\n  let have, left;             /* available input and output */\n  let hold;                   /* bit buffer */\n  let bits;                   /* bits in bit buffer */\n  let _in, _out;              /* save starting available input and output */\n  let copy;                   /* number of stored or match bytes to copy */\n  let from;                   /* where to copy match bytes from */\n  let from_source;\n  let here = 0;               /* current decoding table entry */\n  let here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //let last;                   /* parent table entry */\n  let last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  let len;                    /* length to copy for repeats, bits to drop */\n  let ret;                    /* return code */\n  const hbuf = new Uint8Array(4);    /* buffer for gzip header crc calculation */\n  let opts;\n\n  let n; // temporary variable for NEED_BITS\n\n  const order = /* permutation of code lengths */\n    new Uint8Array([ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ]);\n\n\n  if (inflateStateCheck(strm) || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK$1;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          if (state.wbits === 0) {\n            state.wbits = 15;\n          }\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        if (len > 15 || len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n\n        // !!! pako patch. Force use `options.windowBits` if passed.\n        // Required to always use max window size by default.\n        state.dmax = 1 << state.wbits;\n        //state.dmax = 1 << len;\n\n        state.flags = 0;               /* indicate zlib header */\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if ((state.flags & 0x0200) && (state.wrap & 4)) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32_1(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32_1(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Uint8Array(state.head.extra_len);\n              }\n              state.head.extra.set(\n                input.subarray(\n                  next,\n                  // extra field is limited to 65536 bytes\n                  // - no need for additional size check\n                  next + copy\n                ),\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if ((state.flags & 0x0200) && (state.wrap & 4)) {\n              state.check = crc32_1(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if ((state.flags & 0x0200) && (state.wrap & 4)) {\n            state.check = crc32_1(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT$1;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          output.set(input.subarray(next, next + copy), put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inftrees(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inftrees(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inffast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if ((state.wrap & 4) && _out) {\n            strm.adler = state.check =\n                /*UPDATE_CHECK(state.check, put - _out, _out);*/\n                (state.flags ? crc32_1(state.check, output, _out, put - _out) : adler32_1(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.wrap & 4) && (state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if ((state.wrap & 4) && hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END$1;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR$1;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR$1;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR$1;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH$1))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) ;\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if ((state.wrap & 4) && _out) {\n    strm.adler = state.check = /*UPDATE_CHECK(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32_1(state.check, output, _out, strm.next_out - _out) : adler32_1(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH$1) && ret === Z_OK$1) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n};\n\n\nconst inflateEnd = (strm) => {\n\n  if (inflateStateCheck(strm)) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  let state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK$1;\n};\n\n\nconst inflateGetHeader = (strm, head) => {\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  const state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR$1; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK$1;\n};\n\n\nconst inflateSetDictionary = (strm, dictionary) => {\n  const dictLength = dictionary.length;\n\n  let state;\n  let dictid;\n  let ret;\n\n  /* check state */\n  if (inflateStateCheck(strm)) { return Z_STREAM_ERROR$1; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR$1;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32_1(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR$1;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR$1;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK$1;\n};\n\n\nvar inflateReset_1 = inflateReset;\nvar inflateReset2_1 = inflateReset2;\nvar inflateResetKeep_1 = inflateResetKeep;\nvar inflateInit_1 = inflateInit;\nvar inflateInit2_1 = inflateInit2;\nvar inflate_2$1 = inflate$2;\nvar inflateEnd_1 = inflateEnd;\nvar inflateGetHeader_1 = inflateGetHeader;\nvar inflateSetDictionary_1 = inflateSetDictionary;\nvar inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nmodule.exports.inflateCodesUsed = inflateCodesUsed;\nmodule.exports.inflateCopy = inflateCopy;\nmodule.exports.inflateGetDictionary = inflateGetDictionary;\nmodule.exports.inflateMark = inflateMark;\nmodule.exports.inflatePrime = inflatePrime;\nmodule.exports.inflateSync = inflateSync;\nmodule.exports.inflateSyncPoint = inflateSyncPoint;\nmodule.exports.inflateUndermine = inflateUndermine;\nmodule.exports.inflateValidate = inflateValidate;\n*/\n\nvar inflate_1$2 = {\n\tinflateReset: inflateReset_1,\n\tinflateReset2: inflateReset2_1,\n\tinflateResetKeep: inflateResetKeep_1,\n\tinflateInit: inflateInit_1,\n\tinflateInit2: inflateInit2_1,\n\tinflate: inflate_2$1,\n\tinflateEnd: inflateEnd_1,\n\tinflateGetHeader: inflateGetHeader_1,\n\tinflateSetDictionary: inflateSetDictionary_1,\n\tinflateInfo: inflateInfo\n};\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nvar gzheader = GZheader;\n\nconst toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nconst {\n  Z_NO_FLUSH, Z_FINISH,\n  Z_OK, Z_STREAM_END, Z_NEED_DICT, Z_STREAM_ERROR, Z_DATA_ERROR, Z_MEM_ERROR\n} = constants$2;\n\n/* ===========================================================================*/\n\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako')\n * const chunk1 = new Uint8Array([1,2,3,4,5,6,7,8,9])\n * const chunk2 = new Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * const inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate$1(options) {\n  this.options = common.assign({\n    chunkSize: 1024 * 64,\n    windowBits: 15,\n    to: ''\n  }, options || {});\n\n  const opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new zstream();\n  this.strm.avail_out = 0;\n\n  let status  = inflate_1$2.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(messages[status]);\n  }\n\n  this.header = new gzheader();\n\n  inflate_1$2.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = inflate_1$2.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== Z_OK) {\n        throw new Error(messages[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, flush_mode]) -> Boolean\n * - data (Uint8Array|ArrayBuffer): input data\n * - flush_mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE\n *   flush modes. See constants. Skipped or `false` means Z_NO_FLUSH,\n *   `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. If end of stream detected,\n * [[Inflate#onEnd]] will be called.\n *\n * `flush_mode` is not needed for normal operation, because end of stream\n * detected automatically. You may try to use it for advanced things, but\n * this functionality was not tested.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate$1.prototype.push = function (data, flush_mode) {\n  const strm = this.strm;\n  const chunkSize = this.options.chunkSize;\n  const dictionary = this.options.dictionary;\n  let status, _flush_mode, last_avail_out;\n\n  if (this.ended) return false;\n\n  if (flush_mode === ~~flush_mode) _flush_mode = flush_mode;\n  else _flush_mode = flush_mode === true ? Z_FINISH : Z_NO_FLUSH;\n\n  // Convert data if needed\n  if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  for (;;) {\n    if (strm.avail_out === 0) {\n      strm.output = new Uint8Array(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = inflate_1$2.inflate(strm, _flush_mode);\n\n    if (status === Z_NEED_DICT && dictionary) {\n      status = inflate_1$2.inflateSetDictionary(strm, dictionary);\n\n      if (status === Z_OK) {\n        status = inflate_1$2.inflate(strm, _flush_mode);\n      } else if (status === Z_DATA_ERROR) {\n        // Replace code with more verbose\n        status = Z_NEED_DICT;\n      }\n    }\n\n    // Skip snyc markers if more data follows and not raw mode\n    while (strm.avail_in > 0 &&\n           status === Z_STREAM_END &&\n           strm.state.wrap > 0 &&\n           data[strm.next_in] !== 0)\n    {\n      inflate_1$2.inflateReset(strm);\n      status = inflate_1$2.inflate(strm, _flush_mode);\n    }\n\n    switch (status) {\n      case Z_STREAM_ERROR:\n      case Z_DATA_ERROR:\n      case Z_NEED_DICT:\n      case Z_MEM_ERROR:\n        this.onEnd(status);\n        this.ended = true;\n        return false;\n    }\n\n    // Remember real `avail_out` value, because we may patch out buffer content\n    // to align utf8 strings boundaries.\n    last_avail_out = strm.avail_out;\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === Z_STREAM_END) {\n\n        if (this.options.to === 'string') {\n\n          let next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          let tail = strm.next_out - next_out_utf8;\n          let utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail & realign counters\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) strm.output.set(strm.output.subarray(next_out_utf8, next_out_utf8 + tail), 0);\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(strm.output.length === strm.next_out ? strm.output : strm.output.subarray(0, strm.next_out));\n        }\n      }\n    }\n\n    // Must repeat iteration if out buffer is full\n    if (status === Z_OK && last_avail_out === 0) continue;\n\n    // Finalize if end of stream reached.\n    if (status === Z_STREAM_END) {\n      status = inflate_1$2.inflateEnd(this.strm);\n      this.onEnd(status);\n      this.ended = true;\n      return true;\n    }\n\n    if (strm.avail_in === 0) break;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|String): output data. When string output requested,\n *   each chunk will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate$1.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH). By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate$1.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = common.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * const pako = require('pako');\n * const input = pako.deflate(new Uint8Array([1,2,3,4,5,6,7,8,9]));\n * let output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err) {\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate$1(input, options) {\n  const inflator = new Inflate$1(options);\n\n  inflator.push(input);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) throw inflator.msg || messages[inflator.err];\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw$1(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate$1(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|String\n * - data (Uint8Array|ArrayBuffer): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nvar Inflate_1$1 = Inflate$1;\nvar inflate_2 = inflate$1;\nvar inflateRaw_1$1 = inflateRaw$1;\nvar ungzip$1 = inflate$1;\nvar constants = constants$2;\n\nvar inflate_1$1 = {\n\tInflate: Inflate_1$1,\n\tinflate: inflate_2,\n\tinflateRaw: inflateRaw_1$1,\n\tungzip: ungzip$1,\n\tconstants: constants\n};\n\nconst { Deflate, deflate, deflateRaw, gzip } = deflate_1$1;\n\nconst { Inflate, inflate, inflateRaw, ungzip } = inflate_1$1;\n\n\n\nvar Deflate_1 = Deflate;\nvar deflate_1 = deflate;\nvar deflateRaw_1 = deflateRaw;\nvar gzip_1 = gzip;\nvar Inflate_1 = Inflate;\nvar inflate_1 = inflate;\nvar inflateRaw_1 = inflateRaw;\nvar ungzip_1 = ungzip;\nvar constants_1 = constants$2;\n\nvar pako = {\n\tDeflate: Deflate_1,\n\tdeflate: deflate_1,\n\tdeflateRaw: deflateRaw_1,\n\tgzip: gzip_1,\n\tInflate: Inflate_1,\n\tinflate: inflate_1,\n\tinflateRaw: inflateRaw_1,\n\tungzip: ungzip_1,\n\tconstants: constants_1\n};\n\nexport { Deflate_1 as Deflate, Inflate_1 as Inflate, constants_1 as constants, pako as default, deflate_1 as deflate, deflateRaw_1 as deflateRaw, gzip_1 as gzip, inflate_1 as inflate, inflateRaw_1 as inflateRaw, ungzip_1 as ungzip };\n","import * as wasm from \"../wasm.js\";\n\nexport function writeFile(path, buffer) {\n    wasm.call(module => module.FS.writeFile(path, buffer));\n    return;\n}\n\nexport function readFile(path) {\n    return wasm.call(module => module.FS.readFile(path, { encoding: 'binary' }));\n}\n\nexport function removeFile(path) {\n    wasm.call(module => module.FS.unlink(path));\n    return;\n}\n\nexport function existsFile(path) {\n    return wasm.call(module => module.FS.analyzePath(path).exists);\n}\n","import * as afile from \"./abstract/file.js\";\n\n/**\n * Write a byte array to a path on the native file system (Node.js) or to the virtual file system (browser).\n *\n * @param {string} path - Path to the output file on the relevant file system.\n * @param {Uint8Array} buffer - Buffer to write to file.\n *\n * @return `buffer` is written to the binary file `path`.\n */\nexport function writeFile(path, buffer) {\n    afile.writeFile(path, buffer);\n    return;\n}\n\n/**\n * Read a byte array from a path on the native file system (Node.js) or the virtual file system (browser).\n *\n * @param {string} path - Path to a file on the relevant file system.\n *\n * @return {Uint8Array} Binary contents of the file.\n */\nexport function readFile(path) {\n    return afile.readFile(path);\n}\n\n/**\n * Remove a file from the native file system (Node.js) or the virtual file system (browser).\n *\n * @param {string} path - Path to the file on the relevant file system.\n *\n * @return Deletes the specified file from the relevant file system.\n * If `path` does not exist, this function is a no-op.\n */\nexport function removeFile(path) {\n    if (existsFile(path)) {\n        afile.removeFile(path);\n    }\n    return;\n}\n\n/**\n * Check if a file exists on the native file system (Node.js) or the virtual file system (browser).\n *\n * @param {string} path - Path to the file on the relevant file system.\n *\n * @return {boolean} Whether the file exists.\n */\nexport function existsFile(path) {\n    return afile.existsFile(path);\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as packer from \"./internal/pack_strings.js\";\n\nfunction check_shape(x, shape) {\n    if (shape.length > 0) {\n        let full_length = shape.reduce((a, b) => a * b);\n        if (x.length != full_length) {\n            throw new Error(\"length of 'x' must be equal to the product of 'shape'\");\n        }\n    } else {\n        if (x instanceof Array || ArrayBuffer.isView(x)) {\n            if (x.length != 1) {\n                throw new Error(\"length of 'x' should be 1 for a scalar dataset\");\n            }\n        } else {\n            x = [x];\n        }\n    }\n    return x;\n}\n\nfunction guess_shape(x, shape) {\n    if (shape === null) {\n        if (typeof x == \"string\" || typeof x == \"number\") {\n            x = [x];\n            shape = []; // scalar, I guess.\n        } else {\n            shape = [x.length];\n        }\n    } else {\n        x = check_shape(x, shape);\n    }\n    return { x: x, shape: shape };\n}\n\nfunction forbid_strings(x) {\n    if (Array.isArray(x)) {\n        // no strings allowed!\n        for (const x0 of x) {\n            if (typeof x0 === \"string\") {\n                throw new Error(\"'x' should not contain any strings for a non-string HDF5 dataset\");\n            }\n        }\n    }\n}\n\nfunction fetch_max_string_length(lengths) {\n    let maxlen = 0;\n    lengths.array().forEach(y => {\n        if (maxlen < y) {\n            maxlen = y;\n        }\n    });\n    return maxlen;\n}\n\n/**\n * Base class for HDF5 objects.\n */\nexport class H5Base {\n    #file;\n    #name;\n    #attributes;\n\n    /**\n     * @param {string} file - Path to the HDF5 file.\n     * @param {string} name - Name of the object inside the file.\n     */\n    constructor(file, name) {\n        this.#file = file;\n        this.#name = name;\n    }\n\n    /**\n     * @member {string}\n     * @desc Path to the HDF5 file.\n     */\n    get file() {\n        return this.#file;\n    }\n\n    /**\n     * @member {string}\n     * @desc Name of the object inside the file.\n     */\n    get name() {\n        return this.#name;\n    }\n\n    /**\n     * @member {Array}\n     * @desc Array containing the names of all attributes of this object.\n     */\n    get attributes() {\n        return this.#attributes;\n    }\n\n    set_attributes(attributes) { // internal use only, for subclasses.\n        this.#attributes = attributes;\n    }\n\n    /**\n     * Read an attribute of the object.\n     *\n     * @param {string} attr - Name of the attribute.\n     * @return {object} Object containing the attribute `values` and the `shape` of the attribute.\n     */\n    readAttribute(attr) {\n        let vals;\n        let shape;\n\n        let x = wasm.call(module => new module.LoadedH5Attr(this.file, this.name, attr));\n        try {\n            shape = Array.from(x.shape());\n\n            let type = x.type();\n            if (type == \"other\") {\n                throw new Error(\"cannot load dataset for an unsupported type\");\n            }\n\n            if (type == \"String\") {\n                vals = packer.unpack_strings(x.values(), x.lengths());\n            } else {\n                vals = x.values().slice();\n            }\n        } finally {\n            x.delete();\n        }\n\n        return { values: vals, shape: shape };\n    }\n\n    #create_attribute(attr, type, shape, { maxStringLength = 10 } = {}) { // internal use only.\n        let shape_arr = utils.wasmifyArray(shape, \"Int32WasmArray\");\n        try {\n            wasm.call(module => module.create_hdf5_attribute(this.file, this.name, attr, type, shape_arr.length, shape_arr.offset, maxStringLength));\n            this.#attributes.push(attr);\n        } finally {\n            shape_arr.free();\n        }\n    }\n\n    /**\n     * Write an attribute for the object.\n     *\n     * @param {string} attr - Name of the attribute.\n     * @param {string} type - Type of dataset to create.\n     * This can be `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64;\n     * or `\"FloatX\"` for `X` of 32 or 64;\n     * or `\"String\"`.\n     * @param {?Array} shape - Array containing the dimensions of the dataset to create.\n     * If set to an empty array, this will create a scalar dataset.\n     * If set to `null`, this is determined from `x`.\n     * @param {(TypedArray|Array|string|number)} x - Values to be written to the new dataset, see {@linkcode H5DataSet#write write}.\n     * This should be of length equal to the product of `shape`;\n     * unless `shape` is empty, in which case it should either be of length 1, or a single number or string.\n     * @param {?number} [options.maxStringLength=null] - Maximum length of the strings to be saved.\n     * Only used when `type = \"String\"`.\n     * If `null`, this is inferred from the maximum length of strings in `x`.\n     */\n    writeAttribute(attr, type, shape, x, { maxStringLength = null } = {}) {\n        if (x === null) {\n            throw new Error(\"cannot write 'null' to HDF5\"); \n        }\n\n        let guessed = guess_shape(x, shape);\n        x = guessed.x;\n        shape = guessed.shape;\n\n        if (type == \"String\") {\n            let [ lengths, buffer ] = packer.repack_strings(x);\n            try {\n                if (maxStringLength == null) {\n                    maxStringLength = fetch_max_string_length(lengths);\n                }\n                this.#create_attribute(attr, type, shape, { maxStringLength: maxStringLength });\n                wasm.call(module => module.write_string_hdf5_attribute(this.file, this.name, attr, lengths.length, lengths.offset, buffer.offset));\n            } finally {\n                utils.free(buffer);\n                utils.free(lengths);\n            }\n        } else {\n            forbid_strings(x);\n            let y = utils.wasmifyArray(x, null);\n            try {\n                this.#create_attribute(attr, type, shape);\n                wasm.call(module => module.write_numeric_hdf5_attribute(this.file, this.name, attr, y.constructor.className, y.offset));\n            } finally {\n                y.free();\n            }\n        }\n\n        return;\n    }\n}\n\n/**\n * Representation of a group inside a HDF5 file.\n *\n * @augments H5Base\n */\nexport class H5Group extends H5Base {\n    #children;\n    #attributes;\n\n    /**\n     * @param {string} file - Path to the HDF5 file.\n     * @param {string} name - Name of the group inside the file.\n     */\n    constructor(file, name, { newlyCreated = false } = {}) {\n        super(file, name);\n\n        if (newlyCreated) {\n            this.#children = {};\n            this.set_attributes([]);\n        } else {\n            let x = wasm.call(module => new module.H5GroupDetails(file, name));\n            try {\n                let child_names = packer.unpack_strings(x.child_buffer(), x.child_lengths());\n                let child_types = x.child_types();\n                let type_options = [ \"Group\", \"DataSet\", \"Other\" ];\n\n                this.#children = {};\n                for (var i = 0; i < child_names.length; i++) {\n                    this.#children[child_names[i]] = type_options[child_types[i]];\n                }\n\n                let unpacked = packer.unpack_strings(x.attr_buffer(), x.attr_lengths());\n                this.set_attributes(unpacked);\n            } finally {\n                x.delete();\n            }\n        }\n    }\n\n    /**\n     * @member {object}\n     * @desc An object where the keys are the names of the immediate children and the values are strings specifying the object type of each child.\n     * Each string can be one of `\"Group\"`, `\"DataSet\"` or `\"Other\"`.\n     */\n    get children() {\n        return this.#children;\n    }\n\n    #child_name(child) {\n        let new_name = this.name;\n        if (new_name != \"/\") {\n            new_name += \"/\";\n        } \n        new_name += child;\n        return new_name;\n    }\n\n    /**\n     * @param {string} name - Name of the child element to open.\n     * @param {object} [options={}] - Further options to pass to the {@linkplain H5Group} or {@linkplain H5DataSet} constructors.\n     *\n     * @return {H5Group|H5DataSet} Object representing the child element.\n     */\n    open(name, options = {}) {\n        let new_name = this.#child_name(name);\n        if (name in this.#children) {\n            if (this.#children[name] == \"Group\") {\n                return new H5Group(this.file, new_name, options);\n            } else if (this.#children[name] == \"DataSet\") {\n                return new H5DataSet(this.file, new_name, options); \n            } else {\n                throw new Error(\"don't know how to open '\" + name + \"'\");\n            }\n        } else {\n            throw new Error(\"no '\" + name + \"' child in this HDF5 Group\");\n        }\n    }\n\n    /**\n     * @param {string} name - Name of the group to create.\n     *\n     * @return {@H5Group} A group is created as an immediate child of the current group.\n     * A {@linkplain H5Group} object is returned representing this new group.\n     * If a group already exists at `name`, it is returned directly.\n     */\n    createGroup(name) {\n        let new_name = this.#child_name(name);\n        if (name in this.children) {\n            if (this.children[name] == \"Group\") {\n                return new H5Group(this.file, new_name);\n            } else {\n                throw new Error(\"existing child '\" + new_name + \"' is not a HDF5 group\");\n            }\n        } else {\n            wasm.call(module => module.create_hdf5_group(this.file, new_name));\n            this.children[name] = \"Group\";\n            return new H5Group(this.file, new_name, { newlyCreated: true });\n        }\n    }\n\n    /**\n     * @param {string} name - Name of the dataset to create.\n     * @param {string} type - Type of dataset to create.\n     * This can be `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64;\n     * or `\"FloatX\"` for `X` of 32 or 64;\n     * or `\"String\"`.\n     * @param {Array} shape - Array containing the dimensions of the dataset to create.\n     * This can be set to an empty array to create a scalar dataset.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {number} [options.maxStringLength=10] - Maximum length of the strings to be saved.\n     * Only used when `type = \"String\"`.\n     * @param {number} [options.compression=6] - Deflate compression level.\n     * @param {?Array} [options.chunks=null] - Array containing the chunk dimensions.\n     * This should have length equal to `shape`, with each value being no greater than the corresponding value of `shape`.\n     * If `null`, it defaults to `shape`.\n     *\n     * @return {H5DataSet} A dataset of the specified type and shape is created as an immediate child of the current group.\n     * A {@linkplain H5DataSet} object is returned representing this new dataset.\n     */\n    createDataSet(name, type, shape, { maxStringLength = 10, compression = 6, chunks = null } = {}) {\n        let new_name = this.#child_name(name);\n\n        let shape_arr;\n        let chunk_arr; \n        try {\n            shape_arr = utils.wasmifyArray(shape, \"Int32WasmArray\");\n\n            let chunk_offset = shape_arr.offset;\n            if (chunks !== null) {\n                chunk_arr = utils.wasmifyArray(chunks, \"Int32WasmArray\");\n                if (chunk_arr.length != shape_arr.length) {\n                    throw new Error(\"'chunks' and 'shape' should have the same dimensions\");\n                }\n                chunk_offset = chunk_arr.offset;\n            }\n\n            wasm.call(module => module.create_hdf5_dataset(this.file, new_name, type, shape_arr.length, shape_arr.offset, maxStringLength, compression, chunk_offset));\n        } finally {\n            shape_arr.free();\n        }\n\n        this.children[name] = \"DataSet\";\n        return new H5DataSet(this.file, new_name, { newlyCreated: true, type: type, shape: shape });\n    }\n\n    /**\n     * This convenience method combines {@linkcode H5Group#createDataSet createDataSet} with {@linkcode H5DataSet#write write}.\n     * It is particularly useful for string types as it avoids having to specify the `maxStringLength` during creation based on the `x` used during writing.\n     * \n     * @param {string} name - Name of the dataset to create.\n     * @param {string} type - Type of dataset to create.\n     * This can be `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64;\n     * or `\"FloatX\"` for `X` of 32 or 64;\n     * or `\"String\"`.\n     * @param {Array} shape - Array containing the dimensions of the dataset to create.\n     * If set to an empty array, this will create a scalar dataset.\n     * If set to `null`, this is determined from `x`.\n     * @param {(TypedArray|Array|string|number)} x - Values to be written to the new dataset, see {@linkcode H5DataSet#write write}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {number} [options.compression=6] - Deflate compression level.\n     * @param {?Array} [options.chunks=null] - Array containing the chunk dimensions.\n     * This should have length equal to `shape`, with each value being no greater than the corresponding value of `shape`.\n     * If `null`, it defaults to `shape`.\n     * @param {boolean} [options.cache=false] - Whether to cache the written values in the returned {@linkplain H5DataSet} object.\n     *\n     * @return {H5DataSet} A dataset of the specified type and shape is created as an immediate child of the current group.\n     * The same dataset is then filled with the contents of `x`.\n     * A {@linkplain H5DataSet} object is returned representing this new dataset.\n     */\n     writeDataSet(name, type, shape, x, { compression = 6, chunks = null, cache = false } = {}) {\n        if (x === null) {\n            throw new Error(\"cannot write 'null' to HDF5\"); \n        }\n\n        let guessed = guess_shape(x, shape);\n        x = guessed.x;\n        shape = guessed.shape;\n\n        let handle;\n        if (type == \"String\") {\n            let [ lengths, buffer ] = packer.repack_strings(x);\n            try {\n                let maxlen = fetch_max_string_length(lengths);\n                handle = this.createDataSet(name, \"String\", shape, { maxStringLength: maxlen, compression: compression, chunks: chunks });\n                wasm.call(module => module.write_string_hdf5_dataset(handle.file, handle.name, lengths.length, lengths.offset, buffer.offset));\n            } finally {\n                utils.free(lengths);\n                utils.free(buffer);\n            }\n            handle.cache_loaded(x, cache);\n        } else {\n            handle = this.createDataSet(name, type, shape, { compression: compression, chunks: chunks });\n            handle.write(x, { cache: cache });\n        }\n\n        return handle;\n    }\n}\n\n/**\n * Representation of a HDF5 file as a top-level group.\n *\n * @augments H5Group\n */\nexport class H5File extends H5Group {\n    /**\n     * @param {string} file - Path to the HDF5 file.\n     */\n    constructor(file, options = {}) {\n        super(file, \"/\", options);\n    }\n}\n\n/**\n * Create a new HDF5 file.\n *\n * @param {string} path - Path to the file.\n *\n * @return {H5File} A new file is created at `path`.\n * A {@linkplain H5File} object is returned.\n */\nexport function createNewHDF5File(path) {\n    wasm.call(module => module.create_hdf5_file(path));\n    return new H5File(path, { newlyCreated: true });\n}\n\n/**\n * Representation of a dataset inside a HDF5 file.\n *\n * @augments H5Base\n */\nexport class H5DataSet extends H5Base {\n    #shape;\n    #type;\n    #values;\n    #loaded;\n\n    static #load(file, name) {\n        let vals;\n        let type;\n        let shape;\n        let attr;\n\n        let x = wasm.call(module => new module.LoadedH5DataSet(file, name));\n        try {\n            type = x.type();\n            if (type == \"other\") {\n                throw new Error(\"cannot load dataset for an unsupported type\");\n            }\n\n            if (type == \"String\") {\n                vals = packer.unpack_strings(x.values(), x.lengths());\n            } else {\n                vals = x.values().slice();\n            }\n\n            shape = Array.from(x.shape());\n            attr = packer.unpack_strings(x.attr_buffer(), x.attr_lengths());\n        } finally {\n            x.delete();\n        }\n\n        return { \n            \"values\": vals, \n            \"type\": type, \n            \"shape\": shape, \n            \"attributes\": attr\n        };\n    }\n\n    /**\n     * @param {string} file - Path to the HDF5 file.\n     * @param {string} name - Name of the dataset inside the file.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.load=false] - Whether or not to load the contents of the dataset in the constructor.\n     * If `false`, the contents can be loaded later with {@linkcode H5DataSet#load load}.\n     */\n    constructor(file, name, { load = false, newlyCreated = false, shape = null, type = null, values = null } = {}) {\n        super(file, name);\n\n        if (newlyCreated) {\n            if (shape === null || type === null) {\n                throw new Error(\"need to pass 'shape' and 'type' if 'newlyCreated = true'\");\n            }\n            this.#shape = shape;\n            this.#type = type;\n            this.#values = values;\n            this.#loaded = (values !== null);\n            this.set_attributes([]);\n        } else {\n            if (!load) {\n                let x = wasm.call(module => new module.H5DataSetDetails(file, name));\n                try {\n                    this.#type = x.type();\n                    this.#shape = Array.from(x.shape());\n                    this.#values = null;\n                    this.set_attributes(packer.unpack_strings(x.attr_buffer(), x.attr_lengths()));\n                } finally {\n                    x.delete();\n                }\n            } else {\n                let deets = H5DataSet.#load(file, name);\n                this.#type = deets.type;\n                this.#shape = deets.shape;\n                this.#values = deets.values;\n                this.set_attributes(deets.attributes);\n            }\n            this.#loaded = load;\n        }\n    }\n\n    /**\n     * @member {object}\n     * @desc String containing the type of the dataset.\n     * This may be `\"IntX\"` or `\"UintX\"` for `X` of 8, 16, 32, or 64;\n     * or `\"FloatX\"` for `X` of 32 or 64;\n     * `\"String\"`, or `\"Other\"`.\n     * \n     */\n    get type() {\n        return this.#type;\n    }\n\n    /**\n     * @member {Array}\n     * @desc Array of integers containing the dimensions of the dataset.\n     * If this is empty, the dataset is a scalar.\n     */\n    get shape() {\n        return this.#shape;\n    }\n\n    /**\n     * @member {boolean}\n     * @desc Whether the contents of the dataset have already been loaded.\n     */\n    get loaded() {\n        return this.#loaded;\n    }\n\n    /**\n     * @member {(Array|TypedArray)}\n     * @desc The contents of this dataset.\n     * This has length equal to the product of {@linkcode H5DataSet#shape shape};\n     * unless this dataset is scalar, in which case it has length 1.\n     */\n    get values() {\n        return this.#values;\n    }\n\n    /**\n     * @return {Array|TypedArray} The contents of this dataset are loaded and cached in this {@linkplain H5DataSet} object.\n     * A (Typed)Array is returned containing those contents.\n     */\n    load() {\n        if (!this.#loaded) {\n            let deets = H5DataSet.#load(this.file, this.name);\n            this.#values = deets.values;\n            this.#loaded = true;\n        }\n        return this.#values;\n    }\n\n    cache_loaded(x, cache) { // internal use only.\n        if (cache) {\n            this.#values = x.slice();\n            this.#loaded = true;\n        } else {\n            this.#loaded = false;\n            this.#values = null;\n        }\n    }\n\n    /**\n     * @param {(Array|TypedArray|number|string)} x - Values to write to the dataset.\n     * This should be of length equal to the product of {@linkcode H5DataSet#shape shape};\n     * unless `shape` is empty, in which case it should either be of length 1, or a single number or string.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the written values in this {@linkplain H5DataSet} object.\n     *\n     * @return `x` is written to the dataset on file.\n     * No return value is provided.\n     */\n    write(x, { cache = false } = {}) {\n        if (x === null) {\n            throw new Error(\"cannot write 'null' to HDF5\"); \n        }\n\n        x = check_shape(x, this.shape);\n\n        if (this.type == \"String\") {\n            let [ lengths, buffer ] = packer.repack_strings(x);\n            try {\n                wasm.call(module => module.write_string_hdf5_dataset(this.file, this.name, lengths.length, lengths.offset, buffer.offset));\n            } finally {\n                utils.free(buffer);\n                utils.free(lengths);\n            }\n            this.cache_loaded(x, cache);\n        } else {\n            forbid_strings(x);\n            let y = utils.wasmifyArray(x, null);\n            try {\n                wasm.call(module => module.write_numeric_hdf5_dataset(this.file, this.name, y.constructor.className, y.offset));\n                this.cache_loaded(y, cache);\n            } finally {\n                y.free();\n            }\n        }\n\n        return;\n    }\n}\n\nfunction extract_names(host, output, recursive = true) {\n    for (const [key, val] of Object.entries(host.children)) {\n        if (val == \"Group\") {\n            output[key] = {};\n            if (recursive) {\n                extract_names(host.open(key), output[key], recursive);\n            }\n        } else {\n            let data = host.open(key);\n\n            let dclass;\n            if (data.type.startsWith(\"Uint\") || data.type.startsWith(\"Int\")) {\n                dclass = \"integer\";\n            } else if (data.type.startsWith(\"Float\")) {\n                dclass = \"float\";\n            } else {\n                dclass = data.type.toLowerCase();\n            }\n\n            output[key] = dclass + \" dataset\";\n        }\n    }\n}\n\n/**\n * Extract object names from a HDF5 file.\n *\n * @param {string} path - Path to a HDF5 file.\n * For web applications, this should be saved to the virtual filesystem with {@linkcode writeFile}.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.group=\"\"] - Group to use as the root of the search.\n * If an empty string is supplied, the entire file is used as the root.\n * @param {boolean} [options.recursive=true] - Whether to recursively extract names inside child groups.\n * \n * @return {object} Nested object where the keys are the names of the HDF5 objects and values are their types.\n * HDF5 groups are represented by nested Javascript objects in the values;\n * these nested objects are empty if `recursive = false`.\n * HDF5 datasets are represented by strings specifying the data type - i.e., `\"integer\"`, `\"float\"`, `\"string\"` or `\"other\"`.\n */\nexport function extractHDF5ObjectNames (path, { group = \"\", recursive = true } = {}) {\n    var src;\n    if (group == \"\") {\n        src = new H5File(path);\n    } else {\n        src = new H5Group(path, group);\n    }\n    var output = {};\n    extract_names(src, output, recursive);\n    return output;\n}\n\n/**\n * Load a dataset from a HDF5 file.\n *\n * @param {string} path - Path to a HDF5 file.\n * For web applications, this should be saved to the virtual filesystem with {@linkcode writeFile}.\n * @param {string} name - Name of a dataset inside the HDF5 file.\n * \n * @return {object} An object containing:\n * - `dimensions`, an array containing the dimensions of the dataset.\n * - `contents`, a Int32Array, Float64Array or array of strings, depending on the type of the dataset. \n */\nexport function loadHDF5Dataset(path, name) {\n    var x = new H5DataSet(path, name, { load: true });\n    return {\n        \"dimensions\": x.shape,\n        \"contents\": x.values\n    };\n}\n","import * as methods from \"./file.js\";\nimport * as areal from \"./abstract/realize.js\";\n\n/**\n * Choose a temporary file path on the system's default temporary directory (Node.js) or on the virtual file system (browser).\n * This can be used to enable environment-agnostic creation of temporary files.\n *\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.extension=\"\"] - File extension to use for any temporary file that might be created.\n *\n * @return {string} Temporary file path.\n */\nexport function chooseTemporaryPath({ extension = \"\" } = {}) {\n    return areal.temp(\"temp_\", extension);    \n}\n\n/**\n * Realize a file so that it can be read by **scran.js** functions across both Node.js and browsers.\n *\n * @param {string|Uint8Array} file - In general, a Uint8Array buffer containing the file contents.\n * For Node.js, this may also be a string containing a path to a file.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.extension=\"\"] - File extension to use for any temporary file that might be created.\n *\n * @return {Object} Object with the following properties:\n *\n * - `path`: a string containing the path to the file on the local filesystem (Node.js) or virtual file system (browsers).\n *   For Node.js, `file` is returned directly if it is already a path;\n *   otherwise, a new file will be created in the system's default temporary directory.\n * - `flush`: a function to be called to remove any temporary file created by this function.\n *   For Node.js, this will be a no-op if `file` is already a path. \n */\nexport function realizeFile(file, { extension = \"\" } = {}) {\n    if (typeof file == \"string\") {\n        return areal.handleString(file);\n    }\n\n    let tmppath = chooseTemporaryPath({ extension: extension });\n    methods.writeFile(tmppath, file);\n    return { \n        path: tmppath, \n        flush: () => methods.removeFile(tmppath) \n    };\n}\n","import { hypergeometricTest } from \"./hypergeometricTest.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Test for feature set enrichment among markers using the {@linkcode hypergeometricTest} function.\n * We assume that all feature names have already been converted into integer indices before running this function;\n * i.e., features are represented as indices into a \"common namespace\" consisting of an array of unique feature names.\n * See {@linkcode remapFeatureSets} for more details.\n *\n * @param {Array|TypedArray} markers - Array of marker identities.\n * Each entry of the array is a unique integer index identifying a marker feature in the common namespace, where each index lies in `[0, totalFeatures)`.\n *\n * In other words, given a common namespace array `X` containing the feature names, the marker names can be obtained as `Array.from(markers).map(i => X[i])`.\n * @param {Array} featureSets - Array containing the feature sets.\n * Each entry corresponds to a single feature set and may be an Array or TypedArray.\n * Each array should contain unique indices for the features belonging to the set.\n * \n * In other words, given a common namespace array `X` containing the feature names, the names of the features in set `s` can be obtained as `Array.from(featureSets[s]).map(i => X[i])`.\n * @param {number} totalFeatures - Total number of features in the common namespace. \n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use for computing the p-values, see {@linkcode hypergeometricTest}.\n *\n * @return {object} Object containing:\n *\n * - `count`: Int32Array containing the number of markers present in each set.\n * - `size`: Int32Array containing the size of each set.\n * - `pvalue`: Float64Array containing the p-value for enrichment in each set.\n */\nexport function testFeatureSetEnrichment(markers, featureSets, totalFeatures, { numberOfThreads = null } = {}) {\n    for (const j of markers) {\n        if (j >= totalFeatures) {\n            throw new Error(\"'markers' contains out-of-range indices (\" + String(j) + \")\");\n        }\n    }\n    let is_marker = new Set(markers);\n\n    let nsets = featureSets.length;\n    let intersection = new Int32Array(nsets);\n    let set_sizes = new Int32Array(nsets);\n\n    for (var i = 0; i < nsets; i++) {\n        let current = featureSets[i];\n        let present = 0;\n        let set_size = 0;\n\n        for (const j of current) {\n            if (j >= totalFeatures) {\n                throw new Error(\"feature set \" + String(i) + \" contains out-of-range indices (\" + String(j) + \")\");\n            }\n            if (is_marker.has(j)) {\n                present++;\n            }\n        }\n\n        intersection[i] = present;\n        set_sizes[i] = current.length;\n    }\n\n    return {\n        count: intersection,\n        size: set_sizes,\n        pvalue: hypergeometricTest(intersection, is_marker.size, set_sizes, totalFeatures, { numberOfThreads })\n    };\n}\n\n/**\n * Remap feature sets from a \"reference\" feature namespace to a \"target\" namespace.\n * This involves defining a common namespace consisting of feature names that are shared in both namespaces,\n * and then mapping the feature sets to the common namespace.\n *\n * The `target_indices` property returned by this function can be used to generate the indices of `markers` in {@linkcode testFeatureSetEnrichment}.\n * Given a function that determines whether a feature in the target namespace is a marker, we can populate `markers` as below:\n * \n * ```\n * let markers = [];\n * target_indices.forEach((x, i) => {\n *     if (is_marker(x)) { // in other words, 'targetFeatures[x]' is a marker.\n *         markers.push(i); // we want to store 'i' as this is the index into the common namespace.\n *     }\n * });\n * ```\n *\n * @param {Array} targetFeatures - Array of strings containing the feature names in the target namespace.\n * Any `null` entries are considered to be incomparable.\n * @param {Array} referenceFeatures - Array of strings containing the feature names in the reference namespace.\n * Any `null` entries are considered to be incomparable.\n * @param {Array} referenceFeatureSets - Array of feature sets.\n * Each entry corresponds to a set and is an Array/TypedArray containing integer indices of features belonging to that set.\n * Indices are relative to `referenceFeatures`.\n *\n * @return {object} Object containing:\n *\n * - `target_indices`: an Int32Array of length equal to the number of common features between `targetFeatures` and `referenceFeatures`.\n *   Each entry is an index into `targetFeatures` to identify the feature in the common namespace,\n *   i.e., the common namespace can be defined as `Array.from(target_indices).map(i => targetFeatures[i])`.\n * - `reference_indices`: an Int32Array of length equal to the size of the common namespace.\n *   Each entry is an index into `referenceFeatures` to identify the feature in the common namespace.\n *   i.e., the common namespace can be defined as `Array.from(reference_indices).map(i => referenceFeatures[i])`\n *   (which is guaranteed to be the same as the corresponding operation on `target_indices`).\n * - `sets`: an Array of Int32Arrays containing the membership of each feature set.\n *   Each integer is an index into the common namespace defined by `target_indices` and `reference_indices`.\n */\nexport function remapFeatureSets(targetFeatures, referenceFeatures, referenceFeatureSets) {\n    let valid = new Map;\n    for (var i = 0; i < targetFeatures.length; i++) {\n        if (targetFeatures[i] !== null) {\n            valid.set(targetFeatures[i], i);\n        }\n    }\n\n    let data_indices = [];\n    let ref_map = new Map;\n    for (var i = 0; i < referenceFeatures.length; i++) {\n        let x = referenceFeatures[i];\n        if (x !== null) {\n            let y = valid.get(x);\n            if (typeof y === \"number\") {\n                ref_map.set(i, data_indices.length);\n                data_indices.push(y);\n            }\n        }\n    }\n\n    let new_sets = [];\n    for (const set of referenceFeatureSets) {\n        let remapped = [];\n        for (const x of set) {\n            let y = ref_map.get(x);\n            if (typeof y === \"number\") {\n                remapped.push(y);\n            }\n        }\n        new_sets.push(new Int32Array(remapped));\n    }\n\n    return { \n        target_indices: new Int32Array(data_indices),\n        reference_indices: new Int32Array(ref_map.keys()),\n        sets: new_sets\n    };\n}\n","import * as h5 from \"./hdf5.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Write a sparse {@linkplain ScranMatrix} into HDF5 file, in the form of its compressed sparse components.\n * This can be considered the reverse operation of {@linkcode initializeSparseMatrixFromHDF5}.\n *\n * @param {ScranMatrix} x - An input sparse matrix.\n * @param {string} path - Path to the HDF5 file.\n * A new file will be created if no file is present.\n * @param {string} name - Name of the group inside the HDF5 file in which to save `x`.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.format=null] - Format to use for saving `x`.\n * This can be one of:\n *\n * - `tenx_matrix`, a compressed sparse column layout where the dimensions are stored in the `shape` dataset.\n * - `csr_matrix`, a compressed sparse column (yes, column) layout where the dimensions are stored in the `shape` attribute of the HDF5 group.\n *   The discrepancy between the name and the layout is a consequence of the original framework operating on the transposed matrix (i.e., features in columns).\n * - `csc_matrix`, a compressed sparse row layout where the dimensions are stored in the `shape` attribute of the group.\n *   Discrepancy is for the same reason as described for `csr_matrix`.\n *\n * If `null`, the \"most appropriate\" layout is chosen based on the layout of the data in `x`.\n * @param {boolean} [options.forceInteger=false] - Whether to force non-integer values in `x` to be coerced to integers.\n *\n * @return `x` is written to `path` at `name`.\n */\nexport function writeSparseMatrixToHdf5(x, path, name, { format = null, forceInteger = false } = {}) {\n    if (format == null) {\n        format = \"automatic\";\n    }\n    format = wasm.call(module => module.write_sparse_matrix_to_hdf5(x.matrix, path, name, format, forceInteger));\n\n    let handle = new h5.H5Group(path, name);\n    let shape = [x.numberOfRows(), x.numberOfColumns()];\n\n    if (format == \"tenx_matrix\") {\n        handle.writeDataSet(\"shape\", \"Int32\", null, shape);\n    } else if (format == \"csr_matrix\") {\n        handle.writeAttribute(\"encoding-type\", \"String\", null, \"csr_matrix\");\n        handle.writeAttribute(\"shape\", \"Int32\", null, shape.reverse()); // yes, because H5AD transposes everything, and so must we.\n    } else if (format == \"csc_matrix\") {\n        handle.writeAttribute(\"encoding-type\", \"String\", null, \"csc_matrix\");\n        handle.writeAttribute(\"shape\", \"Int32\", null, shape.reverse());\n    } else {\n        throw new Error(\"unknown format '\" + format + \"'\");\n    }\n\n    return;\n}\n"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","_a","Mutex","_classCallCheck","this","mutex","_createClass","key","begin","res","fn","_regeneratorRuntime","mark","_callee","unlock","wrap","_context","prev","lock","sent","abrupt","finish","stop","globalObject","globalThis","self","window","global","nodeBuffer","Buffer","textEncoder","TextEncoder","hexCharCodesToInt","a","b","writeHexToUInt8","buf","str","size","length","i","index","charCodeAt","hexStringEqualsUInt8","strIndex","alpha","digit","getDigestHex","tmpBuffer","input","hashLength","p","nibble","String","fromCharCode","getUInt8Buffer","data","from","Uint8Array","buffer","byteOffset","isBuffer","ArrayBuffer","isView","byteLength","Error","encode","base64Chars","base64Lookup","getDecodeBase64Length","bufferLength","Math","floor","len","decodeBase64","bytes","encoded1","encoded2","encoded3","encoded4","MAX_HEAP","WASM_FUNC_HASH_LENGTH","wasmMutex","wasmModuleCache","Map","WASMInterface","binary","_callee4","wasmInstance","memoryView","initialized","writeMemory","getMemory","getExports","setMemorySize","getStateSize","loadWASMPromise","setupInterface","init","updateUInt8Array","update","digestChars","digest","save","load","isDataShort","canSimplify","calculate","_this","_context4","WebAssembly","offset","arguments","undefined","set","exports","totalSize","Hash_SetMemorySize","arrayOffset","Hash_GetBuffer","memoryBuffer","memory","DataView","getUint32","STATE_SIZE","dispatch","_callee2","asm","promise","module","_context2","has","name","compile","get","instantiate","_callee3","_context3","bits","Hash_Init","read","chunk","subarray","Hash_Update","Uint8Buffer","outputType","padding","Hash_Final","slice","stateOffset","Hash_GetState","stateLength","internalState","prefixedState","hash","state","overallLength","concat","t0","initParam","digestParam","Hash_Calculate","lockedCreate","_callee5","wasm","_context5","wasmJson$d","mutex$e","wasmCache$e","md5","err","freeCache","object","scran","changedParametersIllegal","x","y","xskip","yskip","changedParameters","xnull","ynull","xarr","Array","yarr","xkeys","Object","keys","ykeys","sort","_i","_xkeys","k","allocateCachedArray","type","cache","reallocate","candidate","constructor","className","owner","free","findValidUpstreamStates","states","msg","to_use","_i2","_Object$entries","entries","_Object$entries$_i","_slicedToArray","valid","push","defaultDownload","_x","_defaultDownload","_asyncToGenerator","url","resp","fetch","ok","status","arrayBuffer","t1","SimpleFile","_ref$name","_classPrivateFieldInitSpec","_mode","writable","_buffer","_file","_name","File","_classPrivateFieldSet","_ref2$copy","copy","_classPrivateFieldGet","FileReaderSync","readAsArrayBuffer","_ref3$copy","stream","file","chunkSize","callback","guess_compression","compression","n","astream","merge_bytes","leftovers","decoder","_step","total","_iterator","_createForOfIteratorHelper","s","f","combined","_step2","_iterator2","decode","stream_callback","_x2","_x3","_x4","_x5","_stream_callback","afile","content","gz","pako","onData","onEnd","readLines2","_x6","_readLines","_ref4","_ref4$compression","_ref4$chunkSize","dec","lines","_args2","TextDecoder","last","current","readTable2","_x7","_readTable","_ref6","_ref6$compression","_ref6$delim","delim","_ref6$chunkSize","rows","parse","size_left","_args3","out","ppp","delimiter","meta","aborted","_step3","_iterator3","errors","message","_step4","_iterator4","pop","RAW_SUBSET_OVERRIDE","_parameters","WeakMap","_cache","_abbreviated","_preserve_dataset_cache","_configureIndices","WeakSet","InputsState","parameters","abbreviated","_classPrivateMethodInitSpec","changed","utils","matrix","raw_matrix","block_ids","raw_block_ids","multi_block_ids","genes","row_ids","annotations","block_levels","_this$constructor","output","_objectSpread","subset","_classStaticPrivateMethodGet","_cloneSubset","call","datasets","_ref$copy","inferred_rna_types","columns","rn","rowNames","row_names","forceTaxonomy","columnNames","column","_compute","block_factor","tmp_abbreviated","val","_this$constructor2","format","details","abbreviate","load_and_cache","block_and_cache","subset_and_cache","indices","max_index","fetchCountMatrix","numberOfColumns","keep","harvest_subset_indices","forEach","_ref2","_ref2$onOriginal","onOriginal","_classPrivateMethodGet","_configureIndices2","_ref3","_ref3$onOriginal","new_cache","clone","_arr","_i3","_arr2","new_params","fetchParameters","values","ranges","map","max","undoSubset","known_modalities","bind_single_modality","modality","loaded","gnames","mats","primary_id","primary_ids","merged","features","bioc","bind_datasets","names","blocks","common_modes","mod","okay","_i4","_common_modes","add","annos","cells","ncells","nice_barr","$setColumn","rename_dataset","single","available","load_datasets","_load_datasets","preserve_dataset_cache","_i9","_names","_iterator8","_step8","_iterator9","_step9","_x15","t2","t3","invalid_block_id","raw_annotations","hasColumn","field","anno","allowed","Set","_step5","_iterator5","r","bids","array","keep2","_step6","_iterator6","_x8","_load_and_cache","new_datasets","multi_block_levels","anno_batch","converted","action","placeholder","ids","levels","view","raw_block_levels","new_annotations","new_matrix","new_block_ids","new_block_levels","_step7","_iterator7","baseUrl","_inputs","_automatic","_acquire_reference","RnaQualityControlState","inputs","inputs_module","metrics","filters","metrics_buffer","discard_buffer","species","mito_prefix","nmads","automatic","use_reference_mito","gene_id_column","gene_id_type","def","gene_id_column2","species2","gene_id_type2","guesses","backcomp","gene_info","subsets","lists","sub_arr","lower_mito","mat","block","discard","use_mito_default","defaults","guessRnaFeatureTypes","configureFeatureParameters","fetchFeatureAnnotations","numberOfRows","fill","_acquire_reference2","toLowerCase","startsWith","fetchBlock","numberOfMADs","numberOfCells","filter","best_key","best","confidence","toUpperCase","_classStaticPrivateFieldSpecSet","_mito_lists","fun","previous","_classStaticPrivateFieldSpecGet","_downloadFun","_acquire_reference3","feature_type","mito_lists","target","contents","rutils","_defineProperty","AdtQualityControlState","tag_id_column","igg_prefix","min_detected_drop","tag_info","lower_igg","minDetectedDrop","counter","latest","CrisprQualityControlState","find_usable_upstream_states","qc_states","in_use","tmp","_qc_states","_raw_compute_matrix","_raw_compute_block","CellFilteringState","RNA","rna_qc_module","ADT","adt_qc_module","CRISPR","crispr_qc_module","block_buffer","_raw_compute_matrix2","_raw_compute_block2","use_rna","use_adt","use_crispr","first","fetchDiscards","disc_buffer","disc_arr","fetchFilteredMatrix","src","sub","bcache","subsetSums","qc","discards","sums","fetchMetrics","oarr","j","_qc","_filter","_raw_compute","RnaNormalizationState","qc_module","filter_module","sum_buffer","_raw_compute2","buff","fetchFilteredBlock","nutils","sizeFactors","allowZeros","AdtNormalizationState","total_buffer","sf_buffer","centered_sf_buffer","num_pcs","num_clusters","totals","numberOfPCs","numberOfClusters","step_name","CrisprNormalizationState","centered_buffer","handle","ghandle","createGroup","_norm","FeatureSelectionState","norm","norm_module","results","sorted_residuals","span","fetchNormalizedMatrix","residuals","_feat","RnaPcaState","feat","feat_module","hvg_buffer","pcs","num_hvgs","block_method","choose_hvgs","blockMethod","sorted_resids","fetchSortedResiduals","threshold_at","unsorted_resids","fetchResults","element","AdtPcaState","CrisprPcaState","find_nonzero_upstream_states","pca_states","weights","_pca_states","CombineEmbeddingsState","rna_pca_module","adt_pca_module","crispr_pca_module","combined_buffer","num_cells","total_dims","rna_weight","adt_weight","crispr_weight","approximate","_Object$values","weight_arr","collected","curpcs","fetchPCs","principalComponents","createPcsView","upstream","_combined","BatchCorrectionState","combine_module","corrected","fetchNumberOfCells","fetchNumberOfDimensions","method","num_neighbors","needs_correction","fetchCombined","numberOfDims","_correct","NeighborIndexState","correct","correct_module","raw","fetchCorrected","_index","_valid","_compute_neighbors","_compute_graph","_compute_clusters","SnnGraphClusterState","neighbor_module","neighbors","graph","clusters","_valid2","membership","run_me","scheme","algorithm","multilevel_resolution","leiden_resolution","walktrap_steps","_compute_neighbors2","_compute_graph2","_compute_clusters2","fetchIndex","multiLevelResolution","leidenResolution","leidenModularityObjective","walktrapSteps","summaries2int","freeVersusResults","_i8","v","_Object$values2","v2","_i10","_Object$values3","m","_i11","_Object$keys2","KmeansClusterState","initMethod","_snn_cluster","_kmeans_cluster","ChooseClusteringState","snn","kmeans","snn_module","kmeans_module","fetchClusters","_free","markers","versus","_computeVersus","left","right","matrices","_ref","_ref$cache","_ref$block","_ref$lfc_threshold","lfc_threshold","_ref$compute_auc","compute_auc","cache_info","left_small","bigg","biggversus","smal","rerun","cached","run","left_index","right_index","new_clusters","leftfound","rightfound","new_block","modmat","lfcThreshold","computeAuc","_norm_states","_choice","MarkerDetectionState","norm_states","choice","rna_norm_module","adt_norm_module","crispr_norm_module","choice_module","changed_params","_Object$entries2","_Object$entries2$_i","_ref2$cache","_ref2$block","_ref2$lfc_threshold","_ref2$compute_auc","computeVersus","base","_built","FeatureSetManager","set_buffer","_prepareCollections","feats","collections","allowable","mapped","availableCollections","_loadCollection","_remapCollection","descriptions","target_indices","sets","sizes","universe","group","effect_size","summary","top_markers","min_threshold","use_largest","sumidx","mutils","_loop","info","stats","curstats","threshold","largest","in_set","computed","counts","count","pvalues","pvalue","num_markers","collection","set_index","normalized","fetchFeatureSetIndices","farr","all_loaded","_x17","_loadCollection3","_callee6","suffixes","headers","line","curfield","set_members","set_name","set_description","_line","members","_context6","_all_loaded","all","suffix","full","_x18","shift","split","Number","data_id","ref_id","data_id_col","Int32Array","_configureFeatureParameters","_Object$entries3","_Object$entries3$_i","_buildCollections","_x9","_x10","_x11","_x12","_x13","_x14","_buildCollections2","old_parameters","manager","annofun","guessfun","auto","prepareCollections","_transplantParameters","_fetchParameters","_normalized","_manager","FeatureSetEnrichmentState","fetchCollectionDetails","computeEnrichment","computePerCellScores","flush","setDownload","_markers","_flush_prepared","_load_reference","_build_reference","CellLabellingState","markers_module","_flush_prepared2","references","perref","integrated","integrated_results","_Object$keys","prepared","built","sharedFeatures","gene_ids","ref","used_refs","arr","_feats","marker_results","ngroups","ngenes","cluster_means","g","means","labels","o","_key","as_names","_toConsumableArray","human_references","mouse_references","availableReferences","_load_reference2","_build_reference2","numberOfGroups","numberOfFeatures","_i5","_Object$entries4","_Object$entries4$_i","_i7","_load_reference3","gene_lines","ensembl","symbol","entrez","empty2null","fields","chosen_ids","wa","cloneCached","registry","check_class","accepted","packageName","populate_list_columns","lhandle","colnames","nhandle","ndx","findAttribute","attribute","load_listData_names","curhandle","curcol","nrow","load_data_frame","rnhandle","nrhandle","rndx","NR","extract_matrix_rownames","idx","dimhandle","firsthandle","_id","_rowdata","_coldata","_counts_handle","_counts_loaded","_primaryRnaFeatureIdColumn","_dump_options","_counts","_features","_cells","ExperimentHubDataset","id","_ref$primaryRnaFeatur","primaryRnaFeatureIdColumn","clear","_dump_options2","_summary","my_rd","_args","_features2","_cells2","modality_features","_load","_ref3$cache","perm_features","curfeat","_counts2","consume","files","bakana","options","args","_counts3","counts_deets","_features3","rowdata_deets","rowdata_load","rowdata_handle","rowdata","match","_cells3","coldata_deets","coldata_load","coldata_handle","cd_df","coldata","ncol","_value","_wrapNativeSuper","Class","Function","toString","indexOf","TypeError","Wrapper","construct","getPrototypeOf","prototype","create","enumerable","configurable","setPrototypeOf","_liberate","SelectionManager","selections","_selections","_liberate2","selection","matfun","_ref2$force","force","replacement","store","needs_copy","leftsel","rightsel","triplets","cluster","_addSelection","CustomSelectionsState","_addSelection2","removeSelection","_ref4$copy","fetchSelectionIndices","_ref5","_ref5$copy","_ref5$force","fetchSelections","_this4","addSelection","_prepare","search_options","collection_offset","all_collection_names","all_collection_descriptions","all_collection_species","set_offset","all_set_names","all_set_descriptions","all_set_indices","all_set_sizes","all_set_collections","mapped_genes","remapped","spec","gene_mapping","all_sets2genes","set_indices","all_sets","nsets","set_names","set_descriptions","set_sizes","set_collections","all_genes2sets","current_remapped","_current","all_collections","ncollections","collection_names","collection_descriptions","collection_species","types","gesel","description","title","Uint32Array","mapping_to_sets","gene","overlaps","set_ids","num_top","set_id","console","warn","prepare","fetchSetDetails","fetchUniverseSize","skip","_this2","correctible_pca_steps","pca","pcaadt","pcacrispr","configureBatchCorrection","correct_method","pca_blocker","approximatable_steps","combine","configureApproximateNeighbors","step_inputs","step_qc","step_qc_adt","qcadt","step_qc_crispr","qccrispr","step_filter","step_norm","normalization","step_norm_adt","normadt","step_norm_crispr","normcrispr","step_feat","step_pca","step_pca_adt","step_pca_crispr","step_combine","step_correct","step_neighbors","step_tsne","step_umap","step_kmeans","step_snn","snn_cluster","step_choice","step_markers","cluster_markers","step_labels","step_custom","step_enrichment","load_flag","createAnalysis","_createAnalysis","create_analysis","input_state","variance","tsne","umap","kmeans_cluster","cluster_choice","label_cells","feature_set_enrichment","custom_markers","ready","runAnalysis","_runAnalysis","params","_ref$startFun","startFun","_ref$finishFun","finishFun","quickStart","quickFinish","promises","deferredQuickFinish","_basic_steps","_remaining","_args4","compute","retrieveParameters","serializeDatasets","_serializeDatasets","saver","dformat","_yield$val$serialize","obj","serialize","t4","t5","unserializeDatasets","_unserializeDatasets","serialized","loader","known","cls","handles","readers","unserialize","serializeConfiguration","_serializeConfiguration","isub","anal","fetchDatasets","fetchDirectSubset","version","bakana_version","other","direct_subset","custom_selections","unserializeConfiguration","_unserializeConfiguration","_ref$state","setDirectSubset","writeHdf5DataFrame","path","_ref$group","_ref$forceBuffer","forceBuffer","metadata","temppath","extension","children","fhandle","writeDataSet","data_frame","dhandle","coltypes","colname","all_types","has_null","writeAttribute","temp","temparr","NaN","Float64Array","child","resource","is_child","dumpCountMatrix","dumpNormalizedMatrix","sf","countPath","log","l1phandle","sfhandle","xhandle","translate_effects","dumpPcaResultsToHdf5","npcs","comp","c","dumpOtherReducedDimensionsToHdf5","dimensions","ndims","d","dump_internal","all_strings","all_bools","all_numbers","dumpList","encoded","JSON","stringify","dumpColumnData","modality_prefixes","main_modality","all_sce_metadata","all_other_metadata","all_files","cell_filtering","retained","all_coldata","rna_quality_control","rdf","applyFilter","detected","subsetProportions","fetchFilters","thresholdsSums","thresholdsDetected","thresholdsSubsetProportions","adt_quality_control","adf","subsetTotals","thresholdsSubsetTotals","crispr_quality_control","cdf","maxProportions","maxIndex","thresholdsMaxCount","rna_normalization","fetchSizeFactors","adt_normalization","crispr_normalization","choose_clustering","stringy","fetchBlockLevels","prefix","df","summarized_experiment","column_data","dumpRowData","row_info","all_rowdata","feature_selection","mean","variances","fitted","residual","columnOrder","setColumn","modalities","translate_summary","do_auc","marker_detection","nfeatures","mdf","eff","trans_eff","summ","trans_summ","main","all_sel","processed_sel","sel","_i6","row_data","dumpSingleCellExperiment","_dumpSingleCellExperiment","all_top_meta","all_prefixes","all_metadata","_modalities","_m","mprefix","sce_path","_m2","_mat","saved","_m3","_prefix","_mat2","_saved","_Object$entries5","_saved2","_Object$entries6","_Object$entries6$_i","_m4","_prefix2","_saved3","_modalities2","_m5","single_cell_experiment","main_experiment_name","alternative_experiments","assay","assays","_Object$entries5$_i","tv","rna_pca","adt_pca","crispr_pca","reddim","totalVariance","variance_explained","varianceExplained","reduced_dimensions","delegateYield","cell_labelling","list","other_data","attachMd5sums","_attachMd5sums","md5sum","realizeDirectory","directory","saveSingleCellExperiment","_saveSingleCellExperiment","_ref$directory","_yield$sce$dumpSingle","sce","adump","zipFiles","zip","JSZip","generateAsync","initialize","_ref$numberOfThreads","numberOfThreads","_ref$localFile","localFile","vizutils","fetch_assay_details","open","deets","subhandle","current_levels","eutils","codes","chandle","fetch_features","fetch_cells","_h5_file","_h5_path","_h5_flush","_h5_handle","_raw_features","_raw_cells","_assay_details","_countMatrixName","_featureTypeColumnName","_featureTypeRnaName","_featureTypeAdtName","_featureTypeCrisprName","_primaryAdtFeatureIdColumn","_primaryCrisprFeatureIdColumn","_dump_summary","_instantiate","_fetch_assay_details","H5adDataset","h5File","_ref$countMatrixName","countMatrixName","_ref$featureTypeColum","featureTypeColumnName","_ref$featureTypeRnaNa","featureTypeRnaName","_ref$featureTypeAdtNa","featureTypeAdtName","_ref$featureTypeCrisp","featureTypeCrisprName","_ref$primaryAdtFeatur","primaryAdtFeatureIdColumn","_ref$primaryCrisprFea","primaryCrisprFeatureIdColumn","_dump_summary2","_fetch_assay_details2","all_features","all_assay_names","chosen_assay","mappings","futils","primaries","_unserialize","_instantiate2","acceptable_df_subclasses","clshandle","levhandle","check_acceptable_class","rownames","nrows","extract_NAMES","nidx","extract_features","rrdx","rhandle","rrhandle","ehandle","r2handle","phandle","pidx","$setRowNames","extract_assay_names","ahandle","extract_assay","forceInteger","chosen","extract_alt_exps","in_handle","inld_handle","innn_handle","ae_handle","aeld_handle","aenn_handle","order","indx","inld_dx","innn_dx","ae_dx","aeld_dx","aenn_dx","ae_names","asehandle","check_for_se","_rds_file","_rds_handle","_se_handle","_alt_handles","_alt_handle_order","_rnaCountAssay","_adtCountAssay","_crisprCountAssay","_rnaExperiment","_adtExperiment","_crisprExperiment","_initialize","SummarizedExperimentDataset","rdsFile","_ref$rnaCountAssay","rnaCountAssay","_ref$adtCountAssay","adtCountAssay","_ref$crisprCountAssay","crisprCountAssay","_ref$rnaExperiment","rnaExperiment","_ref$adtExperiment","adtExperiment","_ref$crisprExperiment","crisprExperiment","_initialize2","modality_assay_names","mapping","exp","out_ids","_extract_alt_exps","availableReaders","TenxHdf5Dataset","TenxMatrixMarketDataset","link2file","setResolveLink","animateFun","setVisualizationAnimate","scranOptions","computeNeighbors","nn_index","rbuf","ibuf","dbuf","runs","distances","worker_registry","worker_cache_registry","message_type","handle_message","functions","error","sendTask","worker_id","payload","transferrable","worker","aworkers","initializeWorker","endsWith","iteration","killWorker","_killWorker","runWithNeighbors","nn_out","run_msg","zero$1","LITERALS$1","L_CODES$1","D_CODES$1","MAX_BITS$1","extra_lbits","extra_dbits","extra_blbits","bl_order","static_ltree","static_dtree","_dist_code","_length_code","MAX_MATCH$1","base_length","static_l_desc","static_d_desc","static_bl_desc","base_dist","StaticTreeDesc","static_tree","extra_bits","extra_base","elems","max_length","has_stree","TreeDesc","dyn_tree","stat_desc","max_code","d_code","dist","put_short","w","pending_buf","pending","send_bits","bi_valid","bi_buf","send_code","tree","bi_reverse","code","gen_codes","bl_count","next_code","init_block","dyn_ltree","dyn_dtree","bl_tree","END_BLOCK","opt_len","static_len","sym_next","matches","bi_windup","smaller","depth","_n2","pqdownheap","heap","heap_len","compress_block","ltree","dtree","lc","extra","sx","sym_buf","build_tree","desc","node","stree","heap_max","h","xbits","overflow","gen_bitlen","scan_tree","curlen","prevlen","nextlen","max_count","min_count","REP_3_6","REPZ_3_10","REPZ_11_138","send_tree","static_init_done","_tr_stored_block$1","stored_len","_tr_flush_block_1","opt_lenb","static_lenb","max_blindex","level","strm","data_type","block_mask","detect_data_type","l_desc","d_desc","bl_desc","BL_CODES$1","build_bl_tree","strategy","lcodes","dcodes","blcodes","rank","send_all_trees","trees","_tr_init","LENGTH_CODES$1","tr_static_init","_tr_stored_block","_tr_flush_block","_tr_tally","sym_end","_tr_align","STATIC_TREES","bi_flush","adler32_1","adler","pos","s1","s2","crcTable","table","makeTable","crc32_1","crc","t","end","messages","constants$2","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","Z_TREES","Z_OK","Z_STREAM_END","Z_NEED_DICT","Z_ERRNO","Z_STREAM_ERROR","Z_DATA_ERROR","Z_MEM_ERROR","Z_BUF_ERROR","Z_NO_COMPRESSION","Z_BEST_SPEED","Z_BEST_COMPRESSION","Z_DEFAULT_COMPRESSION","Z_FILTERED","Z_HUFFMAN_ONLY","Z_RLE","Z_FIXED","Z_DEFAULT_STRATEGY","Z_BINARY","Z_TEXT","Z_UNKNOWN","Z_DEFLATED","Z_NO_FLUSH$2","Z_FULL_FLUSH$1","Z_FINISH$3","Z_BLOCK$1","Z_OK$3","Z_STREAM_END$3","Z_STREAM_ERROR$2","Z_DATA_ERROR$2","Z_BUF_ERROR$1","Z_DEFAULT_COMPRESSION$1","Z_DEFAULT_STRATEGY$1","Z_DEFLATED$2","L_CODES","LITERALS","D_CODES","BL_CODES","HEAP_SIZE","MAX_BITS","MAX_MATCH","MIN_LOOKAHEAD","INIT_STATE","BUSY_STATE","FINISH_STATE","errorCode","zero","slide_hash","wsize","w_size","hash_size","head","HASH","hash_shift","hash_mask","flush_pending","avail_out","pending_out","next_out","total_out","flush_block_only","block_start","strstart","put_byte","putShortMSB","read_buf","start","avail_in","next_in","total_in","longest_match","cur_match","chain_length","max_chain_length","scan","best_len","prev_length","nice_match","limit","_win","wmask","w_mask","strend","scan_end1","scan_end","good_match","lookahead","match_start","fill_window","more","_w_size","window_size","insert","ins_h","deflate_stored","have","min_block","pending_buf_size","used","high_water","deflate_fast","hash_head","bflush","match_length","max_lazy_match","MIN_MATCH","deflate_slow","max_insert","prev_match","match_available","Config","good_length","max_lazy","nice_length","max_chain","func","configuration_table","DeflateState","gzhead","gzindex","last_flush","w_bits","hash_bits","Uint16Array","lit_bufsize","deflateStateCheck","deflateResetKeep","deflateReset","ret","deflateInit2","windowBits","memLevel","deflate_1$2","deflateInit","deflateSetHeader","deflate","old_flush","header","text","hcrc","comment","time","os","beg","gzhead_extra","bstate","deflate_huff","deflate_rle","deflateEnd","deflateSetDictionary","dictionary","dictLength","tmpDict","avail","deflateInfo","_has","hasOwnProperty","common","assign","sources","source","flattenChunks","chunks","l","STR_APPLY_UIA_OK","__","_utf8len","q","strings","string2buf","c2","m_pos","str_len","buf_len","buf2string","utf16buf","c_len","buf2binstring","utf8border","zstream","toString$1","Z_NO_FLUSH$1","Z_FINISH$2","Z_OK$2","Z_STREAM_END$2","Z_DEFLATED$1","Deflate$1","opt","gzip","ended","dict","_dict_set","deflate$1","deflator","flush_mode","_flush_mode","deflate_1$1","Deflate","deflateRaw","constants","BAD$1","inffast","_in","_out","dmax","whave","wnext","s_window","hold","lcode","dcode","lmask","dmask","here","op","from_source","lencode","distcode","lenbits","distbits","top","dolen","mode","dodist","sane","MAXBITS","lbase","lext","dbase","dext","inftrees","lens","lens_index","table_index","work","opts","incr","low","mask","here_bits","here_op","here_val","sym","min","root","curr","drop","huff","offs","Z_FINISH$1","Z_OK$1","Z_STREAM_END$1","Z_NEED_DICT$1","Z_STREAM_ERROR$1","Z_DATA_ERROR$1","Z_MEM_ERROR$1","HEAD","DICT","TYPE","TYPEDO","COPY_","LEN_","LEN","CHECK","BAD","zswap32","InflateState","havedict","flags","check","wbits","ncode","nlen","ndist","lendyn","distdyn","back","was","lenfix","distfix","inflateStateCheck","inflateResetKeep","inflateReset","inflateReset2","inflateInit2","virgin","fixedtables","updatewindow","inflate_1$2","inflateInit","inflate","put","last_bits","last_op","last_val","hbuf","inf_leave","xflags","extra_len","inflateEnd","inflateGetHeader","inflateSetDictionary","inflateInfo","gzheader","Inflate$1","to","inflate$1","inflator","last_avail_out","next_out_utf8","tail","utf8str","join","inflate_1$1","Inflate","inflateRaw","ungzip","gzip_1","Inflate_1","inflate_1","ungzip_1","writeFile","FS","readFile","encoding","removeFile","unlink","existsFile","analyzePath","exists","check_shape","shape","full_length","reduce","guess_shape","forbid_strings","isArray","fetch_max_string_length","lengths","maxlen","_attributes","_create_attribute","H5Base","attributes","attr","vals","LoadedH5Attr","packer","delete","_ref$maxStringLength","maxStringLength","guessed","_packer$repack_string","_packer$repack_string2","_create_attribute2","write_string_hdf5_attribute","write_numeric_hdf5_attribute","_this8","_ref8$maxStringLength","shape_arr","create_hdf5_attribute","_children","_attributes2","_child_name","H5Group","_H5Base","_inherits","_super","_createSuper","_this3","_ref2$newlyCreated","newlyCreated","_assertThisInitialized","set_attributes","H5GroupDetails","child_names","child_buffer","child_lengths","child_types","type_options","unpacked","attr_buffer","attr_lengths","new_name","_child_name2","H5DataSet","create_hdf5_group","chunk_arr","_this5","_ref3$maxStringLength","_ref3$compression","_ref3$chunks","chunk_offset","create_hdf5_dataset","_ref4$chunks","_ref4$cache","_packer$repack_string3","_packer$repack_string4","createDataSet","write_string_hdf5_dataset","cache_loaded","write","H5File","_H5Group","_super2","createNewHDF5File","create_hdf5_file","_shape","_type","_values","_loaded","_H5Base2","_super3","_this6","_ref5$load","_ref5$newlyCreated","_ref5$shape","_ref5$type","_ref5$values","H5DataSetDetails","_this7","_ref6$cache","_packer$repack_string5","_packer$repack_string6","write_numeric_hdf5_dataset","LoadedH5DataSet","chooseTemporaryPath","_ref$extension","areal","realizeFile","_ref2$extension","tmppath","methods","testFeatureSetEnrichment","featureSets","totalFeatures","is_marker","intersection","present","hypergeometricTest","remapFeatureSets","targetFeatures","referenceFeatures","referenceFeatureSets","data_indices","ref_map","new_sets","reference_indices","writeSparseMatrixToHdf5","_ref$format","_ref$forceInteger","write_sparse_matrix_to_hdf5","h5","reverse"],"sourceRoot":""}