{"version":3,"file":"static/js/388.d1cd308e.chunk.js","mappings":"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","sources":["../node_modules/papaparse/papaparse.min.js","../node_modules/randomcolor/randomColor.js","../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/classCheckPrivateStaticAccess.js","../node_modules/@babel/runtime/helpers/esm/classCheckPrivateStaticFieldDescriptor.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodGet.js","../node_modules/@babel/runtime/helpers/esm/classPrivateMethodInitSpec.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateFieldSpecGet.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateFieldSpecSet.js","../node_modules/@babel/runtime/helpers/esm/classStaticPrivateMethodGet.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/bakana/browser/readers/10x.js","../node_modules/bakana/browser/readers/ArtifactDB-abstract.js","../node_modules/bakana/browser/readers/abstract/file.js","../node_modules/bakana/browser/readers/mtx.js","../node_modules/bakana/browser/readers/utils/abstract/stream.js","../node_modules/bakana/browser/readers/utils/extract.js","../node_modules/bakana/browser/readers/utils/features.js","../node_modules/bakana/browser/steps/abstract/worker_parent.js","../node_modules/bakana/browser/steps/adt_normalization.js","../node_modules/bakana/browser/steps/adt_pca.js","../node_modules/bakana/browser/steps/adt_quality_control.js","../node_modules/bakana/browser/steps/batch_correction.js","../node_modules/bakana/browser/steps/cell_filtering.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/bakana/browser/steps/cell_labelling.js","../node_modules/bakana/browser/steps/choose_clustering.js","../node_modules/bakana/browser/steps/combine_embeddings.js","../node_modules/bakana/browser/steps/crispr_normalization.js","../node_modules/bakana/browser/steps/crispr_pca.js","../node_modules/bakana/browser/steps/crispr_quality_control.js","../node_modules/bakana/browser/steps/feature_selection.js","../node_modules/bakana/browser/steps/kmeans_cluster.js","../node_modules/bakana/browser/steps/marker_detection.js","../node_modules/bakana/browser/steps/neighbor_index.js","../node_modules/bakana/browser/steps/rna_normalization.js","../node_modules/bakana/browser/steps/rna_pca.js","../node_modules/bakana/browser/steps/rna_quality_control.js","../node_modules/bakana/browser/steps/snn_graph_cluster.js","../node_modules/bakana/browser/steps/tsne.js","../node_modules/bakana/browser/steps/umap.js","../node_modules/bakana/browser/steps/utils/abstract/workers_parent.js","../node_modules/bakana/browser/steps/utils/general.js","../node_modules/bakana/browser/steps/utils/markers.js","../node_modules/bakana/browser/steps/utils/normalization.js","../node_modules/@babel/runtime/helpers/esm/get.js","../node_modules/@babel/runtime/helpers/esm/superPropBase.js","../node_modules/bioconductor/src/utils.js","../node_modules/bioconductor/src/miscellaneous.js","../node_modules/bioconductor/src/AllGenerics.js","../node_modules/bioconductor/src/clone-utils.js","../node_modules/bioconductor/src/Annotated.js","../node_modules/bioconductor/src/InternalList.js","../node_modules/bioconductor/src/DataFrame.js","../node_modules/bioconductor/src/Vector.js","../node_modules/bioconductor/src/overlap-utils.js","../node_modules/bioconductor/src/IRanges.js","../node_modules/bioconductor/src/GRanges.js","../node_modules/bioconductor/src/GroupedGRanges.js","../node_modules/bioconductor/src/DenseMatrix.js","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js","../node_modules/bioconductor/src/SummarizedExperiment.js","../node_modules/bioconductor/src/RangedSummarizedExperiment.js","../node_modules/bioconductor/src/SingleCellExperiment.js","../node_modules/gesel/src/fetchAllCollections.js","../node_modules/gesel/src/fetchAllGenes.js","../node_modules/gesel/src/fetchAllSets.js","../node_modules/gesel/src/fetchGenesForAllSets.js","../node_modules/gesel/src/fetchGenesForSet.js","../node_modules/gesel/src/fetchSetsForAllGenes.js","../node_modules/gesel/src/fetchSetsForGene.js","../node_modules/gesel/src/fetchSingleCollection.js","../node_modules/gesel/src/fetchSingleSet.js","../node_modules/gesel/src/findOverlappingSets.js","../node_modules/gesel/src/mapGenesByIdentifier.js","../node_modules/gesel/src/reindexGenesForAllSets.js","../node_modules/gesel/src/reindexSetsForAllGenes.js","../node_modules/gesel/src/searchGenes.js","../node_modules/gesel/src/searchSetText.js","../node_modules/scran.js/browser/MultiMatrix.js","../node_modules/scran.js/browser/ScranMatrix.js","../node_modules/scran.js/browser/abstract/realize.js","../node_modules/scran.js/browser/block.js","../node_modules/scran.js/browser/cbind.js","../node_modules/scran.js/browser/chooseHVGs.js","../node_modules/scran.js/browser/clusterKmeans.js","../node_modules/scran.js/browser/clusterSNNGraph.js","../node_modules/scran.js/browser/factorize.js","../node_modules/scran.js/browser/filterCells.js","../node_modules/scran.js/browser/findNearestNeighbors.js","../node_modules/scran.js/browser/groupedSizeFactors.js","../node_modules/scran.js/browser/guessFeatures.js","../node_modules/scran.js/browser/hypergeometricTest.js","../node_modules/scran.js/browser/initializeSparseMatrix.js","../node_modules/scran.js/browser/internal/computePerCellQcFilters.js","../node_modules/scran.js/browser/internal/computePerCellQcMetrics.js","../node_modules/scran.js/browser/internal/pack_strings.js","../node_modules/scran.js/browser/labelCells.js","../node_modules/scran.js/browser/logNormCounts.js","../node_modules/scran.js/browser/mnnCorrect.js","../node_modules/scran.js/browser/modelGeneVar.js","../node_modules/scran.js/browser/perCellAdtQcMetrics.js","../node_modules/scran.js/browser/perCellCrisprQcMetrics.js","../node_modules/scran.js/browser/perCellRnaQcMetrics.js","../node_modules/scran.js/browser/quickAdtSizeFactors.js","../node_modules/scran.js/browser/rds.js","../node_modules/scran.js/browser/runPCA.js","../node_modules/scran.js/browser/runTSNE.js","../node_modules/scran.js/browser/scaleByNeighbors.js","../node_modules/scran.js/browser/scoreFeatureSet.js","../node_modules/scran.js/browser/scoreMarkers.js","../node_modules/scran.js/browser/subset.js","../node_modules/scran.js/browser/suggestAdtQcFilters.js","../node_modules/scran.js/browser/suggestCrisprQcFilters.js","../node_modules/scran.js/browser/suggestRnaQcFilters.js","../node_modules/scran.js/browser/utils.js","../node_modules/scran.js/browser/wasm.js","../node_modules/wasmarrays.js/src/derived.js","../node_modules/wasmarrays.js/src/create.js","../node_modules/wasmarrays.js/src/view.js"],"sourcesContent":["/* @license\nPapa Parse\nv5.4.0\nhttps://github.com/mholt/PapaParse\nLicense: MIT\n*/\n!function(e,t){\"function\"==typeof define&&define.amd?define([],t):\"object\"==typeof module&&\"undefined\"!=typeof exports?module.exports=t():e.Papa=t()}(this,function s(){\"use strict\";var f=\"undefined\"!=typeof self?self:\"undefined\"!=typeof window?window:void 0!==f?f:{};var n=!f.document&&!!f.postMessage,o=f.IS_PAPA_WORKER||!1,a={},u=0,b={parse:function(e,t){var r=(t=t||{}).dynamicTyping||!1;J(r)&&(t.dynamicTypingFunction=r,r={});if(t.dynamicTyping=r,t.transform=!!J(t.transform)&&t.transform,t.worker&&b.WORKERS_SUPPORTED){var i=function(){if(!b.WORKERS_SUPPORTED)return!1;var e=(r=f.URL||f.webkitURL||null,i=s.toString(),b.BLOB_URL||(b.BLOB_URL=r.createObjectURL(new Blob([\"var global = (function() { if (typeof self !== 'undefined') { return self; } if (typeof window !== 'undefined') { return window; } if (typeof global !== 'undefined') { return global; } return {}; })(); global.IS_PAPA_WORKER=true; \",\"(\",i,\")();\"],{type:\"text/javascript\"})))),t=new f.Worker(e);var r,i;return t.onmessage=_,t.id=u++,a[t.id]=t}();return i.userStep=t.step,i.userChunk=t.chunk,i.userComplete=t.complete,i.userError=t.error,t.step=J(t.step),t.chunk=J(t.chunk),t.complete=J(t.complete),t.error=J(t.error),delete t.worker,void i.postMessage({input:e,config:t,workerId:i.id})}var n=null;b.NODE_STREAM_INPUT,\"string\"==typeof e?(e=function(e){if(65279===e.charCodeAt(0))return e.slice(1);return e}(e),n=t.download?new l(t):new p(t)):!0===e.readable&&J(e.read)&&J(e.on)?n=new g(t):(f.File&&e instanceof File||e instanceof Object)&&(n=new c(t));return n.stream(e)},unparse:function(e,t){var n=!1,_=!0,m=\",\",y=\"\\r\\n\",s='\"',a=s+s,r=!1,i=null,o=!1;!function(){if(\"object\"!=typeof t)return;\"string\"!=typeof t.delimiter||b.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(m=t.delimiter);(\"boolean\"==typeof t.quotes||\"function\"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes);\"boolean\"!=typeof t.skipEmptyLines&&\"string\"!=typeof t.skipEmptyLines||(r=t.skipEmptyLines);\"string\"==typeof t.newline&&(y=t.newline);\"string\"==typeof t.quoteChar&&(s=t.quoteChar);\"boolean\"==typeof t.header&&(_=t.header);if(Array.isArray(t.columns)){if(0===t.columns.length)throw new Error(\"Option columns is empty\");i=t.columns}void 0!==t.escapeChar&&(a=t.escapeChar+s);(\"boolean\"==typeof t.escapeFormulae||t.escapeFormulae instanceof RegExp)&&(o=t.escapeFormulae instanceof RegExp?t.escapeFormulae:/^[=+\\-@\\t\\r].*$/)}();var u=new RegExp(Q(s),\"g\");\"string\"==typeof e&&(e=JSON.parse(e));if(Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return h(null,e,r);if(\"object\"==typeof e[0])return h(i||Object.keys(e[0]),e,r)}else if(\"object\"==typeof e)return\"string\"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields||i),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:\"object\"==typeof e.data[0]?Object.keys(e.data[0]):[]),Array.isArray(e.data[0])||\"object\"==typeof e.data[0]||(e.data=[e.data])),h(e.fields||[],e.data||[],r);throw new Error(\"Unable to serialize unrecognized input\");function h(e,t,r){var i=\"\";\"string\"==typeof e&&(e=JSON.parse(e)),\"string\"==typeof t&&(t=JSON.parse(t));var n=Array.isArray(e)&&0<e.length,s=!Array.isArray(t[0]);if(n&&_){for(var a=0;a<e.length;a++)0<a&&(i+=m),i+=v(e[a],a);0<t.length&&(i+=y)}for(var o=0;o<t.length;o++){var u=n?e.length:t[o].length,h=!1,f=n?0===Object.keys(t[o]).length:0===t[o].length;if(r&&!n&&(h=\"greedy\"===r?\"\"===t[o].join(\"\").trim():1===t[o].length&&0===t[o][0].length),\"greedy\"===r&&n){for(var d=[],l=0;l<u;l++){var c=s?e[l]:l;d.push(t[o][c])}h=\"\"===d.join(\"\").trim()}if(!h){for(var p=0;p<u;p++){0<p&&!f&&(i+=m);var g=n&&s?e[p]:p;i+=v(t[o][g],p)}o<t.length-1&&(!r||0<u&&!f)&&(i+=y)}}return i}function v(e,t){if(null==e)return\"\";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);var r=!1;o&&\"string\"==typeof e&&o.test(e)&&(e=\"'\"+e,r=!0);var i=e.toString().replace(u,a);return(r=r||!0===n||\"function\"==typeof n&&n(e,t)||Array.isArray(n)&&n[t]||function(e,t){for(var r=0;r<t.length;r++)if(-1<e.indexOf(t[r]))return!0;return!1}(i,b.BAD_DELIMITERS)||-1<i.indexOf(m)||\" \"===i.charAt(0)||\" \"===i.charAt(i.length-1))?s+i+s:i}}};if(b.RECORD_SEP=String.fromCharCode(30),b.UNIT_SEP=String.fromCharCode(31),b.BYTE_ORDER_MARK=\"\\ufeff\",b.BAD_DELIMITERS=[\"\\r\",\"\\n\",'\"',b.BYTE_ORDER_MARK],b.WORKERS_SUPPORTED=!n&&!!f.Worker,b.NODE_STREAM_INPUT=1,b.LocalChunkSize=10485760,b.RemoteChunkSize=5242880,b.DefaultDelimiter=\",\",b.Parser=E,b.ParserHandle=r,b.NetworkStreamer=l,b.FileStreamer=c,b.StringStreamer=p,b.ReadableStreamStreamer=g,f.jQuery){var d=f.jQuery;d.fn.parse=function(o){var r=o.config||{},u=[];return this.each(function(e){if(!(\"INPUT\"===d(this).prop(\"tagName\").toUpperCase()&&\"file\"===d(this).attr(\"type\").toLowerCase()&&f.FileReader)||!this.files||0===this.files.length)return!0;for(var t=0;t<this.files.length;t++)u.push({file:this.files[t],inputElem:this,instanceConfig:d.extend({},r)})}),e(),this;function e(){if(0!==u.length){var e,t,r,i,n=u[0];if(J(o.before)){var s=o.before(n.file,n.inputElem);if(\"object\"==typeof s){if(\"abort\"===s.action)return e=\"AbortError\",t=n.file,r=n.inputElem,i=s.reason,void(J(o.error)&&o.error({name:e},t,r,i));if(\"skip\"===s.action)return void h();\"object\"==typeof s.config&&(n.instanceConfig=d.extend(n.instanceConfig,s.config))}else if(\"skip\"===s)return void h()}var a=n.instanceConfig.complete;n.instanceConfig.complete=function(e){J(a)&&a(e,n.file,n.inputElem),h()},b.parse(n.file,n.instanceConfig)}else J(o.complete)&&o.complete()}function h(){u.splice(0,1),e()}}}function h(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine=\"\",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=w(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null);this._handle=new r(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,t){if(this.isFirstChunk&&J(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1,this._halted=!1;var i=this._partialLine+e;this._partialLine=\"\";var n=this._handle.parse(i,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var s=n.meta.cursor;this._finished||(this._partialLine=i.substring(s-this._baseIndex),this._baseIndex=s),n&&n.data&&(this._rowCount+=n.data.length);var a=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(o)f.postMessage({results:n,workerId:b.WORKER_ID,finished:a});else if(J(this._config.chunk)&&!t){if(this._config.chunk(n,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);n=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(n.data),this._completeResults.errors=this._completeResults.errors.concat(n.errors),this._completeResults.meta=n.meta),this._completed||!a||!J(this._config.complete)||n&&n.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),a||n&&n.meta.paused||this._nextChunk(),n}this._halted=!0},this._sendError=function(e){J(this._config.error)?this._config.error(e):o&&this._config.error&&f.postMessage({workerId:b.WORKER_ID,error:e,finished:!1})}}function l(e){var i;(e=e||{}).chunkSize||(e.chunkSize=b.RemoteChunkSize),h.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(i=new XMLHttpRequest,this._config.withCredentials&&(i.withCredentials=this._config.withCredentials),n||(i.onload=v(this._chunkLoaded,this),i.onerror=v(this._chunkError,this)),i.open(this._config.downloadRequestBody?\"POST\":\"GET\",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var t in e)i.setRequestHeader(t,e[t])}if(this._config.chunkSize){var r=this._start+this._config.chunkSize-1;i.setRequestHeader(\"Range\",\"bytes=\"+this._start+\"-\"+r)}try{i.send(this._config.downloadRequestBody)}catch(e){this._chunkError(e.message)}n&&0===i.status&&this._chunkError()}},this._chunkLoaded=function(){4===i.readyState&&(i.status<200||400<=i.status?this._chunkError():(this._start+=this._config.chunkSize?this._config.chunkSize:i.responseText.length,this._finished=!this._config.chunkSize||this._start>=function(e){var t=e.getResponseHeader(\"Content-Range\");if(null===t)return-1;return parseInt(t.substring(t.lastIndexOf(\"/\")+1))}(i),this.parseChunk(i.responseText)))},this._chunkError=function(e){var t=i.statusText||e;this._sendError(new Error(t))}}function c(e){var i,n;(e=e||{}).chunkSize||(e.chunkSize=b.LocalChunkSize),h.call(this,e);var s=\"undefined\"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,s?((i=new FileReader).onload=v(this._chunkLoaded,this),i.onerror=v(this._chunkError,this)):i=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var t=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,t)}var r=i.readAsText(e,this._config.encoding);s||this._chunkLoaded({target:{result:r}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(i.error)}}function p(e){var r;h.call(this,e=e||{}),this.stream=function(e){return r=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e,t=this._config.chunkSize;return t?(e=r.substring(0,t),r=r.substring(t)):(e=r,r=\"\"),this._finished=!r,this.parseChunk(e)}}}function g(e){h.call(this,e=e||{});var t=[],r=!0,i=!1;this.pause=function(){h.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){h.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on(\"data\",this._streamData),this._input.on(\"end\",this._streamEnd),this._input.on(\"error\",this._streamError)},this._checkIsFinished=function(){i&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):r=!0},this._streamData=v(function(e){try{t.push(\"string\"==typeof e?e:e.toString(this._config.encoding)),r&&(r=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=v(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=v(function(){this._streamCleanUp(),i=!0,this._streamData(\"\")},this),this._streamCleanUp=v(function(){this._input.removeListener(\"data\",this._streamData),this._input.removeListener(\"end\",this._streamEnd),this._input.removeListener(\"error\",this._streamError)},this)}function r(m){var a,o,u,i=Math.pow(2,53),n=-i,s=/^\\s*-?(\\d+\\.?|\\.\\d+|\\d+\\.\\d+)([eE][-+]?\\d+)?\\s*$/,h=/^((\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z)))$/,t=this,r=0,f=0,d=!1,e=!1,l=[],c={data:[],errors:[],meta:{}};if(J(m.step)){var p=m.step;m.step=function(e){if(c=e,_())g();else{if(g(),0===c.data.length)return;r+=e.data.length,m.preview&&r>m.preview?o.abort():(c.data=c.data[0],p(c,t))}}}function y(e){return\"greedy\"===m.skipEmptyLines?\"\"===e.join(\"\").trim():1===e.length&&0===e[0].length}function g(){return c&&u&&(k(\"Delimiter\",\"UndetectableDelimiter\",\"Unable to auto-detect delimiting character; defaulted to '\"+b.DefaultDelimiter+\"'\"),u=!1),m.skipEmptyLines&&(c.data=c.data.filter(function(e){return!y(e)})),_()&&function(){if(!c)return;function e(e,t){J(m.transformHeader)&&(e=m.transformHeader(e,t)),l.push(e)}if(Array.isArray(c.data[0])){for(var t=0;_()&&t<c.data.length;t++)c.data[t].forEach(e);c.data.splice(0,1)}else c.data.forEach(e)}(),function(){if(!c||!m.header&&!m.dynamicTyping&&!m.transform)return c;function e(e,t){var r,i=m.header?{}:[];for(r=0;r<e.length;r++){var n=r,s=e[r];m.header&&(n=r>=l.length?\"__parsed_extra\":l[r]),m.transform&&(s=m.transform(s,n)),s=v(n,s),\"__parsed_extra\"===n?(i[n]=i[n]||[],i[n].push(s)):i[n]=s}return m.header&&(r>l.length?k(\"FieldMismatch\",\"TooManyFields\",\"Too many fields: expected \"+l.length+\" fields but parsed \"+r,f+t):r<l.length&&k(\"FieldMismatch\",\"TooFewFields\",\"Too few fields: expected \"+l.length+\" fields but parsed \"+r,f+t)),i}var t=1;!c.data.length||Array.isArray(c.data[0])?(c.data=c.data.map(e),t=c.data.length):c.data=e(c.data,0);m.header&&c.meta&&(c.meta.fields=l);return f+=t,c}()}function _(){return m.header&&0===l.length}function v(e,t){return r=e,m.dynamicTypingFunction&&void 0===m.dynamicTyping[r]&&(m.dynamicTyping[r]=m.dynamicTypingFunction(r)),!0===(m.dynamicTyping[r]||m.dynamicTyping)?\"true\"===t||\"TRUE\"===t||\"false\"!==t&&\"FALSE\"!==t&&(function(e){if(s.test(e)){var t=parseFloat(e);if(n<t&&t<i)return!0}return!1}(t)?parseFloat(t):h.test(t)?new Date(t):\"\"===t?null:t):t;var r}function k(e,t,r,i){var n={type:e,code:t,message:r};void 0!==i&&(n.row=i),c.errors.push(n)}this.parse=function(e,t,r){var i=m.quoteChar||'\"';if(m.newline||(m.newline=function(e,t){e=e.substring(0,1048576);var r=new RegExp(Q(t)+\"([^]*?)\"+Q(t),\"gm\"),i=(e=e.replace(r,\"\")).split(\"\\r\"),n=e.split(\"\\n\"),s=1<n.length&&n[0].length<i[0].length;if(1===i.length||s)return\"\\n\";for(var a=0,o=0;o<i.length;o++)\"\\n\"===i[o][0]&&a++;return a>=i.length/2?\"\\r\\n\":\"\\r\"}(e,i)),u=!1,m.delimiter)J(m.delimiter)&&(m.delimiter=m.delimiter(e),c.meta.delimiter=m.delimiter);else{var n=function(e,t,r,i,n){var s,a,o,u;n=n||[\",\",\"\\t\",\"|\",\";\",b.RECORD_SEP,b.UNIT_SEP];for(var h=0;h<n.length;h++){var f=n[h],d=0,l=0,c=0;o=void 0;for(var p=new E({comments:i,delimiter:f,newline:t,preview:10}).parse(e),g=0;g<p.data.length;g++)if(r&&y(p.data[g]))c++;else{var _=p.data[g].length;l+=_,void 0!==o?0<_&&(d+=Math.abs(_-o),o=_):o=_}0<p.data.length&&(l/=p.data.length-c),(void 0===a||d<=a)&&(void 0===u||u<l)&&1.99<l&&(a=d,s=f,u=l)}return{successful:!!(m.delimiter=s),bestDelimiter:s}}(e,m.newline,m.skipEmptyLines,m.comments,m.delimitersToGuess);n.successful?m.delimiter=n.bestDelimiter:(u=!0,m.delimiter=b.DefaultDelimiter),c.meta.delimiter=m.delimiter}var s=w(m);return m.preview&&m.header&&s.preview++,a=e,o=new E(s),c=o.parse(a,t,r),g(),d?{meta:{paused:!0}}:c||{meta:{paused:!1}}},this.paused=function(){return d},this.pause=function(){d=!0,o.abort(),a=J(m.chunk)?\"\":a.substring(o.getCharIndex())},this.resume=function(){t.streamer._halted?(d=!1,t.streamer.parseChunk(a,!0)):setTimeout(t.resume,3)},this.aborted=function(){return e},this.abort=function(){e=!0,o.abort(),c.meta.aborted=!0,J(m.complete)&&m.complete(c),a=\"\"}}function Q(e){return e.replace(/[.*+?^${}()|[\\]\\\\]/g,\"\\\\$&\")}function E(j){var z,M=(j=j||{}).delimiter,P=j.newline,U=j.comments,q=j.step,N=j.preview,B=j.fastMode,K=z=void 0===j.quoteChar||null===j.quoteChar?'\"':j.quoteChar;if(void 0!==j.escapeChar&&(K=j.escapeChar),(\"string\"!=typeof M||-1<b.BAD_DELIMITERS.indexOf(M))&&(M=\",\"),U===M)throw new Error(\"Comment character same as delimiter\");!0===U?U=\"#\":(\"string\"!=typeof U||-1<b.BAD_DELIMITERS.indexOf(U))&&(U=!1),\"\\n\"!==P&&\"\\r\"!==P&&\"\\r\\n\"!==P&&(P=\"\\n\");var W=0,H=!1;this.parse=function(i,t,r){if(\"string\"!=typeof i)throw new Error(\"Input must be a string\");var n=i.length,e=M.length,s=P.length,a=U.length,o=J(q),u=[],h=[],f=[],d=W=0;if(!i)return L();if(j.header){var l=i.split(P)[0].split(M),c=[],p={},g=!1;for(var _ in l){var m=l[_];J(j.transformHeader)&&(m=j.transformHeader(m,_));var y=m,v=p[m]||0;0<v&&(g=!0,y=m+\"_\"+v),p[m]=v+1,c.push(y)}if(g){var k=i.split(P);k[0]=c.join(M),i=k.join(P)}}if(B||!1!==B&&-1===i.indexOf(z)){for(var b=i.split(P),E=0;E<b.length;E++){if(f=b[E],W+=f.length,E!==b.length-1)W+=P.length;else if(r)return L();if(!U||f.substring(0,a)!==U){if(o){if(u=[],I(f.split(M)),F(),H)return L()}else I(f.split(M));if(N&&N<=E)return u=u.slice(0,N),L(!0)}}return L()}for(var w=i.indexOf(M,W),R=i.indexOf(P,W),C=new RegExp(Q(K)+Q(z),\"g\"),S=i.indexOf(z,W);;)if(i[W]!==z)if(U&&0===f.length&&i.substring(W,W+a)===U){if(-1===R)return L();W=R+s,R=i.indexOf(P,W),w=i.indexOf(M,W)}else if(-1!==w&&(w<R||-1===R))f.push(i.substring(W,w)),W=w+e,w=i.indexOf(M,W);else{if(-1===R)break;if(f.push(i.substring(W,R)),D(R+s),o&&(F(),H))return L();if(N&&u.length>=N)return L(!0)}else for(S=W,W++;;){if(-1===(S=i.indexOf(z,S+1)))return r||h.push({type:\"Quotes\",code:\"MissingQuotes\",message:\"Quoted field unterminated\",row:u.length,index:W}),T();if(S===n-1)return T(i.substring(W,S).replace(C,z));if(z!==K||i[S+1]!==K){if(z===K||0===S||i[S-1]!==K){-1!==w&&w<S+1&&(w=i.indexOf(M,S+1)),-1!==R&&R<S+1&&(R=i.indexOf(P,S+1));var O=A(-1===R?w:Math.min(w,R));if(i.substr(S+1+O,e)===M){f.push(i.substring(W,S).replace(C,z)),i[W=S+1+O+e]!==z&&(S=i.indexOf(z,W)),w=i.indexOf(M,W),R=i.indexOf(P,W);break}var x=A(R);if(i.substring(S+1+x,S+1+x+s)===P){if(f.push(i.substring(W,S).replace(C,z)),D(S+1+x+s),w=i.indexOf(M,W),S=i.indexOf(z,W),o&&(F(),H))return L();if(N&&u.length>=N)return L(!0);break}h.push({type:\"Quotes\",code:\"InvalidQuotes\",message:\"Trailing quote on quoted field is malformed\",row:u.length,index:W}),S++}}else S++}return T();function I(e){u.push(e),d=W}function A(e){var t=0;if(-1!==e){var r=i.substring(S+1,e);r&&\"\"===r.trim()&&(t=r.length)}return t}function T(e){return r||(void 0===e&&(e=i.substring(W)),f.push(e),W=n,I(f),o&&F()),L()}function D(e){W=e,I(f),f=[],R=i.indexOf(P,W)}function L(e){return{data:u,errors:h,meta:{delimiter:M,linebreak:P,aborted:H,truncated:!!e,cursor:d+(t||0)}}}function F(){q(L()),u=[],h=[]}},this.abort=function(){H=!0},this.getCharIndex=function(){return W}}function _(e){var t=e.data,r=a[t.workerId],i=!1;if(t.error)r.userError(t.error,t.file);else if(t.results&&t.results.data){var n={abort:function(){i=!0,m(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:y,resume:y};if(J(r.userStep)){for(var s=0;s<t.results.data.length&&(r.userStep({data:t.results.data[s],errors:t.results.errors,meta:t.results.meta},n),!i);s++);delete t.results}else J(r.userChunk)&&(r.userChunk(t.results,n,t.file),delete t.results)}t.finished&&!i&&m(t.workerId,t.results)}function m(e,t){var r=a[e];J(r.userComplete)&&r.userComplete(t),r.terminate(),delete a[e]}function y(){throw new Error(\"Not implemented.\")}function w(e){if(\"object\"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var r in e)t[r]=w(e[r]);return t}function v(e,t){return function(){e.apply(t,arguments)}}function J(e){return\"function\"==typeof e}return o&&(f.onmessage=function(e){var t=e.data;void 0===b.WORKER_ID&&t&&(b.WORKER_ID=t.workerId);if(\"string\"==typeof t.input)f.postMessage({workerId:b.WORKER_ID,results:b.parse(t.input,t.config),finished:!0});else if(f.File&&t.input instanceof File||t.input instanceof Object){var r=b.parse(t.input,t.config);r&&f.postMessage({workerId:b.WORKER_ID,results:r,finished:!0})}}),(l.prototype=Object.create(h.prototype)).constructor=l,(c.prototype=Object.create(h.prototype)).constructor=c,(p.prototype=Object.create(p.prototype)).constructor=p,(g.prototype=Object.create(h.prototype)).constructor=g,b});","// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support CommonJS\n  if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  // check if a range is taken\n  var colorRanges = [];\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n      // Value false at index i means the range i is not taken yet.\n      for (var i = 0; i < options.count; i++) {\n        colorRanges.push(false)\n        }\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        var color = randomColor(options);\n\n        if (seed !== null) {\n          options.seed = seed;\n        }\n\n        colors.push(color);\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue(options) {\n    if (colorRanges.length > 0) {\n      var hueRange = getRealHueRange(options.hue)\n\n      var hue = randomWithin(hueRange)\n\n      //Each of colorRanges.length ranges has a length equal approximatelly one step\n      var step = (hueRange[1] - hueRange[0]) / colorRanges.length\n\n      var j = parseInt((hue - hueRange[0]) / step)\n\n      //Check if the range j is taken\n      if (colorRanges[j] === true) {\n        j = (j + 2) % colorRanges.length\n      }\n      else {\n        colorRanges[j] = true\n           }\n\n      var min = (hueRange[0] + j * step) % 359,\n          max = (hueRange[0] + (j + 1) * step) % 359;\n\n      hueRange = [min, max]\n\n      hue = randomWithin(hueRange)\n\n      if (hue < 0) {hue = 360 + hue;}\n      return hue\n    }\n    else {\n      var hueRange = getHueRange(options.hue)\n\n      hue = randomWithin(hueRange);\n      // Instead of storing red as two seperate ranges,\n      // we group them, using negative numbers\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n\n      return hue;\n    }\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + alpha + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [ hue, hue ];\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n      var golden_ratio = 0.618033988749895\n      var r=Math.random()\n      r += golden_ratio\n      r %= 1\n      return Math.floor(range[0] + r*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n}\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [18,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [46,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [62,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [178, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [257, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [282, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HexToHSB (hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n          green = parseInt(hex.substr(2, 2), 16) / 255,\n          blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n          delta = cMax - Math.min(red, green, blue),\n          saturation = cMax ? (delta / cMax) : 0;\n\n    switch (cMax) {\n      case red: return [ 60 * (((green - blue) / delta) % 6) || 0, saturation, cMax ];\n      case green: return [ 60 * (((blue - red) / delta) + 2) || 0, saturation, cMax ];\n      case blue: return [ 60 * (((red - green) / delta) + 4) || 0, saturation, cMax ];\n    }\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  // get The range of given hue when options.count!=0\n  function getRealHueRange(colorHue)\n  { if (!isNaN(colorHue)) {\n    var number = parseInt(colorHue);\n\n    if (number < 360 && number > 0) {\n      return getColorInfo(colorHue).hueRange\n    }\n  }\n    else if (typeof colorHue === 'string') {\n\n      if (colorDictionary[colorHue]) {\n        var color = colorDictionary[colorHue];\n\n        if (color.hueRange) {\n          return color.hueRange\n       }\n    } else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorHue)[0]\n        return getColorInfo(hue).hueRange\n    }\n  }\n\n    return [0,360]\n}\n  return randomColor;\n}));\n","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _classCheckPrivateStaticAccess(receiver, classConstructor) {\n  if (receiver !== classConstructor) {\n    throw new TypeError(\"Private static access of wrong provenance\");\n  }\n}","export default function _classCheckPrivateStaticFieldDescriptor(descriptor, action) {\n  if (descriptor === undefined) {\n    throw new TypeError(\"attempted to \" + action + \" private static field before its declaration\");\n  }\n}","export default function _classPrivateMethodGet(receiver, privateSet, fn) {\n  if (!privateSet.has(receiver)) {\n    throw new TypeError(\"attempted to get private field on non-instance\");\n  }\n  return fn;\n}","import checkPrivateRedeclaration from \"./checkPrivateRedeclaration.js\";\nexport default function _classPrivateMethodInitSpec(obj, privateSet) {\n  checkPrivateRedeclaration(obj, privateSet);\n  privateSet.add(obj);\n}","import classApplyDescriptorGet from \"./classApplyDescriptorGet.js\";\nimport classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nimport classCheckPrivateStaticFieldDescriptor from \"./classCheckPrivateStaticFieldDescriptor.js\";\nexport default function _classStaticPrivateFieldSpecGet(receiver, classConstructor, descriptor) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  classCheckPrivateStaticFieldDescriptor(descriptor, \"get\");\n  return classApplyDescriptorGet(receiver, descriptor);\n}","import classApplyDescriptorSet from \"./classApplyDescriptorSet.js\";\nimport classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nimport classCheckPrivateStaticFieldDescriptor from \"./classCheckPrivateStaticFieldDescriptor.js\";\nexport default function _classStaticPrivateFieldSpecSet(receiver, classConstructor, descriptor, value) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  classCheckPrivateStaticFieldDescriptor(descriptor, \"set\");\n  classApplyDescriptorSet(receiver, descriptor, value);\n  return value;\n}","import classCheckPrivateStaticAccess from \"./classCheckPrivateStaticAccess.js\";\nexport default function _classStaticPrivateMethodGet(receiver, classConstructor, method) {\n  classCheckPrivateStaticAccess(receiver, classConstructor);\n  return method;\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n      var F = function F() {};\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n  var normalCompletion = true,\n    didErr = false,\n    err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (null != _i) {\n    var _s,\n      _e,\n      _x,\n      _r,\n      _arr = [],\n      _n = !0,\n      _d = !1;\n    try {\n      if (_x = (_i = _i.call(arr)).next, 0 === i) {\n        if (Object(_i) !== _i) return;\n        _n = !1;\n      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);\n    } catch (err) {\n      _d = !0, _e = err;\n    } finally {\n      try {\n        if (!_n && null != _i[\"return\"] && (_r = _i[\"return\"](), Object(_r) !== _r)) return;\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n    return _arr;\n  }\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import defineProperty from \"./defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as afile from \"./abstract/file.js\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\n\n/**\n * Dataset in the 10X HDF5 feature-barcode matrix format, see [here](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/output/matrices) for details.\n */\nexport class TenxHdf5Dataset { \n    #h5_file;\n    #h5_path;\n    #h5_flush;\n\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"h5\", file: fun(this.#h5_file) }];\n        let options = this.options();\n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} h5File - Contents of a HDF5 file in the 10X feature-barcode format.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     */\n    constructor(h5File) {\n        if (h5File instanceof afile.SimpleFile) {\n            this.#h5_file = h5File;\n        } else {\n            this.#h5_file = new afile.SimpleFile(h5File);\n        }\n\n        this.#options = TenxHdf5Dataset.defaults();\n        this.clear();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode TenxHdf5Dataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            featureTypeRnaName: \"Gene Expression\", \n            featureTypeAdtName: \"Antibody Capture\", \n            featureTypeCrisprName: \"CRISPR Guide Capture\", \n            primaryRnaFeatureIdColumn: 0, \n            primaryAdtFeatureIdColumn: 0,\n            primaryCrisprFeatureIdColumn: 0\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode TenxHdf5Dataset#load load} (but not {@linkcode TenxHdf5Dataset#summary summary}).\n     * @param {?string} [options.featureTypeRnaName] - Name of the feature type for gene expression.\n     * Alternatively `null`, to indicate that no RNA features are to be loaded.\n     * @param {?string} [options.featureTypeAdtName] - Name of the feature type for ADTs.\n     * Alternatively `null`, to indicate that no ADT features are to be loaded.\n     * @param {?string} [options.featureTypeCrisprName] - Name of the feature type for CRISPR guides.\n     * Alternatively `null`, to indicate that no guides are to be loaded.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    #instantiate() {\n        if (this.#h5_path !== null) {\n            return;\n        }\n\n        let info = scran.realizeFile(this.#h5_file.content());\n        this.#h5_path = info.path;\n        this.#h5_flush = info.flush;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode TenxHdf5Dataset#load load} or {@linkcodeTenxHdf5Dataset#summary summary}. \n     */\n    clear() {\n        if (typeof this.#h5_flush == \"function\") {\n            this.#h5_flush();\n        }\n        this.#h5_flush = null;\n        this.#h5_path = null;\n\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"10X\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset,\n     * in a form that can be cheaply stringified.\n     */\n    abbreviate() {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n\n        this.#instantiate();\n        let handle = new scran.H5File(this.#h5_path);\n        if (!(\"matrix\" in handle.children) || handle.children[\"matrix\"] != \"Group\") {\n            throw new Error(\"expected a 'matrix' group at the top level of the file\");\n        }\n        let mhandle = handle.open(\"matrix\");\n\n        if (!(\"features\" in mhandle.children) || mhandle.children[\"features\"] != \"Group\") {\n            throw new Error(\"expected a 'matrix/features' group containing the feature annotation\");\n        }\n        let fhandle = mhandle.open(\"features\");\n\n        let ids = eutils.extractHDF5Strings(fhandle, \"id\");\n        if (ids == null) {\n            throw new Error(\"expected a 'matrix/features/id' string dataset containing the feature IDs\");\n        }\n        let feats = new bioc.DataFrame({ id: ids }); // build it piece-by-piece for a well-defined ordering.\n\n        let names = eutils.extractHDF5Strings(fhandle, \"name\");\n        if (names !== null) {\n            feats.$setColumn(\"name\", names);\n        }\n\n        let ftype = eutils.extractHDF5Strings(fhandle, \"feature_type\");\n        if (ftype !== null) {\n            feats.$setColumn(\"type\", ftype);\n        }\n\n        this.#raw_features = feats;\n        return;\n    }\n\n    #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#instantiate();\n        let details = scran.extractHDF5MatrixDetails(this.#h5_path, \"matrix\");\n        this.#raw_cells = new bioc.DataFrame({}, { numberOfRows: details.columns });\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode TenxMatrixMarketDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     */\n    summary({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n\n        let output = {\n            \"modality_features\": futils.reportFeatures(this.#raw_features, \"type\"),\n            \"cells\": this.#raw_cells\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #feature_type_mapping() {\n        return {\n            RNA: this.#options.featureTypeRnaName, \n            ADT: this.#options.featureTypeAdtName,\n            CRISPR: this.#options.featureTypeCrisprName\n        };\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode TenxHdf5Dataset#load load} but the order of values may be different.\n     */\n    previewPrimaryIds({ cache = false } = {}) {\n        this.#features();\n        let preview = futils.extractSplitPrimaryIds(this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\", this.#primary_mapping());\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxHdf5Dataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode TenxHdf5Dataset#defaults defaults} or with {@linkcode TenxHdf5Dataset#setOptions setOptions}.\n     *\n     * If the feature annotation lacks information about the feature types, it is assumed that all features are genes, i.e., only the RNA modality is present.\n     */\n    load({ cache = false } = {}) {\n        this.#features();\n        this.#cells();\n\n        let loaded = scran.initializeSparseMatrixFromHDF5(this.#h5_path, \"matrix\"); // collection gets handled inside splitScranMatrixAndFeatures.\n\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\");\n        output.cells = this.#raw_cells;\n\n        output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode TenxHdf5Dataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {TenxHdf5Dataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        if (files.length != 1 || files[0].type != \"h5\") {\n            throw new Error(\"expected exactly one file of type 'h5' for 10X HDF5 unserialization\");\n        }\n        return new TenxHdf5Dataset(files[0].file, options);\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\nimport * as afile from \"./abstract/file.js\";\n\n/**\n * Any class that satisfies the ArtifactdbProjectNavigator contract, so called as it is intended to \"navigate\" an ArtifactDB project directory.\n * This should provide the following methods:\n * \n * - `metadata(p)`, a (possibly async) method that accepts a string `p` containing a relative path to a resource inside an ArtifactDB project directory,\n *   and returns an object containing the metadata for that object.\n *   Any redirections should be resolved by this method.\n *\n *   Note that {@linkplain AbstractArtifactdbDataset} will automatically cache the outputs of all `metadata()` calls between any invocations of {@linkcode AbstractArtifactdbDataset#clear clear},\n *   to improve efficiency when repeatedly accessing the same metadata.\n *   The same applies to {@linkplain AbstractArtifactdbResult}.\n * - `file(p)`, a (possibly async) method that accepts a string `p` containing a relative path inside a project directory and returns the contents of the file at that path.\n *   The return value should typically be a Uint8Array; on Node.js, methods may alternatively return a string containing a path to the file on the local file system.\n *   The method does not need to handle redirections from `p`.\n *\n * Optionally, the ArtifactdbProjectNavigator class may implement a `clear()` method to remove any cached content.\n * This will be called by {@linkcode AbstractArtifactdbDataset#clear AbstractArtifactdbDataset.clear} and  {@linkcode AbstractArtifactdbResult#clear AbstractArtifactdbResult.clear}.\n *\n * @typedef ArtifactdbProjectNavigator\n */\n\n/**************************\n ******* Internals ********\n **************************/\n\nasync function load_data_frame(info, navigator) {\n    if (typeof info == \"string\") {\n        info = await navigator.metadata(info);\n    }\n    let contents = await navigator.file(info.path);\n\n    let colnames;\n    let columns;\n    let rownames = null;\n\n    if (info[\"$schema\"].startsWith(\"csv_data_frame/\")) {\n        // TODO: replace with comservatory parser.\n        let parsed = await eutils.readTable2(contents, { delim: \",\" });\n        colnames = parsed.shift();\n\n        columns = new Array(colnames.length);\n        for (var i = 0; i < columns.length; i++) {\n            let current = [];\n            for (const x of parsed) {\n                current.push(x[i]);\n            }\n            columns[i] = current;\n        }\n\n        if (info.data_frame.row_names) {\n            rownames = columns.shift();\n            colnames.shift();\n        }\n\n        // Mutating the type... this doesn't quite handle NAs and NaNs properly, but whatever.\n        for (var i = 0; i < columns.length; i++) {\n            let type = info.data_frame.columns[i].type;\n            if (type == \"integer\") {\n                columns[i] = new Int32Array(columns[i]);\n            } else if (type == \"number\") {\n                columns[i] = new Float64Array(columns[i]);\n            } else if (type == \"boolean\") {\n                columns[i] = columns[i].map(x => x == \"true\");\n            }\n        }\n\n    } else if (info[\"$schema\"].startsWith(\"hdf5_data_frame/\")) {\n        let out = scran.realizeFile(contents);\n        try {\n            let handle = new scran.H5File(out.path);\n            let ghandle = handle.open(info.hdf5_data_frame.group);\n\n            colnames = ghandle.open(\"column_names\", { load: true }).values;\n            if (info.data_frame.row_names) {\n                rownames = ghandle.open(\"row_names\", { load: true }).values;\n            }\n\n            columns = [];\n            let chandle = ghandle.open(\"data\");\n            for (var i = 0; i < colnames.length; i++) {\n                if (!(String(i) in chandle.children)) {\n                    columns.push(null);\n                    continue;\n                }\n\n                let dhandle = chandle.open(String(i), { load: true });\n                let current = dhandle.values;\n\n                let type = info.data_frame.columns[i];\n                if (type == \"integer\") {\n                    if (current instanceof Float64Array || current instanceof Float32Array) {\n                        current = new Int32Array(current);\n                    }\n\n                } else if (type == \"number\") {\n                    if (!(current instanceof Float64Array) && !(current instanceof Float32Array)) {\n                        current = new Float64Array(current);\n                    }\n\n                } else if (type == \"boolean\") {\n                    let replacement = new Array(current.length);\n                    for (var i = 0; i < current.length; i++) {\n                        if (current[i] == -2147483648) {\n                            replacement[i] = null;\n                        } else {\n                            replacement[i] = current[i] != 0\n                        }\n                    }\n                    current = replacement;\n\n                } else if (type == \"string\" || type == \"date\") {\n                    if (\"missing-value-placeholder\" in dhandle.attributes) {\n                        let placeholder = dhandle.readAttribute(\"missing-value-placeholder\").values[0];\n                        for (var i = 0; i < current.length; i++) {\n                            if (current[i] == placeholder) {\n                                current[i] = null;\n                            }\n                        }\n                    }\n                }\n\n                columns.push(current);\n            }\n        } finally {\n            out.flush();\n        }\n\n    } else {\n        throw new Error(\"unknown data_frame schema type '\" + info[\"$schema\"] + \"'\");\n    }\n\n    let new_columns = {};\n    let new_colnames = [];\n    for (var i = 0; i < columns.length; i++) {\n        if (info.data_frame.columns[i].type === \"other\") {\n            let nest_meta = await navigator.metadata(info.data_frame.columns[i].resource.path);\n            try {\n                new_columns[colnames[i]] = await load_data_frame(nest_meta, navigator);\n                new_colnames.push(colnames[i]);\n            } catch (e) {\n                console.warn(e);\n            }\n        } else {\n            new_columns[colnames[i]] = columns[i];\n            new_colnames.push(colnames[i]);\n        }\n    }\n\n    return new bioc.DataFrame(new_columns, { \n        columnOrder: new_colnames, \n        rowNames: rownames, \n        numberOfRows: info.data_frame.dimensions[0] \n    });\n}\n\nconst main_experiment_name = \"\";\n\nasync function extract_all_features(path, navigator) {\n    let extract_features = async se_meta => {\n        if (\"row_data\" in se_meta.summarized_experiment) {\n            let row_path = se_meta.summarized_experiment.row_data.resource.path;\n            return await load_data_frame(row_path, navigator);\n        } else {\n            return new bioc.DataFrame({}, { numberOfRows: se_meta.summarized_experiment.dimensions[0] });\n        }\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let output = {};\n    output[main_experiment_name] = await extract_features(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                output[alt.name] = await extract_features(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return output;\n}\n\nasync function extract_all_assay_names(path, navigator) {\n    let extract_assay_names = se_meta => {\n        let output = [];\n        for (const ass of se_meta.summarized_experiment.assays) {\n            output.push(ass.name);\n        }\n        return output;\n    };\n\n    let full_meta = await navigator.metadata(path);\n    let assays = {};\n    assays[main_experiment_name] = extract_assay_names(full_meta);\n\n    if (\"single_cell_experiment\" in full_meta) {\n        for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n            try {\n                let alt_meta = await navigator.metadata(alt.resource.path);\n                assays[alt.name] = extract_assay_names(alt_meta);\n            } catch (e) {\n                console.warn(\"failed to extract features for alternative Experiment '\" + alt.name + \"'; \" + e.message);\n            }\n        }\n    }\n\n    return assays;\n}\n\n// This specifically loads the log-counts created by the dumper.\n// TODO: replace this with chihaya.js.\nasync function extract_logcounts(handle, navigator) {\n    if (handle.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (handle.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (Math.abs(handle.open(\"value\", { load: true }).values[0] - Math.log(2)) > 0.00000001) {\n        return null;\n    }\n    if (handle.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (handle.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n\n    let ghandle2 = handle.open(\"seed\");\n    if (ghandle2.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle2.readAttribute(\"delayed_operation\").values[0] !== \"unary math\") {\n        return null;\n    }\n    if (ghandle2.open(\"method\", { load: true }).values[0] !== \"log1p\") {\n        return null;\n    }\n\n    let ghandle3 = ghandle2.open(\"seed\");\n    if (ghandle3.readAttribute(\"delayed_type\").values[0] !== \"operation\") {\n        return null;\n    }\n    if (ghandle3.readAttribute(\"delayed_operation\").values[0] !== \"unary arithmetic\") {\n        return null;\n    }\n    if (ghandle3.open(\"method\", { load: true }).values[0] !== \"/\") {\n        return null;\n    }\n    if (ghandle3.open(\"side\", { load: true }).values[0] !== \"right\") {\n        return null;\n    }\n    if (ghandle3.open(\"along\", { load: true }).values[0] !== 1) {\n        return null;\n    }\n    let sf = ghandle3.open(\"value\", { load: true }).values;\n\n    let ahandle = ghandle3.open(\"seed\");\n    if (ahandle.readAttribute(\"delayed_type\").values[0] !== \"array\") {\n        return null;\n    }\n    if (ahandle.readAttribute(\"delayed_array\").values[0] !== \"custom alabaster local array\") {\n        return null;\n    }\n    let path = ahandle.open(\"path\", { load: true }).values[0];\n\n    let mat;\n    let output = {};\n    try {\n        mat = await extract_assay_raw(path, navigator, false); // don't force it to be integer, but we don't mind if it is.\n        output.matrix = scran.logNormCounts(mat.matrix, { sizeFactors: sf, center: false });\n        output.row_ids = mat.row_ids;\n    } finally {\n        scran.free(mat.matrix);\n    }\n                \n    return output;\n}\n\nasync function extract_assay(meta, assay, navigator, forceInteger) {\n    if (typeof assay == \"string\") {\n        var counter = 0;\n        for (const ass of meta.summarized_experiment.assays) {\n            if (ass.name == assay) {\n                assay = counter;\n                break;\n            }\n            counter++;\n        }\n        if (counter == meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay '\" + assay + \"' not found\");\n        }\n    } else {\n        if (assay >= meta.summarized_experiment.assays.length) {\n            throw new Error(\"assay \" + String(assay) + \" out of range\");\n        }\n    }\n\n    let asspath = meta.summarized_experiment.assays[assay].resource.path;\n    return extract_assay_raw(asspath, navigator, forceInteger);\n}\n\nasync function extract_assay_raw(asspath, navigator, forceInteger) {\n    let assmeta = await navigator.metadata(asspath);\n    let contents = await navigator.file(assmeta.path);\n    let output;\n\n    let schema = assmeta[\"$schema\"];\n    let is_dense = schema.startsWith(\"hdf5_dense_array/\");\n    let is_sparse = schema.startsWith(\"hdf5_sparse_matrix/\");\n\n    if (is_dense || is_sparse) {\n        let name = (is_sparse ?  assmeta.hdf5_sparse_matrix.group : assmeta.hdf5_dense_array.dataset);\n        let stuff = scran.realizeFile(contents);\n        try {\n            output = scran.initializeSparseMatrixFromHDF5(stuff.path, name, { forceInteger });\n        } finally {\n            stuff.flush();\n        }\n\n    } else if (assmeta[\"$schema\"].startsWith(\"hdf5_delayed_array/\")) {\n        let stuff = scran.realizeFile(contents);\n        try {\n            let fhandle = new scran.H5File(stuff.path);\n            let ghandle = fhandle.open(assmeta.hdf5_delayed_array.group);\n\n            // TODO: replace with calls to chihaya.js.\n            output = await extract_logcounts(ghandle, navigator);\n            if (output == null) {\n                throw new Error(\"currently only supporting bakana-generated log-counts for delayed arrays\");\n            }\n        } finally {\n            stuff.flush();\n        }\n\n    } else {\n        throw new Error(\"array schema '\" + assmeta[\"$schema\"] + \"' is currently not supported\");\n    }\n\n    return output;\n}\n\nasync function extract_other_data(other_path, navigator) {\n    let othermeta = await navigator.metadata(other_path);\n    if (!othermeta[\"$schema\"].startsWith(\"json_simple_list/\")) {\n        throw new Error(\"currently only support JSON-formatted lists in the 'other_data'\");\n    }\n\n    let contents = await navigator.file(othermeta.path);\n    let ofile = new afile.SimpleFile(contents, { name: \"list.json\" });\n    let unpacked = eutils.unpackText(ofile.buffer(), { compression: (othermeta.json_simple_list.compression == \"gzip\" ? \"gz\" : \"none\") });\n    let parsed = JSON.parse(unpacked);\n    return extract_list_data_internal(parsed);\n}\n\nfunction extract_list_data_internal(obj) {\n    if (!(\"type\" in obj)) {\n        throw new Error(\"non-standard JSON object for 'json_simple_list' schema\");\n    }\n\n    if (obj.type == \"number\") {\n        if (obj.values instanceof Array) {\n            let output = new Float64Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? Number.NaN : x) \n            });\n            return output;\n        } else {\n            return (obj.values == null ? Number.NaN : obj.values);\n        }\n\n    } else if (obj.type == \"integer\") {\n        if (obj.values instanceof Array) {\n            let output = new Int32Array(obj.values.length);\n            obj.values.forEach((x, i) => {\n                output[i] = (x === null ? -2147483648 : x) \n            });\n            return output;\n        } else {\n            return obj.values;\n        }\n\n    } else if (obj.type == \"boolean\" || obj.type == \"string\") {\n        return obj.values;\n\n    } else if (obj.type == \"list\") {\n        if (\"names\" in obj) {\n            let output = {};\n            for (var i = 0; i < obj.values.length; i++) {\n                output[obj.names[i]] = extract_list_data_internal(obj.values[i]);\n            }\n            return output;\n        } else {\n            let output = [];\n            for (var i = 0; i < obj.values.length; i++) {\n                output.push(extract_list_data_internal(obj.values[i]));\n            }\n            return output;\n        }\n\n    } else if (obj.type == \"nothing\") {\n        return null;\n\n    } else {\n        console.warn(\"JSON simple list containing type '\" + obj.type + \"' is not yet supported\");\n        return null;\n    }\n}\n\n/***********************\n ******* Cacher ********\n ***********************/\n\n// As we'll be using the metadata often, we cache it at this level. This\n// removes the burden of caching on the implementation of the navigator. \nclass MetadataCacheWrapper {\n    #navigator;\n    #metadata_cache;\n\n    constructor(nav) {\n        this.#navigator = nav;\n        this.#metadata_cache = {};\n    }\n\n    clear() {\n        this.#metadata_cache = {};\n        if (\"clear\" in this.#navigator) {\n            this.#navigator.clear();\n        }\n    }\n\n    async metadata(path) {\n        if (path in this.#metadata_cache) {\n            return this.#metadata_cache[path];\n        } else {\n            let content = await this.#navigator.metadata(path);\n            this.#metadata_cache[path] = content;\n            return content;\n        }\n    }\n\n    file(path) {\n        return this.#navigator.file(path);\n    }\n};\n\n/************************\n ******* Dataset ********\n ************************/\n\n/**\n * Dataset stored as a SummarizedExperiment in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n * Subclasses should define `abbreviate()` and `serialize()` methods, as well as the static `format()` and `unserialize()` methods - \n * see the [Dataset contract](https://github.com/LTLA/bakana/blob/master/docs/related/custom_readers.md) for more details.\n */\nexport class AbstractArtifactdbDataset {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     */\n    constructor(path, navigator) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n        this.#options = AbstractArtifactdbDataset.defaults();\n\n        // Don't call this.clear() here. We don't want to clear the navigator's\n        // cache at this point, as the navigator might contain some cached\n        // values when passed to the constructor. We should respect any caches\n        // until we're specifically told to discard it with clear() or cache =\n        // false in load() or summary().\n        this.#reset_local_caches();\n        return;\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode AbstractArtifactdbDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            rnaCountAssay: 0, \n            adtCountAssay: 0, \n            crisprCountAssay: 0,\n            rnaExperiment: \"\", \n            adtExperiment: \"Antibody Capture\", \n            crisprExperiment: \"CRISPR Guide Capture\",\n            primaryRnaFeatureIdColumn: null, \n            primaryAdtFeatureIdColumn: null,\n            primaryCrisprFeatureIdColumn: null \n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode AbstractArtifactdbDataset#load load} (but not {@linkcode AbstractArtifactdbDataset#summary summary}).\n     * @param {string|number} [options.rnaCountAssay] - Name or index of the assay containing the RNA count matrix.\n     * @param {string|number} [options.adtCountAssay] - Name or index of the assay containing the ADT count matrix.\n     * @param {string|number} [options.crisprCountAssay] - Name or index of the assay containing the CRISPR count matrix.\n     * @param {?(string|number)} [options.rnaExperiment] - Name or index of the alternative experiment containing gene expression data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no RNA data is assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the gene expression data.\n     * @param {?(string|number)} [options.adtExperiment] - Name or index of the alternative experiment containing ADT data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no ADTs are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the ADT data.\n     * @param {?(string|number)} [options.crisprExperiment] - Name or index of the alternative experiment containing CRISPR guide data.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and no CRISPR guides are assumed to be present.\n     * If `i` is an empty string, the main experiment is assumed to contain the guide data.\n     * @param {?(string|number)} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     * @param {?(string|number)} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is defined as the existing row names.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     * @param {?(string|number)} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     *\n     * If `i` is `null` or invalid (e.g., out of range index, unavailable name), it is ignored and the existing row names (if they exist) are used as the primary identifier.\n     * However, if no row names are present in the SummarizedExperiment, no primary identifier is defined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbDataset#load load} or {@linkcode AbstractArtifactdbDataset#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator)\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode AbstractArtifactdbDataset#load load} but the order of values may be different.\n     *\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n\n        let fmapping = {\n            RNA: this.#options.rnaExperiment, \n            ADT: this.#options.adtExperiment, \n            CRISPR: this.#options.crisprExperiment \n        };\n\n        let preview = futils.extractRemappedPrimaryIds(this.#raw_features, fmapping, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRISPR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode AbstractArtifactdbDataset#defaults defaults} or with {@linkcode AbstractArtifactdbDataset#setOptions setOptions}.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            row_ids: {},\n            features: {},\n            cells: this.#raw_cells\n        };\n\n        let mapping = { \n            RNA: { exp: this.#options.rnaExperiment, assay: this.#options.rnaCountAssay },\n            ADT: { exp: this.#options.adtExperiment, assay: this.#options.adtCountAssay },\n            CRISPR: { exp: this.#options.crisprExperiment, assay: this.#options.crisprCountAssay }\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let altmap = {};\n        let alts = [];\n        if (\"single_cell_experiment\" in full_meta) {\n            alts = full_meta.single_cell_experiment.alternative_experiments;\n            for (const alt of alts) {\n                altmap[alt.name] = alt.resource.path;\n            }\n        }\n\n        try {\n            for (const [k, v] of Object.entries(mapping)) {\n                if (v.exp === null) {\n                    continue;\n                }\n\n                let meta = null;\n                let name = v.exp;\n                if (typeof v.exp == \"string\") {\n                    if (v.exp === \"\") {\n                        meta = full_meta;\n                    } else {\n                        if (!(v.exp in altmap)) {\n                            continue;\n                        }\n                        meta = await this.#navigator.metadata(altmap[v.exp]);\n                    }\n                } else {\n                    if (v.exp >= alts.length) {\n                        continue;\n                    }\n                    name = alts[v.exp].name;\n                    meta = await this.#navigator.metadata(alts[v.exp].resource.path);\n                }\n\n                let loaded = await extract_assay(meta, v.assay, this.#navigator, true);\n                output.matrix.add(k, loaded.matrix);\n                let out_ids = loaded.row_ids;\n                output.row_ids[k] = out_ids;\n                output.features[k] = bioc.SLICE(this.#raw_features[name], out_ids);\n            }\n\n            output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        } catch (e) {\n            scran.free(output.matrix);\n            throw e;\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentDatasetBase = AbstractArtifactdbDataset;\n\n/***********************\n ******* Result ********\n ***********************/\n\n/**\n * Pre-computed analysis results stored as a SummarizedExperiment object (or one of its subclasses) in the **ArtifactDB** format.\n * This is intended as a virtual base class; applications should define subclasses that are tied to a specific {@linkplain ArtifactdbProjectNavigator} class.\n */\nexport class AbstractArtifactdbResult {\n    #path;\n    #navigator;\n\n    #raw_features;\n    #raw_cells;\n    #raw_other;\n\n    #options;\n\n    /**\n     * @param {string} path - Path to the SummarizedExperiment in the ArtifactDB project directory.\n     * @param {ArtifactdbProjectNavigator} navigator - A navigator object that describes how to obtain the various assets from the project directory containing `path`.\n     */\n    constructor(path, navigator) {\n        this.#path = path;\n        this.#navigator = new MetadataCacheWrapper(navigator);\n        this.#options = AbstractArtifactdbResult.defaults();\n\n        // Don't call clear() here, see comments above in the Dataset constructor.\n        this.#reset_local_caches();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode AbstractArtifactdbResults#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return { \n            primaryAssay: 0,\n            isPrimaryNormalized: true,\n            reducedDimensionNames: null\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode AbstractArtifactdbResult#load load} (but not {@linkcode AbstractArtifactdbResult#summary summary}.\n     * @param {object|string|number} [options.primaryAssay] - Assay containing the relevant data for each modality.\n     *\n     * - If a string, this is used as the name of the assay across all modalities.\n     * - If a number, this is used as the index of the assay across all modalities.\n     * - If any object, the key should be the name of a modality and the value may be either a string or number specifying the assay to use for that modality.\n     *   Modalities absent from this object will not be loaded.\n     * @param {object|boolean} [options.isPrimaryNormalized] - Whether or not the assay for a particular modality has already been normalized.\n     *\n     * - If a boolean, this is used to indicate normalization status of assays across all modalities.\n     *   If `false`, that modality's assay is assumed to contain count data and is subjected to library size normalization. \n     * - If any object, the key should be the name of a modality and the value should be a boolean indicating whether that modality's assay has been normalized.\n     *   Modalities absent from this object are assumed to have been normalized.\n     * @param {?Array} [options.reducedDimensionNames] - Array of names of the reduced dimensions to load.\n     * If `null`, all reduced dimensions found in the file are loaded.\n     */\n    setOptions(options) {\n        // Cloning to avoid pass-by-reference links.\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = bioc.CLONE(v);\n        }\n    }\n\n    #reset_local_caches() {\n        this.#raw_features = null;\n        this.#raw_cells = null;\n        this.#raw_other = null;\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode AbstractArtifactdbResult#load load} or {@linkcode AbstractArtifactdbResult#summary summary}.\n     */\n    clear() {\n        this.#reset_local_caches();\n        this.#navigator.clear();\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n        this.#raw_features = await extract_all_features(this.#path, this.#navigator);\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n        let full_meta = await this.#navigator.metadata(this.#path);\n        let col_path = full_meta.summarized_experiment.column_data.resource.path;\n        this.#raw_cells = await load_data_frame(col_path, this.#navigator);\n        return;\n    }\n\n    async #other() {\n        if (this.#raw_other !== null) {\n            return;\n        }\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"other_data\" in full_meta.summarized_experiment) {\n            let other_path = full_meta.summarized_experiment.other_data.resource.path;\n            this.#raw_other = await extract_other_data(other_path, this.#navigator);\n        } else {\n            this.#raw_other = {};\n        }\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbResult#load load}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbResult#clear clear} to release the memory once this dataset instance is no longer needed.\n     * \n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     * - `modality_assay_names`: an object where each key is a modality name and each value is an Array containing the names of available assays for that modality.\n     *    Unnamed assays are represented as `null` names.\n     * - `reduced_dimension_names`: an Array of strings containing names of dimensionality reduction results.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async \n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let output = {\n            modality_features: this.#raw_features,\n            cells: this.#raw_cells,\n            modality_assay_names: await extract_all_assay_names(this.#path, this.#navigator),\n            reduced_dimension_names: [],\n            other_metadata: this.#raw_other\n        };\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n        if (\"single_cell_experiment\" in full_meta) {\n            for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                let redmeta = await this.#navigator.metadata(red.resource.path);\n                if (redmeta[\"$schema\"].startsWith(\"hdf5_dense_array/\") && redmeta.array.dimensions.length == 2) {\n                    output.reduced_dimension_names.push(red.name);\n                }\n            }\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the results for re-use in subsequent calls to this method or {@linkcode AbstractArtifactdbResult#summary summary}.\n     * If `true`, users should consider calling {@linkcode AbstractArtifactdbResult#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `reduced_dimensions`: an object containing the dimensionality reduction results.\n     *   Each value is an array of arrays, where each inner array contains the coordinates for one dimension.\n     * - `other_metadata`: an object containing other metadata.\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n        await this.#other();\n\n        let full_meta = await this.#navigator.metadata(this.#path);\n\n        let output = { \n            matrix: new scran.MultiMatrix,\n            features: {},\n            cells: this.#raw_cells,\n            reduced_dimensions: {},\n            other_metadata: this.#raw_other\n        };\n\n        // Fetch the reduced dimensions first.\n        {\n            let reddims = this.#options.reducedDimensionNames;\n            if (reddims == null) {\n                reddims = [];\n                if (\"single_cell_experiment\" in full_meta) {\n                    for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                        reddims.push(red.name);\n                    }\n                }\n            }\n\n            if (reddims.length > 0) {\n                let redmap = {};\n                for (const red of full_meta.single_cell_experiment.reduced_dimensions) {\n                    redmap[red.name] = red.resource.path;\n                }\n\n                for (const k of reddims) {\n                    let redmeta = await this.#navigator.metadata(redmap[k]); // this should be only HDF5 dense matrices.\n                    let dims = redmeta.array.dimensions;\n                    let redcontents = await this.#navigator.file(redmeta.path); \n\n                    let realized = scran.realizeFile(redcontents);\n                    let acquired = [];\n                    try {\n                        let fhandle = new scran.H5File(realized.path);\n                        let dhandle = fhandle.open(redmeta.hdf5_dense_array.dataset, { load: true });\n                        let contents = dhandle.values;\n                        for (var d = 0; d < dims[1]; d++) {\n                            acquired.push(contents.slice(d * dims[0], (d + 1) * dims[0]));\n                        }\n                    } finally {\n                        realized.flush();\n                    }\n\n                    output.reduced_dimensions[k] = acquired;\n                }\n            }\n        }\n\n        // Now fetching the assay matrix.\n        {\n            let altmap = {};\n            if (\"single_cell_experiment\" in full_meta) {\n                for (const alt of full_meta.single_cell_experiment.alternative_experiments) {\n                    altmap[alt.name] = alt.resource.path;\n                }\n            }\n\n            try {\n                for (const [k, v] of Object.entries(this.#raw_features)) {\n                    let curassay = this.#options.primaryAssay;\n                    if (typeof curassay == \"object\") {\n                        if (k in curassay) {\n                            curassay = curassay[k];\n                        } else {\n                            continue;\n                        }\n                    }\n\n                    let curnormalized = this.#options.isPrimaryNormalized;\n                    if (typeof curnormalized == \"object\") {\n                        if (k in curnormalized) {\n                            curnormalized = curnormalized[k];\n                        } else {\n                            curnormalized = true;\n                        }\n                    }\n\n                    let meta;\n                    if (k === \"\") {\n                        meta = full_meta;\n                    } else {\n                        meta = await this.#navigator.metadata(altmap[k]);\n                    }\n\n                    let loaded = await extract_assay(meta, curassay, this.#navigator, !curnormalized);\n                    output.matrix.add(k, loaded.matrix);\n\n                    if (!curnormalized) {\n                        let normed = scran.logNormCounts(loaded.matrix, { allowZeros: true });\n                        output.matrix.add(k, normed);\n                    }\n\n                    if (loaded.row_ids !== null) {\n                        output.features[k] = bioc.SLICE(this.#raw_features[k], loaded.row_ids);\n                    } else {\n                        output.features[k] = this.#raw_features[k];\n                    }\n                }\n\n            } catch (e) {\n                scran.free(output.matrix);\n                throw e;\n            }\n        }\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n}\n\nexport const ArtifactDbSummarizedExperimentResultBase = AbstractArtifactdbResult;\n","export class SimpleFile {\n    #mode;\n    #buffer;\n    #file;\n    #name;\n\n    constructor(x, { name = null } = {}) {\n        if (x instanceof File) {\n            this.#mode = \"file\";\n            this.#file = x;\n            if (name === null) {\n                name = x.name;\n            }\n            this.#name = name;\n        } else if (x instanceof Uint8Array) {\n            this.#mode = \"buffer\";\n            this.#buffer = x; \n            if (name === null) {\n                throw new Error(\"'name' must be provided for Uint8Array inputs in SimpleFile constructor\");\n            }\n            this.#name = name;\n        } else {\n            throw new Error(\"unknown type '\" + typeof(x) + \"' for SimpleFile constructor\");\n        }\n    }\n\n    buffer({ copy = false } = {}) {\n        if (this.#mode == \"file\") {\n            let reader = new FileReaderSync();\n            let b = reader.readAsArrayBuffer(this.#file);\n            return new Uint8Array(b);\n        } else {\n            if (copy) {\n                return this.#buffer.slice();\n            } else {\n                return this.#buffer;\n            }\n        }\n    }\n\n    size() {\n        if (this.#mode == \"file\") {\n            return this.#file.size;\n        } else {\n            return this.#buffer.length;\n        }\n    }\n\n    name() {\n        return this.#name;\n    }\n\n    content({ copy = false } = {}) {\n        return this.buffer({ copy: copy });\n    }\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as afile from \"./abstract/file.js\";\nimport * as eutils from \"./utils/extract.js\";\nimport * as futils from \"./utils/features.js\";\n\n/**\n * Dataset in the 10X Matrix Market format, see [here](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/matrices) for details.\n */\nexport class TenxMatrixMarketDataset {\n    #matrix_file;\n    #feature_file;\n    #barcode_file;\n\n    #dimensions;\n    #raw_features;\n    #raw_cells;\n\n    #options;\n\n    #dump_summary(fun) {\n        let files = [{ type: \"mtx\", file: fun(this.#matrix_file) }];\n\n        if (this.#feature_file !== null) {\n            files.push({ type: \"genes\", file: fun(this.#feature_file) });\n        }\n\n        if (this.#barcode_file !== null) {\n            files.push({ type: \"annotations\", file: fun(this.#barcode_file) });\n        }\n\n        let options = this.options(); \n        return { files, options };\n    }\n\n    /**\n     * @param {SimpleFile|string|Uint8Array|File} matrixFile - A Matrix Market file.\n     * On browsers, this may be a File object.\n     * On Node.js, this may also be a string containing a file path.\n     * @param {?(SimpleFile|string|Uint8Array|File)} featureFile - Contents of a feature annotation file.\n     * If `null`, it is assumed that no file was available.\n     * @param {?(SimpleFile|string|Uint8Array|File)} barcodeFile - Contents of a barcode annotation file.\n     * If `null`, it is assumed that no file was available.\n     */\n    constructor(matrixFile, featureFile, barcodeFile, { \n        featureTypeRnaName = \"Gene Expression\", \n        featureTypeAdtName = \"Antibody Capture\", \n        featureTypeCrisprName = \"CRISPR Guide Capture\", \n        primaryRnaFeatureIdColumn = 0, \n        primaryAdtFeatureIdColumn = 0,\n        primaryCrisprFeatureIdColumn = 0\n    } = {}) {\n        if (matrixFile instanceof afile.SimpleFile) {\n            this.#matrix_file = matrixFile;\n        } else {\n            this.#matrix_file = new afile.SimpleFile(matrixFile);\n        }\n\n        if (featureFile instanceof afile.SimpleFile || featureFile == null) {\n            this.#feature_file = featureFile;\n        } else {\n            this.#feature_file = new afile.SimpleFile(featureFile);\n        }\n\n        if (barcodeFile instanceof afile.SimpleFile || barcodeFile == null) {\n            this.#barcode_file = barcodeFile;\n        } else {\n            this.#barcode_file = new afile.SimpleFile(barcodeFile);\n        }\n\n        this.#options = TenxMatrixMarketDataset.defaults();\n        this.clear();\n    }\n\n    /**\n     * @return {object} Default options, see {@linkcode TenxMatrixMarketDataset#setOptions setOptions} for more details.\n     */\n    static defaults() {\n        return {\n            featureTypeRnaName: \"Gene Expression\", \n            featureTypeAdtName: \"Antibody Capture\", \n            featureTypeCrisprName: \"CRISPR Guide Capture\", \n            primaryRnaFeatureIdColumn: 0, \n            primaryAdtFeatureIdColumn: 0,\n            primaryCrisprFeatureIdColumn: 0\n        };\n    }\n\n    /**\n     * @return {object} Object containing all options used for loading.\n     */\n    options() {\n        return { ...(this.#options) };\n    }\n\n    /**\n     * @param {object} options - Optional parameters that affect {@linkcode TenxMatrixMarketDataset#load load} (but not {@linkcode TenxMatrixMarketDataset#summary summary}).\n     * @param {?string} [options.featureTypeRnaName] - Name of the feature type for gene expression.\n     * Alternatively `null`, to indicate that no RNA features are to be loaded.\n     * @param {?string} [options.featureTypeAdtName] - Name of the feature type for ADTs.\n     * Alternatively `null`, to indicate that no ADT features are to be loaded.\n     * @param {?string} [options.featureTypeCrisprName] - Name of the feature type for CRISPR guides.\n     * Alternatively `null`, to indicate that no guides are to be loaded.\n     * @param {string|number} [options.primaryRnaFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for gene expression.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryAdtFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the ADTs.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     * @param {string|number} [options.primaryCrisprFeatureIdColumn] - Name or index of the column of the `features` {@linkplain external:DataFrame DataFrame} that contains the primary feature identifier for the CRISPR guides.\n     * If `i` is invalid (e.g., out of range index, unavailable name), it is ignored and the primary identifier is treated as undefined.\n     */\n    setOptions(options) {\n        for (const [k, v] of Object.entries(options)) {\n            this.#options[k] = v;\n        }\n    }\n\n    /**\n     * Destroy caches if present, releasing the associated memory.\n     * This may be called at any time but only has an effect if `cache = true` in {@linkcode TenxMatrixMarketDataset#load load} or {@linkcodeTenxMatrixMarketDataset#summary summary}. \n     */\n    clear() {\n        this.#dimensions = null;\n        this.#raw_features = null;\n        this.#raw_cells = null;\n    }\n\n    /**\n     * @return {string} Format of this dataset class.\n     * @static\n     */\n    static format() {\n        return \"MatrixMarket\";\n    }\n\n    /**\n     * @return {object} Object containing the abbreviated details of this dataset,\n     * in a form that can be cheaply stringified.\n     */\n    abbreviate(args) {\n        return this.#dump_summary(f => { return { name: f.name(), size: f.size() }; });\n    }\n\n    #fetch_dimensions() {\n        if (this.#dimensions !== null) {\n            return;\n        }\n        var is_gz = this.#matrix_file.name().endsWith(\".gz\");\n        let headers = scran.extractMatrixMarketDimensions(this.#matrix_file.content(), { \"compressed\": is_gz });\n        this.#dimensions = [headers.rows, headers.columns];\n    }\n\n    async #features() {\n        if (this.#raw_features !== null) {\n            return;\n        }\n\n        this.#fetch_dimensions();\n        let NR = this.#dimensions[0];\n        if (this.#feature_file == null) {\n            this.#raw_features = new bioc.DataFrame({}, { numberOfRows: NR });\n            return;\n        }\n\n        let fname = this.#feature_file.name();\n        var is_gz = fname.endsWith(\".gz\");\n        let parsed = await eutils.readTable2(this.#feature_file.content(), { compression: (is_gz ? \"gz\" : \"none\") });\n\n        if (parsed.length == NR + 1) {\n            // If it seems to have a header, we just use that directly.\n            let output = {};\n            let headers = parsed.shift();\n            headers.forEach((x, i) => {\n                output[x] = parsed.map(y => y[i]);\n            });\n            this.#raw_features = output;\n            return;\n        }\n\n        // Otherwise, we assume it's standard 10X CellRanger output, without a header.\n        if (parsed.length !== NR) {\n            throw new Error(\"number of matrix rows is not equal to the number of rows in '\" + fname + \"'\");\n        } \n\n        var ids = [], symb = [];\n        parsed.forEach(x => {\n            ids.push(x[0]);\n            symb.push(x[1]);\n        });\n\n        let output = new bioc.DataFrame({}, { numberOfRows: NR }); // build it piece-by-piece for a well-defined order.\n        output.$setColumn(\"id\", ids);\n        output.$setColumn(\"name\", symb);\n\n        if (parsed[0].length > 2) {\n            let types = [];\n            parsed.forEach(x => { types.push(x[2]); });\n            output.$setColumn(\"type\", types);\n        }\n\n        this.#raw_features = output;\n        return;\n    }\n\n    async #cells() {\n        if (this.#raw_cells !== null) {\n            return;\n        }\n\n        this.#fetch_dimensions();\n        if (this.#barcode_file == null) {\n            this.#raw_cells = new bioc.DataFrame({}, { numberOfRows: this.#dimensions[1] });\n            return;\n        }\n\n        let bname = this.#barcode_file.name();\n        var is_gz = bname.endsWith(\".gz\");\n        let parsed = await eutils.readTable2(this.#barcode_file.content(), { compression: (is_gz ? \"gz\" : \"none\") });\n\n        // Check if a header is present or not. Standard 10X output doesn't have a \n        // header but we'd like to support some kind of customization.\n        let diff = this.#dimensions[1] - parsed.length;\n        let headers;\n        if (diff == 0) {\n            headers = parsed[0]; // whatever, just using the first row. Hope it's unique enough!\n        } else if (diff == -1) {\n            headers = parsed.shift();\n        } else {\n            throw new Error(\"number of matrix columns is not equal to the number of rows in '\" + bname + \"'\");\n        }\n\n        let annotations = {}\n        headers.forEach((x, i) => {\n            annotations[x] = parsed.map(y => y[i]);\n        });\n\n        for (const [k, v] of Object.entries(annotations)) {\n            let conv = eutils.promoteToNumber(v);\n            if (conv !== null) {\n                annotations[k] = conv;\n            }\n        }\n\n        this.#raw_cells = new bioc.DataFrame(annotations);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `modality_features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     *   Unlike {@linkcode TenxMatrixMarketDataset#load load}, modality names are arbitrary.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} of per-cell annotations.\n     *\n     * @async\n     */\n    async summary({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        let output = {\n            \"modality_features\": futils.reportFeatures(this.#raw_features, \"type\"),\n            \"cells\": this.#raw_cells\n        };\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    #feature_type_mapping() {\n        return {\n            RNA: this.#options.featureTypeRnaName, \n            ADT: this.#options.featureTypeAdtName,\n            CRISPR: this.#options.featureTypeCrisprName\n        };\n    }\n\n    #primary_mapping() {\n        return {\n            RNA: this.#options.primaryRnaFeatureIdColumn, \n            ADT: this.#options.primaryAdtFeatureIdColumn,\n            CRISPR: this.#options.primaryCrisprFeatureIdColumn\n        };\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} An object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     * The contents are the same as the `primary_ids` returned by {@linkcode TenxMatrixMarketDataset#load load} but the order of values may be different.\n     * @async\n     */\n    async previewPrimaryIds({ cache = false } = {}) {\n        await this.#features();\n        let preview = futils.extractSplitPrimaryIds(this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\", this.#primary_mapping());\n        if (!cache) {\n            this.clear();\n        }\n        return preview;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.cache=false] - Whether to cache the intermediate results for re-use in subsequent calls to any methods with a `cache` option.\n     * If `true`, users should consider calling {@linkcode TenxMatrixMarketDataset#clear clear} to release the memory once this dataset instance is no longer needed.\n     *\n     * @return {object} Object containing the per-feature and per-cell annotations.\n     * This has the following properties:\n     *\n     * - `features`: an object where each key is a modality name and each value is a {@linkplain external:DataFrame DataFrame} of per-feature annotations for that modality.\n     * - `cells`: a {@linkplain external:DataFrame DataFrame} containing per-cell annotations.\n     * - `matrix`: a {@linkplain external:MultiMatrix MultiMatrix} containing one {@linkplain external:ScranMatrix ScranMatrix} per modality.\n     * - `primary_ids`: an object where each key is a modality name and each value is an array (usually of strings) containing the primary feature identifiers for each row in that modality.\n     *\n     * Modality names are guaranteed to be one of `\"RNA\"`, `\"ADT\"` or `\"CRIPSR\"`.\n     * We assume that the instance already contains an appropriate mapping from the observed feature types to each expected modality,\n     * either from the {@linkcode TenxMatrixMarketDataset#defaults defaults} or with {@linkcode TenxMatrixMarketDataset#setOptions setOptions}.\n     *\n     * If the feature annotation file is absent or if it lacks a third column for the feature types,\n     * `load()` will assume that all features are genes (i.e., only the RNA modality is present).\n     *\n     * @async\n     */\n    async load({ cache = false } = {}) {\n        await this.#features();\n        await this.#cells();\n\n        var is_gz = this.#matrix_file.name().endsWith(\".gz\");\n        let loaded = scran.initializeSparseMatrixFromMatrixMarket(this.#matrix_file.content(), { \"compressed\": is_gz });\n\n        let output = futils.splitScranMatrixAndFeatures(loaded, this.#raw_features, \"type\", this.#feature_type_mapping(), \"RNA\"); \n        output.cells = this.#raw_cells;\n\n        output.primary_ids = futils.extractPrimaryIds(output.features, this.#primary_mapping());\n\n        if (!cache) {\n            this.clear();\n        }\n        return output;\n    }\n\n    /**\n     * @return {object} Object describing this dataset, containing:\n     *\n     * - `files`: Array of objects representing the files used in this dataset.\n     *   Each object corresponds to a single file and contains:\n     *   - `type`: a string denoting the type.\n     *   - `file`: a {@linkplain SimpleFile} object representing the file contents.\n     * - `options`: An object containing additional options to saved.\n     */\n    async serialize() {\n        return this.#dump_summary(f => f);\n    }\n\n    /**\n     * @param {Array} files - Array of objects like that produced by {@linkcode TenxMatrixMarketDataset#serialize serialize}.\n     * @param {object} options - Object containing additional options to be passed to the constructor.\n     * @return {TenxMatrixMarketDataset} A new instance of this class.\n     * @static\n     */\n    static async unserialize(files, options) {\n        let args = {};\n        for (const x of files) {\n            if (x.type in args) {\n                throw new Error(\"duplicate file of type '\" + x.type + \"' detected during MatrixMarket unserialization\");\n            }\n            args[x.type] = x.file;\n        }\n\n        if (!(\"mtx\" in args)) {\n            throw new Error(\"expected file of type 'mtx' for during MatrixMarket unserialization\");\n        }\n\n        let feat = null;\n        if (\"genes\" in args) {\n            feat = args.genes;\n        }\n\n        let barcode = null;\n        if (\"annotations\" in args) {\n            barcode = args.annotations;\n        }\n\n        return new TenxMatrixMarketDataset(args.mtx, feat, barcode, options);\n    }\n}\n","export function stream(file, chunkSize, callback, resolve, reject) {\n    reject(\"no support for file paths in the browser context\");\n}\n\nexport function peek(file, n) {\n    throw new Error(\"no support for file paths in the browser context\");\n}\n","import * as pako from \"pako\";\nimport ppp from \"papaparse\";\nimport * as astream from \"./abstract/stream.js\";\nimport * as afile from \"../abstract/file.js\";\n\nexport function extractHDF5Strings(handle, name) {\n    if (!(name in handle.children)) {\n        return null;\n    }\n\n    if (handle.children[name] !== \"DataSet\") {\n        return null;\n    }\n\n    let content = handle.open(name);\n    if (content.type !== \"String\") {\n        return null;\n    }\n\n    return content.load();\n}\n\n/**\n * Summarize an array, typically corresponding to a single column of per-cell annotation.\n * This can be used as part of a preflight response in a Reader.\n *\n * @param {Array|TypedArray} array - Per-cell annotation array of length equal to the number of cells for a given matrix.\n * An Array is treated as categorical data and should contain strings, while TypedArrays are treated as continuous data.\n * @param {object} [options] - Optional parameters.\n * @param {number} [options.limit=50] - Maximum number of unique values to report for categorical `x`.\n *\n * @return {object} Object containing `type`, a string indicating whether `array` was categorical or continuous.\n *\n * If `\"categorical\"`, the object will contain `values`, an array of unique values up to the length specified by `limit`.\n * It will also contain `truncated`, a boolean indicating whether the actual number of unique values exceeds `limit`.\n *\n * If `\"continuous\"`, the object will contain the numbers `min` and `max` specifying the minimum and maximum value in `x`, respectively.\n * `min` or `max` may be negative or positive infinity, respectively, if there is no bound on one or both ends.\n * If `min > max`, all values in `array` are `NaN`s such that no bound can be found.\n */\nexport function summarizeArray(array, { limit = 50 } = {}) {\n    if (array instanceof Array) {\n        let chosen = Array.from(new Set(array));\n        chosen.sort();\n        let truncated = false;\n        if (chosen.length > limit) {\n            chosen = chosen.slice(0, limit);\n            truncated = true;\n        }\n        return {\n            \"type\": \"categorical\",\n            \"values\": chosen,\n            \"truncated\": truncated\n        };\n    } else {\n        let min = Number.POSITIVE_INFINITY, max = Number.NEGATIVE_INFINITY;\n        array.forEach(x => {\n            if (x < min) {\n                min = x;\n            }\n            if (x > max) {\n                max = x;\n            }\n        });\n\n        return { \n            \"type\": \"continuous\",\n            \"min\": min, \n            \"max\": max \n        };\n    }\n}\n\nfunction guess_compression(x, compression) {\n    if (compression !== null) {\n        return compression;\n    }\n\n    let buffer;\n    if (x instanceof Uint8Array) {\n        buffer = x;\n    } else {\n        buffer = astream.peek(x, 3);\n    }\n\n    // Compare against magic words for auto-detection.\n    if (buffer.length >= 3 && buffer[0] == 0x1F && buffer[1] == 0x8B && buffer[2] == 0x08) {\n        return 'gz';\n    }\n\n    return 'none';\n}\n\nexport function unpackText(buffer, { compression = null } = {}) {\n    compression = guess_compression(buffer, compression);\n    let txt = (compression === \"gz\" ? pako.ungzip(buffer) : buffer);\n    const dec = new TextDecoder();\n    return dec.decode(txt);\n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readLines(buffer, { compression = null } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let lines = decoded.split(\"\\n\");\n    if (lines.length > 0 && lines[lines.length - 1] == \"\") { // ignoring the trailing newline.\n        lines.pop();\n    }\n    return lines;    \n}\n\nfunction merge_bytes(leftovers, decoder) {\n    let total = 0;\n    for (const x of leftovers) {\n        total += x.length;\n    }\n\n    let combined = new Uint8Array(total);\n    total = 0;\n    for (const x of leftovers) {\n        combined.set(x, total);\n        total += x.length;\n    }\n\n    return decoder.decode(combined);\n}\n\nasync function stream_callback(x, compression, chunkSize, callback) {\n    // Force the input to be either a Uint8Array or a file path string.\n    if (typeof x == \"string\") {\n        ;\n    } else if (x instanceof Uint8Array) {\n        ;\n    } else if (x instanceof afile.SimpleFile) {\n        x = x.content();\n    } else {\n        x = (new afile.SimpleFile(x, { name: \"dummy\" })).content();\n    }\n\n    if (guess_compression(x, compression) == \"gz\") {\n        await (new Promise((resolve, reject) => {\n            let gz = new pako.Inflate({ chunkSize: chunkSize });\n            gz.onData = callback;\n            gz.onEnd = status => {\n                if (status) {\n                    reject(\"gzip decompression failed; \" + gz.msg);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            if (typeof x == \"string\") {\n                astream.stream(x, chunkSize, chunk => gz.push(chunk), null, reject);\n            } else {\n                gz.push(x);\n            }\n        }));\n        return;\n    }\n\n    // Remaining possibilities are uncompressed.\n    if (typeof x == \"string\") {\n        await (new Promise((resolve, reject) => astream.stream(x, chunkSize, callback, resolve, reject)));\n        return;\n    }\n\n    callback(x);\n    return;\n}\n\n/**\n * Read lines of text from a file, possibly with decompression.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {number} [options.chunkSize=65536] - Chunk size in bytes to use for file reading (if `x` is a file path) and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of strings where each entry contains a line in `buffer`.\n * The newline itself is not included in each string.\n * @async \n */\nexport async function readLines2(x, { compression = null, chunkSize = 65536 } = {}) {\n    const dec = new TextDecoder;\n    let leftovers = [];\n    let lines = [];\n\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            if (chunk[i] == 10) { // i.e., ASCII newline.\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    lines.push(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    lines.push(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        lines.push(merge_bytes(leftovers, dec));\n    }\n\n    return lines;    \n}\n\n// Soft-deprecated as of 1.1.0.\nexport function readTable(buffer, { compression = null, delim = \"\\t\", firstOnly = false } = {}) {\n    let decoded = unpackText(buffer, { compression: compression });\n    let res = ppp.parse(decoded, { delimiter: delim, preview: (firstOnly ? 1 : 0) });\n\n    // Handle terminating newlines.\n    let last = res.data[res.data.length - 1];\n    if (last.length === 1 && last[0] === \"\") {\n        res.data.pop();\n    }\n\n    return res.data;\n}\n\n/**\n * Read a delimiter-separated table from a buffer, possibly with decompression.\n * This assumes that newlines represent the end of each row of the table, i.e., there cannot be newlines inside quoted strings.\n *\n * @param {string|Uint8Array|SimpleFile|File} x - Contents of the file to be read.\n * On Node.js, this may be a string containing a path to a file;\n * on browsers, this may be a File object.\n * @param {object} [options={}] - Optional parameters.\n * @param {?string} [options.compression=null] - Compression of `buffer`, either `\"gz\"` or `\"none\"`.\n * If `null`, it is determined automatically from the `buffer` header.\n * @param {string} [options.delim=\"\\t\"] - Delimiter between fields.\n * @param {number} [options.chunkSize=1048576] - Chunk size in bytes to use for file reading (if `x` is a path), parsing of rows, and decompression (if `compression=\"gz\"`).\n * Larger values improve speed at the cost of memory.\n *\n * @return {Array} Array of length equal to the number of lines in `buffer`.\n * Each entry is an array of strings, containing the `delim`-separated fields for its corresponding line.\n *\n * @async\n */\nexport async function readTable2(x, { compression = null, delim = \"\\t\", chunkSize = 1048576 } = {}) {\n    const dec = new TextDecoder;\n\n    let rows = [];\n    let parse = (str) => {\n        let out = ppp.parse(str, { delimiter: delim });\n        if (out.meta.aborted) {\n            let msg = \"failed to parse delimited file\";\n            for (const e of out.errors) {\n                msg += \"; \" + e.message;\n            }\n            throw new Error(msg);\n        }\n        for (const x of out.data) {\n            rows.push(x);\n        }\n    };\n\n    let leftovers = [];\n    let size_left = 0;\n    let callback = (chunk) => {\n        let last = 0;\n        for (var i = 0; i < chunk.length; i++) {\n            // We assume that all newlines are end-of-rows, i.e., there are no\n            // newlines inside quoted strings. Under this assumption, we can\n            // safely chunk the input stream based on newlines, parse each\n            // chunk, and then combine the parsing results together. To avoid\n            // too many parsing calls, we accumulate buffers until we hit \n            // the chunkSize and then we decode + parse them altogether.\n            if (chunk[i] == 10 && (i - last) + size_left >= chunkSize) {\n                let current = chunk.subarray(last, i);\n                if (leftovers.length) {\n                    leftovers.push(current);\n                    parse(merge_bytes(leftovers, dec));\n                    leftovers = [];\n                } else {\n                    parse(dec.decode(current));\n                }\n                last = i + 1; // skip past the newline.\n                size_left = 0;\n            }\n        }\n\n        if (last != chunk.length) {\n            leftovers.push(chunk.slice(last)); // copy to avoid problems with ownership as chunk gets deref'd.\n            size_left += chunk.length - last;\n        }\n    };\n\n    await stream_callback(x, compression, chunkSize, callback);\n\n    if (leftovers.length) {\n        let combined = merge_bytes(leftovers, dec);\n        parse(combined);\n        if (combined[combined.length - 1] == \"\\n\") { // guaranteed to have non-zero length, by virtue of how 'leftovers' is filled.\n            rows.pop();            \n        }\n    }\n\n    return rows;    \n}\n\n/**\n * Detect if an array contains only stringified numbers and, if so, convert it into a TypedArray.\n * Conversion will still be performed for non-number strings corresponding to missing values or explicit not-a-number entries.\n *\n * @param {Array} x Array of strings, usually corresponding to a column in a table read by {@linkcode readDSVFromBuffer}.\n *\n * @return {?Float64Array} A Float64Array is returned if `x` contains stringified numbers.\n * Otherwise, `null` is returned if the conversion could not be performed.\n */\nexport function promoteToNumber(x) {\n    let as_num = new Float64Array(x.length);\n\n    for (const [i, v] of Object.entries(x)) {\n        // See discussion at https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number.\n        let opt1 = Number(v);\n        let opt2 = parseFloat(v);\n        if (!isNaN(opt1) && !isNaN(opt2)) {\n            as_num[i] = opt1;\n        } else if (v === \"\" || v === \"NA\" || v == \"na\" || v == \"NaN\" || v == \"nan\") {\n            as_num[i] = NaN;\n        } else if (v == \"Inf\" || v == \"inf\") {\n            as_num[i] = Number.POSITIVE_INFINITY;\n        } else if (v == \"-Inf\" || v == \"-inf\") {\n            as_num[i] = Number.NEGATIVE_INFINITY;\n        } else {\n            return null;\n        }\n    }\n\n    return as_num;\n}\n","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\n\nfunction create_solo_default_object(value, modality) {\n    let output = {};\n    output[modality] = value;\n    return output;\n}\n\nexport function reportFeatures(rawFeatures, typeField) {\n    if (rawFeatures.hasColumn(typeField)) {\n        let by_type = bioc.presplitFactor(rawFeatures.column(typeField));\n        let copy = bioc.CLONE(rawFeatures, { deepCopy: false }); // SPLIT will make a copy anyway.\n        copy.$removeColumn(typeField);\n        return bioc.SPLIT(copy, by_type);\n    } else {\n        return create_solo_default_object(rawFeatures, \"\");\n    }\n}\n\nfunction is_subset_noop(indices, full_length) {\n    if (indices.length != full_length) {\n        return false;\n    }\n    for (var i = 0; i < full_length; i++) {\n        if (i !== indices[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nfunction renameByModality(input, featureTypeMapping) {\n    let output = {};\n    for (const [k, v] of Object.entries(featureTypeMapping)) {\n        if (v !== null && v in input) {\n            output[k] = input[v];\n        }\n    }\n    return output;\n}\n\nfunction splitByModality(features, typeField, featureTypeMapping) {\n    let by_type = bioc.presplitFactor(features.column(typeField));\n    if (featureTypeMapping === null) {\n        return by_type;\n    }\n    return renameByModality(by_type, featureTypeMapping);\n}\n\nexport function extractSplitPrimaryIds(features, typeField, featureTypeMapping, featureTypeDefault, primary) {\n    if (typeField !== null && features.hasColumn(typeField)) {\n        let by_type = splitByModality(features, typeField, featureTypeMapping);\n        for (const [k, v] of Object.entries(by_type)) {\n            let col = extractPrimaryIdColumn(k, features, primary);\n            by_type[k] = bioc.SLICE(col, v);\n        }\n        return by_type;\n    }\n\n    let output = {};\n    output[featureTypeDefault] = extractPrimaryIdColumn(featureTypeDefault, features, primary);\n    return output;\n}\n\nexport function splitScranMatrixAndFeatures(loaded, rawFeatures, typeField, featureTypeMapping, featureTypeDefault) {\n    let output = { matrix: new scran.MultiMatrix };\n\n    try {\n        let out_mat = loaded.matrix;\n        let out_ids = loaded.row_ids;\n        output.matrix.add(\"\", out_mat);\n\n        let current_features;\n        if (out_ids !== null) {\n            current_features = bioc.SLICE(rawFeatures, out_ids);\n        } else {\n            current_features = bioc.CLONE(rawFeatures, { deepCopy: false }); // because we're deleting a column.\n            out_ids = new Int32Array(out_mat.numberOfRows());\n            out_ids.forEach((x, i) => { out_ids[i] = i });\n        }\n\n        if (typeField !== null && current_features.hasColumn(typeField)) {\n            let by_type = splitByModality(current_features, typeField, featureTypeMapping);\n            let type_keys = Object.keys(by_type);\n            let skip_subset = is_subset_noop(type_keys[0], out_mat.numberOfRows());\n\n            if (type_keys.length > 1 || !skip_subset) {\n                let replacement = new scran.MultiMatrix({ store: scran.splitRows(out_mat, by_type) });\n                scran.free(output.matrix);\n                output.matrix = replacement;\n            } else {\n                output.matrix.rename(\"\", type_keys[0]);\n            }\n\n            delete current_features[typeField];\n            output.features = bioc.SPLIT(current_features, by_type);\n            output.row_ids = bioc.SPLIT(out_ids, by_type);\n\n        } else {\n            output.matrix.rename(\"\", featureTypeDefault);\n            output.row_ids = create_solo_default_object(out_ids, featureTypeDefault);\n            output.features = create_solo_default_object(current_features, featureTypeDefault);\n        }\n    } catch (e) {\n        scran.free(output.matrix);\n        throw e;\n    }\n\n    return output;\n}\n\nfunction extractPrimaryIdColumn(modality, modality_features, primary) {\n    if (!(modality in primary)) {\n        throw new Error(\"modality '\" + modality + \"' has no primary key identifier\");  \n    }\n    let id = primary[modality];\n\n    if ((typeof id == \"string\" && modality_features.hasColumn(id)) || (typeof id == \"number\" && id < modality_features.numberOfColumns())) {\n        return modality_features.column(id);\n    } \n\n    return modality_features.rowNames();\n}\n\nexport function extractPrimaryIds(features, primary) {\n    let output = {};\n    for (const [k, v] of Object.entries(features)) {\n        output[k] = extractPrimaryIdColumn(k, v, primary);\n    }\n    return output;\n}\n\nexport function extractRemappedPrimaryIds(features, featureTypeMapping, primary) {\n    let renamed = renameByModality(features, featureTypeMapping);\n    return extractPrimaryIds(renamed, primary);\n}\n","/**\n * Webpack (or something in kana's build system) specifically recognizes the\n * hard-coded path in this 'new Worker(new URL(...))' pattern. This is why we\n * have hard-coded creators for the workers rather than allowing callers to\n * pass in the URL as a variable, as that doesn't pack the worker's JS.\n */\n\nexport function createTsneWorker() {\n    return new Worker(new URL(\"../tsne.worker.js\", import.meta.url), { type: \"module\" });\n}\n\nexport function createUmapWorker() {\n    return new Worker(new URL(\"../umap.worker.js\", import.meta.url), { type: \"module\" });\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./adt_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"adt_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered ADT matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`groupedSizeFactors`](https://kanaverse.github.io/scran.js/global.html#groupedSizeFactors) \n * and [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc' should be a AdtQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.sf_buffer);\n        utils.freeCache(this.#cache.centered_sf_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"ADT\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized ADT values,\n     * available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the ADT-derived size factor for each cell in the (QC-filtered) dataset.\n     * This is available after running {@linkcode AdtNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sf_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sf_buffer.length, \"Float64Array\", this.#cache, \"centered_sf_buffer\");\n            scran.centerSizeFactors(this.#cache.sf_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n        var block = this.#filter.fetchFilteredBlock();\n\n        var buffer = this.#cache.sf_buffer;\n        if (buffer.length != mat.numberOfColumns()) {\n            throw new Error(\"length of size factor vector should equal number of columns after QC\");\n        }\n\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.remove_bias - Whether to remove composition bias between cell subpopulations.\n     * This is done by clustering cells and computing median-based size factors between the average pseudo-cells for each cluster.\n     * Users can set this to `false` to speed up the compute.\n     * @param {number} parameters.num_pcs - Number of PCs to use for creating a low-dimensional embedding for clustering.\n     * Only used if `remove_bias = true`.\n     * @param {number} parameters.num_clusters - Number of clusters to create with k-means clustering.\n     * Only used if `remove_bias = true`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        const { num_pcs, num_clusters } = parameters;\n        let remove_bias = true;\n        if (\"remove_bias\" in parameters) {\n            remove_bias = parameters.remove_bias;\n        }\n\n        this.changed = false;\n\n        if (this.#qc.changed || \n            this.#filter.changed || \n            remove_bias !== this.#parameters.remove_bias ||\n            (\n                remove_bias &&\n                (\n                    num_pcs !== this.#parameters.num_pcs || \n                    num_clusters != this.#parameters.num_clusters\n                ) \n            )\n        ) {\n            if (this.valid()) {\n                var mat = this.#filter.fetchFilteredMatrix().get(\"ADT\");\n                let total_buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"total_buffer\");\n                var block = this.#filter.fetchFilteredBlock();\n                var sf_buffer = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", this.#cache, \"sf_buffer\");\n\n                if (remove_bias) {\n                    scran.quickAdtSizeFactors(mat, { \n                        totals: total_buffer, \n                        block: block, \n                        buffer: sf_buffer, \n                        numberOfPCs: num_pcs, \n                        numberOfClusters: num_clusters \n                    });\n                } else {\n                    scran.centerSizeFactors(total_buffer, { buffer: sf_buffer, block: block });\n                }\n\n                this.changed = true;\n            }\n\n        } \n\n        this.#parameters.remove_bias = remove_bias;\n        this.#parameters.num_pcs = num_pcs;\n        this.#parameters.num_clusters = num_clusters;\n\n        if (this.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n            }\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n           remove_bias: true,\n           num_pcs: 25,\n           num_clusters: 20\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    let cache = {};\n    let parameters = AdtNormalizationState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\");\n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.num_clusters = phandle.open(\"num_clusters\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n            \n            if (\"size_factors\" in rhandle.children) {\n                let sf = rhandle.open(\"size_factors\", { load: true }).values;\n                cache.sf_buffer = scran.createFloat64WasmArray(sf.length);\n                cache.sf_buffer.set(sf);\n            }\n\n            output = new AdtNormalizationState(qc, filter, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.sf_buffer);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtNormalizationState(qc, filter, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./adt_normalization.js\";\n\nexport const step_name = \"adt_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise ADT data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm' should be a AdtNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized ADT matrix,\n     * available after running {@linkcode AdtPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = AdtPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new AdtPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new AdtPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"adt_quality_control\";\n\n/**\n * Results of computing per-cell ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellAdtQcMetricsResults.html) for details.\n *\n * @external PerCellAdtQcMetricsResults\n */\n\n/**\n * Suggested filters for the ADT-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestAdtQcFiltersResults.html) for details.\n *\n * @external SuggestAdtQcFiltersResults\n */\n\n/**\n * This step applies quality control on the ADT count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellAdtQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellAdtQcMetrics)\n * and [`suggestAdtQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestAdtQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class AdtQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"ADT\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestAdtQcFiltersResults} Result of filtering on the ADT-derived QC metrics.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellAdtQcMetricsResults} ADT-derived QC metrics,\n     * available after running {@linkcode AdtQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults() {\n        return {\n            automatic: true,\n            tag_id_column: null,\n            igg_prefix: \"IgG\",\n            nmads: 3,\n            min_detected_drop: 0.1\n        };\n    }\n\n    static configureFeatureParameters(lower_igg, annotations) {\n        let counter = val => {\n            let n = 0;\n            val.forEach(x => {\n                if (x.toLowerCase().startsWith(lower_igg)) {\n                    n++;\n                }\n            });\n            return n;\n        };\n\n        let best_key = null;\n        let best = 0;\n\n        let rn = annotations.rowNames();\n        if (rn !== null) {\n            best = counter(rn);\n        }\n\n        for (const key of annotations.columnNames()) {\n            let latest = counter(annotations.column(key));\n            if (latest > best) {\n                best_key = key;\n                best = latest;\n            }\n        }\n\n        return best_key;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     * \n     * @param {object} parameters - Parameter object, equivalent to the `adt_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotations. \n     * Specifically, `tag_id_column` is set to the column with the most matches to `igg_prefix`.\n     * @param {?(string|number)} parameters.tag_id_column - Name or index of the column of the feature annotations that contains the tag identifiers.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.igg_prefix - Prefix of the identifiers for isotype controls.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     * @param {number} parameters.min_detected_drop - Minimum proportional drop in the number of detected features before a cell is to be considered low-quality.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { igg_prefix, nmads, min_detected_drop } = parameters;\n        this.changed = false;\n\n        let automatic;\n        let tag_id_column; \n        if (\"automatic\" in parameters) {\n            automatic = parameters.automatic;\n            tag_id_column = parameters.tag_id_column;\n        } else {\n            automatic = true;\n            tag_id_column = null;\n        }\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            igg_prefix !== this.#parameters.igg_prefix ||\n            (!automatic && tag_id_column !== this.#parameters.tag_id_column)\n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var tag_info = this.#inputs.fetchFeatureAnnotations()[\"ADT\"];\n                var subsets = utils.allocateCachedArray(tag_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (igg_prefix !== null) {\n                    var lower_igg = igg_prefix.toLowerCase();\n                    let key = tag_id_column;\n                    if (automatic) {\n                        key = AdtQualityControlState.configureFeatureParameters(lower_igg, tag_info);\n                    }\n\n                    let val = (key == null ? tag_info.rowNames() : tag_info.column(key));\n                    if (val !== null) {\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => { \n                            if (x.toLowerCase().startsWith(lower_igg)) {\n                                sub_arr[i] = 1;                        \n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"ADT\");\n                this.#cache.metrics = scran.perCellAdtQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.tag_id_column = tag_id_column;\n        this.#parameters.igg_prefix = igg_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads || min_detected_drop !== this.#parameters.min_detected_drop) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestAdtQcFilters(this.#cache.metrics, { numberOfMADs: nmads, minDetectedDrop: min_detected_drop, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n            this.#parameters.min_detected_drop = min_detected_drop;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = AdtQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.igg_prefix = phandle.open(\"igg_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n        parameters.min_detected_drop = phandle.open(\"min_detected_drop\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellAdtQcMetricsResults(detected.length, 1);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n                let igg_total = mhandle.open(\"igg_total\", { load: true }).values;\n                cache.metrics.subsetTotals(0, { fillable: true }).set(igg_total);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n                let thresholds_igg_total = thandle.open(\"igg_total\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestAdtQcFiltersResults(1, thresholds_detected.length);\n                cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n                cache.filters.thresholdsSubsetTotals(0, { fillable: true }).set(thresholds_igg_total);\n            }\n\n            output = new AdtQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        output = new AdtQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as combine_module from \"./combine_embeddings.js\";\n\nexport const step_name = \"batch_correction\";\n\n/**\n * Correct for batch effects in PC space based on mutual nearest neighbors.\n * This wraps the [`mnnCorrect`](https://kanaverse.github.io/scran.js/global.html#mnnCorrect) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class BatchCorrectionState {\n    #filter;\n    #combined;\n    #parameters;\n    #cache;\n\n    constructor(filter, combined, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(combined instanceof combine_module.CombineEmbeddingsState)) {\n            throw new Error(\"'pca' should be a CombineEmbeddingsState object\");\n        }\n        this.#combined = combined;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.corrected);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the batch-corrected embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode BatchCorrectionState#compute compute}.\n     */\n    fetchCorrected() {\n        return this.#cache.corrected;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfCells() {\n        return this.#combined.fetchNumberOfCells();\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode BatchCorrectionState#fetchCorrected fetchCorrected}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#combined.fetchNumberOfDimensions();\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `batch_correction` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - The correction method to use.\n     * Currently this can be either `\"mnn\"` or `\"none\"`.\n     * If `\"mnn\"`, it is recommended that upstream PCA steps (i.e., {@linkplain RnaPcaState} and {@linkplain AdtPcaState}) use `block_method = \"weight\"`.\n     * @param {number} parameters.num_neighbors - Number of neighbors to use during MNN correction.\n     * @param {boolean} parameters.approximate - Whether to use an approximate method to identify MNNs.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { method, num_neighbors, approximate} = parameters;\n        this.changed = false;\n\n        if (this.#filter.changed || this.#combined.changed) {\n            this.changed = true;\n        }\n        let block = this.#filter.fetchFilteredBlock();\n        let needs_correction = (method == \"mnn\" && block !== null);\n\n        if (this.changed || method !== this.#parameters.method || num_neighbors !== this.#parameters.num_neighbors || approximate !== this.#parameters.approximate) { \n            if (needs_correction) {\n                let pcs = this.#combined.fetchCombined();\n                let corrected = utils.allocateCachedArray(pcs.length, \"Float64Array\", this.#cache, \"corrected\");\n                scran.mnnCorrect(pcs, block, { \n                    k: num_neighbors, \n                    buffer: corrected, \n                    numberOfCells: this.#combined.fetchNumberOfCells(), \n                    numberOfDims: this.#combined.fetchNumberOfDimensions(), \n                    approximate: approximate \n                });\n                this.changed = true;\n            }\n        }\n\n        if (this.changed) {\n            // If no correction is actually required, we shouldn't respond to\n            // changes in parameters, because they won't have any effect.\n            if (!needs_correction) {\n                utils.freeCache(this.#cache.corrected);\n                this.#cache.corrected = this.#combined.fetchCombined().view();\n            }\n        }\n\n        // Updating all parameters, even if they weren't used.\n        this.#parameters.method = method;\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.approximate = approximate;\n        return;\n    }\n\n    static defaults() {\n        return {\n            method: \"mnn\",\n            num_neighbors: 15,\n            approximate: true\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, combined) {\n    let cache = {};\n    let parameters = BatchCorrectionState.defaults();\n    let output;\n    \n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.method = phandle.open(\"method\", { load: true }).values[0];\n        parameters.num_neighbors = phandle.open(\"num_neighbors\", { load: true }).values[0];\n        parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"corrected\" in rhandle.children) {\n                let corrected = rhandle.open(\"corrected\", { load: true }).values;\n                cache.corrected = scran.createFloat64WasmArray(corrected.length);\n                cache.corrected.set(corrected);\n            } else {\n                // Creating a view from the upstream combined state.\n                let pcs = combined.fetchCombined();\n                cache.corrected = pcs.view();\n            }\n\n            output = new BatchCorrectionState(filter, combined, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.corrected);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback for v1.\n        let ghandle = handle.open(\"pca\");\n\n        let rhandle = ghandle.open(\"results\");\n        if (\"corrected\" in rhandle.children) {\n            let corrected = rhandle.open(\"corrected\", { load: true }).values;\n            let corbuffer = utils.allocateCachedArray(corrected.length, \"Float64Array\", cache, \"corrected\");\n            corbuffer.set(corrected);\n        } else {\n            cache.corrected = combined.fetchCombined().view();\n        }\n\n        output = new BatchCorrectionState(filter, combined, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as rna_qc_module from \"./rna_quality_control.js\";\nimport * as adt_qc_module from \"./adt_quality_control.js\";\nimport * as crispr_qc_module from \"./crispr_quality_control.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"cell_filtering\";\n\nfunction find_usable_upstream_states(qc_states, in_use) {\n    let tmp = utils.findValidUpstreamStates(qc_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (in_use[k]) {\n            to_use.push(qc_states[k]);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step filters the count matrices to remove low-quality cells,\n * based on metrics and thresholds computed in {@linkplain RnaQualityControlState} and friends.\n * It wraps the [`filterCells`](https://kanaverse.github.io/scran.js/global.html#filterCells) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * For multi-modal datasets, this can combine quality calls from all valid modalities; \n * a cell is removed if it is considered low-quality in any individual modality.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellFilteringState {\n    #inputs;\n    #qc_states;\n    #cache;\n    #parameters;\n\n    constructor(inputs, qc_states, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        if (!(qc_states.RNA instanceof rna_qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc_states.RNA' should be a RnaQualityControlState object\");\n        }\n        if (!(qc_states.ADT instanceof adt_qc_module.AdtQualityControlState)) {\n            throw new Error(\"'qc_states.ADT' should be a AdtQualityControlState object\");\n        }\n        if (!(qc_states.CRISPR instanceof crispr_qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc_states.CRISPR' should be a CrisprQualityControlState object\");\n        }\n        this.#qc_states = qc_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.block_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {external:MultiMatrix} A {@linkplain external:MultiMatrix MultiMatrix} object containing the filtered and normalized matrices for all modalities,\n     * available after running {@linkcode CellFilteringState#compute compute}.\n     */\n    fetchFilteredMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute_matrix();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Int32WasmArray} Array of length equal to the number of cells after filtering, \n     * containing the block assignment for each cell.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null` if no blocks are present in the dataset.\n     */\n    fetchFilteredBlock() {\n        if (!(\"block_buffer\" in this.#cache)) {\n            this.#raw_compute_block();\n        }\n        return this.#cache.block_buffer;\n    }\n\n    /**\n     * @return {?Uint8WasmArray} Combined discard vector, i.e., an array of length equal to the number of cells in the dataset,\n     * indicating whether each cell should be removed.\n     * This is available after running {@linkcode CellFilteringState#compute compute}.\n     * Alternatively `null`, if no upstream filtering steps were performed.\n     */\n    fetchDiscards() {\n        if (\"discard_buffer\" in this.#cache) {\n            return this.#cache.discard_buffer;\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute_matrix() {\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = new scran.MultiMatrix;\n\n        let inputs = this.#inputs.fetchCountMatrix();\n        for (const a of inputs.available()) {\n            let src = inputs.get(a);\n\n            let sub;\n            if (\"discard_buffer\" in this.#cache) {\n                sub = scran.filterCells(src, this.#cache.discard_buffer);\n            } else {\n                sub = src.clone();\n            }\n\n            this.#cache.matrix.add(a, sub);\n        }\n    }\n\n    #raw_compute_block() {\n        utils.freeCache(this.#cache.block_buffer);\n\n        let block = this.#inputs.fetchBlock();\n        if (block !== null) {\n            if (\"discard_buffer\" in this.#cache) {\n                // Filtering on the block. Might as well force a load of the\n                // matrix, it'll be needed once we have the blocks anyway.\n                let filtered_ncols = this.fetchFilteredMatrix().numberOfColumns();\n                let bcache = utils.allocateCachedArray(filtered_ncols, \"Int32Array\", this.#cache, \"block_buffer\");\n                scran.filterBlock(block, this.#cache.discard_buffer, { buffer: bcache });\n            } else {\n                this.#cache.block_buffer = block.view();\n            }\n        } else {\n            this.#cache.block_buffer = null;\n        }\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `cell_filtering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.use_rna - Whether to use the RNA-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_adt - Whether to use the ADT-derived QC metrics for filtering.\n     * @param {boolean} parameters.use_crispr - Whether to use the CRISPR-derived QC metrics for filtering.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { use_rna, use_adt, use_crispr } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            this.changed = true;\n        }\n\n        if (this.#parameters.use_rna !== use_rna || this.#parameters.use_adt !== use_adt || this.#parameters.use_crispr !== use_crispr) {\n            this.#parameters.use_rna = use_rna;\n            this.#parameters.use_adt = use_adt;\n            this.#parameters.use_crispr = use_crispr;\n            this.changed = true;\n        }\n\n        let to_use = find_usable_upstream_states(this.#qc_states, { RNA: use_rna, ADT: use_adt, CRISPR: use_crispr });\n        if (!this.changed) {\n            for (const u of to_use) {\n                if (u.changed) {\n                    this.changed = true;\n                    break;\n                }\n            }\n        }\n\n        if (this.changed) {\n            if (to_use.length > 0) {\n                let first = to_use[0].fetchDiscards();\n\n                if (to_use.length > 1) {\n                    // A discard signal in any modality causes the cell to be removed. \n                    let disc_buffer = utils.allocateCachedArray(first.length, \"Uint8Array\", this.#cache, \"discard_buffer\");\n                    disc_buffer.fill(0);\n\n                    let disc_arr = disc_buffer.array();\n                    for (const u of to_use) {\n                        u.fetchDiscards().forEach((y, i) => { disc_arr[i] |= y; });\n                    }\n                } else {\n                    // If there's only one valid modality, we just create a view on it\n                    // to avoid unnecessary duplication.\n                    utils.freeCache(this.#cache.discard_buffer);\n                    this.#cache.discard_buffer = first.view();\n                }\n\n            } else {\n                // Deleting this so that serialization will behave correctly.\n                utils.freeCache(this.#cache.discard_buffer);\n                delete this.#cache.discard_buffer;\n            }\n\n            this.#raw_compute_matrix();\n            this.#raw_compute_block();\n        }\n    }\n\n    static defaults() {\n        return {\n            use_rna: true,\n            use_adt: true,\n            use_crispr: true\n        };\n    }\n\n    /**\n     * Apply the same filter to an array of data for each cell in the unfiltered dataset.\n     * Any calls to this method should be done after running {@linkcode CellFilteringState#compute compute}.\n     *\n     * @param {Array|TypedArray} Any array-like object of length equal to the number of cells in the unfiltered dataset.\n     * \n     * @return {Array|TypedArray} An array-like object of the same type as `x`,\n     * where all elements corresponding to low-quality cells have been discarded.\n     * This will have number of columns equal to that of {@linkcode CellFilteringState#fetchFilteredMatrix fetchFilteredMatrix}.\n     */\n    applyFilter(x) {\n        let expect_len = this.#inputs.fetchCountMatrix().numberOfColumns();\n        if (expect_len != x.length) {\n            throw new Error(\"length of 'x' should be equal to the number of cells in the unfiltered dataset\");\n        }\n\n        if (!(\"discard_buffer\" in this.#cache)) {\n            return x.slice(); // making a copy.\n        } else {\n            let discard = this.#cache.discard_buffer.array();\n            return x.filter((y, i) => !discard[i]);\n        }\n    }\n\n    /**\n     * Undo the effect of filtering on an array of indices.\n     * This is primarily useful for adjusting indices from downstream steps \n     * (e.g., {@linkcode CustomSelectionsState#fetchSelectionIndices CustomSelectionsState.fetchSelectionIndices})\n     * so that it can be used in {@linkcode subsetInputs}.\n     *\n     * @param {Array|TypedArray} indices - Array of column indices to the filtered matrix.\n     * Note that this will be modified in-place.\n     *\n     * @return Entries of `indices` are replaced with indices to the unfiltered matrix.\n     */\n    undoFilter(indices) {\n        let max_index = this.fetchFilteredMatrix().numberOfColumns();\n        for (const x of indices) {\n            if (x < 0 || x >= max_index) {\n                throw new Error(\"entries of 'indices' should be less than the number of cells in the filtered dataset\");\n            }\n        }\n\n        if (!('discard_buffer' in this.#cache)) {\n            return;\n        }\n\n        let keep = [];\n        this.#cache.discard_buffer.forEach((x, i) => {\n            if (x == 0) {\n                keep.push(i);\n            }\n        });\n\n        indices.forEach((x, i) => {\n            indices[i] = keep[x];\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, qc_states) {\n    let parameters = CellFilteringState.defaults();\n    let cache = {};\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            if (\"parameters\" in ghandle.children) {\n                let phandle = ghandle.open(\"parameters\");\n                if (\"use_rna\" in phandle.children) {\n                    parameters.use_rna = phandle.open(\"use_rna\", { load: true }).values[0] > 0;\n                    parameters.use_adt = phandle.open(\"use_adt\", { load: true }).values[0] > 0;\n                    parameters.use_crispr = phandle.open(\"use_crispr\", { load: true }).values[0] > 0;\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"discards\" in rhandle.children) {\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n            }\n        } \n\n        if (!(\"discard_buffer\" in cache)) {\n            let to_use = find_usable_upstream_states(qc_states, { RNA: parameters.use_rna, ADT: parameters.use_adt, CRISPR: parameters.use_crispr });\n\n            if (to_use.length == 1) {\n                // We figure out which upstream QC state contains the discard vector\n                // and create a view on it so that our discard_buffer checks work properly.\n                // (v1 and earlier also implicitly falls in this category.)\n                cache.discard_buffer = to_use[0].fetchDiscards().view();\n            } else if (to_use.length == 0) {\n                // No-op; we don't need to define discard_buffer.\n                ;\n            } else {\n                throw new Error(\"no more than one upstream QC state should be valid if 'discards' is not available\");\n            }\n        }\n\n        output = new CellFilteringState(inputs, qc_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.discard_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import * as scran from \"scran.js\";\nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as rutils from \"../readers/index.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as markers_module from \"./marker_detection.js\";\n\nconst baseUrl = \"https://github.com/LTLA/singlepp-references/releases/download/v2.0.0\";\n\nexport const step_name = \"cell_labelling\";\n\n/**\n * Cell labelling involves assigning cell type labels to clusters using the [**SingleR** algorithm](https://github.com/LTLA/CppSingleR),\n * based on [pre-formatted reference expression profiles](https://github.com/clusterfork/singlepp-references).\n * This wraps [`labelCells`](https://kanaverse.github.io/scran.js/global.html#labelCells)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * In theory, we could do this at the single-cell level, but we use clusters instead to expedite the computation and simplify interpretation.\n * If multiple references are requested, we will use each for assignment before attempting to choose the best label for each cluster across references.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CellLabellingState {\n    #inputs;\n    #markers;\n    #parameters;\n    #cache;\n\n    constructor(inputs, markers, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        if (!(markers instanceof markers_module.MarkerDetectionState)) {\n            throw new Error(\"'markers' should be a State object from './marker_detection.js'\");\n        }\n        this.#markers = markers;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    #flush_prepared() {\n        if (\"prepared\" in this.#cache) {\n            for (const v of Object.values(this.#cache.prepared)) {\n                v.built.raw.free();\n            }\n            delete this.#cache.prepared;\n        }\n    }\n\n    free() {\n        utils.freeCache(this.#cache.buffer);\n        this.#flush_prepared();\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let mat = this.#inputs.fetchCountMatrix();\n        return mat.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        let out = { ...this.#parameters };\n        out.references = bioc.CLONE(out.references);\n        out.species = bioc.CLONE(out.species);\n        return out;\n    }\n\n    /**\n     * @return {object} An object containing:\n     *\n     * - `per_reference`: an object where keys are the reference names and the values are arrays of strings.\n     *   Each array is of length equal to the number of clusters and contains the cell type classification for each cluster.\n     * - `integrated`: an array of length equal to the number of clusters.\n     *   Each element is a string specifying the name of the reference with the best label for each cluster.\n     *   Only available if multiple references are requested.\n     *\n     * This is available after running {@linkcode CellLabellingState#compute compute}.\n     */\n    fetchResults() {\n        // No real need to clone these, they're string arrays\n        // so they can't be transferred anyway.\n        let perref = {};\n        for (const [key, val] of Object.entries(this.#cache.results)) {\n            perref[key] = val;\n        }\n\n        let output = { \"per_reference\": perref };\n        if (\"integrated_results\" in this.#cache) {\n            output.integrated = this.#cache.integrated_results;\n        }\n\n        return output;\n    }\n\n    /**\n     * @return {object} Object where each key is the name of a reference and each value is the number of shared features between the test and reference daatasets.\n     */\n    fetchNumberOfSharedFeatures() {\n        let output = {};\n        for (const key of Object.keys(this.#cache.results)) {\n            output[key] = this.#cache.prepared[key].built.raw.sharedFeatures();\n        }\n        return output;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults() {\n        return {\n            references: [],\n            automatic: true,\n            species: [],\n            gene_id_column: null,\n            gene_id_type: \"ENSEMBL\"\n        };\n    }\n\n    static configureFeatureParameters(guesses) {\n        let best_key = null;\n        let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n        if (\"row_names\" in guesses) {\n            let val = guesses.row_names;\n            if (val.confidence > best.confidence) {\n                best = val;\n            }\n        }\n\n        for (const [key, val] of Object.entries(guesses.columns)) {\n           if (val.confidence > best.confidence) {\n                best = val;\n                best_key = key;\n            }\n        }\n\n        return {\n            gene_id_column: best_key,\n            species: [best.species],\n            gene_id_type: best.type.toUpperCase()\n        };\n    }\n\n    /**\n     * Available references for each species.\n     * Each key is a taxonomy ID and each value is an array of strings containing the names of references for that species.\n     * @type {object}\n     */\n    static availableReferences = {\n        \"9606\": [ \"BlueprintEncode\", \"DatabaseImmuneCellExpression\", \"HumanPrimaryCellAtlas\", \"MonacoImmune\", \"NovershternHematopoietic\" ],\n        \"10090\": [ \"ImmGen\", \"MouseRNAseq\" ]\n    };\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    async #load_reference(name) {\n        let all_loaded = CellLabellingState.#all_loaded;\n        if (name in all_loaded) {\n            return;\n        }\n\n        const suffixes = [ \n            \"genes.csv.gz\",\n            \"labels_fine.csv.gz\",\n            \"label_names_fine.csv.gz\",\n            \"markers_fine.gmt.gz\",\n            \"matrix.csv.gz\"\n        ];\n\n        let contents = await Promise.all(\n            suffixes.map(\n                async suffix => {\n                    let full = name + \"_\" + suffix;\n                    let b = await CellLabellingState.#downloadFun(baseUrl + \"/\" + full);\n                    return new rutils.SimpleFile(b, { name: full })\n                }\n            )\n        );\n\n        let loaded;\n        try {\n            loaded = scran.loadLabelledReferenceFromBuffers(\n                contents[4].buffer(), // rank matrix\n                contents[3].buffer(), // markers\n                contents[1].buffer()  // label per sample\n            );\n\n            let gene_lines = await rutils.readLines2(contents[0].content(), { compression: \"gz\" }); // gene names\n            let ensembl = [];\n            let symbol = [];\n            let entrez = [];\n            let empty2null = x => (x == \"\" ? null : x);\n\n            gene_lines.forEach(x => {\n                let fields = x.split(\",\");\n                ensembl.push(empty2null(fields[0]));\n                symbol.push(empty2null(fields[1]));\n                entrez.push(empty2null(fields[2]));\n            });\n\n            let labels = await rutils.readLines2(contents[2].content(), { compression: \"gz\" }); // full label names\n            all_loaded[name] = { \n                \"raw\": loaded, \n                \"genes\": {\n                    \"ENSEMBL\": ensembl,\n                    \"SYMBOL\": symbol,\n                    \"ENTREZ\": entrez\n                },\n                \"labels\": labels\n            };\n\n        } catch (e) {\n            utils.freeCache(loaded);\n            throw e;\n        }\n    }\n\n    static #all_loaded = {};\n\n    /**\n     * Flush all cached references.\n     *\n     * By default, {@linkcode CellLabellingState#compute compute} will cache the loaded references in a static member for re-use across {@linkplain CellLabellingState} instances.\n     * These cached references are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        for (const [k, v] of Object.entries(CellLabellingState.#all_loaded)) {\n            v.raw.free();\n        }\n        CellLabellingState.#all_loaded = {};\n        return;\n    }\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * Specify a function to download references for the cell labelling step.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step. \n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        let previous = CellLabellingState.#downloadFun;\n        CellLabellingState.#downloadFun = fun;\n        return previous;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #build_reference(name, gene_ids, gene_id_type) {\n        let built;\n        let output;\n        try {\n            let current = CellLabellingState.#all_loaded[name];\n            let loaded = current.raw;\n\n            if (!(gene_id_type in current.genes)) {\n                throw new Error(\"unknown gene type '\" + gene_id_type + \"'\");\n            }\n            let chosen_ids = current.genes[gene_id_type];\n\n            built = scran.buildLabelledReference(gene_ids, loaded, chosen_ids); \n            output = {\n                \"loaded\": current,\n                \"built\": {\n                    \"features\": chosen_ids,\n                    \"raw\": built\n                }\n            };\n\n        } catch (e) {\n            utils.freeCache(built);\n            throw e;\n        }\n\n        return output;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `cell_labelling` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {Array} parameters.references - Array of strings specifying the names of the reference datasets, see {@linkcode CellLabellingState.availableReferences availableReferences} for more details.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If `true`, the column of the annotation that best matches human/mouse Ensembl/symbols is identified and used to set `species`, `gene_id_column` and `gene_id_type`.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species involved in this dataset.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode CellLabellingState.availableReferences availableReferences}.\n     * This is used internally to filter `references` to the entries relevant to these species. \n     * Ignored if `automatic = true`.\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the RNA entry of {@linkcode InputsState#fetchFeatureAnnotations InputsState.fetchFeatureAnnotations} containing the identity of each gene. \n     * If `null`, identifiers are taken from the row names.\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Type of feature identifier in `gene_id_column`.\n     * This should be one of `\"ENSEMBL\"`, `\"SYMBOL\"` or `\"ENTREZ\"`\n     * Ignored if `automatic = true`.\n     *\n     * @return The object is updated with the new results.\n     * @async\n     */\n    async compute(parameters) {\n        let references;\n        let automatic;\n        let species;\n        let gene_id_column;\n        let gene_id_type;\n\n        if (\"references\" in parameters) {\n            references = parameters.references;\n            automatic = parameters.automatic;\n            species = parameters.species;\n            gene_id_column = parameters.gene_id_column;\n            gene_id_type = parameters.gene_id_type;\n        } else {\n            references = [ ...(parameters.human_references), ...(parameters.mouse_references) ];\n            automatic = true;\n            let def = CellLabellingState.defaults();\n            species = def.species;\n            gene_id_column = def.gene_id_column;\n            gene_id_type = def.gene_id_type;\n        }\n\n        this.changed = false;\n\n        if (this.valid()) {\n            // Gathering the references.\n            if (\n                this.#inputs.changed ||\n                automatic !== this.#parameters.automatic ||\n                utils.changedParameters(references, this.#parameters.references) ||\n                (\n                    !automatic &&\n                    (\n                        species !== this.#parameters.species ||\n                        gene_id_column !== this.#parameters.gene_id_column ||\n                        gene_id_type !== this.#parameters.gene_id_type\n                    )\n                )\n            ) {\n                let species2 = species;\n                let gene_id_column2 = gene_id_column;\n                let gene_id_type2 = gene_id_type;\n\n                if (automatic) {\n                    let guesses = this.#inputs.guessRnaFeatureTypes();\n                    let auto = CellLabellingState.configureFeatureParameters(guesses);\n                    species2 = auto.species;\n                    gene_id_column2 = auto.gene_id_column;\n                    gene_id_type2 = auto.gene_id_type;\n                }\n\n                let allowable = new Set;\n                for (const s of species2) {\n                    if (s in CellLabellingState.availableReferences) {\n                        CellLabellingState.availableReferences[s].forEach(x => { allowable.add(x); });\n                    }\n                }\n\n                // Building each individual reference.\n                let feats = this.#inputs.fetchFeatureAnnotations()[\"RNA\"];\n                let gene_ids = (gene_id_column2 == null ? feats.rowNames() : feats.column(gene_id_column2));\n                this.#cache.gene_ids = gene_ids;\n\n                let valid = {};\n                if (gene_ids !== null) {\n                    for (const ref of references) {\n                        if (allowable.has(ref)) {\n                            await this.#load_reference(ref);\n                            valid[ref] = this.#build_reference(ref, gene_ids, gene_id_type2);\n                        }\n                    }\n                }\n\n                this.#flush_prepared();\n                this.#cache.prepared = valid;\n\n                // Building an integrated reference, if necessary.\n                let used_refs = Object.keys(valid);\n                if (used_refs.length > 1) {\n                    let arr = Object.values(valid);\n                    let loaded = arr.map(x => x.loaded.raw);\n                    let feats = arr.map(x => x.built.features);\n                    let built = arr.map(x => x.built.raw);\n\n                    utils.freeCache(this.#cache.integrated);\n                    this.#cache.integrated = scran.integrateLabelledReferences(gene_ids, loaded, feats, built);\n                } else {\n                    utils.freeCache(this.#cache.integrated);\n                    delete this.#cache.integrated;\n                }\n                this.#cache.used_refs = used_refs;\n\n                this.changed = true;\n            }\n\n            let marker_results = this.#markers.fetchResults()[\"RNA\"];\n            let ngroups = marker_results.numberOfGroups();\n            let ngenes = (this.#cache.gene_ids !== null ? this.#cache.gene_ids.length : null);\n            let cluster_means = this.#cache.buffer;\n\n            if (this.#markers.changed) {\n                if (ngenes !== null) {\n                    // Creating a column-major array of mean vectors for each cluster.\n                    cluster_means = utils.allocateCachedArray(ngroups * ngenes, \"Float64Array\", this.#cache);\n                    for (var g = 0; g < ngroups; g++) {\n                        let means = marker_results.means(g, { copy: false }); // Warning: direct view in wasm space - be careful.\n                        let cluster_array = cluster_means.array();\n                        cluster_array.set(means, g * ngenes);\n                    }\n                }\n                this.changed = true;\n            }\n\n            if (this.changed) {\n                // Running classifications on the cluster means. This is a\n                // no-op if gene_ids = null as 'valid' should be empty.\n                let valid = this.#cache.prepared;\n\n                this.#cache.results = {};\n                for (const [key, ref] of Object.entries(valid)) {\n                    let output = scran.labelCells(cluster_means, ref.built.raw, { numberOfFeatures: ngenes, numberOfCells: ngroups });\n                    let labels = [];\n                    for (const o of output) {\n                        labels.push(ref.loaded.labels[o]);\n                    }\n                    this.#cache.results[key] = labels;\n                }\n\n                // Performing additional integration, if necessary. \n                if (\"integrated\" in this.#cache) {\n                    let results = [];\n                    for (const key of this.#cache.used_refs) {\n                        results.push(this.#cache.results[key]);\n                    }\n\n                    let out = scran.integrateCellLabels(cluster_means, results, this.#cache.integrated, { numberOfFeatures: ngenes, numberOfCells: ngroups });\n                    let as_names = [];\n                    out.forEach(i => {\n                        as_names.push(this.#cache.used_refs[i]);\n                    });\n                    this.#cache.integrated_results = as_names;\n                } else {\n                    delete this.#cache.integrated_results;\n                }\n            }\n        } else {\n            this.#cache.results = {};\n            delete this.#cache.integrated_results;\n        }\n\n        this.#parameters.references = bioc.CLONE(references); // make a copy to avoid pass-by-reference behavior.\n        this.#parameters.automatic = automatic;\n        this.#parameters.species = bioc.CLONE(species);\n        this.#parameters.gene_id_column = gene_id_column;\n        this.#parameters.gene_id_type = gene_id_type;\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs, markers) {\n    let parameters =  {\n        mouse_references: [],\n        human_references: []\n    };\n    let cache = { results: {} };\n\n    // Protect against old analysis states that don't have cell_labelling.\n    if (\"cell_labelling\" in handle.children) {\n        let ghandle = handle.open(\"cell_labelling\");\n        \n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.mouse_references = phandle.open(\"mouse_references\", { load: true }).values;\n            parameters.human_references = phandle.open(\"human_references\", { load: true }).values;\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"per_reference\" in rhandle.children) {\n                let perhandle = rhandle.open(\"per_reference\");\n                for (const key of Object.keys(perhandle.children)) {\n                    cache.results[key] = perhandle.open(key, { load: true }).values;\n                }\n                if (\"integrated\" in rhandle.children) {\n                    cache.integrated_results = rhandle.open(\"integrated\", { load: true }).values;\n                }\n            }\n        }\n    }\n\n    return new CellLabellingState(inputs, markers, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as snn_module from \"./snn_graph_cluster.js\";\nimport * as kmeans_module from \"./kmeans_cluster.js\";\n\n/**\n * This step chooses between the k-means and SNN graph clusterings from {@linkplain KmeansClusterState} and {@linkplain SnnGraphClusterState}, respectively.\n * We added this step to preserve the cache for each clustering step - \n * specifically, each clustering does not need to be recomputed when a user changes their choice.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class ChooseClusteringState {\n    #snn_cluster;\n    #kmeans_cluster;\n    #parameters;\n    #cache;\n\n    constructor(snn, kmeans, parameters = null, cache = null) {\n        if (!(snn instanceof snn_module.SnnGraphClusterState)) {\n            throw new Error(\"'snn' should be a State object from './snn_graph_cluster.js'\");\n        }\n        this.#snn_cluster = snn;\n\n        if (!(kmeans instanceof kmeans_module.KmeansClusterState)) {\n            throw new Error(\"'kmeans' should be a State object from './kmeans_cluster.js'\");\n        }\n        this.#kmeans_cluster = kmeans;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {}\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode ChooseClusteringState#compute compute}.\n     */\n    fetchClusters() {\n        if (this.#parameters.method == \"snn_graph\") {\n            return this.#snn_cluster.fetchClusters();\n        } else if (this.#parameters.method == \"kmeans\") {\n            return this.#kmeans_cluster.fetchClusters();\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {string} parameters.method - Clustering method to use, either `\"kmeans\"` or `\"snn_graph\"`.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { method } = parameters;\n        this.changed = true;\n        \n        if (method == this.#parameters.method) {\n            if (method == \"snn_graph\") {\n                if (!this.#snn_cluster.changed) {\n                    this.changed = false;\n                }\n            } else if (method == \"kmeans\") {\n                if (!this.#kmeans_cluster.changed) {\n                    this.changed = false;\n                }\n            }\n        }\n\n        this.#parameters.method = method;\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, snn, kmeans) {\n    let ghandle = handle.open(\"choose_clustering\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            method: phandle.open(\"method\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    return new ChooseClusteringState(snn, kmeans, parameters, cache);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as rna_pca_module from \"./rna_pca.js\";\nimport * as adt_pca_module from \"./adt_pca.js\";\nimport * as crispr_pca_module from \"./crispr_pca.js\";\n\nexport const step_name = \"combine_embeddings\";\n\nfunction find_nonzero_upstream_states(pca_states, weights) {\n    let tmp = utils.findValidUpstreamStates(pca_states);\n    let to_use = [];\n    for (const k of tmp) {\n        if (weights[k] > 0) {\n            to_use.push(k);\n        }\n    }\n    return to_use;\n}\n\n/**\n * This step combines multiple embeddings from different modalities into a single matrix for downstream analysis.\n * It wraps the [`scaleByNeighbors`](https://kanaverse.github.io/scran.js/global.html#scaleByNeighbors) function\n * from [**scran.js**](https://kanaverse.github.io/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CombineEmbeddingsState {\n    #pca_states;\n    #parameters;\n    #cache;\n\n    constructor(pca_states, parameters = null, cache = null) {\n        if (!(pca_states.RNA instanceof rna_pca_module.RnaPcaState)) {\n            throw new Error(\"'pca_states.RNA' should be an RnaPcaState object\");\n        }\n        if (!(pca_states.ADT instanceof adt_pca_module.AdtPcaState)) {\n            throw new Error(\"'pca_states.ADT' should be an AdtPcaState object\");\n        }\n        if (!(pca_states.CRISPR instanceof crispr_pca_module.CrisprPcaState)) {\n            throw new Error(\"'pca_states.CRISPR' should be an CrisprPcaState object\");\n        }\n        this.#pca_states = pca_states;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.combined_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Float64WasmArray} Buffer containing the combined embeddings as a column-major dense matrix,\n     * where the rows are the dimensions and the columns are the cells.\n     * This is available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchCombined() {\n        return this.#cache.combined_buffer;\n    }\n\n    /**\n     * @return {number} Number of cells in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfCells() {\n        return this.#cache.num_cells;\n    }\n\n    /**\n     * @return {number} Number of dimensions in {@linkcode CombineEmbeddingsState#fetchCombined fetchCombined},\n     * available after running {@linkcode CombineEmbeddingsState#compute compute}.\n     */\n    fetchNumberOfDimensions() {\n        return this.#cache.total_dims;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        // Avoid any pass-by-reference activity.\n        return { ...this.#parameters };\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return { \n            rna_weight: 1,\n            adt_weight: 1,\n            crispr_weight: 0,\n            approximate: true\n        };\n    }\n\n    static createPcsView(cache, upstream) {\n        utils.freeCache(cache.combined_buffer);\n        cache.combined_buffer = upstream.principalComponents({ copy: \"view\" }).view();\n        cache.num_cells = upstream.numberOfCells();\n        cache.total_dims = upstream.numberOfPCs();\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `adt_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.rna_weight - Relative weight of the RNA embeddings.\n     * @param {number} parameters.adt_weight - Relative weight of the ADT embeddings.\n     * @param {number} parameters.crispr_weight - Relative weight of the CRISPR embeddings.\n     * @param {boolean} parameters.approximate - Whether an approximate nearest neighbor search should be used by `scaleByNeighbors`.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        let { rna_weight, adt_weight, crispr_weight, approximate } = parameters;\n        this.changed = false;\n\n        for (const v of Object.values(this.#pca_states)) {\n            if (v.changed) {\n                this.changed = true;\n                break;\n            }\n        }\n\n        if (approximate !== this.#parameters.approximate) {\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        if (rna_weight !== this.#parameters.rna_weight || adt_weight !== this.#parameters.adt_weight || crispr_weight !== this.#parameters.crispr_weight) {\n            this.#parameters.rna_weight = rna_weight;\n            this.#parameters.adt_weight = adt_weight;\n            this.#parameters.crispr_weight = crispr_weight;\n            this.changed = true;\n        }\n\n        if (this.changed) { \n            const weights = { RNA: rna_weight, ADT: adt_weight, CRISPR: crispr_weight };\n            let to_use = find_nonzero_upstream_states(this.#pca_states, weights);\n\n            if (to_use.length > 1) {\n                let weight_arr = to_use.map(x => weights[x]);\n                let collected = [];\n                let total = 0;\n                let ncells = null;\n\n                for (const k of to_use) {\n                    let curpcs = this.#pca_states[k].fetchPCs();\n                    collected.push(curpcs.principalComponents({ copy: \"view\" }));\n                    if (ncells == null) {\n                        ncells = curpcs.numberOfCells();\n                    } else if (ncells !== curpcs.numberOfCells()) {\n                        throw new Error(\"number of cells should be consistent across all embeddings\");\n                    }\n                    total += curpcs.numberOfPCs();\n                }\n\n                let buffer = utils.allocateCachedArray(ncells * total, \"Float64Array\", this.#cache, \"combined_buffer\");\n                scran.scaleByNeighbors(collected, ncells, { buffer: buffer, weights: weight_arr, approximate: approximate });\n                this.#cache.num_cells = ncells;\n                this.#cache.total_dims = total;\n\n            } else {\n                // If there's only one embedding, we shouldn't respond to changes\n                // in parameters, because they won't have any effect.\n                let pcs = this.#pca_states[to_use[0]].fetchPCs();\n                this.constructor.createPcsView(this.#cache, pcs);\n            }\n        }\n\n        // Updating all parameters anyway. This requires us to take ownership\n        // of 'weights' to avoid pass-by-reference shenanigans.\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca_states) {\n    let cache = {};\n    let parameters = CombineEmbeddingsState.defaults();\n    let output;\n\n    try {\n        if (step_name in handle.children) {\n            let ghandle = handle.open(step_name);\n\n            {\n                let phandle = ghandle.open(\"parameters\");\n                parameters.approximate = phandle.open(\"approximate\", { load: true }).values[0] > 0;\n\n                if ('weights' in phandle.children) { // v2.0\n                    let whandle = phandle.open(\"weights\");\n                    if (\"RNA\" in whandle.children) {\n                        parameters.rna_weight = whandle.open(\"RNA\", { load: true }).values[0];\n                    }\n                    if (\"ADT\" in whandle.children) {\n                        parameters.adt_weight = whandle.open(\"ADT\", { load: true }).values[0];\n                    }\n                    if (\"CRISPR\" in whandle.children) {\n                        parameters.crispr_weight = whandle.open(\"CRISPR\", { load: true }).values[0];\n                    }\n                } else {\n                    parameters.rna_weight = phandle.open(\"rna_weight\", { load: true }).values[0];\n                    parameters.adt_weight = phandle.open(\"adt_weight\", { load: true }).values[0];\n                    parameters.crispr_weight = phandle.open(\"crispr_weight\", { load: true }).values[0];\n                }\n            }\n\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"combined\" in rhandle.children) {\n                let phandle = rhandle.open(\"combined\", { load: true });\n                cache.num_cells = phandle.shape[0];\n                cache.total_dims = phandle.shape[1];\n\n                let vals = phandle.values;\n                cache.combined_buffer = scran.createFloat64WasmArray(vals.length);\n                cache.combined_buffer.set(vals);\n            }\n        }\n\n        if (!(\"combined_buffer\" in cache)) {\n            // This only happens if there was only one upstream PCA state; in which case, \n            // we figure out which upstream PCA state contains the PC vector\n            // and create a view on it so that our fetchPCs() works properly.\n            // (v1 and earlier also implicitly falls in this category.)\n            const weights = { RNA: parameters.rna_weight, ADT: parameters.adt_weight, CRISPR: parameters.crispr_weight };\n            let to_use = find_nonzero_upstream_states(pca_states, weights);\n\n            if (to_use.length != 1) {\n                throw new Error(\"only one upstream PCA state should be valid with non-zero weight if 'combined' is not available\");\n            }\n\n            let pcs = pca_states[to_use[0]].fetchPCs();\n            CombineEmbeddingsState.createPcsView(cache, pcs);\n        }\n\n        output = new CombineEmbeddingsState(pca_states, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.combined_buffer);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./crispr_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"crispr_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered CRISPR count matrix from the {@linkplain CellFilteringState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprNormalizationState {\n    #qc;\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.CrisprQualityControlState)) {\n            throw new Error(\"'qc' should be a CrisprQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.total_buffer);\n        utils.freeCache(this.#cache.centered_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing the normalized CRISPR abundances,\n     * available after running {@linkcode CrisprNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the CRISPR-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"CRISPR\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.#raw_compute();\n                this.changed = true;\n            }\n        } \n\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n\n    /*************************\n     ******** Saving *********\n     *************************/\n\n    serialize(handle) {\n        let ghandle = handle.createGroup(step_name);\n        let phandle = ghandle.createGroup(\"parameters\"); \n        let rhandle = ghandle.createGroup(\"results\"); \n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new CrisprNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"crispr_pca\";\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise CRISPR abundance data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprPcaState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm' should be a CrisprNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized CRISPR abundance matrix,\n     * available after running {@linkcode CrisprPcaState#compute compute}.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be `\"none\"`, `\"regress\"` or `\"weight\"`, see comments in {@linkplain RnaPcaState}.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            if (this.valid()) {\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                utils.freeCache(this.#cache.pcs);\n                this.#cache.pcs = scran.runPCA(mat, { numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm) {\n    let cache = {};\n    let parameters = CrisprPcaState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.num_pcs = phandle.open(\"num_pcs\", { load: true }).values[0];\n        parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"var_exp\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n\n            output = new CrisprPcaState(filter, norm, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.pcs);\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        output = new CrisprPcaState(filter, norm, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\n\nexport const step_name = \"crispr_quality_control\";\n\n/**\n * Results of computing per-cell CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellCrisprQcMetricsResults.html) for details.\n *\n * @external PerCellCrisprQcMetricsResults\n */\n\n/**\n * Suggested filters for the CRISPR-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestCrisprQcFiltersResults.html) for details.\n *\n * @external SuggestCrisprQcFiltersResults\n */\n\n/**\n * This step applies quality control on the CRISPR guide count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellCrisprQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellCrisprQcMetrics)\n * and [`suggestCrisprQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestCrisprQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class CrisprQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be a State object from './inputs.js'\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"CRISPR\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @return {external:SuggestCrisprQcFiltersResults} Result of filtering on the CRISPR-derived QC metrics.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     * This is available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:PerCellCrisprQcMetricsResults} CRISPR-derived QC metrics,\n     * available after running {@linkcode CrisprQualityControlState#compute compute}.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            nmads: 3\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `crispr_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold on the maximum count. \n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { nmads } = parameters;\n        this.changed = false;\n\n        if (this.#inputs.changed) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                var mat = this.#inputs.fetchCountMatrix().get(\"CRISPR\");\n                this.#cache.metrics = scran.perCellCrisprQcMetrics(mat);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestCrisprQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let cache = {};\n    let parameters = CrisprQualityControlState.defaults();\n    let output;\n\n    if (step_name in handle.children) {\n        let ghandle = handle.open(step_name);\n\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n\n        try {\n            let rhandle = ghandle.open(\"results\");\n\n            if (\"metrics\" in rhandle.children) { // if skip=true or valid() is false, QC metrics may not be reported.\n                let mhandle = rhandle.open(\"metrics\");\n\n                let detected = mhandle.open(\"detected\", { load: true }).values;\n                cache.metrics = scran.emptyPerCellCrisprQcMetricsResults(detected.length);\n                cache.metrics.detected({ fillable: true }).set(detected);\n\n                let sums = mhandle.open(\"sums\", { load: true }).values;\n                cache.metrics.sums({ fillable: true }).set(sums);\n\n                let max_prop = mhandle.open(\"max_proportion\", { load: true }).values;\n                cache.metrics.maxProportions({ fillable: true }).set(max_prop);\n\n                let max_index = mhandle.open(\"max_index\", { load: true }).values;\n                cache.metrics.maxIndex({ fillable: true }).set(max_index);\n            }\n\n            if (\"thresholds\" in rhandle.children) { // if skip=true or valid() is false, QC thresholds may not be reported.\n                let discards = rhandle.open(\"discards\", { load: true }).values; \n                cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n                cache.discard_buffer.set(discards);\n\n                let thandle = rhandle.open(\"thresholds\");\n                let thresholds_max_count = thandle.open(\"max_count\", { load: true }).values;\n\n                cache.filters = scran.emptySuggestCrisprQcFiltersResults(thresholds_max_count.length);\n                cache.filters.thresholdsMaxCount({ fillable: true }).set(thresholds_max_count);\n            }\n\n            output = new CrisprQualityControlState(inputs, parameters, cache);\n        } catch (e) {\n            utils.freeCache(cache.metrics);\n            utils.freeCache(cache.filters)\n            utils.freeCache(output);\n            throw e;\n        }\n    } else {\n        // Fallback if the results aren't available. \n        output = new CrisprQualityControlState(inputs, parameters, cache);\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\n\n/**\n * Results of per-gene variance modelling,\n * see [here](https://kanaverse.github.io/scran.js/ModelGeneVarResults.html) for details.\n *\n * @external ModelGeneVarResults\n */\n\n/**\n * Feature selection is performed by modelling the per-gene variance and finding highly variable genes.\n * This wraps the [`modelGeneVar`](https://kanaverse.github.io/scran.js/global.html#modelGeneVar) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class FeatureSelectionState {\n    #filter;\n    #norm;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:ModelGeneVarResults} Variance modelling results,\n     * available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.results;\n    }\n\n    /**\n     * @return {Float64Array} Array of length equal to the number of genes,\n     * containing the sorted residuals after fitting a mean-dependent trend to the variances.\n     * Available after running {@linkcode FeatureSelectionState#compute compute}.\n     */\n    fetchSortedResiduals() {\n        return this.#cache.sorted_residuals;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference activity.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n \n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `feature_selection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.span - Value between 0 and 1 specifying the span for the LOWESS smoother.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { span } = parameters;\n        this.changed = false;\n        \n        if (this.#norm.changed || span != this.#parameters.span) {\n            utils.freeCache(this.#cache.results);\n\n            if (this.valid()) {\n                let mat = this.#norm.fetchNormalizedMatrix();\n                let block = this.#filter.fetchFilteredBlock();\n                this.#cache.results = scran.modelGeneVar(mat, { span: span, block: block });\n\n                this.#cache.sorted_residuals = this.#cache.results.residuals().slice(); // a separate copy.\n                this.#cache.sorted_residuals.sort();\n\n                this.changed = true;\n            }\n\n            this.#parameters.span = span;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, permuter, filter, norm) {\n    let ghandle = handle.open(\"feature_selection\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            span: phandle.open(\"span\", { load: true }).values[0]\n        };\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"means\" in rhandle.children) {\n            // Possibly permuting it to match the new permutation order;\n            // see 'unserialize' in 'inputs.js'.\n            let reloaded = {};\n            for (const key of [ \"means\", \"vars\", \"fitted\", \"resids\" ]) {\n                let value = rhandle.open(key, { load: true }).values;\n                reloaded[key] = permuter(value);\n            }\n\n            cache.results = scran.emptyModelGeneVarResults(reloaded.means.length, 1);\n            cache.results.means({ fillable: true }).set(reloaded.means);\n            cache.results.variances({ fillable: true }).set(reloaded.vars);\n            cache.results.fitted({ fillable: true }).set(reloaded.fitted);\n            cache.results.residuals({ fillable: true }).set(reloaded.resids);\n\n            cache.sorted_residuals = cache.results.residuals({ copy: true });\n            cache.sorted_residuals.sort();\n        }\n    }\n\n    return new FeatureSelectionState(filter, norm, parameters, cache);\n}\n\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\n/**\n * This step performs k-means clustering on the PCs, \n * wrapping the [`clusterKmeans`](https://kanaverse.github.io/scran.js/global.html#clusterKmeans) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class KmeansClusterState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode KmeansClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw new Error(\"cannot fetch k-means clusters from an invalid state\");\n        } else {\n            return this.#cache.raw.clusters({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters };\n    };\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"raw\" in this.#cache;\n    }\n\n    /** \n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `choose_clustering` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of clusters to create.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || k != this.#parameters.k || (!this.#valid() && run_me)) {\n            utils.freeCache(this.#cache.raw);\n\n            if (run_me) {\n                var pcs = this.#correct.fetchCorrected();\n                this.#cache.raw = scran.clusterKmeans(pcs, k, { \n                    numberOfDims: this.#correct.fetchNumberOfDimensions(),\n                    numberOfCells: this.#correct.fetchNumberOfCells(),\n                    initMethod: \"pca-part\" \n                });\n            } else {\n                delete this.#cache.raw; // ensure this step gets re-run later when run_me = true. \n            }\n\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let parameters = {\n        k: 10\n    };\n    let cache = {};\n\n    // Protect against old analysis states that don't have kmeans_cluster.\n    if (\"kmeans_cluster\" in handle.children) {\n        let ghandle = handle.open(\"kmeans_cluster\");\n\n        {\n            let phandle = ghandle.open(\"parameters\");\n            parameters.k = phandle.open(\"k\", { load: true }).values[0];\n        }\n\n        {\n            let rhandle = ghandle.open(\"results\");\n            if (\"clusters\" in rhandle.children) {\n                let clusters = rhandle.open(\"clusters\", { load: true }).values;\n                cache.raw = scran.emptyClusterKmeansResults(clusters.length, parameters.k, pca.fetchNumberOfDimensions());\n                cache.raw.clusters({ fillable: true }).set(clusters);\n            }\n        }\n    }\n\n    return new KmeansClusterState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as markers from \"./utils/markers.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as choice_module from \"./choose_clustering.js\";\nimport * as rna_norm_module from \"./rna_normalization.js\";\nimport * as adt_norm_module from \"./adt_normalization.js\";\nimport * as crispr_norm_module from \"./crispr_normalization.js\";\n\nexport const step_name = \"marker_detection\";\n\n/**\n * Results of marker detection,\n * see [here](https://www.kanaverse.github.io/scran.js/ScoreMarkersResults.html) for details.\n *\n * @external ScoreMarkersResults\n */\n\n/*********************\n ***** Internals *****\n *********************/\n\nfunction _free(cache) {\n    for (const v of Object.values(cache.raw)) {\n        utils.freeCache(v);\n    }\n    cache.raw = {};\n    markers.freeVersusResults(cache.versus);\n    delete cache.versus;\n}\n\nfunction _computeVersus(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n    let cache_info = markers.locateVersusCache(left, right, cache);\n    let left_index = (cache_info.left_small ? 0 : 1);\n    let right_index = (cache_info.left_small ? 1 : 0);\n\n    if (cache_info.run) {\n        let new_clusters = [];\n        let keep = [];\n        let leftfound = false, rightfound = false;\n        clusters.forEach((x, i) => {\n            if (x == left) {\n                new_clusters.push(left_index);\n                keep.push(i);\n                leftfound = true;\n            } else if (x == right) {\n                new_clusters.push(right_index);\n                keep.push(i);\n                rightfound = true;\n            }\n        });\n\n        if (!leftfound || !rightfound) {\n            throw new Error(\"non-zero entries should be present for both requested clusters in versus mode\");\n        }\n\n        markers.computeVersusResults(matrices, new_clusters, block, keep, cache_info.cached, lfc_threshold, compute_auc);\n    }\n\n    return { \n        results: cache_info.cached,\n        left: left_index,\n        right: right_index\n    };\n}\n\n/*****************\n ***** State *****\n *****************/\n\n/**\n * This step performs marker detection for each cluster of cells by performing pairwise comparisons to each other cluster.\n * This wraps the [`scoreMarkers`](https://kanaverse.github.io/scran.js/global.html#scoreMarkers) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * The clustering is obtained from the upstream {@linkplain ChooseClusteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class MarkerDetectionState {\n    #filter;\n    #norm_states;\n    #choice;\n    #parameters;\n    #cache;\n\n    constructor(filter, norm_states, choice, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a State object from './cell_filtering.js'\");\n        }\n        this.#filter = filter;\n\n        if (!(norm_states.RNA instanceof rna_norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm_states.RNA' should be an RnaNormalizationState object\");\n        }\n        if (!(norm_states.ADT instanceof adt_norm_module.AdtNormalizationState)) {\n            throw new Error(\"'norm_states.ADT' should be an AdtNormalizationState object\");\n        }\n        if (!(norm_states.CRISPR instanceof crispr_norm_module.CrisprNormalizationState)) {\n            throw new Error(\"'norm_states.CRISPR' should be an CrisprNormalizationState object\");\n        }\n        this.#norm_states = norm_states;\n\n        if (!(choice instanceof choice_module.ChooseClusteringState)) {\n            throw new Error(\"'choice' should be a State object from './choose_clustering.js'\");\n        }\n        this.#choice = choice;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? { \"raw\": {} } : cache);\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        _free(this.#cache);\n    }\n\n    /**\n     * Obtain the marker detection results for all modalities.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object where each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all clusters.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * Parameters used to compute the results.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `marker_detection` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.lfc_threshold - Log-fold change threshold to use when computing the Cohen's d and AUC for each pairwise comparison.\n     * @param {boolean} parameters.compute_auc - Whether to compute the AUCs.\n     * Setting this to `false` will skip AUC calculations and improve speed and memory efficiency.\n     *\n     * @return The state is updated with new results.\n     */\n    compute(parameters) {\n        let { lfc_threshold, compute_auc } = parameters;\n        this.changed = false;\n        let changed_params = (lfc_threshold !== this.#parameters.lfc_threshold || compute_auc !== this.#parameters.compute_auc);\n        \n        for (const [k, v] of Object.entries(this.#norm_states)) {\n            if (!v.valid()) {\n                continue;\n            }\n\n            if (this.#choice.changed || v.changed || changed_params) {\n                var mat = v.fetchNormalizedMatrix();\n                var clusters = this.#choice.fetchClusters();\n                var block = this.#filter.fetchFilteredBlock();\n                \n                utils.freeCache(this.#cache.raw[k]);\n                this.#cache.raw[k] = scran.scoreMarkers(mat, clusters, { block: block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n\n                this.changed = true;\n            }\n        }\n\n        this.#parameters.lfc_threshold = lfc_threshold;\n        this.#parameters.compute_auc = compute_auc;\n        if (this.changed) {\n            markers.freeVersusResults(this.#cache.versus);\n        }\n\n        return;\n    }\n\n    /**\n     * @return {object} Default parameters that may be modified and fed into {@linkcode MarkerDetectionCore#compute compute}.\n     */\n    static defaults() {\n        return {\n            lfc_threshold: 0,\n            compute_auc: true\n        };\n    }\n\n    // Soft-deprecated.\n    static computeVersusCustom(left, right, matrices, clusters, { cache = {}, block = null, lfc_threshold = 0, compute_auc = true } = {}) {\n        return computeVersus(left, right, matrices, clusters, { cache, block, lfc_threshold, compute_auc });\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two clusters for more detailed examination of the differences between them.\n     * It is assumed that {@linkcode runAnalysis} was already run on this MarkerDetectionState instance before calling this method.\n     *\n     * @param {number} left - Index of one cluster in which to find upregulated markers.\n     * @param {number} right - Index of another cluster to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two clusters.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` cluster in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` cluster in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` cluster are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        var clusters = this.#choice.fetchClusters();\n        var block = this.#filter.fetchFilteredBlock();\n\n        // No need to free this afterwards; we don't own the normalized matrices anyway.\n        let matrices = new scran.MultiMatrix;\n        for (const [modality, state] of Object.entries(this.#norm_states)) {\n            if (!state.valid()) {\n                continue;\n            }\n            matrices.add(modality, state.fetchNormalizedMatrix());\n        }\n\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n\n        return _computeVersus(left, right, matrices, clusters, { \n            cache: this.#cache.versus, \n            block: block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**********************\n ***** Standalone *****\n **********************/\n\n/**\n * Standalone version of {@linkplain MarkerDetectionState} that provides the same functionality outside of {@linkcode runAnalysis}.\n * Users can supply their own normalized matrices, groups and blocking factor to compute the various marker statistics for each group.\n * Users are also responsible for ensuring that the lifetime of the supplied objects exceeds that of the constructed MarkerDetectionStandalone instance,\n * i.e., the Wasm-related `free()` methods are not called while the MarkerDetectionStandalone instance is still in operation.\n */\nexport class MarkerDetectionStandalone {\n    #matrices;\n\n    #groups;\n    #group_levels;\n    #block;\n    #block_levels;\n\n    #cache;\n    #parameters;\n\n    /**\n     * @param {external:MultiMatrix} normalized - A {@linkplain external:MultiMatrix MultiMatrix} of log-normalized values for multiple modalities.\n     * @param {Array|TypedArray} groups - Array of length equal to the number of columns in any value of `normalized`, containing the group assignments for each column. \n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.block=null] - Array of length equal to the number of columns in any value of `normalized`, containing the block assignments for each column.\n     * If `null`, all columns are assigned to the same block.\n     */\n    constructor(normalized, groups, { block = null } = {}) {\n        // Checking dimensions.\n        let N = groups.length;\n\n        for (const k of normalized.available()) {\n            let v = normalized.get(k);\n            if (v.numberOfColumns() != N) {\n                throw new Error(\"all matrices in 'normalized' should have the same number of columns as the length of 'groups'\");\n            }\n        }\n\n        if (block !== null) {\n            if (block.length != N) {\n                throw new Error(\"'block' should have the same length as 'groups' if not null\");\n            }\n        }\n\n        let arrays = [ groups ];\n        if (block !== null) {\n            arrays.push(block);\n        }\n        let dump = utils.subsetInvalidFactors(arrays);\n\n        // Maybe taking a subset to eliminate invalid entries.\n        let new_matrices;\n        if (dump.retain !== null) {\n            new_matrices = new scran.MultiMatrix;\n            let temp = scran.createInt32WasmArray(dump.retain.length);\n            try {\n                temp.set(dump.retain);\n                for (const k of normalized.available()) {\n                    new_matrices.add(k, scran.subsetColumns(normalized.get(k), temp))\n                }\n            } catch (e) {\n                new_matrices.free();\n                throw e;\n            } finally {\n                scran.free(temp);\n            }\n        } else {\n            new_matrices = normalized.clone();\n        }\n\n        this.#matrices = new_matrices;\n        this.#groups = dump.arrays[0].ids;\n        this.#group_levels = dump.arrays[0].levels;\n\n        if (block !== null) {\n            this.#block = dump.arrays[1].ids;\n            this.#block_levels = dump.arrays[1].levels;\n        } else {\n            this.#block = null;\n            this.#block_levels = null;\n        }\n\n        this.#cache = { raw: {}, init: true };\n        this.#parameters = MarkerDetectionState.defaults();\n        this.changed = false;\n    }\n\n    /**\n     * Frees all resources associated with this instance.\n     */\n    free() {\n        scran.free(this.#groups);\n        scran.free(this.#block);\n        scran.free(this.#matrices);\n        _free(this.#cache);\n    }\n\n    /**\n     * @return {object} Marker detection results for the all modalities.\n     * Each key is a modality name and each value is an {@linkplain external:ScoreMarkersResults ScoreMarkerResults} object,\n     * containing marker detection statistics for all groups.\n     * This is available after running {@linkcode MarkerDetectionState#compute compute}.\n     */\n    fetchResults() {\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the grouping factor.\n     * Group indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchGroupLevels({ copy = true } = {}) {\n        let ret = this.#group_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the return value on output.\n     * Set to `false` for greater efficiency in strictly read-only applications.\n     *\n     * @return {Array} Array of levels for the blocking factor.\n     * Block indices in the {@linkplain external:ScoreMarkersResults ScoreMarkersResults} instances returned by {@linkcode fetchResults} can be cross-referenced to this array.\n     */\n    fetchBlockLevels({ copy = true } = {}) {\n        let ret = this.#block_levels;\n        return (copy ? ret.slice() : ret);\n    }\n\n    // Testing functions to check that the sanitization worked correctly.\n    _peekMatrices() {\n        return this.#matrices;\n    }\n\n    _peekGroups() {\n        return this.#groups;\n    }\n\n    _peekBlock() {\n        return this.#block;\n    }\n\n    /**\n     * If this method is not called, the parameters default to those in {@linkcode MarkerDetectionState#defaults MarkerDetectionState.defaults}.\n     *\n     * @param {object} parameters - Parameter object, see the argument of the same name in {@linkcode MarkerDetectionState#compute MarkerDetectionState.compute} for more details.\n     *\n     * @return The state is updated with new parameters.\n     */\n    setParameters(parameters) {\n        if (this.#parameters.lfc_threshold !== parameters.lfc_threshold || this.#parameters.compute_auc !== parameters.compute_auc) {\n            this.free();\n        }\n        this.#parameters = { ...parameters };\n        return;\n    }\n\n    /**\n     * Compute markers for all groups.\n     *\n     * @return The state is updated with new results.\n     */\n    computeAll() {\n        let { lfc_threshold, compute_auc } = this.#parameters;\n        for (const k of this.#matrices.available()) {\n            var mat = this.#matrices.get(k);\n            utils.freeCache(this.#cache.raw[k]);\n            this.#cache.raw[k] = scran.scoreMarkers(mat, this.#groups, { block: this.#block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        }\n        return;\n    }\n\n    /**\n     * Extract markers for a pairwise comparison between two groups, \n     * for more detailed examination of the differences between them.\n     *\n     * @param {number} left - Index of one group in which to find upregulated markers.\n     * @param {number} right - Index of another group to be compared against `left`.\n     *\n     * @return {object} Object containing:\n     *\n     * - `results`: object containing the marker statistics for the comparison between two groups.\n     *    Each key is a modality name and each value is a {@linkplain external:ScoreMarkersResults ScoreMarkersResults} object.\n     * - `left`: index of the group corresponding to the `left` group in each ScoreMarkersResults object,\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.left)`.\n     * - `right`: index of the group corresponding to the `right` group in each ScoreMarkersResults object.\n     *    e.g., Cohen's d for the RNA markers of the `left` group are defined as `output.results.RNA.cohen(output.right)`.\n     */\n    computeVersus(left, right) {\n        if (!(\"versus\" in this.#cache)) {\n            this.#cache[\"versus\"] = {};\n        }\n        return _computeVersus(left, right, this.#matrices, this.#groups, { \n            cache: this.#cache.versus, \n            block: this.#block,\n            lfc_threshold: this.#parameters.lfc_threshold,\n            compute_auc: this.#parameters.compute_auc\n        });\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nfunction fill_results(stats, num_blocks) {\n    let keys = Object.keys(stats);\n    let first = stats[keys[0]];\n    let ngenes = first.means.length;\n    let object = scran.emptyScoreMarkersResults(ngenes, keys.length, num_blocks, { computeAuc: (\"auc\" in first) });\n\n    for (const k of keys) {\n        let i = Number(k);\n        let vals = stats[k];\n        object.means(i, { fillable: true }).set(vals.means);\n        object.detected(i, { fillable: true }).set(vals.detected);\n\n        for (const [s, v] of Object.entries(vals.cohen)) {\n            object.cohen(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.lfc)) {\n            object.lfc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        for (const [s, v] of Object.entries(vals.delta_detected)) {\n            object.deltaDetected(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n        }\n\n        if (\"auc\" in vals) {\n            for (const [s, v] of Object.entries(vals.auc)) {\n                object.auc(i, { summary: markers.summaries2int[s], fillable: true }).set(v);\n            }\n        }\n    }\n\n    return object;\n}\n\nexport function unserialize(handle, permuters, filter, norm_states, choice) {\n    let ghandle = handle.open(\"marker_detection\");\n\n    let parameters = MarkerDetectionState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        if (\"lfc_threshold\" in phandle.children) {\n            parameters.lfc_threshold = phandle.open(\"lfc_threshold\", { load: true }).values[0];\n        }\n        if (\"compute_auc\" in phandle.children) {\n            parameters.compute_auc = phandle.open(\"compute_auc\", { load: true }).values[0] > 0;\n        }\n    }\n\n    // Figure out the number of blocks.\n    let num_blocks = 1;\n    {\n        let filtered = filter.fetchFilteredBlock();\n        if (filtered != null) {\n            filtered.forEach(x => {\n                if (x + 1 > num_blocks) {\n                    num_blocks = x + 1;\n                }\n            });\n        }\n    }\n\n    // Set up the marker detection statistics.\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        cache.raw = {};\n\n        if (\"clusters\" in rhandle.children) { \n            // below v2.0\n            let chandle = rhandle.open(\"clusters\");\n            let clusters = {};\n            for (const cl of Object.keys(chandle.children)) {\n                clusters[Number(cl)] = markers.unserializeGroupStats(chandle.open(cl), permuters[\"RNA\"], { compute_auc: parameters.compute_auc });\n            }\n            cache.raw.RNA = fill_results(clusters, num_blocks);\n        } else {\n            // after v2.0.\n            let chandle = rhandle.open(\"per_cluster\");\n            for (const a of Object.keys(chandle.children)) {\n                let clusters = {};\n                let ahandle = chandle.open(a);\n                for (const cl of Object.keys(ahandle.children)) {\n                    clusters[Number(cl)] = markers.unserializeGroupStats(ahandle.open(cl), permuters[a], { compute_auc: parameters.compute_auc });\n                }\n                cache.raw[a] = fill_results(clusters, num_blocks);\n            }\n        }\n \n    }\n\n    return new MarkerDetectionState(filter, norm_states, choice, parameters, cache);\n}\n\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as correct_module from \"./batch_correction.js\";\n\nexport const step_name = \"neighbor_index\";\n\n/**\n * This step assembles the neighbor search indices from the PCs (see {@linkplain PcaState}) in preparation for nearest neighbor searches in downstream steps.\n * It wraps the [`buildNeighborSearchIndex`](https://kanaverse.github.io/scran.js/global.html#buildNeighborSearchIndex) function \n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class NeighborIndexState {\n    #correct;\n    #parameters;\n    #cache;\n\n    constructor(correct, parameters = null, cache = null) {\n        if (!(correct instanceof correct_module.BatchCorrectionState)) {\n            throw new Error(\"'correct' should be a BatchCorrectionState object\");\n        }\n        this.#correct = correct;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.raw);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {BuildNeighborSearchIndexResults} Index for a nearest-neighbor search,\n     * available after running {@linkcode NeighborIndexState#compute compute}.\n     */\n    fetchIndex() {\n        if (!(\"raw\" in this.#cache)) {\n            this.#raw_compute(this.#parameters.approximate);\n        }\n        return this.#cache.raw;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    static defaults() {\n        return {\n            approximate: true\n        };\n    }\n\n    #raw_compute(approximate) {\n        this.#cache.raw = scran.buildNeighborSearchIndex(this.#correct.fetchCorrected(), { \n            approximate: approximate, \n            numberOfDims: this.#correct.fetchNumberOfDimensions(),\n            numberOfCells: this.#correct.fetchNumberOfCells()\n        });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `neighbor_index` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.approximate - Whether to create an approximate search index.\n     * If `false`, an exact index is used.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { approximate } = parameters;\n        this.changed = false;\n\n        if (this.#correct.changed || approximate != this.#parameters.approximate) {\n            utils.freeCache(this.#cache.raw);\n            this.#raw_compute(approximate);\n            this.#parameters.approximate = approximate;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, pca) {\n    let ghandle = handle.open(\"neighbor_index\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            approximate: phandle.open(\"approximate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let cache = {};\n    return new NeighborIndexState(pca, parameters, cache);\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as nutils from \"./utils/normalization.js\";\nimport * as qc_module from \"./rna_quality_control.js\";\nimport * as filter_module from \"./cell_filtering.js\";\n\nexport const step_name = \"rna_normalization\";\n\n/**\n * This step performs normalization and log-transformation on the QC-filtered matrix from the {@linkplain QualityControlState}.\n * It wraps the [`logNormCounts`](https://kanaverse.github.io/scran.js/global.html#logNormCounts) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaNormalizationState {\n    #qc\n    #filter;\n    #parameters;\n    #cache;\n\n    constructor(qc, filter, parameters = null, cache = null) {\n        if (!(qc instanceof qc_module.RnaQualityControlState)) {\n            throw new Error(\"'qc' should be a RnaQualityControlState object\");\n        }\n        this.#qc = qc;\n\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.matrix);\n        utils.freeCache(this.#cache.sum_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        let filtered = this.#filter.fetchFilteredMatrix();\n        return filtered.has(\"RNA\");\n    }\n\n    /**\n     * @return {external:ScranMatrix} A {@linkplain external:ScranMatrix ScranMatrix} object containing normalized expression values,\n     * available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchNormalizedMatrix() {\n        if (!(\"matrix\" in this.#cache)) {\n            this.#raw_compute();\n        }\n        return this.#cache.matrix;\n    }\n\n    /**\n     * @return {Float64WasmArray} Array of length equal to the number of cells, \n     * containing the RNA-derived size factor for each cell.\n     * This is available after running {@linkcode RnaNormalizationState#compute compute}.\n     */\n    fetchSizeFactors() {\n        let buff;\n        if (this.#cache.sum_buffer) {\n            buff = utils.allocateCachedArray(this.#cache.sum_buffer.length, \"Float64Array\", this.#cache, \"centered_buffer\");\n            scran.centerSizeFactors(this.#cache.sum_buffer, { buffer: buff, block: this.#filter.fetchFilteredBlock() })\n        }\n        return buff;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #raw_compute() {\n        var mat = this.#filter.fetchFilteredMatrix().get(\"RNA\");\n        let buffer = nutils.subsetSums(this.#qc, this.#filter, mat, this.#cache, \"sum_buffer\");\n\n        var block = this.#filter.fetchFilteredBlock();\n        utils.freeCache(this.#cache.matrix);\n        this.#cache.matrix = scran.logNormCounts(mat, { sizeFactors: buffer, block: block, allowZeros: true });\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_normalization` property of the `parameters` of {@linkcode runAnalysis}.\n     *\n     * @return The object is updated with new results.\n     */\n    compute(parameters) {\n        this.changed = false;\n        if (this.#qc.changed || this.#filter.changed) {\n            if (this.valid()) {\n                this.changed = true;\n            }\n        } \n\n        if (this.changed) {\n            this.#raw_compute();\n        }\n        return;\n    }\n\n    static defaults() {\n        return {};\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, qc, filter) {\n    return new RnaNormalizationState(qc, filter);\n}\n","import * as scran from \"scran.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as filter_module from \"./cell_filtering.js\";\nimport * as norm_module from \"./rna_normalization.js\";\nimport * as feat_module from \"./feature_selection.js\";\n\nexport const step_name = \"rna_pca\";\n\n/**\n * Results of running PCA on some input matrix,\n * see [here](https://kanaverse.github.io/scran.js/RunPCAResults.html) for details.\n *\n * @external RunPCAResults\n */\n\n/**\n * This step performs a principal components analysis (PCA) to compact and denoise the data.\n * The resulting PCs can be used as input to various per-cell analyses like clustering and dimensionality reduction.\n * It wraps the [`runPCA`](https://kanaverse.github.io/scran.js/global.html#runPCA) function\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaPcaState { \n    #filter;\n    #norm;\n    #feat;\n    #cache;\n    #parameters;\n\n    constructor(filter, norm, feat, parameters = null, cache = null) {\n        if (!(filter instanceof filter_module.CellFilteringState)) {\n            throw new Error(\"'filter' should be a CellFilteringState object\");\n        }\n        this.#filter = filter;\n\n        if (!(norm instanceof norm_module.RnaNormalizationState)) {\n            throw new Error(\"'norm' should be an RnaNormalizationState object\");\n        }\n        this.#norm = norm;\n\n        if (!(feat instanceof feat_module.FeatureSelectionState)) {\n            throw new Error(\"'feat' should be a FeatureSelectionState object\");\n        }\n        this.#feat = feat;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.hvg_buffer);\n        utils.freeCache(this.#cache.pcs);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    valid() {\n        return this.#norm.valid();\n    }\n\n    /**\n     * @return {external:RunPCAResults} Results of the PCA on the normalized gene expression values.\n     */\n    fetchPCs() {\n        return this.#cache.pcs;\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_pca` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_pcs - Number of PCs to return.\n     * @param {number} parameters.num_hvgs - Number of highly variable genes (see {@linkplain FeatureSelectionState}) to use in the PCA.\n     * @param {string} parameters.block_method - Blocking method to use when dealing with multiple samples.\n     * This can be one of:\n     *\n     * - `\"none\"`, in which case nothing is done using the sample information. \n     * - `\"regress\"`, where linear regression is applied to remove mean differences between samples.\n     * - `\"weight\"`, where samples are weighted so that they contribute equally regardless of the number of cells.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(parameters) {\n        let { num_hvgs, num_pcs, block_method } = parameters;\n        this.changed = false;\n\n        if (this.#feat.changed || num_hvgs !== this.#parameters.num_hvgs) {\n            if (this.valid()) {\n                choose_hvgs(num_hvgs, this.#feat, this.#cache);\n                this.changed = true;\n            }\n\n            this.#parameters.num_hvgs = num_hvgs;\n        }\n\n        if (this.changed || this.#norm.changed || num_pcs !== this.#parameters.num_pcs || block_method !== this.#parameters.block_method) { \n            utils.freeCache(this.#cache.pcs);\n\n            if (this.valid()) {\n                let sub = this.#cache.hvg_buffer;\n                let block = this.#filter.fetchFilteredBlock();\n                var mat = this.#norm.fetchNormalizedMatrix();\n                this.#cache.pcs = scran.runPCA(mat, { features: sub, numberOfPCs: num_pcs, block: block, blockMethod: block_method });\n                this.changed = true;\n            }\n\n            this.#parameters.num_pcs = num_pcs;\n            this.#parameters.block_method = block_method;\n        }\n\n        return;\n    }\n\n    static defaults() {\n        return {\n            num_hvgs: 2000,\n            num_pcs: 20,\n            block_method: \"none\"\n        };\n    }\n}\n\n/**************************\n ******* Internals ********\n **************************/\n\nfunction choose_hvgs(num_hvgs, feat, cache) {\n    var sorted_resids = feat.fetchSortedResiduals();\n    var sub = utils.allocateCachedArray(sorted_resids.length, \"Uint8Array\", cache, \"hvg_buffer\");\n\n    if (num_hvgs < sorted_resids.length) {\n        var threshold_at = sorted_resids[sorted_resids.length - num_hvgs];\n        var unsorted_resids = feat.fetchResults().residuals({ copy: false });\n        sub.array().forEach((element, index, array) => {\n            array[index] = unsorted_resids[index] >= threshold_at;\n        });\n    } else {\n        sub.fill(1);\n    }\n\n    return sub;\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, filter, norm, feat) {\n    let ghandle = handle.open(\"rna_pca\" in handle.children ? \"rna_pca\" : \"pca\");\n\n    let parameters = {};\n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters = { \n            num_hvgs: phandle.open(\"num_hvgs\", { load: true }).values[0],\n            num_pcs: phandle.open(\"num_pcs\", { load: true }).values[0]\n        };\n\n        // For back-compatibility.\n        if (\"block_method\" in phandle.children) {\n            parameters.block_method = phandle.open(\"block_method\", { load: true }).values[0];\n            if (parameters.block_method == \"mnn\") {\n                parameters.block_method = \"weight\";\n            }\n        } else {\n            parameters.block_method = \"none\";\n        }\n    }\n\n    let output;\n    let cache = {};\n    try {\n        if (feat.valid()) {\n            choose_hvgs(parameters.num_hvgs, feat, cache);\n\n            let rhandle = ghandle.open(\"results\");\n            if (\"pcs\" in rhandle.children) {\n                let pcs_handle = rhandle.open(\"pcs\", { load: true });\n                let pcs = pcs_handle.values;\n                let var_exp = rhandle.open(\"var_exp\", { load: true }).values;\n\n                cache.pcs = scran.emptyRunPCAResults(pcs_handle.shape[0], pcs_handle.shape[1]);\n                cache.pcs.principalComponents({ fillable: true }).set(pcs);\n                cache.pcs.varianceExplained({ fillable: true }).set(var_exp);\n                cache.pcs.setTotalVariance(1); // because the file only stores proportions.\n            }\n        }\n\n        output = new RnaPcaState(filter, norm, feat, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.hvg_buffer);\n        utils.freeCache(cache.pcs);\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as bioc from \"bioconductor\";\nimport * as utils from \"./utils/general.js\";\nimport * as inputs_module from \"./inputs.js\";\nimport * as rutils from \"../readers/index.js\";\n\nconst baseUrl = \"https://github.com/kanaverse/kana-special-features/releases/download/v1.0.0\";\n\nexport const step_name = \"rna_quality_control\";\n\n/**\n * Results of computing per-cell RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/PerCellRnaQcMetricsResults.html) for details.\n *\n * @external PerCellRnaQcMetricsResults\n */\n\n/**\n * Suggested filters for the RNA-derived QC metrics,\n * see [here](https://kanaverse.github.io/scran.js/SuggestRnaQcFiltersResults.html) for details.\n *\n * @external SuggestRnaQcFiltersResults\n */\n\n/**\n * This step applies quality control on the RNA count matrix.\n * Specifically, it computes the QC metrics and filtering thresholds, \n * wrapping the [`perCellRnaQcMetrics`](https://kanaverse.github.io/scran.js/global.html#perCellRnaQcMetrics)\n * and [`suggestRnaQcFilters`](https://kanaverse.github.io/scran.js/global.html#suggestRnaQcFilters) functions\n * from [**scran.js**](https://github.com/kanaverse/scran.js).\n * Note that the actual filtering is done by {@linkplain CellFilteringState}.\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class RnaQualityControlState {\n    #inputs;\n    #cache;\n    #parameters;\n    #automatic;\n\n    constructor(inputs, parameters = null, cache = null) {\n        if (!(inputs instanceof inputs_module.InputsState)) {\n            throw new Error(\"'inputs' should be an InputsState object\");\n        }\n        this.#inputs = inputs;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.#automatic = false;\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.metrics);\n        utils.freeCache(this.#cache.filters);\n        utils.freeCache(this.#cache.metrics_buffer);\n        utils.freeCache(this.#cache.discard_buffer);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n    \n    valid() {\n        let input = this.#inputs.fetchCountMatrix();\n        return input.has(\"RNA\");\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        let output = { ...this.#parameters }; // avoid pass-by-reference links.\n        output.species = bioc.CLONE(output.species);\n        return output;\n    }\n\n    /**\n     * @return {Uint8WasmArray} Buffer containing the discard vector of length equal to the number of cells,\n     * where each element is truthy if the corresponding cell is to be discarded.\n     */\n    fetchDiscards() {\n        return this.#cache.discard_buffer;\n    }\n\n    /**\n     * @return {external:SuggestRnaQcFiltersResults} Result of filtering on the RNA-derived QC metrics.\n     */\n    fetchFilters() {\n        return this.#cache.filters;\n    }\n\n    /**\n     * @return {external:PerCellRnaQcMetricsResults} RNA-derived QC metrics.\n     */\n    fetchMetrics() {\n        return this.#cache.metrics;\n    }\n\n    /****************************\n     ******** Defaults **********\n     ****************************/\n\n    static defaults () {\n        return {\n            automatic: true,\n            gene_id_column: null,\n            use_reference_mito: true,\n            species: [],\n            gene_id_type: \"ENSEMBL\",\n            mito_prefix: \"mt-\",\n            nmads: 3\n        };\n    }\n\n    static configureFeatureParameters(use_reference_mito, guesses) {\n        let best_key = null;\n        let best = { type: \"symbol\", species: \"human\", confidence: 0 };\n\n        if (\"row_names\" in guesses) {\n            let val = guesses.row_names;\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n            }\n        }\n\n        for (const [key, val] of Object.entries(guesses.columns)) {\n            if (val.confidence > best.confidence && (use_reference_mito || val.type == \"symbol\")) {\n                best = val;\n                best_key = key;\n            }\n        }\n\n        return {\n            gene_id_column: best_key,\n            species: [best.species],\n            gene_id_type: best.type.toUpperCase()\n        };\n    }\n\n    /**\n     * Array of strings containing the taxonomy IDs for species where mitochondrial gene lists are available.\n     * @type {Array}\n     */\n    static mitochondriaSpecies = [ \n        \"9606\",  // Mouse\n        \"10090\", // Human\n        \"6239\",  // C. elegans\n        \"10116\", // Rat\n        \"9541\",  // M. fascicularis\n        \"7227\",  // Fly\n        \"7955\",  // Zebrafish\n        \"9598\"   // Chimp\n    ];\n\n    /***************************\n     ******** Remotes **********\n     ***************************/\n\n    async #acquire_reference(species, feature_type) {\n        let output = new Set;\n        let mito_lists = RnaQualityControlState.#mito_lists;\n\n        for (const s of species) {\n            let target = s + \"-mito-\" + feature_type.toLowerCase() + \".txt.gz\";\n            if (!(target in mito_lists)) {\n                let contents = await RnaQualityControlState.#downloadFun(baseUrl + \"/\" + target);\n                let lines = await rutils.readLines2(contents, { compression: \"gz\" });\n                mito_lists[target] = lines;\n            }\n\n            mito_lists[target].forEach(x => { output.add(x); });\n        }\n\n        return output;\n    }\n\n    static #mito_lists = {};\n\n    /**\n     * Flush all cached lists of mitochondrial genes.\n     *\n     * By default, {@linkcode RnaQualityControlState#compute compute} will cache the mitochondrial gene lists in a static member for re-use across {@linkplain RnaQualityControlState} instances.\n     * These cached lists are not tied to any single instance and will not be removed by garbage collectors or by {@linkcode freeAnalysis}.\n     * Rather, this function should be called to release the relevant memory.\n     */\n    static flush() {\n        RnaQualityControlState.#mito_lists = {};\n        return;\n    }\n\n    static #downloadFun = utils.defaultDownload;\n\n    /**\n     * Specify a function to download the reference mitochondrial gene lists.\n     *\n     * @param {function} fun - Function that accepts a single string containing a URL and returns any value that can be used in the {@linkplain SimpleFile} constructor.\n     * This is most typically a Uint8Array of that URL's contents, but it can also be a path to a locally cached file on Node.js.\n     *\n     * @return `fun` is set as the global downloader for this step. \n     * The _previous_ value of the downloader is returned.\n     */\n    static setDownload(fun) {\n        let previous = RnaQualityControlState.#downloadFun;\n        RnaQualityControlState.#downloadFun = fun;\n        return previous;\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `rna_quality_control` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {boolean} parameters.automatic - Automatically choose feature-based parameters based on the feature annotation for the RNA modality.\n     * If set to `true`, the following logic is applied:\n     *\n     * - If `use_reference_mito = true`, the annotation column that best matches human/mouse Ensembl/symbols is set as `gene_id_column`.\n     *   Based on the identified species and feature type, `species` and `gene_id_type` are also set.\n     * - If `use_reference_mito = false`, the annotation column that best matches human/mouse symbols is set as `gene_id_column`.\n     *\n     * @param {?(string|number)} parameters.gene_id_column - Name or index of the column of the feature annotations that contains the gene identifiers for the RNA modality.\n     * If `null`, the row names are used.\n     * Ignored if `automatic = true`.\n     * @param {boolean} parameters.use_reference_mito - Whether to use the reference lists of mitochondrial genes.\n     * If `false`, mitochondrial genes are instead identified from their prefix.\n     * @param {Array} parameters.species - Array of strings specifying zero, one or more species to use to obtain a reference list of mitochondrial genes.\n     * Each entry should be a taxonomy ID (e.g. `\"9606\"`, `\"10090\"`) as specified in {@linkcode RnaQualityControlState#mitochondriaSpecies mitochondriaSpecies}).\n     * Ignored if `automatic = true`.\n     * @param {string} parameters.gene_id_type - Name of the feature type in the reference list of mitochondrial genes.\n     * This can be any one of `\"ENSEMBL\"`, `\"SYMBOL\"`, or `\"ENTREZ\"`.\n     * Ignored if `automatic = true`.\n     * @param {?string} parameters.mito_prefix - Case-insensitive prefix to use to identify mitochondrial genes from the dataset.\n     * Only used when `use_reference_mito = false`; in such cases, `gene_id_column` should point to symbols.\n     * If `null`, no prefix-based identification is performed.\n     * @param {number} parameters.nmads - Number of MADs to use for automatically selecting the filter threshold for each metric.\n     *\n     * @return The object is updated with the new results.\n     * @async\n     */\n    async compute(parameters) {\n        let { mito_prefix, nmads } = parameters;\n        let automatic;\n        let use_reference_mito;\n        let gene_id_column;\n        let species;\n        let gene_id_type;\n\n        // Some back-compatibility here.\n        if (\"use_reference_mito\" in parameters) {\n            automatic = parameters.automatic;\n            use_reference_mito = parameters.use_reference_mito;\n            gene_id_column = parameters.gene_id_column;\n            species = parameters.species;\n            gene_id_type = parameters.gene_id_type;\n        } else {\n            automatic = true;\n            use_reference_mito = parameters.use_mito_default;\n            let def = RnaQualityControlState.defaults();\n            gene_id_column = def.gene_id_column;\n            species = def.species;\n            gene_id_type = def.gene_id_type;\n        }\n\n        this.changed = false;\n\n        if (\n            this.#inputs.changed || \n            automatic !== this.#parameters.automatic ||\n            use_reference_mito !== this.#parameters.use_reference_mito || \n            (\n                !automatic && \n                (\n                    gene_id_column !== this.#parameters.gene_id_column || \n                    (!use_reference_mito && mito_prefix !== this.#parameters.mito_prefix) ||\n                    (\n                        use_reference_mito && \n                        (\n                            utils.changedParameters(species, this.#parameters.species) || \n                            gene_id_type !== this.#parameters.gene_id_type\n                        )\n                    )\n                )\n            ) \n        ) {\n            utils.freeCache(this.#cache.metrics);\n\n            if (this.valid()) {\n                let gene_id_column2 = gene_id_column;\n                let species2 = species;\n                let gene_id_type2 = gene_id_type;\n\n                if (automatic) {\n                    let guesses = this.#inputs.guessRnaFeatureTypes();\n                    let backcomp = RnaQualityControlState.configureFeatureParameters(use_reference_mito, guesses);\n                    gene_id_column2 = backcomp.gene_id_column;\n                    species2 = backcomp.species;\n                    gene_id_type2 = backcomp.gene_id_type;\n                }\n\n                var gene_info = this.#inputs.fetchFeatureAnnotations()[\"RNA\"];\n                let val = (gene_id_column2 == null ? gene_info.rowNames() : gene_info.column(gene_id_column2));\n                var subsets = utils.allocateCachedArray(gene_info.numberOfRows(), \"Uint8Array\", this.#cache, \"metrics_buffer\");\n                subsets.fill(0);\n\n                if (val !== null) {\n                    if (use_reference_mito) {\n                        let lists = await this.#acquire_reference(species2, gene_id_type2);\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if (lists.has(x)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    } else if (mito_prefix !== null) {\n                        var lower_mito = mito_prefix.toLowerCase();\n                        var sub_arr = subsets.array();\n                        val.forEach((x, i) => {\n                            if(x.toLowerCase().startsWith(lower_mito)) {\n                                sub_arr[i] = 1;\n                            }\n                        });\n                    }\n                }\n\n                var mat = this.#inputs.fetchCountMatrix().get(\"RNA\");\n                this.#cache.metrics = scran.perCellRnaQcMetrics(mat, [subsets]);\n                this.changed = true;\n            } else {\n                delete this.#cache.metrics;\n            }\n        }\n\n        this.#parameters.automatic = automatic;\n        this.#parameters.gene_id_column = gene_id_column;\n        this.#parameters.use_reference_mito = use_reference_mito;\n        this.#parameters.species = bioc.CLONE(species); // avoid pass-by-reference behavior.\n        this.#parameters.gene_id_type = gene_id_type;\n        this.#parameters.mito_prefix = mito_prefix;\n\n        if (this.changed || nmads !== this.#parameters.nmads) {\n            utils.freeCache(this.#cache.filters);\n\n            if (this.valid()) {\n                let block = this.#inputs.fetchBlock();\n                this.#cache.filters = scran.suggestRnaQcFilters(this.#cache.metrics, { numberOfMADs: nmads, block: block });\n                var discard = utils.allocateCachedArray(this.#cache.metrics.numberOfCells(), \"Uint8Array\", this.#cache, \"discard_buffer\");\n                this.#cache.filters.filter(this.#cache.metrics, { block: block, buffer: discard });\n                this.changed = true;\n            } else {\n                delete this.#cache.filters;\n            }\n\n            this.#parameters.nmads = nmads;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, inputs) {\n    let ghandle = handle.open(\"rna_quality_control\" in handle.children ? \"rna_quality_control\" : \"quality_control\");\n\n    let parameters = RnaQualityControlState.defaults(); \n    {\n        let phandle = ghandle.open(\"parameters\"); \n        parameters.use_mito_default = phandle.open(\"use_mito_default\", { load: true }).values[0] > 0;\n        parameters.mito_prefix = phandle.open(\"mito_prefix\", { load: true }).values[0];\n        parameters.nmads = phandle.open(\"nmads\", { load: true }).values[0];\n    }\n\n    let output;\n    let cache = {};\n    try {\n        let rhandle = ghandle.open(\"results\");\n\n        if (\"metrics\" in rhandle.children) { // QC metrics may not be reported if skipped.\n            let mhandle = rhandle.open(\"metrics\");\n            let sums = mhandle.open(\"sums\", { load: true }).values;\n\n            cache.metrics = scran.emptyPerCellRnaQcMetricsResults(sums.length, 1);\n            cache.metrics.sums({ fillable: true }).set(sums);\n\n            let detected = mhandle.open(\"detected\", { load: true }).values;\n            cache.metrics.detected({ fillable: true }).set(detected);\n            let proportions = mhandle.open(\"proportion\", { load: true }).values;\n            cache.metrics.subsetProportions(0, { fillable: true }).set(proportions);\n        }\n\n        if (\"thresholds\" in rhandle.children) { // if skip=true, QC thresholds may not be reported.\n            let discards = rhandle.open(\"discards\", { load: true }).values; \n            cache.discard_buffer = scran.createUint8WasmArray(discards.length);\n            cache.discard_buffer.set(discards);\n\n            let thandle = rhandle.open(\"thresholds\");\n            let thresholds_sums = thandle.open(\"sums\", { load: true }).values;\n            let thresholds_detected = thandle.open(\"detected\", { load: true }).values;\n            let thresholds_proportion = thandle.open(\"proportion\", { load: true }).values;\n\n            cache.filters = scran.emptySuggestRnaQcFiltersResults(1, thresholds_sums.length);\n            cache.filters.thresholdsSums({ fillable: true }).set(thresholds_sums);\n            cache.filters.thresholdsDetected({ fillable: true }).set(thresholds_detected);\n            cache.filters.thresholdsSubsetProportions(0, { fillable: true }).set(thresholds_proportion);\n        }\n\n        output = new RnaQualityControlState(inputs, parameters, cache);\n    } catch (e) {\n        utils.freeCache(cache.metrics);\n        utils.freeCache(cache.filters)\n        utils.freeCache(output);\n        throw e;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\"; \nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\n\nexport const step_name = \"snn_graph_cluster\";\n\n/**\n * This step does SNN graph clustering based on the neighbor search index built by {@linkplain NeighborIndexState}.\n * This wraps [`clusterSNNGraph`](https://kanaverse.github.io/scran.js/global.html#clusterSNNGraph) \n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n *\n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class SnnGraphClusterState {\n    #index;\n    #parameters;\n    #cache;\n\n    constructor(index, parameters = null, cache = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#cache = (cache === null ? {} : cache);\n        this.changed = false;\n    }\n\n    free() {\n        utils.freeCache(this.#cache.neighbors);\n        utils.freeCache(this.#cache.graph);\n        utils.freeCache(this.#cache.clusters);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {Int32WasmArray} Array of cluster assignments for each cell in the (filtered) dataset,\n     * available after running {@linkcode SnnGraphClusterState#compute compute}.\n     */\n    fetchClusters() {\n        if (!this.#valid()) {\n            throw \"cannot fetch SNN clusters from an invalid state\";\n        } else {\n            return this.#cache.clusters.membership({ copy: \"view\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #valid() {\n        return \"clusters\" in this.#cache;\n    }\n\n    #compute_neighbors(k) {\n        this.#cache.neighbors = scran.findNearestNeighbors(this.#index.fetchIndex(), k);\n        return;\n    }\n\n    #compute_graph(scheme) {\n        if (!(\"neighbors\" in this.#cache)) { // need to check as reloaded state will not populate the internals.\n            this.#compute_neighbors(this.#parameters.k);\n        }\n        this.#cache.graph = scran.buildSNNGraph(this.#cache.neighbors, { scheme: scheme });\n        return;\n    }\n\n    #compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps) {\n        if (!(\"graph\" in this.#cache)) {\n            this.#compute_graph(this.#parameters.scheme);\n        }\n        this.#cache.clusters = scran.clusterSNNGraph(this.#cache.graph, {\n            method: algorithm,\n            multiLevelResolution: multilevel_resolution,\n            leidenResolution: leiden_resolution,\n            leidenModularityObjective: true, // avoid problems with unstable interpretation of leidenResolution.\n            walktrapSteps: walktrap_steps\n        });\n        return;\n    }\n\n    static defaults() {\n        return { \n            k: 10,\n            scheme: \"rank\",\n            algorithm: \"multilevel\",\n            multilevel_resolution: 1,\n            leiden_resolution: 1,\n            walktrap_steps: 4\n        };\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {boolean} run_me - Whether or not to run this step, depending on the clustering method chosen by the user (see {@linkplain ChooseClusteringState}).\n     * @param {object} parameters - Parameter object, equivalent to the `snn_graph_cluster` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.k - Number of nearest neighbors used to construct the graph.\n     * @param {string} parameters.scheme - Weighting scheme for graph construction.\n     * This can be one of `\"rank\"`, `\"number\"` or `\"jaccard\"`.\n     * @param {string} parameters.algorithm - Algorithm to use for community detection.\n     * This can be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n     * @param {number} parameters.multilevel_resolution - Resolution of the multi-level community detection.\n     * @param {number} parameters.leiden_resolution - Resolution of the Leiden community detection.\n     * @param {number} parameters.walktrap_steps - Number of merge steps for the Walktrap algorithm.\n     *\n     * @return The object is updated with the new results.\n     */\n    compute(run_me, parameters) {\n        let { k, scheme, algorithm, multilevel_resolution, leiden_resolution, walktrap_steps } = parameters;\n        this.changed = false;\n\n        if (this.#index.changed || k !== this.#parameters.k) {\n            utils.freeCache(this.#cache.neighbors);\n            if (run_me) {\n                this.#compute_neighbors(k);\n            } else {\n                delete this.#cache.neighbors; // ensuring that this is re-run on future calls to compute() with run_me = true.\n            }\n            this.#parameters.k = k;\n            this.changed = true;\n        }\n\n        if (this.changed || scheme !== this.#parameters.scheme) {\n            utils.freeCache(this.#cache.graph);\n            if (run_me) {\n                this.#compute_graph(scheme);\n            } else {\n                delete this.#cache.graph;\n            }\n            this.#parameters.scheme = scheme;\n            this.changed = true \n        }\n\n        if (this.changed \n            || algorithm !== this.#parameters.algorithm \n            || multilevel_resolution !== this.#parameters.multilevel_resolution \n            || leiden_resolution !== this.#parameters.leiden_resolution \n            || walktrap_steps !== this.#parameters.walktrap_steps \n            || (!this.#valid() && run_me))\n        {\n            utils.freeCache(this.#cache.clusters);\n            if (run_me) {\n                this.#compute_clusters(algorithm, multilevel_resolution, leiden_resolution, walktrap_steps);\n            } else {\n                delete this.#cache.clusters;\n            }\n\n            this.#parameters.algorithm = algorithm;\n            this.#parameters.multilevel_resolution = multilevel_resolution;\n            this.#parameters.leiden_resolution = leiden_resolution;\n            this.#parameters.walktrap_steps = walktrap_steps;\n            this.changed = true;\n        }\n\n        return;\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport function unserialize(handle, index) {\n    let ghandle = handle.open(\"snn_graph_cluster\");\n\n    let parameters = SnnGraphClusterState.defaults();\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters.k = phandle.open(\"k\", { load: true }).values[0];\n\n        parameters.scheme = phandle.open(\"scheme\", { load: true }).values[0];\n        if (typeof parameters.scheme !== \"string\") { // because I stuffed up and tried to save a string as an int in v1.0, oops.\n            parameters.scheme = \"rank\";\n        }\n\n        if (\"algorithm\" in phandle.children) {\n            // v3.0\n            parameters.algorithm = phandle.open(\"algorithm\", { load: true }).values[0];\n            parameters.multilevel_resolution = phandle.open(\"multilevel_resolution\", { load: true }).values[0];\n            parameters.leiden_resolution = phandle.open(\"leiden_resolution\", { load: true }).values[0];\n            parameters.walktrap_steps = phandle.open(\"walktrap_steps\", { load: true }).values[0];\n        } else {\n            // v2.0\n            parameters.multilevel_resolution = phandle.open(\"resolution\", { load: true }).values[0];\n        }\n    }\n\n    let cache = {};\n    {\n        let rhandle = ghandle.open(\"results\");\n        if (\"clusters\" in rhandle.children) {\n            let clusters = rhandle.open(\"clusters\", { load: true }).values;\n            cache.clusters = scran.emptyClusterSNNGraphResults(clusters.length, 1);\n            cache.clusters.setBest(0); // whatever.\n            cache.clusters.membership({ fillable: true }).set(clusters);\n        }\n    }\n\n    return new SnnGraphClusterState(index, parameters, cache);\n}\n\n\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"./abstract/worker_parent.js\";\n\n/**\n * This creates a t-SNE embedding based on the neighbor index constructed by {@linkplain NeighborIndexState}.\n * This wraps [`runTSNE`](https://kanaverse.github.io/scran.js/global.html#runTSNE)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class TsneState {\n    #index;\n    #parameters;\n    #reloaded;\n\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createTsneWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, vizutils.scranOptions);\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to create a copy of the coordinates,\n     * if the caller might mutate them.\n     *\n     * @return {object} Object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     *\n     * @async\n     */\n    async fetchResults({ copy = true } = {}) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n        \n            output.iterations = this.#parameters.iterations;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"FETCH\" });\n        }\n    }\n\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #core(perplexity, iterations, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            var k = scran.perplexityToNeighbors(perplexity);\n            nn_out = vizutils.computeNeighbors(this.#index, k);\n        }\n\n        let args = {\n            \"perplexity\": perplexity,\n            \"iterations\": iterations,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the t-SNE runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker_id, args, nn_out);\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `tsne` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.perplexity - Number specifying the perplexity for the probability calculations.\n     * @param {number} parameters.iterations - Number of iterations to run the algorithm.\n     * @param {boolean} parameters.animate - Whether to process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return t-SNE coordinates are computed in parallel on a separate worker thread.\n     * A promise is returned that resolves when those calculations are complete.\n     */\n    compute(parameters) {\n        let { perplexity, iterations, animate } = parameters;\n\n        let same_neighbors = (!this.#index.changed && perplexity === this.#parameters.perplexity);\n        if (same_neighbors && iterations == this.#parameters.iterations) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(perplexity, iterations, animate, !same_neighbors);\n\n        this.#parameters.perplexity = perplexity;\n        this.#parameters.iterations = iterations;\n        this.#parameters.animate = animate;\n\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******* Animators *********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.perplexity, this.#parameters.iterations, true, true);\n\n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => {\n                    return {\n                        \"type\": \"tsne_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"RERUN\" });\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport async function unserialize(handle, index) {\n    let ghandle = handle.open(\"tsne\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            perplexity: phandle.open(\"perplexity\", { load: true }).values[0],\n            iterations: phandle.open(\"iterations\", { load: true }).values[0],\n            animate: phandle.open(\"animate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let reloaded;\n    {\n        let rhandle = ghandle.open(\"results\");\n        reloaded = {\n            x: rhandle.open(\"x\", { load: true }).values,\n            y: rhandle.open(\"y\", { load: true }).values\n        };\n    }\n\n    let output = new TsneState(index, parameters, reloaded);\n    await output.ready();\n    return output;\n}\n","import * as scran from \"scran.js\";\nimport * as vizutils from \"./utils/viz_parent.js\";\nimport * as utils from \"./utils/general.js\";\nimport * as neighbor_module from \"./neighbor_index.js\";\nimport * as aworkers from \"./abstract/worker_parent.js\";\n\n/**\n * This creates a UMAP embedding based on the neighbor index constructed at {@linkplain NeighborIndexState}.\n * This wraps [`runUMAP`](https://kanaverse.github.io/scran.js/global.html#runUMAP)\n * and related functions from [**scran.js**](https://github.com/kanaverse/scran.js).\n * \n * Methods not documented here are not part of the stable API and should not be used by applications.\n * @hideconstructor\n */\nexport class UmapState {\n    #index;\n    #parameters;\n    #reloaded;\n\n    #worker_id;\n\n    #ready;\n    #run;\n\n    constructor(index, parameters = null, reloaded = null) {\n        if (!(index instanceof neighbor_module.NeighborIndexState)) {\n            throw new Error(\"'index' should be a State object from './neighbor_index.js'\");\n        }\n        this.#index = index;\n\n        this.#parameters = (parameters === null ? {} : parameters);\n        this.#reloaded = reloaded;\n        this.changed = false;\n\n        let worker = aworkers.createUmapWorker();\n        let { worker_id, ready } = vizutils.initializeWorker(worker, vizutils.scranOptions);\n        this.#worker_id = worker_id;\n        this.#ready = ready;\n\n        this.#run = null;\n    }\n\n    ready() {\n        // It is assumed that the caller will await the ready()\n        // status before calling any other methods of this instance.\n        return this.#ready;\n    }\n\n    free() {\n        return vizutils.killWorker(this.#worker_id);\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to create a copy of the coordinates,\n     * if the caller might mutate them.\n     *\n     * @return {object} Object containing:\n     *\n     * - `x`: a Float64Array containing the x-coordinate for each cell.\n     * - `y`: a Float64Array containing the y-coordinate for each cell.\n     * - `iterations`: the number of iterations processed.\n     *\n     * @async\n     */\n    async fetchResults({ copy = true } = {}) {\n        if (this.#reloaded !== null) {\n            let output = {\n                x: this.#reloaded.x,\n                y: this.#reloaded.y\n            };\n\n            if (copy) {\n                output.x = output.x.slice();\n                output.y = output.y.slice();\n            }\n\n            output.iterations = this.#parameters.num_epochs;\n            return output;\n        } else {\n            // Vectors that we get from the worker are inherently\n            // copied, so no need to do anything extra here.\n            await this.#run;\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"FETCH\" });\n        }\n    }\n\n    /**\n     * @return {object} Object containing the parameters.\n     */\n    fetchParameters() {\n        return { ...this.#parameters }; // avoid pass-by-reference links.\n    }\n\n    /***************************\n     ******** Compute **********\n     ***************************/\n\n    #core(num_neighbors, num_epochs, min_dist, animate, reneighbor) {\n        var nn_out = null;\n        if (reneighbor) {\n            nn_out = vizutils.computeNeighbors(this.#index, num_neighbors);\n        }\n\n        let args = {\n            \"num_neighbors\": num_neighbors,\n            \"num_epochs\": num_epochs,\n            \"min_dist\": min_dist,\n            \"animate\": animate\n        };\n\n        // This returns a promise but the message itself is sent synchronously,\n        // which is important to ensure that the UMAP runs in its worker in\n        // parallel with other analysis steps. Do NOT put the runWithNeighbors\n        // call in a .then() as this may defer the message sending until \n        // the current thread is completely done processing.\n        this.#run = vizutils.runWithNeighbors(this.#worker_id, args, nn_out);\n        return;\n    }\n\n    /**\n     * This method should not be called directly by users, but is instead invoked by {@linkcode runAnalysis}.\n     *\n     * @param {object} parameters - Parameter object, equivalent to the `umap` property of the `parameters` of {@linkcode runAnalysis}.\n     * @param {number} parameters.num_neighbors - Number of neighbors to use to construct the simplicial sets.\n     * @param {number} parameters.num_epochs - Number of epochs to run the algorithm.\n     * @param {number} parameters.min_dist - Number specifying the minimum distance between points.\n     * @param {boolean} parameters.animate - Whether to process animation iterations, see {@linkcode setVisualizationAnimate} for details.\n     *\n     * @return UMAP coordinates are computed in parallel on a separate worker thread.\n     * A promise that resolves when the calculations are complete.\n     */\n    compute(parameters) {\n        let { num_neighbors, num_epochs, min_dist, animate } = parameters;\n\n        let same_neighbors = (!this.#index.changed && this.#parameters.num_neighbors === num_neighbors);\n        if (same_neighbors && num_epochs === this.#parameters.num_epochs && min_dist === this.#parameters.min_dist) {\n            this.changed = false;\n            return new Promise(resolve => resolve(null));\n        }\n\n        // In the reloaded state, we must send the neighbor\n        // information, because it hasn't ever been sent before.\n        if (this.#reloaded !== null) {\n            same_neighbors = false;\n            this.#reloaded = null;\n        }\n\n        this.#core(num_neighbors, num_epochs, min_dist, animate, !same_neighbors);\n\n        this.#parameters.num_neighbors = num_neighbors;\n        this.#parameters.num_epochs = num_epochs;\n        this.#parameters.min_dist = min_dist;\n        this.#parameters.animate = animate;\n\n        this.changed = true;\n        return this.#run;\n    }\n\n    /***************************\n     ******** Getters **********\n     ***************************/\n\n    /**\n     * Repeat the animation iterations.\n     * It is assumed that {@linkcode setVisualizationAnimate} has been set appropriately to process each iteration.\n     *\n     * @return A promise that resolves on successful completion of all iterations.\n     */\n    animate() {\n        if (this.#reloaded !== null) {\n            this.#reloaded = null;\n\n            // We need to reneighbor because we haven't sent the neighbors across yet.\n            this.#core(this.#parameters.num_neighbors, this.#parameters.num_epochs, this.#parameters.min_dist, true, true);\n      \n            // Mimicking the response from the re-run.\n            return this.#run\n                .then(contents => { \n                    return {\n                        \"type\": \"umap_rerun\",\n                        \"data\": { \"status\": \"SUCCESS\" }\n                    };\n                });\n        } else {\n            return vizutils.sendTask(this.#worker_id, { \"cmd\": \"RERUN\" });\n        }\n    }\n}\n\n/**************************\n ******** Loading *********\n **************************/\n\nexport async function unserialize(handle, index) {\n    let ghandle = handle.open(\"umap\");\n\n    let parameters;\n    {\n        let phandle = ghandle.open(\"parameters\");\n        parameters = {\n            num_neighbors: phandle.open(\"num_neighbors\", { load: true }).values[0],\n            num_epochs: phandle.open(\"num_epochs\", { load: true }).values[0],\n            min_dist: phandle.open(\"min_dist\", { load: true }).values[0],\n            animate: phandle.open(\"animate\", { load: true }).values[0] > 0\n        };\n    }\n\n    let reloaded;\n    {\n        let rhandle = ghandle.open(\"results\");\n        reloaded = {\n            x: rhandle.open(\"x\", { load: true }).values,\n            y: rhandle.open(\"y\", { load: true }).values\n        };\n    }\n\n    let output = new UmapState(index, parameters, reloaded);\n    await output.ready();\n    return output;\n}\n","export function registerCallback(worker, callback) {\n    worker.onmessage = callback;\n    return;\n}\n\nexport function sendMessage(worker, message, transfer) {\n    worker.postMessage(message, transfer);\n    return;\n}\n\nexport function terminateWorker(worker) {\n    worker.terminate();\n    return;\n}\n","import * as scran from \"scran.js\";\n\nexport function freeCache(object) {\n    // Just an alias for back-compatibility.\n    scran.free(object);\n    return;\n}\n\nfunction changedParametersIllegal(x, y, xskip, yskip) {\n    // Failing if this is a TypedArray or ArrayBuffer;\n    // we shouldn't be seeing these things here anyway.\n    if (!xskip) {\n        if (x instanceof ArrayBuffer || ArrayBuffer.isView(x)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n    if (!yskip) {\n        if (y instanceof ArrayBuffer || ArrayBuffer.isView(y)) {\n            throw new Error(\"parameters cannot contain ArrayBuffers or their views\");\n        }\n    }\n}\n\nexport function changedParameters(x, y) {\n    if (typeof x != typeof y) {\n        changedParametersIllegal(x, y, false, false);\n        return true;\n    } else if (typeof x != \"object\") {\n        return x != y;\n    }\n\n    //Handling nulls (which are objects).\n    let xnull = x === null;\n    let ynull = y === null;\n    if (xnull !== ynull) {\n        changedParametersIllegal(x, y, xnull, ynull);\n        return true;\n    } else if (xnull) {\n        return false;\n    }\n\n    // Handling arrays (which are also objects).\n    let xarr = x instanceof Array;\n    let yarr = y instanceof Array;\n    if (xarr != yarr) {\n        changedParametersIllegal(x, y, xarr, yarr);\n        return true;\n    } else if (xarr) {\n        if (x.length != y.length) {\n            return true;\n        }\n\n        for (var i = 0; i < x.length; i++) {\n            if (changedParameters(x[i], y[i])) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    changedParametersIllegal(x, y, false, false);\n    \n    // Now actually handling objects. We don't \n    // worry about the order of the keys here.\n    let xkeys = Object.keys(x);\n    let ykeys = Object.keys(y);\n    if (xkeys.length != ykeys.length) {\n        return true;\n    }\n\n    xkeys.sort();\n    ykeys.sort();\n    for (var i = 0; i < xkeys.length; i++) {\n        if (xkeys[i] != ykeys[i]) {\n            return true;\n        }\n    }\n\n    for (const k of xkeys) {\n        if (changedParameters(x[k], y[k])) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function allocateCachedArray(size, type, cache, name = \"buffer\") {\n    var reallocate = true;\n    if (name in cache) {\n        var candidate = cache[name];\n\n        // Views also trigger reallocation, because it is assumed that the\n        // caller of this function does not own the view, but downstream\n        // uses of the array will involve writing to it.\n        if (candidate.size != size || candidate.constructor.className != type || candidate.owner !== null) { \n            candidate.free();\n        } else {\n            reallocate = false;\n        }\n    }\n  \n    if (reallocate) {\n        switch (type) {\n            case \"Uint8Array\":\n                cache[name] = scran.createUint8WasmArray(size);\n                break;\n            case \"Int32Array\":\n                cache[name] = scran.createInt32WasmArray(size);\n                break;\n            case \"Float64Array\":\n                cache[name] = scran.createFloat64WasmArray(size);\n                break;\n            default:\n                // We only ever use one of the three above types in our \n                // internal data stores, so no need to go all-out here.\n                throw \"allocating '\" + type + \"' not yet supported\";\n        }\n    }\n\n    return cache[name];\n}\n\nexport function findValidUpstreamStates(states, msg) {\n    let to_use = [];\n    for (const [k, v] of Object.entries(states)) {\n        if (v.valid()) {\n            to_use.push(k);\n        }\n    }\n    if (to_use.length == 0) {\n        throw new Error(\"expected at least one valid upstream \" + msg + \" state\");\n    }\n    return to_use;\n}\n\nexport function checkIndices(indices, max) {\n    if (max !== null) {\n        for (const i of indices) {\n            if (i < 0 || i >= max) {\n                throw new Error(\"subset indices are out of range\");\n            }\n        }\n    }\n\n    for (var i = 1; i < indices.length; i++) {\n        if (indices[i] <= indices[i-1]) {\n            throw new Error(\"subset indices must be sorted and unique\");\n        }\n    }\n}\n\nexport async function defaultDownload(url) {\n    let resp = await fetch(url);\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch content at \" + url + \"(\" + resp.status + \")\");\n    }\n    return new Uint8Array(await resp.arrayBuffer());\n}\n\nexport function guessFeatureTypes(genes) {\n    let output = { columns: {} };\n\n    let rn = genes.rowNames();\n    if (rn !== null) {\n        output.row_names = scran.guessFeatures(rn, { forceTaxonomy: true });\n    }\n\n    for (const key of genes.columnNames()) {\n        let curcol = genes.column(key);\n        if (curcol instanceof Array) {\n            output.columns[key] = scran.guessFeatures(genes.column(key), { forceTaxonomy: true });\n        }\n    }\n\n    return output;\n}\n\nexport function subsetInvalidFactors(arrays) {\n    let N = arrays[0].length;\n    let output = { arrays: [], retain: null };\n\n    let invalid = new Uint8Array(N);\n    invalid.fill(0);\n    for (const x of arrays) {\n        let transformed = scran.factorize(x, { action: \"none\", placeholder: -1 });\n        output.arrays.push(transformed);\n        transformed.ids.forEach((y, i) => {\n            if (y == -1) {\n                invalid[i] = 1;\n            }\n        });\n    }\n\n    let num_invalid = 0;\n    invalid.forEach(y => { num_invalid += y; });\n    if (num_invalid == 0) {\n        return output;\n    }\n\n    let retain = new Int32Array(N - num_invalid);\n    {\n        let counter = 0;\n        for (var i = 0; i < N; i++) {\n            if (invalid[i] == 0) {\n                retain[counter] = i;\n                counter++;\n            }\n        }\n    }\n    output.retain = retain;\n\n    for (var i = 0; i < output.arrays.length; i++) {\n        let x = output.arrays[i];\n        let new_ids = scran.subsetBlock(x.ids, retain);\n        let remapping = scran.dropUnusedBlock(new_ids);\n        let new_levels = remapping.map(i => x.levels[i]);\n\n        scran.free(x.ids);\n        x.ids = new_ids;\n        x.levels = new_levels;\n    }\n\n    return output;\n}\n","import * as scran from \"scran.js\";\n\nexport const summaries2int = { \"min\": 0, \"mean\": 1, \"min_rank\": 4 };\n\nexport function unserializeGroupStats(handle, permuter, { no_summaries = false, compute_auc = true } = {}) {\n    let output = {};\n    for (const x of [ \"means\", \"detected\" ]) {\n        output[x] = permuter(handle.open(x, { load: true }).values);\n    }\n\n    for (const i of [ \"lfc\", \"delta_detected\", \"auc\", \"cohen\" ]) {\n        if (i == \"auc\" && !compute_auc) {\n            continue;\n        }\n\n        if (no_summaries) {\n            output[i] = handle.open(i, { load: true }).values;\n        } else {\n            let rhandle = handle.open(i);\n            let current = {};\n            for (const j of Object.keys(rhandle.children)) {\n                current[j] = permuter(rhandle.open(j, { load: true }).values);\n            }\n            output[i] = current;\n        }\n    }\n\n    return output;\n}\n\nexport function fillGroupStats(object, i, vals) {\n    object.means(i, { copy: false }).set(vals.means);\n    object.detected(i, { copy: false }).set(vals.detected);\n\n    for (const [s, v] of Object.entries(vals.cohen)) {\n        object.cohen(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.lfc)) {\n        object.lfc(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    for (const [s, v] of Object.entries(vals.delta_detected)) {\n        object.deltaDetected(i, { summary: summaries2int[s], copy: false }).set(v);\n    }\n\n    if (\"auc\" in vals) {\n        for (const [s, v] of Object.entries(vals.auc)) {\n            object.auc(i, { summary: summaries2int[s], copy: false }).set(v);\n        }\n    }\n}\n\n/**\n * Report marker results for a given group or cluster, ordered so that the strongest candidate markers appear first.\n *\n * @param {ScoreMarkersResults} results - The marker results object generated by the `scoreMarkers` function in **scran.js**.\n * @param {number} group - Integer specifying the group or cluster of interest.\n * Any number can be used if it was part of the `groups` passed to `scoreMarkers`.\n * @param {string} rankEffect - Summarized effect size to use for ranking markers.\n * This should follow the format of `<effect>-<summary>` where `<effect>` may be `lfc`, `cohen`, `auc` or `delta_detected`,\n * and `<summary>` may be `min`, `mean` or `min-rank`.\n *\n * @return An object containing the marker statistics for the selection, sorted by the specified effect and summary size from `rankEffect`.\n * This contains:\n *   - `means`: a Float64Array of length equal to the number of genes, containing the mean expression within the selection.\n *   - `detected`: a Float64Array of length equal to the number of genes, containing the proportion of cells with detected expression inside the selection.\n *   - `lfc`: a Float64Array of length equal to the number of genes, containing the log-fold changes for the comparison between cells inside and outside the selection.\n *   - `delta_detected`: a Float64Array of length equal to the number of genes, containing the difference in the detected proportions between cells inside and outside the selection.\n */\nexport function formatMarkerResults(results, group, rankEffect) {\n    if (!rankEffect || rankEffect === undefined) {\n        rankEffect = \"cohen-min-rank\";\n    }\n\n    var ordering;\n    {\n        // Choosing the ranking statistic. Do NOT do any Wasm allocations\n        // until 'ranking' is fully consumed!\n        let ranking;\n        let increasing = false;\n      \n        let index = 1;\n        if (rankEffect.match(/-min$/)) {\n            index = 0;\n        } else if (rankEffect.match(/-min-rank$/)) {\n            increasing = true;\n            index = 4;\n        }\n\n        if (rankEffect.match(/^cohen-/)) {\n            ranking = results.cohen(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^auc-/)) {\n            ranking = results.auc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^lfc-/)) {\n            ranking = results.lfc(group, { summary: index, copy: false });\n        } else if (rankEffect.match(/^delta-d-/)) {\n            ranking = results.deltaDetected(group, { summary: index, copy: false });\n        } else {\n            throw \"unknown rank type '\" + rankEffect + \"'\";\n        }\n  \n        // Computing the ordering based on the ranking statistic.\n        ordering = new Int32Array(ranking.length);\n        for (var i = 0; i < ordering.length; i++) {\n            ordering[i] = i;\n        }\n        if (increasing) {\n            ordering.sort((f, s) => (ranking[f] - ranking[s]));\n        } else {\n            ordering.sort((f, s) => (ranking[s] - ranking[f]));\n        }\n    }\n  \n    // Apply that ordering to each statistic of interest.\n    var reorder = function(stats) {\n        var thing = new Float64Array(stats.length);\n        for (var i = 0; i < ordering.length; i++) {\n            thing[i] = stats[ordering[i]];\n        }\n        return thing;\n    };\n  \n    var stat_detected = reorder(results.detected(group, { copy: false }));\n    var stat_mean = reorder(results.means(group, { copy: false }));\n    var stat_lfc = reorder(results.lfc(group, { summary: 1, copy: false }));\n    var stat_delta_d = reorder(results.deltaDetected(group, { summary: 1, copy: false }));\n\n    return {\n        \"ordering\": ordering,\n        \"means\": stat_mean,\n        \"detected\": stat_detected,\n        \"lfc\": stat_lfc,\n        \"delta_detected\": stat_delta_d\n    };\n}\n\nexport function locateVersusCache(left, right, cache) {\n    let left_small = left < right;\n\n    let bigg = (left_small ? right : left);\n    if (!(bigg in cache)) {\n        cache[bigg] = {};\n    }\n    let biggversus = cache[bigg];\n\n    let smal = (left_small ? left : right); \n    let rerun = !(smal in biggversus);\n    if (rerun) {\n        biggversus[smal] = {};\n    }\n\n    return { \n        cached: biggversus[smal],\n        run: rerun,\n        left_small: left_small\n    };\n}\n\nexport function freeVersusResults(cache) {\n    if (cache) {\n        for (const v of Object.values(cache)) {\n            for (const v2 of Object.values(v)) {\n                for (const m of Object.values(v2)) {\n                    scran.free(m);\n                }\n            }\n        }\n        for (const k of Object.keys(cache)) {\n            delete cache[k];\n        }\n    }\n}\n\nexport function computeVersusResults(matrices, clusters, block, keep, cache, lfc_threshold, compute_auc) {\n    let new_block = null;\n    if (block !== null) {\n        new_block = scran.subsetBlock(block, keep);\n        scran.dropUnusedBlock(new_block);\n    }\n\n    for (const modality of matrices.available()) {\n        let modmat = matrices.get(modality);\n        let sub;\n        try {\n            sub = scran.subsetColumns(modmat, keep);\n            cache[modality] = scran.scoreMarkers(sub, clusters, { block: new_block, lfcThreshold: lfc_threshold, computeAuc: compute_auc });\n        } finally {\n            scran.free(sub);\n        }\n    }\n}\n","import * as utils from \"./general.js\";\n\nexport function subsetSums(qc, filter, mat, cache, name) {\n    let output = utils.allocateCachedArray(mat.numberOfColumns(), \"Float64Array\", cache, name);\n    let discards = filter.fetchDiscards();\n\n    // unsafe, so no more Wasm allocations past this point. \n    let sums = qc.fetchMetrics().sums({ copy: false }); \n\n    if (discards == null) {\n        output.set(sums);\n    } else {\n        let oarr = output.array();\n        var j = 0;\n        discards.forEach((x, i) => {\n            if (!x) {\n                if (j == output.length) {\n                    throw new Error(\"normalization and filtering are not in sync\");\n                }\n                oarr[j] = sums[i];\n                j++;\n            }\n        });\n        if (j !== output.length) {\n            throw new Error(\"normalization and filtering are not in sync\");\n        }\n    }\n\n    return output;\n}\n","import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get.bind();\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n      return desc.value;\n    };\n  }\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n  return object;\n}","export function areArraysEqual(x, y) {\n    if (x.length !== y.length) {\n        return false;\n    }\n\n    for (var i = 0; i < x.length; i++) {\n        if (x[i] != y[i]) {\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function isArrayLike(x) {\n    return x.constructor == Array || ArrayBuffer.isView(x);\n}\n\nexport function chooseArrayConstructors(con1, con2) {\n    if (con1 == con2) {\n        return con1;\n    }\n\n    if (con1 == Array || con2 == Array) {\n        return Array;\n    }\n\n    if (con1 == BigInt64Array || con2 == BigInt64Array || con1 == BigUint64Array || con2 == BigUint64Array) {\n        return Array;\n    }\n\n    return Float64Array;\n}\n\nexport function formatLengthError(left, right) {\n    return new Error(left + \" should have length equal to \" + right);\n}\n\nexport function checkStringArray(names, typeMessage) {\n    for (const x of names) {\n        if (typeof x !== \"string\") {\n            throw new Error(typeMessage + \" array should only contain strings\");\n        }\n    }\n}\n\nexport function checkNamesArray(names, typeMessage, numExpected, lengthMessage) {\n    checkStringArray(names, typeMessage);\n    if (names.length != numExpected) {\n        throw formatLengthError(typeMessage + \" array\", lengthMessage);\n    }\n}\n\nexport function sum(y) {\n    let total = 0;\n    y.forEach(x => { total += x; });\n    return total;\n}\n\nexport function combineNames(all_names, all_lengths, total_n = null) {\n    let all_null = true;\n    for (var i = 0; i < all_names.length; i++) {\n        if (all_names[i] !== null) {\n            all_null = false;\n        }\n    }\n\n    if (all_null) {\n        return null;\n    }\n\n    if (total_n === null) {\n        total_n = sum(all_lengths);\n    }\n\n    let output = new Array(total_n);\n    let counter = 0;\n    for (var i = 0; i < all_names.length; i++) {\n        let n = all_names[i];\n        if (n === null) {\n            output.fill(\"\", counter, counter + all_lengths[i]);\n            counter += all_lengths[i];\n        } else {\n            n.forEach(x => {\n                output[counter] = x;\n                counter++;\n            });\n        }\n    }\n\n    return output;\n}\n\nexport function createSequence(n) {\n    let output = new Int32Array(n);\n    for (var i = 0; i < n; i++) {\n        output[i] = i;\n    }\n    return output;\n}\n\nexport function isSorted(n, cmp) {\n    for (var i = 1; i < n; ++i) {\n        if (cmp(i-1, i) > 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function convertToInt32Array(x) {\n    if (x instanceof Int32Array) {\n        return x;\n    } else {\n        return new Int32Array(x);\n    }\n}\n\nexport function checkNonNegative(x, msg) {\n    for (const y of x) {\n        if (y < 0) {\n            throw new Error(\"detected a negative entry in '\" + msg + \"'\");\n        }\n    }\n}\n\nexport function object2map(x) {\n    if (x.constructor == Object) {\n        let replacement = new Map;\n        for (const [k, v] of Object.entries(x)) {\n            replacement.set(k, v);\n        }\n        return replacement;\n    } \n\n    if (!(x instanceof Map)) {\n        throw new Error(\"'x' should be either an object or Map\");\n    }\n    return x;\n}\n","/**\n * @param {Array|TypedArray} x - Array of values to be interpreted as truthy or falsey.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.not=false] - Whether to select the entries of `x` that are falsey.\n *\n * @return {Array} Array of indices of the entries of `x` that are truthy (if `not=false`) or falsey (if `not=true`).\n * This array is guaranteed to be sorted in ascending order.\n */\nexport function which(x, { not = false } = {}) {\n    let output = [];\n    x.forEach((y, i) => {\n        if ((!y) == not) {\n            output.push(i);\n        }\n    });\n    return output;\n}\n\n/**\n * Given a factor, return the indices corresponding to each level.\n * This can be used in subsequent {@linkcode splitRows} calls.\n *\n * @param {Array|TypedArray} factor - Array containing the factor of interest.\n *\n * @return {Object} Object where each key is a factor level and each value is an array containing the indices corresponding to that level in `factor`.\n */\nexport function presplitFactor(factor) {\n    let by = {};\n    factor.forEach((x, i) => {\n        if (!(x in by)) {\n            by[x] = [];\n        }\n        by[x].push(i);\n    });\n    return by;\n}\n","import * as utils from \"./utils.js\";\nimport * as misc from \"./miscellaneous.js\";\n\n/**\n * Compute the length of a vector-like object.\n *\n * For Array and TypedArrays, this just returns the `length` property directly.\n *\n * Custom classes should provide a `_bioconductor_LENGTH` method to describe their length.\n * This method should accept no arguments. \n *\n * @param {*} x - Some vector-like object.\n * @return {number} Length of the object.\n */\nexport function LENGTH(x) {\n    if (\"_bioconductor_LENGTH\" in x) {\n        return x._bioconductor_LENGTH();\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'LENGTH' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    return x.length;\n}\n\n/**\n * Slice a vector-like object.\n *\n * For Array and TypedArrays, this just uses `slice()` or `subarray()`.\n *\n * Custom classes should provide a `_bioconductor_SLICE` method to create a slice.\n * This method should accept the same arguments as `SLICE` except for `x`.\n *\n * @param {*} x - Some vector-like object.\n * @param {Object|Array|TypedArray} i - An Array or TypedArray of integer indices specifying the slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.allowView=false] - Whether a view can be created to mimic the slice operation.\n * Whether this is actually done depends on the method, but may improve efficiency by avoiding unnecessary copies.\n *\n * @return {*} A vector-like object, typically of the same class as `x`, containing data for the specified slice.\n *\n * If `allowInPlace = true`, `x` _may_ be modified in place, and the return value _may_ be a reference to `x`. \n */\nexport function SLICE(x, i, { allowView = false } = {}) {\n    if (\"_bioconductor_SLICE\" in x) {\n        let output = new x.constructor;\n        x._bioconductor_SLICE(output, i, { allowView });\n        return output;\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'SLICE' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    if (i.constructor == Object) {\n        if (allowView && ArrayBuffer.isView(x)) {\n            return x.subarray(i.start, i.end);\n        } else {\n            return x.slice(i.start, i.end);\n        }\n    } else {\n        let output = new x.constructor(i.length);\n        i.forEach((y, j) => {\n            output[j] = x[y];\n        });\n        return output;\n    }\n}\n\n/**\n * Combine multiple vector-like objects.\n *\n * For Array and TypedArrays, the combined array is of a class that avoids information loss.\n *\n * Custom classes should provide a `_bioconductor_COMBINE` method to define the combining operation.\n * This method should accept the same arguments as `COMBINE`.\n *\n * @param {Array} objects - Array of vector-like objects to be combined.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE` method of the first element of `objects`.\n *\n * @return {*} A vector-like object containing the concatenated data from the input objects.\n * - If the first entry of `objects` is an instance of a custom class, the return value should be of the same class.\n * - If all `objects` are TypedArrays of the same class, the return value will be a TypedArray of that class.\n * - If any of the `objects` are Arrays, the return value will be an Array.\n * - If any of the `objects` are 64-bit TypedArrays of different classes, the return value will be an Array.\n * - Otherwise, for any other classes of TypedArrays in `objects`, the return value will be a Float64Array.\n */\nexport function COMBINE(objects) {\n    let x = objects[0];\n    if (\"_bioconductor_COMBINE\" in x) {\n        let output = new x.constructor;\n        x._bioconductor_COMBINE(output, objects);\n        return output;\n    }\n\n    if (!utils.isArrayLike(x)) {\n        throw new Error(\"no method for 'COMBINE' in '\" + x.constructor.name + \"' instance\");\n    }\n\n    // It is assumed that every 'y' is of some compatible Array-like type as well.\n    let total_LENGTH = 0;\n    let constructor = x.constructor;\n\n    for (const obj of objects) {\n        total_LENGTH += obj.length;\n        constructor = utils.chooseArrayConstructors(constructor, obj.constructor);\n    }\n\n    let output = new constructor(total_LENGTH);\n    let position = 0;\n    for (const obj of objects) {\n        if (\"set\" in output) {\n            output.set(obj, position);\n            position += obj.length;\n        } else {\n            obj.forEach(x => {\n                output[position] = x;\n                position++;\n            });\n        }\n    }\n\n    return output;\n}\n\n/**\n * Clone a vector-like object.\n * \n * For TypedArrays, this just uses `slice()`.\n * For Arrays, this creates a copy and runs `CLONE` on each element in the copy.\n *\n * Custom classes should provide a `_bioconductor_CLONE` method to define the cloning operation.\n * This method should accept the same arguments as `COMBINE` except for `x`.\n *\n * @param {*} x - Some vector-like object.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.deepCopy=true] - Whether to create a deep copy.\n * The exact interpretation of `deepCopy=false` is left to each method, but generally speaking, \n * any setter (`$`-marked) functions operating on the copy should not alter `x`.\n *\n * @return {*} A clone of `x`, i.e., the return value and `x` should not compare equal.\n * If `deepCopy=true`, all internal components are also cloned.\n */\nexport function CLONE(x, { deepCopy = true } = {}) {\n    if (x instanceof Object) {\n        let options = { deepCopy };\n        if (\"_bioconductor_CLONE\" in x) {\n            let output = new x.constructor;\n            x._bioconductor_CLONE(output, options);\n            return output;\n        }\n\n        if (utils.isArrayLike(x)) {\n            if (x.constructor == Array) {\n                return x.map(y => CLONE(y, options));\n            } else if (deepCopy) {\n                return x.slice();\n            } else {\n                return x.subarray();\n            }\n        }\n\n        if (x.constructor == Object) {\n            if (deepCopy) {\n                let output = {};\n                for (const [k, v] of Object.entries(x)) {\n                    output[k] = CLONE(v);\n                }\n                return output;\n            } else {\n                return { ...x };\n            }\n        }\n\n        if (x.constructor == Map) {\n            let output = new Map;\n            for (const [k, v] of x) {\n                output.set(k, deepCopy ? CLONE(v) : v);\n            }\n            return output;\n        }\n\n        if (x.constructor == Set) {\n            let output = new Set;\n            for (const k of x) {\n                output.add(deepCopy ? CLONE(k) : k);\n            }\n            return output;\n        }\n\n\n        throw new Error(\"unknown CLONE operation for instance of class '\" + x.constructor.name + \"'\");\n    }\n\n    // Immutable atomics should be all that's left.\n    return x;\n}\n\n/**\n * Split a vector-like object along its length according to the levels of a factor of the same length.\n * This works automatically for all classes for which there is a {@linkcode SLICE} method,\n * but custom classes may also choose to define their own `_bioconductor_SPLIT` method. \n *\n * @param {*} x - Some vector-like object.\n * @param {Array|TypedArray} factor - Array containing the factor to use for splitting.\n * This should have the same length as `x`.\n *\n * Alternatively, the output of {@linkcode presplitFactor} can be supplied.\n *\n * @return {Object} An object containing one key per level of `factor`,\n * where the value is the slice of `x` corresponding to the indices of that level in `factor`.\n */\nexport function SPLIT(x, factor) {\n    if (factor.constructor != Object) {\n        factor = misc.presplitFactor(factor);\n    }\n\n    if (\"_bioconductor_SPLIT\" in x) {\n        return x._bioconductor_SPLIT(factor);\n    }\n\n    let output = {};\n    for (const [k, v] of Object.entries(factor)) {\n        output[k] = SLICE(x, v);\n    }\n\n    return output;\n}\n\n/**\n * Return the number of rows for a two-dimensional object.\n * Custom classes should provide a `_bioconductor_NUMBER_OF_ROWS` method, accepting no arguments.\n *\n * @param {*} x - Some two-dimensional object.\n * @return {number} Number of rows.\n */\nexport function NUMBER_OF_ROWS(x) {\n    if (!(\"_bioconductor_NUMBER_OF_ROWS\" in x)) {\n        throw new Error(\"no 'NUMBER_OF_ROWS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_NUMBER_OF_ROWS();\n}\n\n/**\n * Return the number of columns for a two-dimensional object.\n * Custom classes should provide a `_bioconductor_NUMBER_OF_COLUMNS` method, accepting no arguments.\n *\n * @param {*} x - Some two-dimensional object.\n * @return {number} Number of columns.\n */\nexport function NUMBER_OF_COLUMNS(x) {\n    if (!(\"_bioconductor_NUMBER_OF_COLUMNS\" in x)) {\n        throw new Error(\"no 'NUMBER_OF_COLUMNS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    return x._bioconductor_NUMBER_OF_COLUMNS();\n}\n\n/**\n * Slice a two-dimensional object by its rows and/or columns.\n *\n * Custom classes should provide a `_bioconductor_SLICE_2D` method, accepting the same arguments as this generic but with `x` replaced by an \"empty\" instance of the same class.\n * Each method should then fill the empty instance with the sliced contents of `x`.\n *\n * @param {*} x - Some two-dimensional object.\n * @param {?(Object|Array|TypedArray)} rows - An Array or TypedArray of integer indices specifying the row-wise slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n * \n * Alternatively `null`, to indicate that no slicing is to be performed on the rows.\n * @param {?(Object|Array|TypedArray)} columns - An Array or TypedArray of integer indices specifying the column-wise slice of `x` to retain.\n *\n * Alternatively, an object containing `start` and `end`, where the slice is defined as the sequence of consecutive integers in `[start, end)`.\n *\n * Alternatively `null`, to indicate that no slicing is to be performed on the columns.\n * @param {Object} [options={}] - Optional parameters.\n * @param {boolean} [options.allowView=false] - Whether a view can be created to mimic the slice operation.\n * Whether this is actually done depends on the method, but may improve efficiency by avoiding unnecessary copies.\n *\n * @return {*} A two-dimensional object, typically of the same class as `x`, containing data for the specified slice.\n */\nexport function SLICE_2D(x, rows, columns, { allowView = false } = {}) {\n    if (!(\"_bioconductor_SLICE_2D\" in x)) {\n        throw new Error(\"no 'SLICE_2D' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n    return output;\n}\n\n/**\n * Combine multiple two-dimensional objects by row.\n * Custom classes should provide a `_bioconductor_COMBINE_ROWS` method to define the combining operation.\n * This method should accept:\n * - an \"empty\" instance of the class of the first object, to be populated with data.\n * - an array of objects to be combined, like `objects`.\n *\n * @param {Array} objects - Array of two-dimensional objects to be combined by row.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE_ROWS` method of the first element of `objects`.\n *\n * @return {*} A two-dimensional object containing the row-wise concatenated data from the input objects, typically of the same class as the first entry of `objects`.\n */\nexport function COMBINE_ROWS(objects) {\n    let x = objects[0];\n    if (!(\"_bioconductor_COMBINE_ROWS\" in x)) {\n        throw new Error(\"no 'COMBINE_ROWS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_COMBINE_ROWS(output, objects);\n    return output;\n}\n\n/**\n * Combine multiple two-dimensional objects by column.\n * Custom classes should provide a `_bioconductor_COMBINE_COLUMNS` method to define the combining operation.\n * This method should accept:\n * - an \"empty\" instance of the class of the first object, to be populated with data.\n * - an array of objects to be combined, like `objects`.\n *\n * @param {Array} objects - Array of two-dimensional objects to be combined by column.\n * It is assumed that the objects are of the same class, or at least compatible with each other -\n * for custom classes, the definition of \"compatibility\" depends on the `_bioconductor_COMBINE_COLUMNS` method of the first element of `objects`.\n *\n * @return {*} A two-dimensional object containing the column-wise concatenated data from the input objects, typically of the same class as the first entry of `objects`.\n */\nexport function COMBINE_COLUMNS(objects) {\n    let x = objects[0];\n    if (!(\"_bioconductor_COMBINE_COLUMNS\" in x)) {\n        throw new Error(\"no 'COMBINE_COLUMNS' method available for '\" + x.constructor.name + \"' instance\");\n    }\n    let output = new x.constructor;\n    x._bioconductor_COMBINE_COLUMNS(output, objects);\n    return output;\n}\n","import * as generics from \"./AllGenerics.js\";\n\nexport function setterTarget(object, inPlace) {\n    return (inPlace ? object : generics.CLONE(object, { deepCopy: false }));\n}\n\nexport function cloneField(value, deepCopy) {\n    return (deepCopy ? generics.CLONE(value) : value);\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * The Annotated class provides a store for arbitrary object-wide metadata.\n * It is intended as a base class for other structures and should not be constructed directly.\n */\nexport class Annotated {\n    /**\n     * @param {Object|Map} metadata - Object or Map containing arbitrary metadata as key-value pairs.\n     */\n    constructor(metadata) {\n        if (arguments.length == 0) {\n            return;\n        }\n\n        this._metadata = utils.object2map(metadata);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Map} Map containing arbitrary metadata.\n     */\n    metadata() {\n        return this._metadata;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object|Map} value - Object containing the metadata.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Annotated instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Annotated} The Annotated object after replacing the metadata.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setMetadata(value, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._metadata = utils.object2map(value);\n        return target;\n    }\n\n    /**\n     * @param {Object} value - Object containing the metadata.\n     * @return {Annotated} A reference to this Annotated object.\n     */\n    $setMetadata(value) {\n        return this.setMetadata(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        output._metadata = cutils.cloneField(this._metadata, deepCopy);\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as generics from \"./AllGenerics.js\";\n\nexport class InternalList {\n    constructor(entries, order) {\n        if (arguments.length == 0){\n            return;\n        }\n\n        entries = utils.object2map(entries);\n\n        let expected = Array.from(entries.keys());\n        if (order !== null) {\n            utils.checkNamesArray(order, \"'order'\", expected.length, \"the length of 'entries'\");\n            let observed = order.slice().sort();\n            expected.sort();\n\n            if (!utils.areArraysEqual(observed, expected)) {\n                throw new Error(\"values of 'order' should be the same as the keys of 'entries'\");\n            }\n        } else {\n            order = expected;\n        }\n\n        this._entries = entries;\n        this._order = order;\n    }\n\n    static className = \"InternalList\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    names() {\n        return this._order;\n    }\n\n    numberOfEntries() {\n        return this._order.length;\n    }\n\n    #check_entry_index(i) {\n        if (i < 0 || i >= this._order.length) {\n            throw new Error(\" index '\" + String(i) + \"' out of range for this \" + this.constructor.className);\n        }\n    }\n\n    entry(i) {\n        if (typeof i == \"string\") {\n            if (!this._entries.has(i)) {\n                throw new Error(\"no entry '\" + i + \"' present in this \" + this.constructor.className);\n            }\n            return this._entries.get(i);\n        } else {\n            this.#check_entry_index(i);\n            return this._entries.get(this._order[i]);\n        }\n    }\n\n    has(name) {\n        return this._entries.has(name);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n    \n    delete(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            // Shallow copies so that we can do our setting.\n            target._order = target._order.slice();\n            target._entries = new Map(target._entries); \n        }\n\n        if (typeof i == \"string\") {\n            let ii = target._order.indexOf(i);\n            if (ii < 0) {\n                throw new Error(\"no entry '\" + i + \"' present in this \" + this.constructor.className);\n            }\n            target._order.splice(ii, 1); \n            target._entries.delete(i);\n        } else {\n            this.#check_entry_index(i);\n            let n = target._order[i];\n            target._order.splice(i, 1);\n            target._entries.delete(n);\n        }\n\n        return target;\n    }\n\n    set(i, value, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            // Shallow copy so that we can do our setting.\n            target._entries = new Map(target._entries);\n        }\n\n        if (typeof i == \"string\") {\n            if (!target._entries.has(i)) {\n                if (!inPlace) {\n                    target._order = target._order.slice();\n                }\n                target._order.push(i);\n            }\n            target._entries.set(i, value);\n        } else {\n            this.#check_entry_index(i);\n            target._entries.set(target._order[i], value);\n        }\n\n        return target;\n    }\n\n    setNames(names, { inPlace = false } = {}) {\n        utils.checkNamesArray(names, \"replacement 'names'\", this._order.length, \"length of 'names()'\");\n\n        let new_entries = new Map;\n        for (var i = 0; i < names.length; i++) {\n            if (new_entries.has(names[i])) {\n                throw new Error(\"detected duplicate value '\" + names[i] + \"' in replacement 'names'\");\n            }\n            new_entries.set(names[i], this._entries.get(this._order[i]));\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._entries = new_entries;\n        target._order = names;\n        return target;\n    }\n\n    slice(indices, { inPlace = false } = {}) {\n        let new_entries = new Map;\n        let new_order = [];\n\n        for (var ii of indices) {\n            if (typeof ii != \"string\") {\n                this.#check_entry_index(ii);\n                ii = this._order[ii];\n            }\n            if (new_entries.has(ii)) {\n                throw new Error(\"duplicate entries detected in slice request\");\n            } else if (!this._entries.has(ii)) {\n                throw new Error(\"slice contains missing entry '\" + ii + \"' \");\n            }\n\n            new_entries.set(ii, this._entries.get(ii));\n            new_order.push(ii);\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._entries = new_entries;\n        target._order = new_order;\n        return target;\n    }\n\n    reorder(indices, { inPlace = false } = {}) {\n        // Reorder can be slightly more efficient than slice because we just\n        // need to change the ordering vector rather than creating a new Map.\n        if (indices.length !== this._order.length) {\n            throw utils.formatLengthError(\"reordered indices\", \"the number of existing entries\");\n        }\n\n        let new_order = [];\n        for (var ii of indices) {\n            if (typeof ii != \"string\") {\n                this.#check_entry_index(ii);\n                ii = this._order[ii];\n            }\n            if (!this._entries.has(ii)) {\n                throw new Error(\"missing entry '\" + ii + \"' among the reordered indices\");\n            }\n            new_order.push(ii);\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._order = new_order;\n        return target;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_CLONE(output, { deepCopy = true } = {}) {\n        output._entries = (deepCopy ? generics.CLONE(this._entries) : this._entries);\n        output._order = (deepCopy ? generics.CLONE(this._order) : this._order);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    apply(FUN, { inPlace = false } = {}) {\n        let new_entries = (inPlace ? this._entries : new Map);\n        for (const [k, v] of this._entries) {\n            new_entries.set(k, FUN(v));\n        }\n        return (inPlace ? this : new InternalList(new_entries, this._order));\n    }\n\n    static parallelCombine(objects, combiner) {\n        let first_order = objects[0]._order;\n        for (var i = 1; i < objects.length; i++) {\n            if (!utils.areArraysEqual(first_order, objects[i]._order)) {\n                throw new Error(\"detected differences in names between first object and object \" + String(i) + \" to be combined\");\n            }\n        }\n\n        let new_entries = new Map;\n        for (const k of first_order) {\n            let found = objects.map(x => x._entries.get(k));\n            new_entries.set(k, combiner(found));\n        }\n\n        return new InternalList(new_entries, first_order);\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as ann from \"./Annotated.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A DataFrame is a collection of equilength vector-like objects as \"columns\".\n * The number of rows in the DataFrame is equal to the length of the columns, where the i-th row consists of the i-th element from each column.\n *\n * This class supports optional row names, which are either `null` or an array of strings of length equal to the number of rows.\n *\n * This class supports empty instances with a non-zero number of rows, which may be useful for piece-wise construction.\n *\n * The vector-like object for each column is expected to have methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * The DataFrame itself defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @augments Annotated\n */\nexport class DataFrame extends ann.Annotated {\n    /**\n     * @param {Object|Map} columns - Object or Map where keys are the column names and the values are equilength vector-like objects.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?number} [options.numberOfRows=null] - Non-negative value specifying the number of rows in the DataFrame.\n     * If `null`, this is automatically determined from the length of the vectors in `columns`, or from the length of `rowNames`.\n     * If non-`null`, this should not conflict with the inferred lengths from `columns` or `rowNames`.\n     * @param {?Array} [options.rowNames=null] - Array of strings containing the names for each row.\n     * If non-`null`, this should have the same length as the vectors inside `columns`, if any exist.\n     * If `null`, no row names are used.\n     * @param {?Array} [options.columnOrder=null] - Array of strings specifying the ordering of the columns.\n     * If non-`null`, this should have the same values as the keys of `columns`.\n     * If `null`, an arbitrary ordering is obtained from `columns`.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(columns, { numberOfRows = null, rowNames = null, columnOrder = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n        this._numberOfRows = numberOfRows;\n        this._rowNames = rowNames;\n        \n        try {\n            this._columns = new il.InternalList(columns, columnOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize columns for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n\n        for (const k of this._columns.names()) {\n            let n = generics.LENGTH(this._columns.entry(k));\n            if (this._numberOfRows == null) {\n                this._numberOfRows = n;\n            } else if (n != this._numberOfRows) {\n                throw new Error(\"expected all arrays in 'columns' to have equal length\");\n            }\n        }\n\n        if (rowNames != null) {\n            if (this._numberOfRows == null) {\n                this._numberOfRows = rowNames.length;\n            }\n            utils.checkNamesArray(rowNames, \"'rowNames'\", this._numberOfRows, \"'numberOfRows' or the length of arrays in 'columns'\");\n        }\n\n        if (this._numberOfRows == null) {\n            this._numberOfRows = 0;\n        }\n    }\n\n    static className = \"DataFrame\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {?Array} Array of strings containing row names, or `null` if no row names are available.\n     */\n    rowNames() {\n        return this._rowNames;\n    }\n\n    /**\n     * @return {Array} Array of strings containing the column names in the specified order.\n     */\n    columnNames() {\n        return this._columns.names();\n    }\n\n    /**\n     * @param {string} name - Name of a column.\n     * @return {boolean} Whether the column exists in this DataFrame.\n     */\n    hasColumn(name) {\n        return this._columns.has(name);\n    }\n\n    /**\n     * @return {number} Number of rows in this DataFrame.\n     */\n    numberOfRows() {\n        return this._numberOfRows;\n    }\n\n    /**\n     * @return {number} Number of columns in this DataFrame.\n     */\n    numberOfColumns() {\n        return this._columns.numberOfEntries();\n    }\n\n    /**\n     * @param {string|number} i - Column to retrieve, either by name or index.\n     * @return {*} The contents of column `i` as a vector-like object.\n     */\n    column(i) {\n        return this._columns.entry(i);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Column to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     * \n     * @return {DataFrame} The DataFrame after removing the specified column.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeColumn(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.delete(i, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Column to remove, either by name or index.\n     * @return {DataFrame} A reference to this DataFrame after removing the specified column.\n     */\n    $removeColumn(i) {\n        return this.removeColumn(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the column to add, either by name or index.\n     * - If `i` is a number, the column at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of columns.\n     * - If `i` is a string, any column with the same name is replaced.\n     *   If no such column exists, a new column is appended to the DataFrame.\n     * @param {*} value - Array-like column to set/add as the column.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame after adding/replacing the specified column.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumn(i, value, { inPlace = false } = {}) {\n        if (generics.LENGTH(value) != this._numberOfRows) {\n            throw new Error(\"expected 'value' to have the same length as the number of rows in 'x'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the column to add, either by name or index.\n     * - If `i` is a number, the column at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of columns.\n     * - If `i` is a string, any column with the same name is replaced.\n     *   If no such column exists, a new column is appended to the DataFrame.\n     * @param {*} value - Array-like column to set/add as the column.\n     *\n     * @return {DataFrame} A reference to this DataFrame after adding/replacing the specified column.\n     */\n    $setColumn(i, value) {\n        return this.setColumn(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of unique strings containing the new name for each column.\n     * This should have the same length as {@linkcode DataFrame#columnNames DataFrame.columnNames}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = target._columns.setNames(names, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of unique strings containing the new name for each column.\n     * This should have the same length as {@linkcode DataFrame#columnNames DataFrame.columnNames}.\n     * @return {DataFrame} A reference to this DataFrame with modified column names.\n     */\n    $setColumnNames(names) {\n        return this.setColumnNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {?Array} names - Array of unique strings containing the new name for each row.\n     * This should have the same length as {@linkcode DataFrame#numberOfRows DataFrame.numberOfRows}.\n     *\n     * Alternatively, this may be `null` to remove any existing column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} The DataFrame with modified row names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowNames(names, { inPlace = false } = {}) {\n        if (names != null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this._numberOfRows, \"'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowNames = names;\n        return target;\n    }\n\n    /**\n     * @param {?Array} names - Array of unique strings containing the new name for each row.\n     * This should have the same length as {@linkcode DataFrame#numberOfRows DataFrame.numberOfRows}.\n     *\n     * Alternatively, this may be `null` to remove any existing column names.\n     * @return {DataFrame} A reference to this DataFrame with modified row names.\n     */\n    $setRowNames(names) {\n        return this.setRowNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the columns to retain in the slice.\n     * This should refer to unique column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} Reference to this DataFrame after slicing to the specified columns.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceColumns(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._columns = this._columns.slice(i, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the columns to retain in the slice.\n     * This should refer to unique column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DataFrame instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DataFrame} Reference to this DataFrame after slicing to the specified columns.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    $sliceColumns(i) {\n        return this.sliceColumns(i, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        let options = { allowView };\n\n        let new_columns = this._columns.apply(v => generics.SLICE(v, i, options));\n        let new_rowNames = (this._rowNames == null ? null : generics.SLICE(this._rowNames, i, options));\n\n        let new_numberOfRows;\n        if (i.constructor == Object) {\n            new_numberOfRows = i.end - i.start;\n        } else {\n            new_numberOfRows = i.length;\n        }\n\n        output._rowNames = new_rowNames;\n        output._columns = new_columns;\n        output._numberOfRows = new_numberOfRows;\n        output._metadata = this._metadata;\n        return; \n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        let new_columns = il.InternalList.parallelCombine(objects.map(x => x._columns), generics.COMBINE);\n\n        let all_n = [];\n        let all_l = [];\n        for (const yi of objects) {\n            all_n.push(yi.rowNames());\n            all_l.push(yi.numberOfRows());\n        }\n\n        let new_numberOfRows = utils.sum(all_l);\n        let new_rowNames = utils.combineNames(all_n, all_l, new_numberOfRows);\n\n        output._rowNames = new_rowNames;\n        output._columns = new_columns;\n        output._numberOfRows = new_numberOfRows;\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._columns = cutils.cloneField(this._columns, deepCopy);\n        output._rowNames = cutils.cloneField(this._rowNames, deepCopy);\n        output._numberOfRows = this._numberOfRows;\n        return;\n    }\n};\n\n/**\n * Flexibly combine multiple DataFrames by row by filling in missing columns with an array of `null`s.\n * This is equivalent to calling {@linkcode COMBINE} on an array of DataFrames that may have mismatching columns.\n *\n * @param {Array} objects - Array of {@linkplain DataFrame}s to be combined.\n *\n * @return {DataFrame} The combined DataFrame, where the number of rows is equal to sum of rows across `objects`,\n * and the columns is equal to the union of columns across `objects`.\n */\nexport function flexibleCombineRows(objects) {\n    let ckeys = new Set();\n    let corder = [];\n    for (const current of objects) {\n        let cnames = current.columnNames();\n        for (const a of cnames) {\n            if (!ckeys.has(a)) {\n                ckeys.add(a);\n                corder.push(a);\n            }\n        }\n    }\n\n    let copies = [];\n    for (const current of objects) {\n        let dummy = new Array(current.numberOfRows());\n        dummy.fill(null);\n        let copy = generics.CLONE(current, { deepCopy: false });\n\n        for (const a of corder) {\n            if (!current.hasColumn(a)) {\n                copy.$setColumn(a, dummy);\n            }\n        }\n\n        copy._columns = copy._columns.reorder(corder);\n        copies.push(copy);\n    }\n\n    return generics.COMBINE(copies);\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as ann from \"./Annotated.js\";\n\nfunction verifyElementMetadata(elementMetadata, numExpected, className) {\n    if (elementMetadata !== null) {\n        if (!(elementMetadata instanceof df.DataFrame)) {\n            throw new Error(\"'elementMetadata' should be a DataFrame\");\n        }\n        if (generics.LENGTH(elementMetadata) !== numExpected) {\n            throw new Error(\"'elementMetadata' should have the same number of rows as 'LENGTH(<\" + className + \">)'\");\n        }\n    } else {\n        elementMetadata = new df.DataFrame({}, { numberOfRows: numExpected });\n    }\n    return elementMetadata;\n}\n\n/**\n * The Vector class implements a store for arbitrary per-element metadata and per-element names.\n * It is intended as a base class for other structures that have a concept of \"vector-ness\".\n * It should not be constructed directly.\n *\n * @augments Annotated\n */\nexport class Vector extends ann.Annotated {\n    /**\n     * @param {number} length - Number of elements in this vector-like object.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-element annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(length, { names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n\n        this._elementMetadata = verifyElementMetadata(elementMetadata, length, this.constructor.className);\n\n        if (names !== null) {\n            utils.checkNamesArray(names, \"'names'\", length, \"'LENGTH(<\" + this.constructor.className + \">)'\");\n        }\n        this._names = names;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {DataFrame} A {@linkplain DataFrame} with one row corresponding to each vector element, containing arbitrary per-element metadata.\n     */\n    elementMetadata() {\n        return this._elementMetadata;\n    }\n\n    /**\n     * @return {?Array} Array of strings containing the name of each range, or `null` if no names are available.\n     */\n    names() {\n        return this._names;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {?DataFrame} elementMetadata - Arbitrary metadata for each vector element.\n     * This should have number of rows equal to the vector length.\n     * Alternatively `null`, in which case all existing per-element metadata is removed.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Vector instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Vector} The Vector object after setting the element metadata to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setElementMetadata(elementMetadata, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        target._elementMetadata = verifyElementMetadata(elementMetadata, generics.LENGTH(target), target.constructor.className);\n        return target;\n    }\n\n    /**\n     * @param {?DataFrame} elementMetadata - Arbitrary metadata for each vector element.\n     * This should have number of rows equal to the vector length.\n     * Alternatively `null`, in which case all existing per-element metadata is removed.\n     *\n     * @return {Vector} A reference to this Vector object after setting the element metadata to `value`.\n     */\n    $setElementMetadata(elementMetadata) {\n        return this.setElementMetadata(elementMetadata, { inPlace: true });\n    }\n\n    /**\n     * @param {?Array} names - Array of strings containing a name for each range.\n     * This should have length equal to the number of ranges.\n     * Alternatively `null`, if no names are present.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Vector instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {Vector} The Vector object after setting the names to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", generics.LENGTH(this), \"'LENGTH(<\" + this.constructor.className + \">)'\");\n        } \n        let target = cutils.setterTarget(this, inPlace);\n        target._names = names;\n        return target;\n    }\n\n    /**\n     * @param {?Array} names - Array of strings containing a name for each range.\n     * This should have length equal to the number of ranges.\n     * Alternatively `null`, if no names are present.\n     *\n     * @return {Vector} A reference to this Vector object after setting the element metadata to `value`.\n     */\n    $setNames(names) {\n        return this.setNames(names, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        output._elementMetadata = generics.SLICE(this._elementMetadata, i, { allowView });\n        output._names = (this._names === null ? null : generics.SLICE(this._names, i, { allowView }));\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        let all_em = [];\n        let all_n = [];\n        let all_l = [];\n\n        for (const x of objects) {\n            all_em.push(x._elementMetadata);\n            all_n.push(x._names);\n            all_l.push(generics.LENGTH(x));\n        }\n\n        output._elementMetadata = generics.COMBINE(all_em);\n        output._names = utils.combineNames(all_n, all_l);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._elementMetadata = cutils.cloneField(this._elementMetadata, deepCopy);\n        output._names = cutils.cloneField(this._names, deepCopy);\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\n\nexport function convertPositionToRank(start, end, { slice = null } = {}) {\n    let n = (slice == null ? start.length : slice.length);\n\n    let positions = new Int32Array(n * 2);\n    let add = new Uint8Array(n * 2);\n    let index = new Int32Array(n * 2);\n\n    {\n        let counter = 0;\n        let fillIndex = i => {\n            let at = counter * 2;\n            let next = at + 1;\n            positions[at] = start[i];\n            positions[next] = end[i];\n            add[at] = 1;\n            add[next] = 0;\n            index[at] = counter;\n            index[next] = counter;\n            counter++;\n        };\n\n        if (slice === null) {\n            for (var i = 0; i < n; i++) {\n                fillIndex(i);                                \n            }\n        } else {\n            for (const i of slice) {\n                fillIndex(i);\n            }\n        }\n    }\n\n    let order = utils.createSequence(positions.length);\n    order.sort((i, j) => positions[i] - positions[j]);\n\n    let rank2position = [];\n    let new_starts = new Int32Array(n);\n    let new_ends = new Int32Array(n);\n\n    let last = null;\n    for (const i of order) {\n        let pos = positions[i];\n        let idx = index[i];\n\n        if (pos !== last) {\n            rank2position.push(pos);\n            last = pos;\n        }\n\n        if (add[i]) {\n            new_starts[idx] = rank2position.length - 1;\n        } else {\n            new_ends[idx] = rank2position.length - 1;\n        }\n    }\n\n    return { rank2position, startRanks: new_starts, endRanks: new_ends };\n}\n\nexport function buildIntervalTree(start, end, { slice = null } = {}) {\n    let { rank2position, startRanks, endRanks } = convertPositionToRank(start, end, { slice });\n\n    // Now, building an nicely balanced interval tree based on the ranks.\n    let tree = [ create_node(0, rank2position.length) ];\n    if (slice === null) {\n        for (var i = 0; i < startRanks.length; i++) {\n            recursive_build_tree(startRanks[i], endRanks[i], i, tree, 0);\n        }\n    } else {\n        for (var i = 0; i < startRanks.length; i++) {\n            recursive_build_tree(startRanks[i], endRanks[i], slice[i], tree, 0);\n        }\n    }\n\n    // Running a clean-up operation to convert ranks back to positions.\n    let one_past_the_end = (rank2position.length > 0 ? rank2position[rank2position.length - 1] + 1 : 1);\n    rank2position.push(one_past_the_end);\n\n    for (const x of tree) {\n        x.left_bound = rank2position[x.left_bound];\n        x.right_bound = rank2position[x.right_bound];\n        x.center = rank2position[x.center];\n\n        // Also sorting ranges by increasing start and DECREASING end positions.\n        let start_overlaps_sorted = x.overlaps.slice().sort((a, b) => start[a] - start[b]);\n        let end_overlaps_sorted = x.overlaps.sort((a, b) => end[b] - end[a]) // reversed order - deliberate!\n        x.overlaps = {\n            start: start_overlaps_sorted.map(i => [start[i], i]),\n            end: end_overlaps_sorted.map(i => [end[i], i])\n        };\n    }\n\n    return tree;\n}\n\nfunction create_node(left_bound, right_bound) {\n    return { \n        left_bound: left_bound,\n        right_bound: right_bound,\n        center: left_bound + Math.floor((right_bound - left_bound) / 2),\n        left_node: null,\n        right_node: null,\n        overlaps: []\n    };\n}\n\nfunction recursive_build_tree(start, end, index, tree, node) {\n    let current = tree[node];\n\n    if (start > current.center) {\n        if (current.right_node === null) {\n            current.right_node = tree.length;\n            tree.push(create_node(current.center, current.right_bound));\n        }\n        recursive_build_tree(start, end, index, tree, current.right_node);\n\n    } else if (end < current.center || (end == current.center && end > start)) { // Let 0-length ranges fall through to the next clause if they lie exactly on the center.\n        if (current.left_node === null) {\n            current.left_node = tree.length;\n            tree.push(create_node(current.left_bound, current.center));\n        }\n        recursive_build_tree(start, end, index, tree, current.left_node);\n\n    } else {\n        // At some point, every range ends up here. This is because left_bound\n        // == center upon successive halving to create new nodes, so every\n        // range will eventually overlap a center at its own start position.\n        current.overlaps.push(index);\n    }\n}\n\nexport function queryIntervalTree(start, end, tree) {\n    let results = [];\n    if (start > tree.right_bound) {\n        return results;\n    }\n\n    if (end < tree.left_bound || (end == tree.left_bound && end > start)) { // Still allow 0-length ranges to fall through for search.\n        return results;\n    }\n\n    recursive_query_tree(start, end, tree, 0, results); \n    return results;\n}\n\nfunction recursive_query_tree(start, end, tree, node, results) {\n    let current = tree[node];\n\n    if (start > current.center) {\n        for (const overlap of current.overlaps.end) {\n            if (overlap[0] > start) {\n                results.push(overlap[1]);\n            } else {\n                break;\n            }\n        }\n        if (current.right_node !== null) {\n            recursive_query_tree(start, end, tree, current.right_node, results);\n        }\n\n    } else if (end < current.center || (end == current.center && end > start)) { // Again, let zero-length ranges fall through if they lie directly on the center.\n        for (const overlap of current.overlaps.start) {\n            if (overlap[0] < end || (overlap[0] == end && start == end)) { // handle zero-length ranges directly on the start position of the center-overlapping range.\n                results.push(overlap[1]);\n            } else {\n                break;\n            }\n        }\n        if (current.left_node !== null) {\n            recursive_query_tree(start, end, tree, current.left_node, results);\n        }\n\n    } else {\n        for (const overlap of current.overlaps.start) {\n            results.push(overlap[1]);\n        }\n\n        if (end > current.center) {\n            if (current.right_node !== null) {\n                recursive_query_tree(start, end, tree, current.right_node, results);\n            }\n        }\n        if (start < current.center) {\n            if (current.left_node !== null) {\n                recursive_query_tree(start, end, tree, current.left_node, results);\n            }\n        }\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as vec from \"./Vector.js\";\nimport * as olap from \"./overlap-utils.js\";\n\n/**\n * An IRanges object is a collection of integer ranges, inspired by the class of the same name from the Bioconductor ecosystem.\n * Each range consists of a start position and a width, and may be associated with arbitrary range-level metadata in a {@linkplain DataFrame}.\n * The IRanges defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @extends Vector\n */\nexport class IRanges extends vec.Vector {\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array|TypedArray} start - Array of start positions for each range.\n     * This should be coercible into an Int32Array.\n     * @param {Array|TypedArray} width - Array of widths for each range.\n     * This should be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(start, width, { names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(start.length, { names, elementMetadata, metadata });\n\n        this._start = utils.convertToInt32Array(start);\n        utils.checkNonNegative(this._start, \"start\");\n\n        this._width = utils.convertToInt32Array(width);\n        utils.checkNonNegative(this._width, \"width\");\n\n        let n = this._start.length;\n        if (n !== this._width.length) {\n            throw new Error(\"'start' and 'width' should have the same length\");\n        }\n    }\n\n    static className = \"IRanges\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Int32Array} Array of integers containing the start position for each range.\n     */\n    start() {\n        return this._start;\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the end position (specifically, one-past-the-end) for each range.\n     */\n    end() {\n        return this._start.map((x, i) => x + this._width[i]);\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the width of each range.\n     */\n    width() {\n        return this._width;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array|TypedArray} value - Array of start positions for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this IRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {IRanges} The IRanges object after setting the start positions to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setStart(value, { inPlace = false } = {}) {\n        let candidate = utils.convertToInt32Array(value);\n        if (candidate.length !== generics.LENGTH(this)) {\n            throw new Error(\"'start' should be replaced by array of the same length\");\n        }\n        utils.checkNonNegative(candidate, \"start\");\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._start = candidate;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of start positions for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @return {IRanges} A reference to this IRanges object after setting the start positions to `value`.\n     */\n    $setStart(value) {\n        return this.setStart(value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of widths for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this IRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {IRanges} The IRanges object after setting the widths to `value`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setWidth(value, { inPlace = false } = {}) {\n        let candidate = utils.convertToInt32Array(value);\n        if (candidate.length !== generics.LENGTH(this)) {\n            throw new Error(\"'width' should be replaced by array of the same length\");\n        }\n        utils.checkNonNegative(candidate, \"width\");\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._width = candidate;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} value - Array of widths for each range.\n     * This should have length equal to the number of ranges and be coercible into an Int32Array.\n     * @return {IRanges} A reference to this IRanges object after setting the widths to `value`.\n     */\n    $setWidth(value) {\n        return this.setWidth(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {IRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain IRanges} instances.\n     */\n    buildOverlapIndex() {\n        let tree = olap.buildIntervalTree(this._start, this.end());\n        return new IRangesOverlapIndex(tree);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._start.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        output._start = generics.SLICE(this._start, i, { allowView });\n        output._width = generics.SLICE(this._width, i, { allowView });\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        let all_s = [];\n        let all_w = [];\n        for (const x of objects) {\n            all_s.push(x._start);\n            all_w.push(x._width);\n        }\n\n        output._start = generics.COMBINE(all_s);\n        output._width = generics.COMBINE(all_w);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._start = cutils.cloneField(this._start, deepCopy);\n        output._width = cutils.cloneField(this._width, deepCopy);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {IRanges} A zero-length IRanges object.\n     */\n    static empty() {\n        return new IRanges(new Int32Array, new Int32Array);\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain IRanges} objects.\n * This is typically constructed using the {@linkcode IRanges#buildOverlapIndex IRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query IRanges to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class IRangesOverlapIndex {\n    constructor(tree) {\n        this._tree = tree;\n    }\n\n    /**\n     * @param {IRanges} query - The query object, containing ranges to be overlapped with those in the reference IRanges (that was used to construct this IRangesOverlapIndex object).\n     * @return {Array} An array of length equal to the number of ranges in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain IRanges} object.\n     */\n    overlap(query) {\n        let n = generics.LENGTH(query);\n        let output = new Array(n);\n        for (var i = 0; i < n; i++) {\n            output[i] = olap.queryIntervalTree(query._start[i], query._start[i] + query._width[i], this._tree);\n        }\n        return output;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as ir from \"./IRanges.js\";\nimport * as vec from \"./Vector.js\";\nimport * as olap from \"./overlap-utils.js\";\n\n/**\n * A GRanges object is a collection of genomic ranges, inspired by the class of the same name from the Bioconductor ecosystem.\n * Each range consists of a sequence name, a start position on that sequence, and a width.\n * Each range may also be associated with arbitrary range-level metadata in a {@linkplain DataFrame}.\n * The GRanges defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * @extends Vector\n */\nexport class GRanges extends vec.Vector {\n    static #convertToInt8Array(x) {\n        if (x instanceof Int8Array) {\n            return x;\n        } else {\n            return new Int8Array(x);\n        }\n    }\n\n    static #checkStrandedness(strand) {\n        for (const y of strand) {\n            if (y < -1 || y > 1) {\n                throw new Error(\"'strand' must be -1, 0 or 1\");\n            }\n        }\n    }\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @param {IRanges} ranges - Position and width of the range on its specified sequence.\n     * This should have the same length as `seqnames`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|TypedArray)} [options.strand=null] - Array containing the strandedness of each genomic range.\n     * This should be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     * If `null`, this is assumed to be 0 for all genomic ranges.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each genomic range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(seqnames, ranges, { strand = null, names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(seqnames.length, { names, elementMetadata, metadata });\n\n        utils.checkStringArray(seqnames, \"seqnames\");\n        this._seqnames = seqnames;\n\n        let n = seqnames.length;\n        if (n !== generics.LENGTH(ranges)) {\n            throw utils.formatLengthError(\"'ranges'\", \"'seqnames'\");\n        }\n        this._ranges = ranges;\n\n        if (strand !== null) {\n            if (n !== strand.length) {\n                throw utils.formatLengthError(\"'strand'\", \"'seqnames'\");\n            }\n            strand = GRanges.#convertToInt8Array(strand);\n            GRanges.#checkStrandedness(strand);\n        } else {\n            strand = new Int8Array(n);\n            strand.fill(0);\n        }\n        this._strand = strand;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Int32Array} Array of integers containing the start position for each genomic range.\n     */\n    start() {\n        return this._ranges.start();\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the end position (specifically, one-past-the-end) for each genomic range.\n     */\n    end() {\n        return this._ranges.end();\n    }\n\n    /**\n     * @return {Int32Array} Array of integers containing the width of each genomic range.\n     */\n    width() {\n        return this._ranges.width();\n    }\n\n    /**\n     * @return {Array} Array of strings containing the sequence name for each genomic range.\n     */\n    seqnames() {\n        return this._seqnames;\n    }\n\n    /**\n     * @return {IRanges} Start positions and widths for all ranges on their specified sequence names.\n     */\n    ranges() {\n        return this._ranges;\n    }\n\n    /**\n     * @return {Int8Array} Array containing the strandedness for each genomic range - 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     */\n    strand() {\n        return this._strand;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the sequence names to `seqnames`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setSeqnames(seqnames, { inPlace = false } = {}) {\n        utils.checkNamesArray(seqnames, \"replacement 'seqnames'\", generics.LENGTH(this), \"'LENGTH(<GRanges>)'\");\n        let target = cutils.setterTarget(this, inPlace); \n        target._seqnames = seqnames;\n        return target;\n    }\n\n    /**\n     * @param {Array} seqnames - Array of strings containing the sequence names for each genomic range.\n     * @return {GRanges} A reference to this GRanges object after setting the sequence names to `seqnames`.\n     */\n    $setSeqnames(seqnames) {\n        return this.setSeqnames(seqnames, { inPlace: true });\n    }\n\n    /**\n     * @param {IRanges} ranges - Start positions and widths for each genomic range.\n     * This should have length equal to the number of ranges. \n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the ranges to `ranges`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRanges(ranges, { inPlace = false } = {}) {\n        if (!(ranges instanceof ir.IRanges)) {\n            throw new Error(\"'ranges' should be an IRanges object\");\n        }\n\n        if (generics.LENGTH(ranges) !== generics.LENGTH(this._ranges)) {\n            throw utils.formatLengthError(\"replacement 'ranges'\", \"'LENGTH(<GRanges>)'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace); \n        target._ranges = ranges;\n        return target;\n    }\n\n    /**\n     * @param {IRanges} ranges - Start positions and widths for each genomic range.\n     * This should have length equal to the number of ranges. \n     * @return {GRanges} A reference to this GRanges object after setting the ranges to `ranges`.\n     */\n    $setRanges(ranges) {\n        return this.setRanges(ranges, { inPlace: true });\n    }\n\n    /**\n     * @param {Array|TypedArray} strand - Array of strands for each genomic range.\n     * This should have length equal to the number of ranges. \n     * Entries may be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GRanges} The GRanges object after setting the strands to `strand`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setStrand(strand, { inPlace = false } = {}) {\n        if (this._strand.length !== strand.length) {\n            throw utils.formatLengthError(\"'strand'\", \"'seqnames'\");\n        }\n        strand = GRanges.#convertToInt8Array(strand);\n        GRanges.#checkStrandedness(strand);\n\n        let target = cutils.setterTarget(this, inPlace); \n        target._strand = strand;\n        return target;\n    }\n\n    /**\n     * @param {Array|TypedArray} strand - Array of strands for each genomic range.\n     * This should have length equal to the number of ranges. \n     * Entries may be 0 (any strand), 1 (forward strand) or -1 (reverse strand).\n     *\n     * @return {GRanges} A reference to this GRanges object after setting the strands to `strand`.\n     */\n    $setStrand(strand) {\n        return this.setStrand(strand, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|Set)} [options.restrictToSeqnames=null] - Array or Set containing the sequence names to use in the index.\n     * If `null`, all available sequence names are used.\n     * @param {?(Array|Set)} [options.restrictToStrand=null] - Array or Set containing the strands to use in the index.\n     * If `null`, all available strands are used.\n     *\n     * @return {GRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain GRanges} instances.\n     */\n    buildOverlapIndex({ restrictToSeqnames = null, restrictToStrand = null } = {}) {\n        let indices = utils.createSequence(generics.LENGTH(this));\n        let by_seqname = generics.SPLIT(indices, this._seqnames);\n        let starts = this.start();\n        let ends = this.end();\n\n        if (restrictToSeqnames !== null && restrictToSeqnames instanceof Array) {\n            restrictToSeqnames = new Set(restrictToSeqnames);\n        }\n        if (restrictToStrand !== null && restrictToStrand instanceof Array) {\n            restrictToStrand = new Set(restrictToStrand);\n        }\n\n        for (const name of Object.keys(by_seqname)) {\n            if (restrictToSeqnames !== null && !restrictToSeqnames.has(name)) {\n                delete by_seqname[name];\n                continue;\n            }\n            let seqname_indices = by_seqname[name];\n            let seqname_strand = generics.SLICE(this._strand, seqname_indices);\n            let by_strand = generics.SPLIT(seqname_indices, seqname_strand);\n\n            for (const str of Object.keys(by_strand)) {\n                if (restrictToStrand !== null && !restrictToStrand.has(Number(str))) {\n                    delete by_strand[str];\n                    continue;\n                }\n                let str_indices = by_strand[str];\n                by_strand[str] = olap.buildIntervalTree(starts, ends, { slice: str_indices });\n            }\n            by_seqname[name] = by_strand;\n        }\n\n        return new GRangesOverlapIndex(by_seqname);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._seqnames.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false }) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        output._seqnames = generics.SLICE(this._seqnames, i, { allowView });\n        output._ranges = generics.SLICE(this._ranges, i, { allowView });\n        output._strand = generics.SLICE(this._strand, i, { allowView });\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        let all_sn = [];\n        let all_rr = [];\n        let all_st = [];\n        for (const x of objects) {\n            all_sn.push(x._seqnames);\n            all_rr.push(x._ranges);\n            all_st.push(x._strand);\n        }\n\n        output._seqnames = generics.COMBINE(all_sn);\n        output._ranges = generics.COMBINE(all_rr);\n        output._strand = generics.COMBINE(all_st);\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n        output._seqnames = cutils.cloneField(this._seqnames, deepCopy);\n        output._ranges = cutils.cloneField(this._ranges, deepCopy);\n        output._strand = cutils.cloneField(this._strand, deepCopy);\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} A zero-length GRanges object.\n     */\n    static empty() {\n        return new GRanges([], ir.IRanges.empty());\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain GRanges} objects.\n * This is typically constructed using the {@linkcode GRanges#buildOverlapIndex GRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query GRanges to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class GRangesOverlapIndex {\n    constructor(index) {\n        this._index = index;\n    }\n\n    /**\n     * @param {GRanges} query - The query object, containing ranges to be overlapped with those in the reference GRanges (that was used to construct this GRangesOverlapIndex object).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.ignoreStrand=true] - Whether to ignore differences in strandedness between the ranges in `query` and the reference object.\n     *\n     * @return {Array} An array of length equal to the number of ranges in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain GRanges} object.\n     */\n    overlap(query, { ignoreStrand = true } = {}) {\n        let n = generics.LENGTH(query);\n        let results = new Array(n);\n        let starts = query.start();\n        let ends = query.end();\n\n        for (var i = 0; i < n; i++) {\n            results[i] = [];\n            let my_results = results[i];\n\n            let name = query._seqnames[i];\n            if (!(name in this._index)) {\n                continue;\n            }\n            let seq_index = this._index[name];\n\n            let strand = query._strand[i];\n            let allowed_strands;\n            if (ignoreStrand || strand == 0) {\n                allowed_strands = Object.keys(seq_index);\n            } else {\n                let sstr = String(strand);\n                if (!(sstr in seq_index)) {\n                    continue;\n                }\n                allowed_strands = [ sstr ];\n            }\n\n            let start = starts[i];\n            let end = ends[i];\n            for (const str of allowed_strands) {\n                let str_results = olap.queryIntervalTree(start, end, seq_index[str]);\n                str_results.forEach(x => my_results.push(x));\n            }\n        }\n\n        return results;\n    }\n}\n","import * as vec from \"./Vector.js\";\nimport * as gr from \"./GRanges.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as generics from \"./AllGenerics.js\";\n\n/**\n * A GroupedGRanges object is a collection of groups of genomic ranges, inspired by the `GRangesList` class from the Bioconductor ecosystem.\n * Each group consists of a {@linkplain GRanges} object of arbitrary length, which is most often used to represent a multi-exon gene.\n * The GroupedGRanges can be considered a vector of groups, and defines methods for the following generics:\n *\n * - {@linkcode LENGTH}\n * - {@linkcode SLICE}\n * - {@linkcode COMBINE}\n * - {@linkcode CLONE}\n *\n * Our implementation re-uses Bioconductor's strategy of storing the groups in a single concatenated GRanges.\n * This improves efficiency for large numbers of small GRanges, especially in placeholder objects where all the GRanges are zero-length.\n * \n * @extends Vector\n */\nexport class GroupedGRanges extends vec.Vector {\n    static #computeStarts(lengths) {\n        let starts = new Int32Array(lengths.length);\n        let last = 0;\n        for (var i = 0; i < lengths.length; i++) {\n            starts[i] = last;\n            last += lengths[i];\n        }\n        return { starts: starts, total: last };\n    }\n\n    #staged_setGroup = null;\n\n    /**\n     * @param {Array|GRanges} ranges - An array of {@linkplain GRanges} objects, where each element represents a group of genomic ranges.\n     * All objects should have compatible columns in their {@linkplain Vector#elementMetadata elementMetadata}.\n     * \n     * Alternatively, a single GRanges containing a concatenation of ranges from all groups.\n     * In this case, `rangeLengths` must be supplied.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(TypedArray|Array)} [options.rangeLengths=null] - Length of the ranges within each group.\n     * This should be coercible to an Int32Array, contain non-negative values, and have a sum equal to the length of `ranges`.\n     * Only used if `ranges` is a single {@linkplain GRanges} object, where each group's ranges are assumed to form contiguous intervals along `ranges`.\n     * @param {?Array} [options.names=null] - Array of strings of length equal to `start`, containing names for each genomic range.\n     * Alternatively `null`, in which case the ranges are assumed to be unnamed.\n     * @param {?DataFrame} [options.elementMetadata=null] - A {@linkplain DataFrame} with number of rows equal to the length of `start`, containing arbitrary per-range annotations.\n     * Alternatively `null`, in which case a zero-column DataFrame is automatically constructed.\n     * @param {Object} [options.metadata={}] - Object containing arbitrary metadata as key-value pairs.\n     */\n    constructor(ranges, { rangeLengths = null, names = null, elementMetadata = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        if (ranges.constructor == Array) {\n            super(ranges.length, { names, elementMetadata, metadata });\n            rangeLengths = new Int32Array(ranges.length);\n            for (var i = 0; i < rangeLengths.length; i++) {\n                if (!(ranges[i] instanceof gr.GRanges)) {\n                    throw new Error(\"'ranges' must either be a 'GRanges' or an array of 'GRanges'\");\n                }\n                rangeLengths[i] = generics.LENGTH(ranges[i]);\n            }\n            ranges = generics.COMBINE(ranges);\n\n        } else {\n            if (!(ranges instanceof gr.GRanges)) {\n                throw new Error(\"'ranges' must either be a 'GRanges' or an array of 'GRanges'\");\n            }\n            if (rangeLengths == null) {\n                throw new Error(\"'rangeLengths' must be specified when 'ranges' is a 'GRanges'\");\n            }\n            super(rangeLengths.length, { names, elementMetadata, metadata });\n            rangeLengths = utils.convertToInt32Array(rangeLengths);\n            utils.checkNonNegative(rangeLengths);\n        }\n\n        this._ranges = ranges;\n        this._rangeLengths = rangeLengths;\n\n        let accumulated = GroupedGRanges.#computeStarts(rangeLengths);\n        this._rangeStarts = accumulated.starts;\n\n        if (accumulated.total !== generics.LENGTH(ranges)) {\n            throw new Error(\"sum of 'rangeLengths' must be equal to the length of 'ranges'\");\n        }\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} The concatenated set of ranges across all groups. \n     */\n    ranges() {\n        this.#flush_staged_setGroup();\n        return this._ranges;\n    }\n\n    /**\n     * @return {Int32Array} The start indices for each group's ranges along the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     */\n    rangeStarts() {\n        this.#flush_staged_setGroup();\n        return this._rangeStarts;\n    }\n\n    /**\n     * @return {Int32Array} The length of each group's ranges along the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     */\n    rangeLengths() {\n        this.#flush_staged_setGroup();\n        return this._rangeLengths;\n    }\n\n    /**\n     * @param {number} i - Index of the group of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether a view can be created in any internal slicing operations.\n     *\n     * @return {GRanges} The genomic ranges for group `i`.\n     */\n    group(i, { allowView = false } = {}) {\n        this.#flush_staged_setGroup();\n        let s = this._rangeStarts[i];\n        return generics.SLICE(this._ranges, { start: s, end: s + this._rangeLengths[i] }, { allowView });\n    }\n\n    /**\n     * @return {number} Number of groups in this object.\n     */\n    numberOfGroups() {\n        return this._rangeStarts.length;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {GRanges} ranges - Genomic ranges of length equal to the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GroupedGRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GroupedGRanges} The GroupedGRanges object after modifying the internal ranges.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRanges(ranges, { inPlace = false } = {}) {\n        if (!(ranges instanceof gr.GRanges)) {\n            throw new Error(\"'ranges' must be a 'GRanges'\");\n        }\n\n        this.#flush_staged_setGroup();\n        if (generics.LENGTH(ranges) !== generics.LENGTH(this._ranges)) {\n            throw utils.formatLengthError(\"'ranges'\", \"number of ranges\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._ranges = ranges;\n        return target;\n    }\n\n    /**\n     * @param {GRanges} ranges - Genomic ranges of length equal to the concatenated set of ranges returned by {@linkcode GroupedGRanges#ranges ranges}.\n     * @return {GroupedGRanges} A reference to this GroupedGRanges object after modifying the internal ranges.\n     */\n    $setRanges(ranges) {\n        return this.setRanges(ranges, { inPlace: true });\n    }\n\n    #flush_staged_setGroup() {\n        let staged = this.#staged_setGroup;\n        if (staged === null) {\n            return;\n        }\n\n        staged.sort((a, b) => {\n            let diff = a[0] - b[0];\n            return (diff === 0 ? a[1] - b[1] : diff);\n        });\n\n        let counter = 0;\n        let accumulated = 0;\n        let last_start = 0;\n        let more_ranges = [];\n\n        let ngroups = this.numberOfGroups();\n        for (var g = 0; g < ngroups; g++) {\n            if (counter < staged.length && g == staged[counter][0]) { \n                let current_start = this._rangeStarts[g];\n                if (last_start < current_start) {\n                    more_ranges.push(generics.SLICE(this._ranges, { start: last_start, end: current_start }));\n                }\n                last_start = current_start + this._rangeLengths[g];\n\n                let replacement;\n                do {\n                    replacement = staged[counter][2];\n                    counter++;\n                } while (counter < staged.length && g == staged[counter][0]);\n\n                more_ranges.push(replacement);\n                this._rangeLengths[g] = generics.LENGTH(replacement);\n            }\n\n            this._rangeStarts[g] = accumulated;\n            accumulated += this._rangeLengths[g];\n        }\n\n        let nranges = generics.LENGTH(this._ranges);\n        if (last_start < nranges) {\n            more_ranges.push(generics.SLICE(this._ranges, { start: last_start, end: nranges }));\n        }\n\n        try {\n            this._ranges = generics.COMBINE(more_ranges);\n        } catch (e) {\n            throw new Error(\"failed to combine staged '$setGroup' operations; \" + e.message);\n        }\n\n        this.#staged_setGroup = null;\n        return;\n    }\n\n    /**\n     * Multiple consecutive calls to `$setGroup` are not executed immediately.\n     * Rather, the operations are staged and executed in batch once the modified GroupedGRanges is used in other methods.\n     * This enables efficient setting of individual groups inside a single concatenated {@linkplain GRanges}. \n     *\n     * @param {number} i - Index of the group of interest.\n     * @param {GRanges} ranges - Genomic ranges for group `i`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this GroupedGRanges instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {GroupedGRanges} The GroupedGRanges object after setting group `i`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setGroup(i, ranges, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        if (target.#staged_setGroup === null) {\n            target.#staged_setGroup = [];\n        } else if (!inPlace) {\n            target.#staged_setGroup = target.#staged_setGroup.slice();\n        }\n\n        if (!inPlace) {\n            target._rangeStarts = target._rangeStarts.slice();\n            target._rangeLengths = target._rangeLengths.slice();\n        }\n\n        let nops = target.#staged_setGroup.length;\n        target.#staged_setGroup.push([i, nops, ranges]);\n        return target;\n    }\n\n    /**\n     * See comments for {@linkcode GroupedGRanges#$setGroup $setGroup}.\n     *\n     * @param {number} i - Index of the group of interest.\n     * @param {GRanges} ranges - Genomic ranges for group `i`.\n     *\n     * @return {GroupedGRanges} A reference to this GroupedGRanges object after setting group `i`.\n     */\n    $setGroup(i, ranges) {\n        return this.setGroup(i, ranges, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?(Array|Set)} [options.restrictToSeqnames=null] - Array or Set containing the sequence names to use in the index.\n     * If `null`, all available sequence names are used.\n     * @param {?(Array|Set)} [options.restrictToStrand=null] - Array or Set containing the strands to use in the index.\n     * If `null`, all available strands are used.\n     *\n     * @return {GroupedGRangesOverlapIndex} A pre-built index for computing overlaps with other {@linkplain GRanges} instances.\n     */\n    buildOverlapIndex({ restrictToSeqnames = null, restrictToStrand = null } = {}) {\n        this.#flush_staged_setGroup();\n        return new GroupedGRangesOverlapIndex(\n            this._ranges.buildOverlapIndex({ restrictToSeqnames, restrictToStrand }),\n            generics.LENGTH(this._ranges),\n            this._rangeStarts,\n            this._rangeLengths\n        );\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_LENGTH() {\n        return this._rangeStarts.length;\n    }\n\n    _bioconductor_SLICE(output, i, { allowView = false } = {}) {\n        super._bioconductor_SLICE(output, i, { allowView });\n        this.#flush_staged_setGroup();\n\n        output._rangeLengths = generics.SLICE(this._rangeLengths, i, { allowView });\n        let accumulated = GroupedGRanges.#computeStarts(output._rangeLengths);\n        output._rangeStarts = accumulated.starts;\n\n        if (i.constructor == Object) {\n            // Handle this specially for optimizing allowView = true.\n            let s = this._rangeStarts[i.start];\n            output._ranges = generics.SLICE(this._ranges, { start: s, end: s + accumulated.total }, { allowView });\n        } else {\n            let keep = new Int32Array(accumulated.total);\n\n            let counter = 0;\n            for (const j of i) {\n                let start = this._rangeStarts[j];\n                let end = start + this._rangeLengths[j];\n                for (var k = start; k < end; k++) {\n                    keep[counter] = k;\n                    counter++;\n                }\n            }\n\n            output._ranges = generics.SLICE(this._ranges, keep, { allowView });\n        }\n\n        return;\n    }\n\n    _bioconductor_COMBINE(output, objects) {\n        super._bioconductor_COMBINE(output, objects);\n\n        // We need to flush the staged operations in each object.\n        for (const o of objects) {\n            o.#flush_staged_setGroup();\n        }\n\n        output._rangeLengths = generics.COMBINE(objects.map(x => x.rangeLengths()));\n        let accumulated = GroupedGRanges.#computeStarts(output._rangeLengths);\n        output._rangeStarts = accumulated.starts;\n        output._ranges = generics.COMBINE(objects.map(x => x._ranges));\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output.#staged_setGroup = cutils.cloneField(this.#staged_setGroup, deepCopy);\n        output._rangeLengths = cutils.cloneField(this._rangeLengths, deepCopy);\n        output._rangeStarts = cutils.cloneField(this._rangeStarts, deepCopy);\n        output._ranges = cutils.cloneField(this._ranges, deepCopy);\n\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {number} [numberOfGroups=0] - Numbe of empty groups to create.\n     * @return {GroupedGRanges} A GroupedGRanges object of length equal to `numberOfGroups`,\n     * where each group is of zero length.\n     */\n    static empty(numberOfGroups) {\n        let runs = new Int32Array(numberOfGroups);\n        runs.fill(0);\n        return new GroupedGRanges(gr.GRanges.empty(), { rangeLengths: runs });\n    }\n}\n\n/**\n * Pre-built index for overlapping {@linkplain GroupedGRanges} objects.\n * This is typically constructed using the {@linkcode GroupedGRanges#buildOverlapIndex GroupedGRanges.buildOverlapIndex} method for a \"reference\" object,\n * and can be applied to different query GroupedGRanges or {@linkplain GRanges} to identify overlaps with the reference.\n *\n * @hideconstructor\n */\nexport class GroupedGRangesOverlapIndex {\n    constructor(index, fullLength, rangeStarts, rangeLengths) {\n        this._index = index;\n        this._rangeStarts = rangeStarts;\n        this._rangeLengths = rangeLengths;\n\n        let rev_map = new Int32Array(fullLength);\n        for (var i = 0; i < rangeStarts.length; i++) {\n            let start = rangeStarts[i];\n            let end = start + rangeLengths[i];\n            for (var s = start; s < end; s++) {\n                rev_map[s] = i;\n            }\n        }\n        this._reverseMapping = rev_map;\n    }\n\n    /**\n     * @param {GroupedGRanges|GRanges} query - The query object, containing ranges to be overlapped with those in the reference GroupedGRanges (that was used to construct this GroupedGRangesOverlapIndex object).\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.ignoreStrand=true] - Whether to ignore differences in strandedness between the ranges in `query` and the reference object.\n     *\n     * @return {Array} An array of length equal to the number of ranges or groups in `query`,\n     * where each element is an array containing the indices of the overlapping ranges in the reference {@linkplain GRanges} object.\n     */\n    overlap(query, { ignoreStrand = true } = {}) {\n        let output = new Array(this._rangeStarts.length);\n        let rev_map = this._reverseMapping;\n\n        if (query instanceof GroupedGRanges) {\n            let overlaps = this._index.overlap(query._ranges);\n            for (var i = 0; i < query._rangeStarts.length; i++) {\n                let start = query._rangeStarts[i];\n                let end = start + query._rangeLengths[i];\n\n                let results = new Set;\n                for (var s = start; s < end; s++) {\n                    overlaps[s].forEach(x => results.add(rev_map[x]));\n                }\n                output[i] = Array.from(results);\n            }\n\n        } else {\n            let overlaps = this._index.overlap(query);\n            for (var i = 0; i < overlaps.length; i++) {\n                let results = new Set;\n                overlaps[i].forEach(x => results.add(rev_map[x]));\n                output[i] = Array.from(results);\n            }\n        }\n\n        return output;\n    }\n\n}\n","import * as cutils from \"./clone-utils.js\";\n\n/**\n * Dense matrix of numbers.\n * Not really a Bioconductor-exclusive data structure, but we need this at a minimum for the {@linkplain SummarizedExperiment} to be useful.\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n */\nexport class DenseMatrix {\n    /**\n     * @param {number} numberOfRows - Number of rows, duh.\n     * @param {number} numberOfColumns - Number of columns.\n     * @param {TypedArray} values - 1-dimensional array of the matrix contents.\n     * This should have length equal to the product of `numberOfRows` and `numberOfColumns`.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.columnMajor=true] - Whether `values` represents a column-major layout.\n     */\n    constructor(numberOfRows, numberOfColumns, values, { columnMajor = true } = {}) {\n        if (arguments.length == 0) {\n            return;\n        }\n\n        this._numberOfRows = numberOfRows;\n        this._numberOfColumns = numberOfColumns;\n        this._values = values;\n        this._columnMajor = columnMajor;\n        if (numberOfRows * numberOfColumns != values.length) {\n            throw new Error(\"length of 'values' should be equal to the product of 'dimensions'\");\n        }\n    }\n\n    static name = \"DenseMatrix\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {number} Number of rows.\n     */\n    numberOfRows() {\n        return this._numberOfRows;\n    }\n\n    /**\n     * @return {number} Number of columns.\n     */\n    numberOfColumns() {\n        return this._numberOfColumns;\n    }\n\n    /**\n     * @return {boolean} Whether the matrix is column-major.\n     */\n    isColumnMajor() {\n        return this._columnMajor;\n    }\n\n    /**\n     * @return {TypedArray} Matrix contents as a 1-dimensional array.\n     */\n    values() {\n        return this._values;\n    }\n\n    #extractor(i, nprimary, nsecondary, allowView, primaryMajor) {\n        if (!primaryMajor) {\n            let output = new this._values.constructor(nsecondary);\n            let offset = i;\n            for (var s = 0; s < nsecondary; s++) {\n                output[s] = this._values[offset];\n                offset += nprimary;\n            }\n            return output;\n\n        } else {\n            let start = i * nsecondary;\n            let end = start + nsecondary;\n            if (allowView) {\n                return this._values.subarray(start, end);\n            } else {\n                return this._values.slice(start, end);\n            }\n        }\n    }\n\n    /**\n     * Retrieve the contents of a particular row.\n     *\n     * @param {number} i - Index of the row of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether to allow a view to be returned, if possible.\n     *\n     * @return {TypedArray} Contents of the row `i`.\n     * This may be a view on the array returned by {@linkcode DenseMatrix#values values}, if permitted by the layout.\n     */\n    row(i, { allowView = false } = {}) {\n        return this.#extractor(i, this._numberOfRows, this._numberOfColumns, allowView, !this._columnMajor);\n    }\n\n    /**\n     * Retrieve the contents of a particular column.\n     *\n     * @param {number} i - Index of the column of interest.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.allowView=false] - Whether to allow a view to be returned, if possible.\n     *\n     * @return {TypedArray} Contents of the column `i`.\n     * This may be a view on the array returned by {@linkcode DenseMatrix#values values}, if permitted by the layout.\n     */\n    column(i, { allowView = false } = {}) {\n        return this.#extractor(i, this._numberOfColumns, this._numberOfRows, allowView, this._columnMajor);\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {TypedArray} values - 1-dimensional array of matrix contents,\n     * of the same length as the array returned by {@linkcode DenseMatrix#values values}.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setValues(values, { inPlace = false } = {}) {\n        if (values.length !== this._values.length) {\n            throw new Error(\"replacement 'values' should have length equal to 'values()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._values = values;\n        return target;\n    }\n\n    /**\n     * @param {TypedArray} values - 1-dimensional array of matrix contents,\n     * of the same length as the array returned by {@linkcode DenseMatrix#values values}.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setValues(values) {\n        return this.setValues(values, { inPlace: true });\n    }\n\n    #inserter(i, nprimary, nsecondary, primaryMajor, replacement) {\n        if (!primaryMajor) {\n            let output = new this._values.constructor(nsecondary);\n            let offset = i;\n            for (var s = 0; s < nsecondary; s++) {\n                this._values[offset] = replacement[s];\n                offset += nprimary;\n            }\n        } else {\n            let start = i * nsecondary;\n            this._values.set(replacement, start);\n        }\n    }\n\n    /**\n     * @param {number} i - Row index to set.\n     * @param {TypedArray} values - Row contents, of length equal to the number of columns in this DenseMatrix.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRow(i, values, { inPlace = false } = {}) {\n        if (values.length !== this._numberOfColumns) {\n            throw new Error(\"replacement row should have length equal to 'numberOfColumns()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            target._values = target._values.slice();\n        }\n\n        target.#inserter(i, target._numberOfRows, target._numberOfColumns, !target._columnMajor, values);\n        return target;\n    }\n\n    /**\n     * @param {number} i - Row index to set.\n     * @param {TypedArray} values - Row contents, of length equal to the number of columns in this DenseMatrix.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setRow(i, value) {\n        return this.setRow(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {number} i - Column index to set.\n     * @param {TypedArray} values - Column contents, of length equal to the number of rows in this DenseMatrix.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this DenseMatrix instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {DenseMatrix} The DenseMatrix after modifying the matrix contents.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumn(i, values, { inPlace = false } = {}) {\n        if (values.length !== this._numberOfRows) {\n            throw new Error(\"replacement column should have length equal to 'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        if (!inPlace) {\n            target._values = target._values.slice();\n        }\n\n        target.#inserter(i, target._numberOfColumns, target._numberOfRows, target._columnMajor, values);\n        return target;\n    }\n\n    /**\n     * @param {number} i - Column index to set.\n     * @param {TypedArray} values - Column contents, of length equal to the number of columns in this DenseMatrix.\n     * @return {DenseMatrix} A reference to this DenseMatrix after modifying the matrix contents.\n     */\n    $setColumn(i, value) {\n        return this.setColumn(i, value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_NUMBER_OF_ROWS() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_NUMBER_OF_COLUMNS() {\n        return this.numberOfColumns();\n    }\n\n    _bioconductor_SLICE_2D(output, rows, columns, {}) {\n        let full_rows = (rows === null);\n        let is_row_range = (!full_rows && rows.constructor == Object);\n        let new_rows = full_rows ? this._numberOfRows : (is_row_range ? rows.end - rows.start : rows.length);\n        output._numberOfRows = new_rows;\n\n        let full_columns = (columns === null);\n        let is_column_range = (!full_columns && columns.constructor == Object);\n        let new_columns = full_columns ? this._numberOfColumns : (is_column_range ? columns.end - columns.start : columns.length);\n        output._numberOfColumns = new_columns;\n\n        let new_values = new this._values.constructor(new_rows * new_columns);\n        output._values = new_values;\n\n        if (this._columnMajor) {\n            this.#primarySlicer(columns, full_columns, is_column_range, this._numberOfColumns, rows, full_rows, is_row_range, this._numberOfRows, new_rows, new_values);\n        } else {\n            this.#primarySlicer(rows, full_rows, is_row_range, this._numberOfRows, columns, full_columns, is_column_range, this._numberOfColumns, new_columns, new_values);\n        }\n        output._columnMajor = this._columnMajor;\n        return;\n    }\n\n    #primarySlicer(primarySlice, fullPrimary, isPrimaryRange, primaryDim, secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues) {\n        if (fullPrimary) {\n            for (var p = 0; p < primaryDim; p++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, p, p);\n            }\n        } else if (isPrimaryRange) {\n            for (var p = primarySlice.start; p < primarySlice.end; p++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, p, p - primarySlice.start);\n            }\n        } else {\n            for (var pi = 0; pi < primarySlice.length; pi++) {\n                this.#secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, primarySlice[pi], pi);\n            }\n        }\n    }\n\n    #secondarySlicer(secondarySlice, fullSecondary, isSecondaryRange, inSecondaryDim, outSecondaryDim, outputValues, inPrimary, outPrimary) {\n        let in_offset = inPrimary * inSecondaryDim;\n        let out_offset = outPrimary * outSecondaryDim;\n\n        if (fullSecondary) {\n            let view = this._values.subarray(in_offset, in_offset + inSecondaryDim);\n            outputValues.set(view, out_offset);\n        } else if (isSecondaryRange) {\n            for (var s = secondarySlice.start; s < secondarySlice.end; s++) {\n                outputValues[out_offset + s - secondarySlice.start] = this._values[in_offset + s];\n            }\n        } else {\n            for (var si = 0; si < secondarySlice.length; si++) {\n                outputValues[out_offset + si] = this._values[in_offset + secondarySlice[si]];\n            }\n        }\n    }\n\n    _combiner(objects, primaryFun, secondaryFun, isPrimaryMajor, secondaryName) {\n        let num_primary = primaryFun(objects[0]);\n        let num_secondary = secondaryFun(objects[0]);\n        for (var i = 1; i < objects.length; i++) {\n            if (secondaryFun(objects[i]) !== num_secondary) {\n                throw new Error(\"all objects must have the same number of \" + secondaryName);\n            }\n            num_primary += primaryFun(objects[i]);\n        }\n\n        let primary_major = isPrimaryMajor(objects[0]);\n        let values = new objects[0]._values.constructor(num_primary * num_secondary);\n\n        if (primary_major) {\n            let used_primary = 0;\n            for (var i = 0; i < objects.length; i++) {\n                let current = objects[i];\n                let cur_primary = primaryFun(current);\n                let out_offset = used_primary * num_secondary;\n\n                if (isPrimaryMajor(current)) {\n                    values.set(current._values, out_offset);\n                } else {\n                    for (var s = 0; s < num_secondary; s++) {\n                        let in_offset = s * cur_primary;\n                        let out_offset2 = out_offset + s;\n                        for (var p = 0; p < cur_primary; p++) {\n                            values[out_offset2 + p * num_secondary] = current._values[in_offset + p];\n                        }\n                    }\n                }\n\n                used_primary += cur_primary;\n            }\n        } else {\n            let used_primary = 0;\n            for (var i = 0; i < objects.length; i++) {\n                let current = objects[i];\n                let cur_primary = primaryFun(current);\n\n                if (!isPrimaryMajor(current)) {\n                    for (var s = 0; s < num_secondary; s++) {\n                        let view_offset = s * cur_primary;\n                        let view = current._values.subarray(view_offset, view_offset + cur_primary);\n                        values.set(view, used_primary + s * num_primary);\n                    }\n                } else {\n                    for (var p = 0; p < cur_primary; p++) {\n                        let in_offset = p * num_secondary;\n                        let out_offset = used_primary + p;\n                        for (var s = 0; s < num_secondary; s++) {\n                            values[out_offset + s * num_primary] = current._values[in_offset + s];\n                        }\n                    }\n                }\n\n                used_primary += cur_primary;\n            }\n        }\n\n        return { num_primary, num_secondary, values, primary_major };\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        let combined = this._combiner(objects,\n            x => x._numberOfRows,\n            x => x._numberOfColumns,\n            x => !(x._columnMajor),\n            \"columns\"\n        );\n\n        output._numberOfRows = combined.num_primary;\n        output._numberOfColumns = combined.num_secondary;\n        output._values = combined.values;\n        output._columnMajor = !(combined.primary_major);\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        let combined = this._combiner(objects,\n            x => x._numberOfColumns,\n            x => x._numberOfRows,\n            x => x._columnMajor,\n            \"rows\"\n        );\n\n        output._numberOfColumns = combined.num_primary;\n        output._numberOfRows = combined.num_secondary;\n        output._values = combined.values;\n        output._columnMajor = combined.primary_major;\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true } = {}) {\n        output._values = (deepCopy ? this._values.slice() : this._values);\n        output._numberOfRows = this._numberOfRows;\n        output._numberOfColumns = this._numberOfColumns;\n        output._columnMajor = this._columnMajor;\n        return;\n    }\n}\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure \" + obj);\n}","import * as generics from \"./AllGenerics.js\";\nimport * as ann from \"./Annotated.js\";\nimport * as df from \"./DataFrame.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A SummarizedExperiment contains zero or more assays, consisting of multi-dimensional arrays (usually matrices) of experimental data,\n * as well as {@linkplain DataFrame}s containing further annotations on the rows or columns of those arrays.\n * The SummarizedExperiment class defines methods for the following generics:\n * \n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n *\n * Assays are expected to provide methods for the following generics:\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode NUMBER_OF_COLUMNS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode COMBINE_COLUMNS}\n * - {@linkcode CLONE}\n *\n * @extends Annotated\n */\nexport class SummarizedExperiment extends ann.Annotated {\n    /**\n     * @param {Object|Map} assays - Object or Map where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * All arrays should have the same number of rows and columns.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {?Array} [options.assayOrder=null] - Array of strings specifying the ordering of the assays.\n     * If non-`null`, this should have the same values as the keys of `assays`.\n     * If `null`, an arbitrary ordering is obtained from `assays`.\n     * @param {?DataFrame} [options.rowData=null] - Data frame of row annotations.\n     * If non-`null`, this should have a number of rows equal to the number of rows in each entry of `assays`.\n     * If `null`, an empty {@linkplain DataFrame} is automatically created.\n     * @param {?DataFrame} [options.columnData=null] - Data frame of column annotations.\n     * If non-`null`, this should have a number of columns equal to the number of columns in each entry of `assays`.\n     * If `null`, an empty {@linkplain DataFrame} is automatically created.\n     * @param {?Array} [options.rowNames=null] - Array of strings of length equal to the number of rows in the `assays`, containing row names.\n     * Alternatively `null`, if no row names are present.\n     * @param {?Array} [options.columnNames=null] - Array of strings of length equal to the number of columns in the `assays`, containing column names.\n     * Alternatively `null`, if no column names are present.\n     * @param {Object|Map} [options.metadata={}] - Object or Map containing arbitrary metadata as key-value pairs.\n     */\n    constructor(assays, { assayOrder = null, rowData = null, columnData = null, rowNames = null, columnNames = null, metadata = {} } = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(metadata);\n\n        // Check the assays.\n        try {\n            this._assays = new il.InternalList(assays, assayOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize assay list for this SummarizedExperiment; \" + e.message, { cause: e });\n        }\n\n        let nrows = null;\n        let ncols = null;\n        for (const k of this._assays.names()) {\n            let current = this._assays.entry(k);\n            let nr = generics.NUMBER_OF_ROWS(current);\n            let nc = generics.NUMBER_OF_COLUMNS(current);\n            if (nrows == null) {\n                nrows = nr;\n                ncols = nc;\n            } else if (nrows !== nr || ncols !== nc) {\n                throw new Error(\"expected all assays in 'assays' to have the same number of rows and columns\");\n            }\n        }\n\n        // Check the rowData.\n        if (rowData === null) {\n            if (nrows == null){\n                throw new Error(\"'rowData' must be specified if 'assays' is empty\");\n            }\n            rowData = new df.DataFrame({}, { numberOfRows: nrows });\n        } else {\n            if (nrows !== null && nrows !== generics.LENGTH(rowData)) {\n                throw new Error(\"'rowData' should be equal to the number of rows in each 'assays'\");\n            }\n        }\n        this._rowData = rowData;\n\n        // Check the columnData.\n        if (columnData === null) {\n            if (ncols == null){\n                throw new Error(\"'columnData' must be specified if 'assays' is empty\");\n            }\n            columnData = new df.DataFrame({}, { numberOfRows: ncols });\n        } else {\n            if (ncols !== null && ncols !== generics.LENGTH(columnData)) {\n                throw new Error(\"'columnData' should be equal to the number of columns in each 'assays'\");\n            }\n        }\n        this._columnData = columnData;\n\n        // Checking the names.\n        if (rowNames != null) {\n            utils.checkNamesArray(rowNames, \"'rowNames'\", this._rowData.numberOfRows(), \"the number of rows in each 'assays'\");\n        }\n        this._rowNames = rowNames;\n\n        if (columnNames != null) {\n            utils.checkNamesArray(columnNames, \"'columnNames'\", this._columnData.numberOfRows(), \"the number of columns in each 'assays'\");\n        }\n        this._columnNames = columnNames;\n    }\n\n    static className = \"SummarizedExperiment\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Array} Array of assay names.\n     */\n    assayNames() {\n        return this._assays.names();\n    }\n\n    /**\n     * @return {number} Number of assays.\n     */\n    numberOfAssays() {\n        return this._assays.numberOfEntries();\n    }\n\n    /**\n     * @param {string|number} i - Assay to retrieve, either by name or index.\n     * @return {*} The contents of assay `i` as an multi-dimensional array-like object.\n     */\n    assay(i) {\n        let output;\n        try {\n            output = this._assays.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified assay from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**\n     * @return {DataFrame} Data frame of row data, with one row per row in this SummarizedExperiment.\n     */\n    rowData() {\n        return this._rowData;\n    }\n\n    /**\n     * @return {number} Number of rows in this SummarizedExperiment.\n     */\n    numberOfRows() {\n        return this._rowData.numberOfRows();\n    }\n\n    /**\n     * @return {?Array} Array of strings containing row names, or `null` if no row names are available.\n     */\n    rowNames() {\n        return this._rowNames;\n    }\n\n    /**\n     * @return {DataFrame} Data frame of column data, with one row per column in this SummarizedExperiment.\n     */\n    columnData() {\n        return this._columnData;\n    }\n\n    /**\n     * @return {number} Number of columns in this SummarizedExperiment.\n     */\n    numberOfColumns() {\n        return this._columnData.numberOfRows();\n    }\n\n    /**\n     * @return {?Array} Array of strings containing column names, or `null` if no column names are available.\n     */\n    columnNames() {\n        return this._columnNames;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeAssay(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = target._assays.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove assay \" + (typeof i == \"string\" ? \"'\" + i + \"'\" : String(i)) + \" from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment after removing the specified assay.\n     */\n    $removeAssay(i) {\n        return this.removeAssay(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * - If `i` is a number, the assay at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of assays.\n     * - If `i` is a string, any assay with the same name is replaced.\n     *   If no such assay exists, a new assay is appended to the list of assays.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the assay.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} A SummarizedExperiment with modified assays.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAssay(i, value, { inPlace = false } = {}) {\n        if (generics.NUMBER_OF_ROWS(value) !== this.numberOfRows() || generics.NUMBER_OF_COLUMNS(value) !== this.numberOfColumns()) {\n            throw new Error(\"expected 'value' to have the same dimensions as this 'SummarizedExperiment'\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._assays = target._assays.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the assay to add, either by name or index.\n     * - If `i` is a number, the assay at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of assays.\n     * - If `i` is a string, any assay with the same name is replaced.\n     *   If no such assay exists, a new assay is appended to the list of assays.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the assay.\n     *\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified assays.\n     */\n    $setAssay(i, value) {\n        return this.setAssay(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the assay names.\n     * This should be of the same length as the number of assays and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified assay names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAssayNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = target._assays.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the assay names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the assay names.\n     * This should be of the same length as the number of assays and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified assay names.\n     */\n    $setAssayNames(names) {\n        return this.setAssayNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the assays to retain in the slice.\n     * This should refer to unique assay names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced assays.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceAssays(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._assays = this._assays.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the assays for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the assays to retain in the slice.\n     * This should refer to unique assay names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced assays.\n     */\n    $sliceAssays(i) {\n        return this.sliceAssays(i, { inPlace: true });\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the row annotations.\n     * This should have one row for each row of this SummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified row data.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowData(value, { inPlace = false } = {}) {\n        if (!(value instanceof df.DataFrame)) {\n            throw new Error(\"'value' should be a DataFrame\");\n        }\n\n        if (value.numberOfRows() !== this.numberOfRows()) {\n            throw new Error(\"expected 'value' to have the same number of rows as this 'SummarizedExperiment'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowData = value;\n        return target;\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the row annotations.\n     * This should have one row for each row of this SummarizedExperiment.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified row data.\n     */\n    $setRowData(value) {\n        return this.setRowData(value, { inPlace: true });\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the column annotations.\n     * This should have one row for each columns of this SummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column data.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnData(value, { inPlace = false } = {}) {\n        if (!(value instanceof df.DataFrame)) {\n            throw new Error(\"'value' should be a DataFrame\");\n        }\n\n        if (value.numberOfRows() !== this.numberOfColumns()) {\n            throw new Error(\"expected 'value' to have the same number of rows as the number of columns of this 'SummarizedExperiment'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columnData = value;\n        return target;\n    }\n\n    /**\n     * @param {DataFrame} value - Data frame containing the column annotations.\n     * This should have one row for each columns of this SummarizedExperiment.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified column data.\n     */\n    $setColumnData(value) {\n        return this.setColumnData(value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of rows in this SummarizedExperiment, containing row names.\n     * Alternatively `null`, to remove all row names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified row names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this.numberOfRows(), \"'numberOfRows()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowNames = names;\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of rows in this SummarizedExperiment, containing row names.\n     * Alternatively `null`, to remove all row names.\n     *\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified row names.\n     */\n    $setRowNames(names) {\n        return this.setRowNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of columns in this SummarizedExperiment, containing column names.\n     * Alternatively `null`, to remove all column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setColumnNames(names, { inPlace = false } = {}) {\n        if (names !== null) {\n            utils.checkNamesArray(names, \"replacement 'names'\", this.numberOfColumns(), \"'numberOfColumns()'\");\n        }\n\n        let target = cutils.setterTarget(this, inPlace);\n        target._columnNames = names;\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings of length equal to the number of columns in this SummarizedExperiment, containing column names.\n     * Alternatively `null`, to remove all column names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified column names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    $setColumnNames(names) {\n        return this.setColumnNames(names, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_NUMBER_OF_ROWS() {\n        return this.numberOfRows();\n    }\n\n    _bioconductor_NUMBER_OF_COLUMNS() {\n        return this.numberOfColumns();\n    }\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        output._assays = this._assays.apply(v => generics.SLICE_2D(v, rows, columns, { allowView }));\n\n        if (rows !== null) {\n            output._rowData = generics.SLICE(this._rowData, rows, { allowView });\n            output._rowNames = (this._rowNames == null ? null : generics.SLICE(this._rowNames, rows, { allowView }));\n        } else {\n            output._rowData = this._rowData;\n            output._rowNames = this._rowNames;\n        }\n\n        if (columns !== null) {\n            output._columnData = generics.SLICE(this._columnData, columns, { allowView });\n            output._columnNames = (this._columnNames == null ? null : generics.SLICE(this._columnNames, columns, { allowView }));\n        } else {\n            output._columnData = this._columnData;\n            output._columnNames = this._columnNames;\n        }\n\n        output._metadata = this._metadata;\n        return;\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        output._assays = il.InternalList.parallelCombine(objects.map(x => x._assays), generics.COMBINE_ROWS);\n\n        let all_dfs = objects.map(x => x._rowData);\n        output._rowData = generics.COMBINE(all_dfs);\n\n        let all_n = objects.map(x => x._rowNames);\n        let all_l = objects.map(x => x.numberOfRows());\n        output._rowNames = utils.combineNames(all_n, all_l);\n\n        output._columnData = this._columnData;\n        output._columnNames = this._columnNames;\n        output._metadata = this._metadata;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        output._assays = il.InternalList.parallelCombine(objects.map(x => x._assays), generics.COMBINE_COLUMNS);\n\n        let all_dfs = objects.map(x => x._columnData);\n        output._columnData = generics.COMBINE(all_dfs);\n\n        let all_n = objects.map(x => x._columnNames);\n        let all_l = objects.map(x => x.numberOfColumns());\n        output._columnNames = utils.combineNames(all_n, all_l);\n\n        output._rowData = this._rowData;\n        output._rowNames = this._rowNames;\n        output._metadata = this._metadata;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy = true }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._assays = cutils.cloneField(this._assays, deepCopy);\n        output._rowData = cutils.cloneField(this._rowData, deepCopy);\n        output._rowNames = cutils.cloneField(this._rowNames, deepCopy);\n\n        output._columnData = cutils.cloneField(this._columnData, deepCopy);\n        output._columnNames = cutils.cloneField(this._columnNames, deepCopy);\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as gr from \"./GRanges.js\";\nimport * as ggr from \"./GroupedGRanges.js\";\nimport * as se from \"./SummarizedExperiment.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\n\n/**\n * A RangedSummarizedExperiment is a {@linkplain SummarizedExperiment} subclass where each row represents a genomic interval.\n * As such, it stores an additional {@linkplain GRanges} or {@linkplain GroupedGRanges} of length equal to the number of rows,\n * where each element represents the genomic range(s) for the corresponding row of the SummarizedExperiment.\n *\n * The RangedSummarizedExperiment supports the same set of generics as the {@linkplain SummarizedExperiment}.\n * Each method will call the base method, with the following extensions:\n *\n * - {@linkcode SLICE_2D} will additionally slice the supplied genomic ranges by the desired `rows`.\n * - {@linkcode COMBINE_ROWS} will combine genomic ranges across objects.\n *   If some objects contain a GroupedGRanges and other objects contain GRanges, the latter will be coerced to a GroupedGRanges (where each group contains one range) before combining.\n *   If any object is a base SummarizedExperiment, a GroupedGRanges containing zero-length groups will be automatically constructed to attempt combining.\n * - {@linkcode COMBINE_COLUMNS} will use the genomic ranges from the first object.\n *\n * @extends SummarizedExperiment\n */\nexport class RangedSummarizedExperiment extends se.SummarizedExperiment {\n    #check_rowRanges(x) {\n        if (!(x instanceof gr.GRanges) && !(x instanceof ggr.GroupedGRanges)) {\n            throw new Error(\"'rowRanges' should be a 'GRanges' or 'GroupedGRanges' instance\");\n        }\n        if (generics.LENGTH(x) !== this._rowData.numberOfRows()) {\n            throw utils.formatLengthError(\"'rowRanges'\", \"the number of rows\");\n        }\n    }\n\n    /**\n     * @param {Object} assays - Object where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * All arrays should have the same number of rows and columns.\n     * @param {?(GRanges|GroupedGRanges)} rowRanges - Genomic ranges corresponding to each row.\n     *\n     * Alternatively, each row may correspond to a group of genomic ranges.\n     *\n     * If `null`, a {@linkplain GroupedGRanges} is constructed where each row corresponds to one group of ranges of zero length.\n     * @param {Object} [options={}] - Optional parameters, including those used in the {@linkplain SummarizedExperiment} constructor.\n     */\n    constructor(assays, rowRanges, options = {}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        super(assays, options);\n\n        if (rowRanges === null) {\n            rowRanges = ggr.GroupedGRanges.empty(this.numberOfRows());\n        } else {\n            this.#check_rowRanges(rowRanges);\n        }\n        this._rowRanges = rowRanges;\n\n        return;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {GRanges} Genomic ranges corresponding to each row.\n     */\n    rowRanges() {\n        return this._rowRanges;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {GRanges} value - Genomic ranges corresponding to each row.\n     * This should have length equal to the number of rows in this RangedSummarizedExperiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this Annotated instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {RangedSummarizedExperiment} The RangedSummarizedExperiment after modifying its `rowRanges`.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setRowRanges(value, { inPlace = false } = {}) {\n        this.#check_rowRanges(value);\n        let target = cutils.setterTarget(this, inPlace);\n        target._rowRanges = value;\n        return target;\n    }\n\n    /**\n     * @param {GRanges} value - Genomic ranges corresponding to each row.\n     * This should have length equal to the number of rows in this RangedSummarizedExperiment.\n     * @return {RangedSummarizedExperiment} A reference to this RangedSummarizedExperiment after modifying its `rowRanges`.\n     */\n    $setRowRanges(value) {\n        return this.setRowRanges(value, { inPlace: true });\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        super._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n        if (rows !== null) {\n            output._rowRanges = generics.SLICE(this._rowRanges, rows);\n        } else {\n            output._rowRanges = this._rowRanges;\n        }\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        super._bioconductor_COMBINE_ROWS(output, objects);\n\n        let collected = [];\n        let has_empty = false;\n        let has_ggr = false;\n\n        for (var i = 0; i < objects.length; i++) {\n            let x = objects[i];\n            if (x instanceof RangedSummarizedExperiment) {\n                let y = x._rowRanges;\n                if (y instanceof ggr.GroupedGRanges) {\n                    has_ggr = true;\n                }\n                collected.push(y);\n            } else if (x instanceof se.SummarizedExperiment) {\n                has_empty = true;\n                collected.push(null);\n            } else {\n                throw new Error(\"objects to be combined must be SummarizedExperiments (failing for object \" + String(i) + \")\");\n            }\n        }\n\n        // Promoting nulls and GRanges to GroupedGRanges, if necessary.\n        if (has_empty || has_ggr) {\n            for (var i = 0; i < collected.length; i++) {\n                let current = collected[i];\n\n                if (current instanceof gr.GRanges) {\n                    let widths = new Int32Array(generics.LENGTH(current));\n                    widths.fill(1);\n\n                    let options = { \n                        rangeLengths: widths,\n                        names: current.names(),\n                        elementMetadata: current.elementMetadata(),\n                        metadata: current.metadata()\n                    };\n\n                    if (options.names !== null) {\n                        current = current.setNames(null);\n                    } \n\n                    if (options.elementMetadata.metadata().size > 0 || options.elementMetadata.numberOfColumns() > 0) {\n                        current = current.setElementMetadata(null);\n                    }\n\n                    if (options.metadata.size > 0) {\n                        current = current.setMetadata(new Map);\n                    }\n\n                    collected[i] = new ggr.GroupedGRanges(current, options);\n\n                } else if (current === null){\n                    collected[i] = ggr.GroupedGRanges.empty(objects[i].numberOfRows());\n                }\n            }\n        }\n\n        output._rowRanges = generics.COMBINE(collected);\n\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        super._bioconductor_COMBINE_COLUMNS(output, objects);\n\n        output._rowRanges = objects[0]._rowRanges;\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._rowRanges = cutils.cloneField(this._rowRanges, deepCopy);\n\n        return;\n    }\n}\n","import * as generics from \"./AllGenerics.js\";\nimport * as rse from \"./RangedSummarizedExperiment.js\";\nimport * as se from \"./SummarizedExperiment.js\";\nimport * as utils from \"./utils.js\";\nimport * as cutils from \"./clone-utils.js\";\nimport * as il from \"./InternalList.js\";\n\n/**\n * A SingleCellExperiment is a {@linkplain RangedSummarizedExperiment} subclass that contains additional fields for storing reduced dimensions and alternative experiments.\n * It supports the same set of generics as the {@linkplain SummarizedExperiment}.\n *\n * Each reduced dimension instance should have number of rows equal to the number of columns of the SingleCellExperiment.\n * Each instance is expected to provide methods for the following generics:\n *\n * - {@linkcode NUMBER_OF_ROWS}\n * - {@linkcode SLICE_2D}\n * - {@linkcode COMBINE_ROWS}\n * - {@linkcode CLONE}\n *\n * Each alternative experiment should be a {@linkplain SummarizedExperiment} with number of columns equal to that of the SingleCellExperiment.\n *\n * @extends RangedSummarizedExperiment\n */\nexport class SingleCellExperiment extends rse.RangedSummarizedExperiment {\n    /**\n     * @param {Object} assays - Object where keys are the assay names and values are multi-dimensional arrays of experimental data.\n     * @param {Object} [options={}] - Optional parameters, including those used in the {@linkplain RangedSummarizedExperiment} constructor.\n     * @param {?(GRanges|GroupedGRanges)} [options.rowRanges=null] - Genomic ranges corresponding to each row, see the {@linkplain RangedSummarizedExperiment} constructor.\n     * @param {Object|Map} [options.reducedDimensions={}] - Object containing named reduced dimensions.\n     * Each value should be a 2-dimensional object with number of rows equal to the number of columns of the assays.\n     * @param {?Array} [options.reducedDimensionOrder=null] - Array containing the order of the reduced dimensions.\n     * This should have the same values as the keys of `reducedDimensions`, and defaults to those keys if `null`.\n     * @param {Object|Map} [options.alternativeExperiments={}] - Object containing named alternative experiments.\n     * Each value should be a 2-dimensional object with number of columns equal to that of the assays.\n     * @param {?Array} [options.alternativeExperimentOrder=null] - Array containing the order of the alternative experiments.\n     * This should have the same values as the keys of `alternativeExperiments`, and defaults to those keys if `null`.\n     */\n    constructor(assays, options={}) {\n        if (arguments.length == 0) {\n            super();\n            return;\n        }\n\n        let { reducedDimensions = {}, reducedDimensionOrder = null, alternativeExperiments = {}, alternativeExperimentOrder = null, rowRanges = null } = options;\n        super(assays, rowRanges, options);\n        let ncols = this.numberOfColumns();\n\n        try {\n            this._reducedDimensions = new il.InternalList(reducedDimensions, reducedDimensionOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize reduced dimension list for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        for (const k of this._reducedDimensions.names()) {\n            let v = this._reducedDimensions.entry(k);\n            if (generics.NUMBER_OF_ROWS(v) !== ncols) {\n                throw new Error(\"number of rows for reduced dimension '\" + k + \"' is not equal to number of columns for this \" + this.constructor.className);\n            }\n        }\n\n        try {\n            this._alternativeExperiments = new il.InternalList(alternativeExperiments, alternativeExperimentOrder);\n        } catch (e) {\n            throw new Error(\"failed to initialize alternative experiment list for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        for (const k of this._alternativeExperiments.names()) {\n            let v = this._alternativeExperiments.entry(k);\n            if (!(v instanceof se.SummarizedExperiment)) {\n                throw new Error(\"alternative experiment '\" + k + \"' is not a SummarizedExperiment\");\n            }\n            if (v.numberOfColumns(v) !== ncols) {\n                throw new Error(\"number of columns for alternative experiment '\" + k + \"' is not equal to number of columns for this \" + this.constructor.className);\n            }\n        }\n\n        return;\n    }\n\n    static className = \"SingleCellExperiment\";\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @return {Array} Array of strings containing the (ordered) names of the reduced dimensions.\n     */\n    reducedDimensionNames() {\n        return this._reducedDimensions.names();\n    }\n\n    /**\n     * @param {string|number} i - Reduced dimension to retrieve, either by name or index.\n     * @return {*} The contents of reduced dimension `i` as an multi-dimensional array-like object.\n     */\n    reducedDimension(i) {\n        let output;\n        try {\n            output = this._reducedDimensions.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified reduced dimension from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**\n     * @return {Array} Array of strings containing the (ordered) names of the alternative experiments.\n     */\n    alternativeExperimentNames() {\n        return this._alternativeExperiments.names();\n    }\n\n    /**\n     * @param {string|number} i - Alternative experiment to retrieve, either by name or index.\n     * @return {SummarizedExperiment} The specified alternative experiment `i`. \n     */\n    alternativeExperiment(i) {\n        let output;\n        try {\n            output = this._alternativeExperiments.entry(i);\n        } catch (e) {\n            throw new Error(\"failed to retrieve the specified alternative experiment from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return output;\n    }\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeReducedDimension(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = target._reducedDimensions.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove the specified reduced dimension from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment after removing the specified assay.\n     */\n    $removeReducedDimension(i) {\n        return this.removeReducedDimension(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to add, either by name or index.\n     * - If `i` is a number, the reduced dimension at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of reduced dimensions.\n     * - If `i` is a string, any reduced dimension with the same name is replaced.\n     *   If no such reduced dimension exists, a new reduced dimension is appended to the list of reduced dimensions.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the reduced dimension.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment with modified reduced dimensions.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setReducedDimension(i, value, { inPlace = false } = {}) {\n        if (generics.NUMBER_OF_ROWS(value) != this.numberOfColumns()) {\n            throw new Error(\"number of rows of 'value' should be the same as the number of columns of this SingleCellExperiment\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._reducedDimensions = target._reducedDimensions.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to add, either by name or index.\n     * - If `i` is a number, the reduced dimension at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of reduced dimensions.\n     * - If `i` is a string, any reduced dimension with the same name is replaced.\n     *   If no such reduced dimension exists, a new reduced dimension is appended to the list of reduced dimensions.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the reduced dimension.\n     *\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment with modified reduced dimensions.\n     */\n    $setReducedDimension(i, value) {\n        return this.setReducedDimension(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the reduced dimension names.\n     * This should be of the same length as the number of reduced dimensions and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified reduced dimension names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setReducedDimensionNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = target._reducedDimensions.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the reduced dimension names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the reduced dimension names.\n     * This should be of the same length as the number of reduced dimensions and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified reduced dimension names.\n     */\n    $setReducedDimensionNames(names) {\n        return this.setReducedDimensionNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the reduced dimensions to retain in the slice.\n     * This should refer to unique reduced dimension names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced reduced dimensions.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceReducedDimensions(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._reducedDimensions = this._reducedDimensions.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the reduced dimensions for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the reduced dimensions to retain in the slice.\n     * This should refer to unique reduced dimension names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced reduced dimensions.\n     */\n    $sliceReducedDimensions(i) {\n        return this.sliceReducedDimensions(i, { inPlace: true });\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment after removing the specified assay.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    removeAlternativeExperiment(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = target._alternativeExperiments.delete(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to remove the specified alternative experiment from this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the reduced dimension to remove, either by name or index.\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment after removing the specified assay.\n     */\n    $removeAlternativeExperiment(i) {\n        return this.removeAlternativeExperiment(i, { inPlace: true });;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the alternative experiment to add, either by name or index.\n     * - If `i` is a number, the alternative experiment at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of alternative experiments.\n     * - If `i` is a string, any alternative experiment with the same name is replaced.\n     *   If no such alternative experiment exists, a new alternative experiment is appended to the list of alternative experiments.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the alternative experiment.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SingleCellExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SingleCellExperiment} The SingleCellExperiment with modified alternative experiments.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAlternativeExperiment(i, value, { inPlace = false } = {}) {\n        if (!(value instanceof se.SummarizedExperiment) || generics.NUMBER_OF_COLUMNS(value) != this.numberOfColumns()) {\n            throw new Error(\"'value' should be a SummarizedExperiment with the same number of columns as this SingleCellExperiment\");\n        }\n        let target = cutils.setterTarget(this, inPlace);\n        target._alternativeExperiments = target._alternativeExperiments.set(i, value, { inPlace });\n        return target;\n    }\n\n    /**\n     * @param {string|number} i - Identity of the alternative experiment to add, either by name or index.\n     * - If `i` is a number, the alternative experiment at the specified index is replaced.\n     *   `i` should be non-negative and less than the number of alternative experiments.\n     * - If `i` is a string, any alternative experiment with the same name is replaced.\n     *   If no such alternative experiment exists, a new alternative experiment is appended to the list of alternative experiments.\n     * @param {*} value - Multi-dimensional array-like object to set/add as the alternative experiment.\n     *\n     * @return {SingleCellExperiment} A reference to this SingleCellExperiment with modified alternative experiments.\n     */\n    $setAlternativeExperiment(i, value) {\n        return this.setAlternativeExperiment(i, value, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the alternative experiment names.\n     * This should be of the same length as the number of alternative experiments and contain unique values.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with modified alternative experiment names.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    setAlternativeExperimentNames(names, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = target._alternativeExperiments.setNames(names, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to set the alternative experiment names for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} names - Array of strings containing the alternative experiment names.\n     * This should be of the same length as the number of alternative experiments and contain unique values.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with modified alternative experiment names.\n     */\n    $setAlternativeExperimentNames(names) {\n        return this.setAlternativeExperimentNames(names, { inPlace: true });\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the alternative experiments to retain in the slice.\n     * This should refer to unique alternative experiment names.\n     * @param {Object} [options={}] - Optional parameters.\n     * @param {boolean} [options.inPlace=false] - Whether to mutate this SummarizedExperiment instance in place.\n     * If `false`, a new instance is returned.\n     *\n     * @return {SummarizedExperiment} The SummarizedExperiment with sliced alternative experiments.\n     * If `inPlace = true`, this is a reference to the current instance, otherwise a new instance is created and returned.\n     */\n    sliceAlternativeExperiments(i, { inPlace = false } = {}) {\n        let target = cutils.setterTarget(this, inPlace);\n        try {\n            target._alternativeExperiments = this._alternativeExperiments.slice(i, { inPlace });\n        } catch (e) {\n            throw new Error(\"failed to slice the alternative experiments for this \" + this.constructor.className + \"; \" + e.message, { cause: e });\n        }\n        return target;\n    }\n\n    /**\n     * @param {Array} i - Array of strings or indices specifying the alternative experiments to retain in the slice.\n     * This should refer to unique alternative experiment names.\n     * @return {SummarizedExperiment} A reference to this SummarizedExperiment with sliced alternative experiments.\n     */\n    $sliceAlternativeExperiments(i) {\n        return this.sliceAlternativeExperiments(i, { inPlace: true });\n    }\n\n\n    /**************************************************************************\n     **************************************************************************\n     **************************************************************************/\n\n    _bioconductor_SLICE_2D(output, rows, columns, { allowView = false }) {\n        super._bioconductor_SLICE_2D(output, rows, columns, { allowView });\n\n        if (columns !== null) {\n            output._reducedDimensions = this._reducedDimensions.apply(v => generics.SLICE_2D(v, columns, null, { allowView }));\n            output._alternativeExperiments = this._alternativeExperiments.apply(v => generics.SLICE_2D(v, null, columns, { allowView }));\n        } else {\n            output._reducedDimensions = this._reducedDimensions;\n            output._alternativeExperiments = this._alternativeExperiments;\n        }\n    }\n\n    _bioconductor_COMBINE_ROWS(output, objects) {\n        super._bioconductor_COMBINE_ROWS(output, objects);\n\n        output._reducedDimensions = this._reducedDimensions;\n        output._alternativeExperiments = this._alternativeExperiments;\n\n        return;\n    }\n\n    _bioconductor_COMBINE_COLUMNS(output, objects) {\n        super._bioconductor_COMBINE_COLUMNS(output, objects);\n\n        try {\n            output._reducedDimensions = il.InternalList.parallelCombine(objects.map(x => x._reducedDimensions), generics.COMBINE_ROWS);\n        } catch (e) {\n            throw new Error(\"failed to combine reduced dimensions for \" + this.constructor.className + \" objects; \" + e.message, { cause: e });\n        }\n\n        try {\n            output._alternativeExperiments = il.InternalList.parallelCombine(objects.map(x => x._alternativeExperiments), generics.COMBINE_COLUMNS);\n        } catch (e) {\n            throw new Error(\"failed to combine alternative experiments for \" + this.constructor.className + \" objects; \" + e.message, { cause: e });\n        }\n\n        return;\n    }\n\n    _bioconductor_CLONE(output, { deepCopy }) {\n        super._bioconductor_CLONE(output, { deepCopy });\n\n        output._reducedDimensions = cutils.cloneField(this._reducedDimensions, deepCopy);\n        output._alternativeExperiments = cutils.cloneField(this._alternativeExperiments, deepCopy);\n\n        return;\n    }\n}\n","import { reference_download, decompressLines } from \"./utils.js\";\n\nvar _collections = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the collection details if they are not already available.\n * If `false`, `null` is returned if the collection details have not already been loaded into memory.\n *\n * @return {?Array} Array of objects where each entry corresponds to a set collection and contains details about that collection.\n * Each object can be expected to contain:\n * \n * - `title`, the title for the collection.\n * - `description`, the description for the collection.\n * - `species`, the species for all gene identifiers in the collection.\n *   This should contain the full scientific name, e.g., `\"Homo sapiens\"`, `\"Mus musculus\"`.\n * - `maintainer`, the maintainer of this collection.\n * - `source`, the source of this set, usually a link to some external resource.\n * - `start`, the index for the first set in the collection in the output of {@linkcode sets}.\n *   All sets from the same collection are stored contiguously.\n * - `size`, the number of sets in the collection.\n *\n * In a **gesel** context, the identifier for a collection (i.e., the \"collection ID\") is defined as the index of the collection in this array.\n *\n * If the collection details have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchAllCollections(species, { download = true } = {}) {\n    let target = _collections.get(species);\n    if (typeof target !== \"undefined\") {\n        return target;\n    } else if (!download) {\n        return null;\n    }\n\n    target = [];\n    _collections.set(species, target);\n\n    var cres = await reference_download(species + \"_collections.tsv.gz\");\n    if (!cres.ok) {\n        throw new Error(\"failed to fetch collection information for species '\" + species + \"'\");\n    }\n    var coll_data = decompressLines(await cres.arrayBuffer());\n\n    var start = 0;\n    for (var i = 0; i < coll_data.length; i++) {\n        let x = coll_data[i];\n        var details = x.split(\"\\t\");\n        var len = Number(details[5]);\n        target.push({\n            \"title\": details[0],\n            \"description\": details[1],\n            \"species\": details[2],\n            \"maintainer\": details[3],\n            \"source\": details[4],\n            \"start\": start,\n            \"size\": len\n        });\n        start += len;\n    }\n\n    return target;\n}\n","import { gene_download, decompressLines } from \"./utils.js\";\n\nvar _genes = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Array} [options.types=null] - Array of strings specifying the identifier types to be retrieved.\n * The exact choice of strings depends on how the references were constructed.\n * If `null`, it defaults to an array containing `\"symbol\"`, `\"entrez\"` and `\"ensembl\"`.\n *\n * @return {Map} Object where each key is named after an identifier type in `types`.\n * Each value is an array where each element corresponds to a gene and is itself an array of strings containing all identifiers of the current type for that gene.\n *\n * The arrays for different identifier types are all of the same length, and corresponding elements across these arrays describe the same gene.\n * **gesel**'s identifier for each gene (i.e., the \"gene ID\") is defined as the index of that gene in any of these arrays.\n *\n * @async\n */\nexport async function fetchAllGenes(species, { types = null } = {}) {\n    if (types == null) {\n        types = [ \"symbol\", \"entrez\", \"ensembl\" ];\n    }\n\n    let target = _genes.get(species);\n    if (typeof target == \"undefined\") {\n        target = new Map;\n        _genes.set(species, target);\n    }\n\n    let output = new Map;\n    let promises = [];\n    let processing = [];\n\n    for (const t of types) {\n        let found = target.get(t);\n        if (typeof found == \"undefined\") {\n            promises.push(gene_download(species + \"_\" + t + \".tsv.gz\"));\n            processing.push(t);\n        } else {\n            output.set(t, found);\n        }\n    }\n\n    if (promises.length > 0) {\n        let resolved = await Promise.all(promises);\n        for (var i = 0; i < resolved.length; i++) {\n            let res = resolved[i];\n            if (!res.ok) {\n                throw \"failed to fetch symbol information for genes\";\n            }\n            var buffer = await res.arrayBuffer();\n\n            let gene_data = decompressLines(buffer);\n            let processed = [];\n            for (const x of gene_data) {\n                if (x == \"\") {\n                    processed.push([]);\n                } else {\n                    processed.push(x.split(\"\\t\"));\n                }\n            }\n\n            let t = processing[i];\n            target.set(t, processed);\n            output.set(t, processed);\n        }\n    }\n\n    return output;\n}\n","import { reference_download, decompressLines } from \"./utils.js\";\nimport { fetchAllCollections } from \"./fetchAllCollections.js\";\n\nvar _sets = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the set details if they are not already available.\n * If `false`, `null` is returned if the set details have not already been loaded into memory.\n *\n * @return {Array} Array of objects where each entry corresponds to a set and contains the details about that set.\n * Each object can be expected to contain:\n * \n * - `name`, the name of the set.\n * - `description`, the description of the set.\n * - `size`, the number of genes in the set.\n * - `collection`, the index of the collection containing the set.\n * - `number`, the number of the set within the collection.\n *\n * In a **gesel** context, the identifier for a set (i.e., the \"set ID\") is defined as the index of the set in this array.\n *\n * If the set details have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchAllSets(species, { download = true } = {}) {\n    let found = _sets.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    found = [];\n    _sets.set(species, found);\n\n    var [ sres, _collections ] = await Promise.all([reference_download(species + \"_sets.tsv.gz\"), fetchAllCollections(species)]);\n    if (!sres.ok) {\n        throw new Error(\"failed to fetch set information for species '\" + species + \"'\");\n    }\n    var set_data = decompressLines(await sres.arrayBuffer());\n\n    for (var i = 0; i < set_data.length; i++) {\n        let x = set_data[i];\n        var details = x.split(\"\\t\");\n        found.push({\n            \"name\": details[0],\n            \"description\": details[1],\n            \"size\": Number(details[2])\n        });\n    }\n\n    let start = 0;\n    for (var i = 0; i < _collections.length; i++) {\n        let len = _collections[i].size;\n\n        // For easier access going the other way.\n        for (var j = 0; j < len; j++) {\n            found[j + start].collection = i;\n            found[j + start].number = j;\n        }\n\n        start += len;\n    }\n\n    return found;\n}\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the set-to-gene mappings if they are not already available.\n * If `false`, `null` is returned if the set-to-gene mappings have not already been loaded into memory.\n *\n * @return {?Array} Array of length equal to the total number of sets for this `species`.\n * Each element corresponds to an entry in {@linkcode fetchAllSets} and is an array of integers containing the IDs for all genes belonging to that set.\n * Gene IDs refer to indices in {@linkcode fetchAllGenes}.\n *\n * If the set-to-gene mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchGenesForAllSets(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_set2gene.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch full set-to-gene information for species '\" + species + \"'\");\n    }\n\n    var set_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = set_data.map(utils.convertToUint32Array);\n    _cache.set(species, loaded);\n    return loaded;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchGenesForAllSets.js\";\n\nconst _ranges = new Map;\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} set - Set ID, see {@linkcode fetchAllSets} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a range request to the server.\n * By default, the return value is extracted from the full set-to-gene mappings if {@linkcode fetchGenesForAllSets} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all set-to-gene information up-front to avoid range requests.\n * This is done by calling {@linkcode fetchGenesForAllSets}.\n * Ignored if `forceRequest = true`.\n *\n * @return {Uint32Array} Array of integers containing the IDs for all genes belonging to the set.\n * Gene IDs refer to indices in {@linkcode fetchAllGenes}.\n *\n * If `set = null`, no return value is provided.\n * @async\n */\nexport async function fetchGenesForSet(species, set, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchGenesForAllSets(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (set !== null) {\n                return ffound[set];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let spfound = _cache.get(species);\n    if (typeof spfound == \"undefined\") {\n        spfound = new Map;\n        _cache.set(species, spfound);\n        _ranges.set(species, await utils.retrieveRanges(species + \"_set2gene.tsv\"));\n    }\n\n    if (set == null) {\n        return;\n    }\n\n    let sefound = spfound.get(set);\n    if (typeof sefound !== \"undefined\") {\n        return sefound;\n    }\n\n    let ranges = _ranges.get(species);\n    let text = await utils.retrieveBytesByIndex(species + \"_set2gene.tsv\", ranges, set);\n    let output = utils.convertToUint32Array(text);\n    spfound.set(set, output);\n    return output;\n}\n","import * as utils from \"./utils.js\";\n\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.download=true] - Whether to download the gene-to-set mappings if they are not already available.\n * If `false`, `null` is returned if the gene-to-set mappings have not already been loaded into memory.\n *\n * @return {?Array} Array of length equal to the total number of genes for this `species`.\n * Each element corresponds to an entry in {@linkcode fetchAllGenes} and is an array of integers containing the IDs for all sets containing that gene.\n * Set IDs refer to indices in {@linkcode fetchAllSets}.\n *\n * If the gene-to-set mappings have not already been loaded and `download = false`, `null` is returned.\n * @async\n */\nexport async function fetchSetsForAllGenes(species, { download = true } = {}) {\n    let found = _cache.get(species);\n    if (typeof found !== \"undefined\") {\n        return found;\n    } else if (!download) {\n        return null;\n    }\n\n    let res = await utils.reference_download(species + \"_gene2set.tsv.gz\");\n    if (!res.ok) {\n        throw new Error(\"failed to fetch full gene-to-set information for species '\" + species + \"'\");\n    }\n\n    var gene_data = utils.decompressLines(await res.arrayBuffer());\n    let loaded = gene_data.map(utils.convertToUint32Array);\n    _cache.set(species, loaded);\n    return loaded;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchSetsForAllGenes.js\";\n\nconst _ranges = new Map;\nconst _cache = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n *\n * @return {number} Number of genes that belong to at least one set for `species`.\n * This can be used as a more appropriate universe size in {@linkcode testEnrichment}.\n */\nexport async function effectiveNumberOfGenes(species) {\n    let ffound = await full.fetchSetsForAllGenes(species, { download: false });\n    if (ffound !== null) {\n        let okay = 0;\n        for (const x of ffound) {\n            okay += x.length > 0;\n        }\n        return okay;\n    }\n\n    let ranged = _ranges.get(species);\n    if (typeof ranged === \"undefined\") {\n        _cache.set(species, new Map);\n        ranged = await utils.retrieveRanges(species + \"_gene2set.tsv\")\n        _ranges.set(species, ranged);\n    }\n\n    let okay = 0;\n    for (var i = 1; i < ranged.length; i++) {\n        if (ranged[i] > ranged[i-1] + 1) {\n            okay++;\n        }\n    }\n\n    return okay;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} gene - Gene ID, see {@linkcode fetchAllGenes} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a range request to the server.\n * By default, the return value is extracted from the full gene-to-set mappings if {@linkcode fetchSetsForAllGenes} was called before this function. \n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all gene-to-set mappings up-front to avoid range requests.\n * This is done by calling {@linkcode fetchSetsForAllGenes}\n * Ignored if `forceRequest = true`.\n *\n * @return {Uint32Array} Array of integers containing the IDs of all sets containing the gene.\n * IDs are treated as indices into the return value of {@linkcode fetchAllSets} or as input to {@linkcode fetchSingleSet}.\n *\n * If `gene = null`, no return value is provided.\n * \n * @async\n */\nexport async function fetchSetsForGene(species, gene, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchSetsForAllGenes(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (gene !== null) {\n                return ffound[gene];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let spfound = _cache.get(species);\n    if (typeof spfound === \"undefined\") {\n        spfound = new Map;\n        _cache.set(species, spfound);\n        _ranges.set(species, await utils.retrieveRanges(species + \"_gene2set.tsv\"));\n    }\n    if (gene == null) {\n        return;\n    }\n\n    let gfound = spfound.get(gene);\n    if (typeof gfound !== \"undefined\") {\n        return gfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_gene2set.tsv\", _ranges.get(species), gene);\n    let output = utils.convertToUint32Array(text);\n    spfound.set(gene, output);\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchAllCollections.js\";\n\nconst _cache = new Map;\nconst _ranges = new Map;\nconst _sizes = new Map;\nconst _starts = new Map;\n\nasync function initialize(species) {\n    let res = await utils.retrieveRangesWithExtras(species + \"_collections.tsv\");\n    _ranges.set(species, res.ranges);\n    _sizes.set(species, res.extra);\n\n    let first = 0;\n    let starts = [];\n    for (const s of res.extra) {\n        starts.push(first);\n        first += s;\n    }\n    _starts.set(species, starts);\n\n    _cache.set(species, new Map);\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {Array} Number of sets in each collection.\n * Each value corresponds to a collection in {@linkcode fetchAllCollections}.\n * @async\n */\nexport async function fetchCollectionSizes(species) {\n    return utils.fetchSizes(species, _sizes, full.fetchAllCollections, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {number} Total number of collections for this species.\n * @async\n */\nexport async function numberOfCollections(species) {\n    return utils.fetchNumber(species, _sizes, full.fetchAllCollections, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} collection - Collection ID, see {@linkcode fetchAllCollections} for details.\n * \n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a request to the server.\n * By default, the return value is extracted from the full collection details if {@linkcode fetchAllCollections} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all collection details up-front to avoid range requests.\n * This is done by calling {@linkcode fetchAllCollections}.\n * Ignored if `forceRequest = true`.\n *\n * @return {object} Object containing the details of the collection.\n * This should be identical to the corresponding entry of the array returned by {@linkcode fetchAllCollections}.\n *\n * If `collection = null`, no return value is provided.\n * @async\n */\nexport async function fetchSingleCollection(species, collection, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchAllCollections(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (collection !== null) {\n                return ffound[collection];\n            } else {\n                return;\n            }\n        }\n    }\n\n    let cached = _cache.get(species);\n    if (typeof cached === \"undefined\") {\n        await initialize(species);\n        cached = _cache.get(species);\n    }\n\n    if (collection == null) {\n        return;\n    }\n\n    let cfound = cached.get(collection);\n    if (typeof cfound !== \"undefined\") {\n        return cfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_collections.tsv\", _ranges.get(species), collection);\n    let split = text.split(\"\\t\");\n    let output = {\n        title: split[0],\n        description: split[1],\n        species: split[2],\n        maintainer: split[3],\n        source: split[4],\n        start: _starts.get(species)[collection],\n        size: _sizes.get(species)[collection]\n    };\n\n    cached.set(collection, output);\n    return output;\n}\n\n\n","import * as utils from \"./utils.js\";\nimport * as full from \"./fetchAllSets.js\";\nimport { fetchCollectionSizes } from \"./fetchSingleCollection.js\";\n\nconst _cache = new Map;\nconst _ranges = new Map;\nconst _sizes = new Map;\nconst _starts = new Map;\nconst _parents = new Map;\nconst _internal_number = new Map;\n\nasync function initialize(species) {\n    const [ sres, csizes ] = await Promise.all([ \n        utils.retrieveRangesWithExtras(species + \"_sets.tsv\"), \n        fetchCollectionSizes(species) \n    ]);\n    _ranges.set(species, sres.ranges);\n    _sizes.set(species, sres.extra);\n\n    let parents = [];\n    let internal_number = [];\n    var totals = 0;\n    for (var i = 0; i < csizes.length; i++) {\n        let colsize = csizes[i];\n        for (var j = 0; j < colsize; j++) {\n            parents.push(i);\n            internal_number.push(j);\n        }\n        totals += colsize;\n    }\n\n    if (totals != sres.extra.length) {\n        throw new Error(\"discrepancy between number of sets and sum of collection sizes\");\n    }\n\n    _parents.set(species, parents);\n    _internal_number.set(species, internal_number);\n    _cache.set(species, new Map);\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {Array} Number of genes in each set.\n * Each value corresponds to a set in {@linkcode fetchAllSets}.\n * @async\n */\nexport async function fetchSetSizes(species) {\n    return utils.fetchSizes(species, _sizes, full.fetchAllSets, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @return {number} Total number of sets for this species.\n * @async\n */\nexport async function numberOfSets(species) {\n    return utils.fetchNumber(species, _sizes, full.fetchAllSets, initialize);\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {?number} set - Set ID, see {@linkcode fetchAllSets} for details.\n *\n * If `null`, no request is performed, but various internal caches are initialized for subsequent calls to this function.\n * This is useful for guaranteeing that caches are available in concurrent calls.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceRequest=false] - Whether to force a request to the server.\n * By default, the return value is extracted from the full set details if {@linkcode fetchAllSets} was called before this function.\n * Setting this to `true` is only useful for testing.\n * @param {boolean} [options.forceDownload=false] - Whether to forcibly download all set details up-front to avoid range requests.\n * This is done by calling {@linkcode fetchAllSets}.\n * Ignored if `forceRequest = true`.\n *\n * @return {object} Object containing the details of the set.\n * This should be identical to the corresponding entry of the array returned by {@linkcode fetchAllSets}.\n *\n * If `set = null`, no return value is provided.\n * @async\n */\nexport async function fetchSingleSet(species, set, { forceRequest = false, forceDownload = false } = {}) {\n    if (!forceRequest) {\n        let ffound = await full.fetchAllSets(species, { download: forceDownload });\n        if (ffound !== null) {\n            if (set !== null) {\n                return ffound[set];\n            } else {\n                console.log(set);\n                return;\n            }\n        }\n    }\n\n    let cached = _cache.get(species);\n    if (typeof cached === \"undefined\") {\n        await initialize(species);\n        cached = _cache.get(species);\n    }\n\n    if (set == null) {\n        return;\n    }\n\n    let sfound = cached.get(set);\n    if (typeof sfound !== \"undefined\") {\n        return sfound;\n    }\n\n    let text = await utils.retrieveBytesByIndex(species + \"_sets.tsv\", _ranges.get(species), set);\n    let split = text.split(\"\\t\");\n    let output = {\n        name: split[0],\n        description: split[1],\n        size: _sizes.get(species)[set],\n        collection: _parents.get(species)[set],\n        number: _internal_number.get(species)[set]\n    };\n\n    cached.set(set, output);\n    return output;\n}\n\n\n","import { fetchSetSizes } from \"./fetchSingleSet.js\";\nimport { fetchSetsForGene, effectiveNumberOfGenes } from \"./fetchSetsForGene.js\";\nimport * as enrich from \"./testEnrichment.js\";\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {Array} genes - Array of unique integers containing user-supplied gene IDs, see {@linkcode fetchAllGenes} for details.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.includeSize=true] - Whether to include the size of each set in the output.\n * @param {boolean} [options.testEnrichment=true] - Whether to compute the enrichment p-value for each set with {@linkcode testEnrichment}.\n * The list and universe sizes will only count genes that are involved in at least one set, by checking {@linkcode fetchSetsForGene} and {@linkcode effectiveNumberOfGenes} respectively.\n * @param {boolean} [options.forceDownload=false] - See {@linkcode fetchSetsForGene}.\n *\n * @return {Array} An array of objects, where each object corresponds to a set that has non-zero overlaps with `genes`.\n * Each object contains:\n *\n * - `id`: the ID of the set in {@linkcode fetchAllSets}.\n * - `count`: the number of genes in the set that overlap with genes in `genes`.\n * - `size`: the size of each set.\n *   Only included if `includeSize = true`.\n * - `pvalue`: the enrichment p-value.\n *   Only included if `testEnrichment = true`.\n *\n * @async\n */\nexport async function findOverlappingSets(species, genes, { includeSize = true, testEnrichment = true, forceDownload = false } = {}) {\n    await fetchSetsForGene(species, null, { forceDownload });\n\n    let promises = [];\n    let queried = new Set;\n    for (const g of genes) {\n        if (!queried.has(g)) {\n            promises.push(fetchSetsForGene(species, g));\n            queried.add(g);\n        }\n    }\n\n    let collected = await Promise.all(promises);\n    let output = countSetOverlaps(collected);\n\n    let sets_sizes = (includeSize || testEnrichment ? await fetchSetSizes(species) : null);\n    if (includeSize) {\n        for (const details of output) {\n            details.size = sets_sizes[details.id];\n        }\n    }\n    if (testEnrichment) {\n        let effective_list = 0; // only considering genes involved in at least one set.\n        for (const v of collected) {\n            effective_list += (v.length > 0);\n        }\n        let universe = await effectiveNumberOfGenes(species);\n        for (const details of output) {\n            details.pvalue = enrich.testEnrichment(details.count, effective_list, sets_sizes[details.id], universe);\n        }\n    }\n\n    return output;\n}\n\n/**\n * This is a utility function that is called internally by {@linkcode findOverlappingSets}.\n * However, it can be used directly to obtain overlap counts if the gene-to-set mappings are manually obtained.\n *\n * @param {Array} setsForSomeGenes - Array where each entry corresponds to a gene and contains an array of the set IDs containing that gene.\n * Each inner array is typically the result of calling {@linkcode fetchSetsForGene}.\n *\n * @return {Array} An array of objects, where each object corresponds to a set that is present in at least one entry of `setsForSomeGenes`.\n * Each object contains:\n *\n * - `id`: the ID of the set in {@linkcode fetchAllSets}.\n * - `count`: the number of genes in the set that overlap with genes in `genes`.\n */\nexport function countSetOverlaps(setsForSomeGenes) {\n    var set_count = new Map;\n    for (const found of setsForSomeGenes) {\n        for (const set of found) {\n            let current = set_count.get(set);\n            if (typeof current == \"undefined\") {\n                set_count.set(set, 1);\n            } else {\n                set_count.set(set, current + 1);\n            }\n        }\n    }\n\n    let output = [];\n    for (const [id, count] of set_count) {\n        let id0 = Number(id);\n        let details = { \n            \"id\": id0,\n            \"count\": count\n        };\n        output.push(details);\n    }\n\n    return output;\n}\n\n","import { fetchAllGenes } from \"./fetchAllGenes.js\";\n\nvar by_symbol = new Map;\nvar by_symbol_lower = new Map;\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {string} type - Type of the identifier to use as the key of the map, e.g., `\"ensembl\"`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.lowerCase=false] - Whether to use lower-case keys in the map.\n *\n * @return {Map} Map where each key is a string containing a (possibly lower-cased) identifier of the specified `type` and each value is an array.\n * Each array contains the **gesel** gene IDs associated with the `type` identifier, see {@linkcode fetchAllGenes} for ore details.\n *\n * @async\n */\nexport async function mapGenesByIdentifier(species, type, { lowerCase = false } = {}) {\n    let host = (lowerCase ? by_symbol_lower : by_symbol);\n\n    let sfound = host.get(species);\n    if (typeof sfound === \"undefined\") {\n        sfound = new Map;\n        host.set(species, sfound);\n    }\n\n    let tfound = sfound.get(type);\n    if (typeof tfound === \"undefined\") {\n        tfound = new Map;\n        sfound.set(type, tfound);\n\n        let _genes = (await fetchAllGenes(species, { types: [ type ] })).get(type);\n        for (var i = 0; i < _genes.length; i++) {\n            for (let y of _genes[i]) {\n                if (lowerCase) {\n                    y = y.toLowerCase();\n                }\n\n                let current = tfound.get(y);\n                if (typeof current !== \"undefined\") {\n                    current.add(i);\n                } else {\n                    tfound.set(y, new Set([i]));\n                }\n            }\n        }\n\n        for (const [key, val] of tfound) {\n            tfound.set(key, Array.from(val));\n        }\n    }\n\n    return tfound;\n}\n","/**\n * Reindex the gene sets for a user-defined gene universe.\n * This is helpful for applications that know their own gene universe and want to convert the gesel gene IDs to indices within that universe.\n *\n * @param {Array} geneMapping - Array of length equal to the number of genes in a user-defined gene universe.\n * Each entry corresponds to one gene in the user's universe and contains the corresponding gesel gene ID(s) (see {@linkcode fetchAllGenes} for details).\n * Each entry can be either a number, for a 1:1 mapping; NaN, for a gene that has no matching gesel gene ID; or an array of gesel gene IDs, like that returned by {@linkcode searchGenes}.\n * @param {Array} genesForSets - Array of length equal to the number of reference gene sets.\n * Each entry corresponds to a set and is an array containing gesel gene IDs for all genes in that set.\n * This is typically obtained from {@linkcode fetchGenesForAllSets}.\n *\n * @return {Array} Array of length equal to `genesForSets`. \n * Each entry corresponds to a reference gene set and is a Uint32Array where the elements are indices into `geneMapping`, specifying the genes in the user's universe that belong to that set.\n * If a gene in `geneMapping` maps to multiple gesel IDs, it is considered to belong to all sets containing any of its mapped gesel gene IDs.\n */\nexport function reindexGenesForAllSets(geneMapping, genesForSets) {\n    let reverse_mapping = new Map;\n    for (var i = 0; i < geneMapping.length; i++) {\n        for (const gesel_gene of geneMapping[i]) {\n            let found = reverse_mapping.get(gesel_gene);\n            if (typeof found == \"undefined\") {\n                found = new Set;\n                reverse_mapping.set(gesel_gene, found);\n            }\n            found.add(i);\n        }\n    }\n\n    // Converting everything to an array for easier iteration. \n    for (const [k, v] of reverse_mapping) {\n        reverse_mapping[k] = new Uint32Array(v);\n    }\n\n    let new_sets = new Array(genesForSets.length);\n    for (var i = 0; i < genesForSets.length; i++) {\n        let subset = new Set;\n        for (const gesel_gene of genesForSets[i]) {\n            let found = reverse_mapping.get(gesel_gene);\n            if (typeof found !== \"undefined\") {\n                for (const gene of found) {\n                    subset.add(gene);\n                }\n            }\n        }\n        new_sets[i] = (new Uint32Array(subset)).sort();\n    }\n\n    return new_sets;\n}\n\n","/**\n * Reindex the gene-to-set mappings for a user-defined gene universe.\n * This is helpful for applications that know their own gene universe and want to create a mapping of all sets containing each of their own genes.\n *\n * @param {Array} geneMapping - Array of length equal to the number of genes in a user-defined gene universe.\n * Each entry corresponds to one gene in the user's universe and contains the corresponding gesel gene ID(s) (see {@linkcode fetchAllGenes} for details).\n * Each entry can be either a number, for a 1:1 mapping; NaN, for a gene that has no matching gesel gene ID; or an array of gesel gene IDs, like that returned by {@linkcode searchGenes}.\n * @param {Array} setsForGenes - Array of length equal to the number of gesel gene IDs.\n * Each entry corresponds to a gesel gene ID and is an array containing the set IDs for all sets containing that gene.\n * This is typically obtained from {@linkcode fetchSetsForAllGenes}.\n *\n * @return {Array} Array of length equal to `geneMapping`.\n * Each entry corresponds to a gene in the user-supplied universe and is a Uint32Array where the elements are the gesel set IDs containing that gene.\n * If a gene in `geneMapping` maps to multiple gesel IDs, we report all sets containing any of its mapped gesel gene IDs.\n */\nexport function reindexSetsForAllGenes(geneMapping, setsForGenes) {\n    let remapped = new Array(geneMapping.length);\n    for (var i = 0; i < geneMapping.length; i++) {\n        let collected = new Set;\n        for (const gesel_gene of geneMapping[i]) {\n            for (const set of setsForGenes[gesel_gene]) {\n                collected.add(set);\n            }\n        }\n        remapped[i] = (new Uint32Array(collected)).sort();\n    }\n    return remapped;\n}\n","import { fetchAllGenes } from \"./fetchAllGenes.js\";\nimport { mapGenesByIdentifier } from \"./mapGenesByIdentifier.js\";\n\n/**\n * @param {string} species - Taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {Array} queries - Array of strings containing gene identifiers of some kind (e.g., Ensembl, symbol, Entrez).\n * @param {object} [options={}] - Optional parameters.\n * @param {?Array} [options.types=null] - Array of strings specifying the identifier types to use for searching.\n * The exact choice of strings depends on how the references were constructed.\n * If `null`, it defaults to an array containing `\"entrez\"`, `\"ensembl\"` and `\"symbol\"`.\n * @param {boolean} [options.ignoreCase=true] - Whether to perform case-insensitive matching.\n *\n * @return {Array} An array of length equal to `queries`.\n * Each element of the array is an array containing the **gesel** gene IDs with any identifiers that match the corresponding search string.\n * See {@linkcode fetchAllGenes} for more details on the interpretation of these IDs.\n *\n * @async\n */\nexport async function searchGenes(species, queries, { types = null, ignoreCase = true } ={}) {\n    if (types === null) {\n        types = [ \"entrez\", \"ensembl\", \"symbol\" ];\n    }\n\n    let promises = [];\n    for (const t of types) {\n        promises.push(mapGenesByIdentifier(species, t, { lowerCase: ignoreCase }));\n    }\n    let resolved = await Promise.all(promises);\n\n    let mapping = [];\n    for (var i = 0; i < queries.length; i++) {\n        let current = queries[i];\n        if (current.length == 0) {\n            mapping.push([]);\n            continue;\n        }\n\n        if (ignoreCase) {\n            current = current.toLowerCase();\n        }\n\n        let findings = [];\n        for (var j = 0; j < types.length; j++) {\n            let val = resolved[j].get(current);\n            if (typeof val !== \"undefined\") {\n                for (const v of val) {\n                    findings.push(v);\n                }\n            }\n        }\n\n        mapping.push(findings);\n    }\n\n    return mapping;\n}\n\n","import * as utils from \"./utils.js\";\n\nexport function binarySearch(query, vector) {\n    let left = 0;\n    let right = vector.length;\n\n    while (left < right) {\n        let mid = Math.trunc((left + right) / 2);\n        if (vector[mid] < query) {\n            left = mid + 1;\n        } else if (vector[mid] > query) {\n            right = mid;\n        } else {\n            return mid;\n        }\n    }\n\n    return left;\n}\n\nasync function fetchSetsByToken(species, token, file, all_ranges, all_ordered, all_cache) {\n    let actual_file = species + \"_\" + file;\n\n    let cached = all_cache.get(species);\n    if (typeof cached === \"undefined\") {\n        const { ranges, order } = await utils.retrieveNamedRanges(actual_file);\n        all_ranges.set(species, ranges);\n        all_ordered.set(species, order);\n        cached = new Map;\n        all_cache.set(species, cached);\n    }\n\n    if (token == null) {\n        return;\n    }\n\n    let tfound = cached.get(token);\n    if (typeof tfound !== \"undefined\") {\n        return tfound;\n    }\n\n    let ranges = all_ranges.get(species);\n    let output;\n    if (token.includes(\"*\") || token.includes(\"?\")) {\n        let ordered = all_ordered.get(species);\n\n        // Wildcard handling.\n        let initstub = token.replace(/[*?].*/, \"\")\n        let pos = (initstub == \"\" ? 0 : binarySearch(initstub, ordered));\n        let regex = new RegExp(token.replace(/[*]/g, \".*\").replace(/[?]/g, \".\"));\n\n        let collected = [];\n        let to_cache = [];\n        let union = new Set;\n\n        while (pos < ordered.length) {\n            let candidate = ordered[pos];\n            if (initstub != \"\" && !candidate.startsWith(initstub)) {\n                break;\n            }\n\n            let cfound = cached.get(candidate);\n            if (typeof cfound === \"undefined\") {\n                let rr = ranges.get(candidate);\n                collected.push(utils.retrieveBytes(actual_file, rr[0], rr[1]).then(utils.convertToUint32Array));\n                to_cache.push(candidate);\n            } else {\n                for (const y of cfound) {\n                    union.add(y);\n                }\n            }\n\n            pos++;\n        }\n\n        let resolved = await Promise.all(collected);\n        for (var i = 0; i < resolved.length; i++) {\n            let x = resolved[i];\n            cached.set(to_cache[i], x);\n            for (const y of x) {\n                union.add(y);\n            }\n        }\n\n        output = new Uint32Array(union);\n\n    } else {\n        // Direct handling.\n        let rr = ranges.get(token);\n        if (typeof rr === \"undefined\") {\n            return new Uint32Array;\n        }\n        let text = await utils.retrieveBytes(actual_file, rr[0], rr[1]);\n        output = utils.convertToUint32Array(text);\n    }\n\n    cached.set(token, output);\n    return output;\n}\n\nconst n_cache = new Map;\nconst n_ranges = new Map;\nconst n_ordered = new Map;\n\nasync function fetchSetsByNameToken(species, token) {\n    return fetchSetsByToken(species, token, \"tokens-names.tsv\", n_ranges, n_ordered, n_cache);\n}\n\nconst d_cache = new Map;\nconst d_ranges = new Map;\nconst d_ordered = new Map;\n\nasync function fetchSetsByDescriptionToken(species, token) {\n    return fetchSetsByToken(species, token, \"tokens-descriptions.tsv\", d_ranges, d_ordered, d_cache);\n}\n\nexport async function preloadTokens(species, resp, ordered, cache, msg) {\n    if (!resp.ok) {\n        throw new Error(\"failed to fetch full set of \" + msg + \" tokens for species '\" + species + \"'\");\n    }\n\n    let lines = utils.decompressLines(await resp.arrayBuffer());\n    if (lines.length !== ordered.length) {\n        throw new Error(\"mismatch in lengths between token names and set indices for species '\" + species + \"'\");\n    }\n\n    for (var i = 0; i < lines.length; i++) {\n        cache.set(ordered[i], utils.convertToUint32Array(lines[i]));\n    }\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n *\n * @return Preloads the search indices for use in {@linkcode searchSetText}.\n * This performs a one-off download of the indices such that further calls to {@linkcode searchSetText} do not need to perform HTTP range requests.\n */\nexport async function preloadSearchSetText(species) {\n    let full = await Promise.all([ \n        utils.reference_download(species + \"_tokens-names.tsv.gz\"),\n        utils.reference_download(species + \"_tokens-descriptions.tsv.gz\"),\n        fetchSetsByNameToken(species, null),\n        fetchSetsByDescriptionToken(species, null)\n    ]);\n    await preloadTokens(species, full[0], n_ordered.get(species), n_cache.get(species), \"name\");\n    await preloadTokens(species, full[1], d_ordered.get(species), d_cache.get(species), \"description\");\n    return;\n}\n\n/**\n * @param {string} species - The taxonomy ID of the species of interest, e.g., `\"9606\"` for human.\n * @param {string} query - Query string containing multiple words to search in the names and/or descriptions of each set.\n *\n * Each stretch of alphanumeric characters and dashes is treated as a single word.\n * All other characters are treated as punctuation between words, except for the following wildcards:\n *\n * - `*`: match zero or more alphanumeric or dash characters.\n * - `?`: match exactly one alphanumeric or dash character.\n *\n * A set's name and/or description must contain all words in `query` to be considered a match.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inName=true] - Whether to search the name of the set for matching words.\n * @param {boolean} [options.inDescription=true] - Whether to search the description of the set for matching words.\n *\n * @return {Array} Array of indices of the sets with names and/or descriptions that match `query`.\n * @async\n */\nexport async function searchSetText(species, query, { inName = true, inDescription = true } = {}) {\n    // Tokenizing the query using the same logic as in the feedstock repository,\n    // but preserving our wildcards for special handling later.\n    let processed = query.toLowerCase().replace(/[^a-zA-Z0-9-?*]/g, \" \");\n    let tokens = processed.split(/\\s+/);\n    tokens = tokens.filter(x => x !== \"\" || x !== \"-\");\n\n    let init = [];\n    if (inName) {\n        init.push(fetchSetsByNameToken(species, null));\n    }\n    if (inDescription) {\n        init.push(fetchSetsByDescriptionToken(species, null));\n    }\n    await Promise.all(init); // force initialization of all caches.\n\n    let gathered_names = [];\n    if (inName) {\n        let already_queried = new Set;\n        for (const tok of tokens) {\n            if (!already_queried.has(tok)) {\n                gathered_names.push(fetchSetsByNameToken(species, tok));\n                already_queried.add(tok);\n            }\n        }\n    }\n\n    let gathered_descriptions = [];\n    if (inDescription) {\n        let already_queried = new Set;\n        for (const tok of tokens) {\n            if (!already_queried.has(tok)) {\n                gathered_descriptions.push(fetchSetsByDescriptionToken(species, tok));\n                already_queried.add(tok);\n            }\n        }\n    }\n\n    let resolved_names = await Promise.all(gathered_names);\n    let resolved_descriptions = await Promise.all(gathered_descriptions);\n\n    let gathered = [];\n    for (var i = 0; i < tokens.length; i++) {\n        let n = (inName ? resolved_names[i] : []);\n        let d = (inDescription ? resolved_descriptions[i] : []);\n\n        let combined = new Uint32Array(n.length + d.length);\n        combined.set(n);\n        combined.set(d, n.length);\n        gathered.push(combined);\n    }\n\n    return utils.intersect(gathered);\n}\n","import * as utils from \"./utils.js\";\n\n/**\n * Helper class for handling matrix data from multiple modalities.\n * In particular, it simplifies memory management of the assorted {@linkplain ScranMatrix} instances containing data for different features in the same set of cells.\n */\nexport class MultiMatrix {\n    #store;\n    #ncols;\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {object} [options.store={}] - Existing store of {@linkplain ScranMatrix} objects.\n     * Each matrix should correspond to a different modality, named according to its key.\n     * All matrices should have data for the same set of cells, i.e., same number of columns.\n     */\n    constructor({ store = {} } = {}) {\n        this.#store = store;\n        this.#ncols = null;\n\n        let keys = Object.keys(store);\n        if (keys.length) {\n            // We ignore numberOfColumns here, as everyone should have the same number of cells.\n            for (var k = 0; k < keys.length; k++) {\n                let current = store[keys[k]];\n                if (k == 0) {\n                    this.#ncols = current.numberOfColumns();\n                } else if (current.numberOfColumns() != this.#ncols) {\n                    throw new Error(\"all matrices should have the same number of columns\");\n                }\n            }\n        }\n    }\n\n    /**\n     * @return {?number} Number of columns in the matrices.\n     * If no matrices are available, `null` is returned.\n     */\n    numberOfColumns() {\n        return this.#ncols;\n    }\n\n    /**\n     * @return {Array} Names of the available modalities.\n     */\n    available() {\n        return Object.keys(this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {boolean} Whether modality `i` is available.\n     */\n    has(i) {\n        return (i in this.#store);\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {ScranMatrix} The matrix data for modality `i`.\n     */\n    get(i) {\n        return this.#store[i];\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @param {ScranMatrix} matrix - The matrix data for modality `i`.\n     *\n     * @return `matrix` is added to the MultiMatrix with name `i`.\n     */\n    add(i, matrix) {\n        if (this.#ncols === null) {\n            this.#ncols = matrix.numberOfColumns();\n        } else if (matrix.numberOfColumns() != this.#ncols) {\n            throw new Error(\"all matrices should have the same number of columns\");\n        }\n\n        if (i in this.#store) {\n            let old = this.#store[i];\n            utils.free(old);\n        }\n\n        this.#store[i] = matrix;\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return Modality `i` is removed from the MultiMatrix.\n     */\n    remove(i) {\n        utils.free(this.#store[i]);\n        delete this.#store[i];\n        if (Object.keys(this.#store).length == 0) {\n            this.#ncols = null;\n        }\n    }\n\n    /**\n     * @param {string} i - Name of a modality.\n     * @return {MultiMatrix} A deep copy of the current object. \n     */\n    clone() {\n        let new_matrix = new MultiMatrix;\n        try {\n            for (const [k, v] of Object.entries(this.#store)) {\n                new_matrix.add(k, v.clone());\n            }\n        } catch (e) {\n            new_matrix.free();\n            throw e;\n        }\n        return new_matrix;\n    }\n\n    /**\n     * @param {string} from - Old name of the modality.\n     * @param {string} to - New name for the modality.\n     *\n     * @return The modality `from` is renamed to `to`, possibly replacing any existing modality at `to`.\n     */\n    rename(from, to) {\n        if (from !== to) {\n            if (to in this.#store) {\n                utils.free(this.#store[to]);\n            }\n            this.#store[to] = this.#store[from];\n            delete this.#store[from];\n        }\n    }\n\n    /**\n     * @return Frees memory for all modalities in this MultiMatrix.\n     */\n    free() {\n        for (const [x, v] of Object.entries(this.#store)) {\n            utils.free(v);\n        }\n        return;\n    }\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\n\n/**\n * Wrapper around a matrix allocated on the Wasm heap.\n * @hideconstructor\n */\nexport class ScranMatrix {\n    #id;\n    #matrix;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#matrix = raw;\n        return;\n    }\n\n    /**\n     * @return {ScranMatrix} A clone of the current ScranMatrix instance.\n     * This can be freed independently of the current instance.\n     */\n    clone() {\n        return gc.call(\n            module => this.#matrix.clone(),\n            ScranMatrix\n        );\n    }\n\n    // Internal use only, not documented.\n    get matrix() {\n        return this.#matrix;\n    }\n\n    /**\n     * @return {number} Number of rows in the matrix.\n     */\n    numberOfRows() {\n        return this.#matrix.nrow();\n    }\n\n    /**\n     * @return {number} Number of columns in the matrix.\n     */\n    numberOfColumns() {\n        return this.#matrix.ncol();\n    }\n\n    /**\n     * @param {number} i - Index of the row to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     *\n     * @return {Float64Array} An array containing the contents of row `i`.\n     *\n     * If `buffer` was supplied, the returned array is a view into it.\n     * Note that this may be invalidated on the next allocation on the Wasm heap.\n     */\n    row(i, { buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.row(i, buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createFloat64WasmArray(this.#matrix.ncol());\n            try {\n                this.#matrix.row(i, buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    /**\n     * @param {number} i - Index of the column to extract.\n     * This should be a non-negative integer less than {@linkcode ScranMatrix#numberOfColumns numberOfColumns}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Float64WasmArray} [options.buffer=null] - Buffer for storing the extracted data.\n     * If supplied, this should have length equal to {@linkcode ScranMatrix#numberOfRows numberOfRows}.\n     *\n     * @return {Float64Array} An array containing the contents of column `i`.\n     *\n     * If `buffer` was supplied, the returned array is a view into it.\n     * Note that this may be invalidated on the next allocation on the Wasm heap.\n     */\n    column(i, { buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.column(i, buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createFloat64WasmArray(this.#matrix.nrow());\n            try {\n                this.#matrix.column(i, buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    /** \n     * Free the memory on the Wasm heap for this.#matrix.\n     * This invalidates this object and all of its references.\n     */\n    free() {\n        if (this.#matrix !== null) {\n            gc.release(this.#id);\n            this.#matrix = null;\n        }\n        return;\n    }\n\n    /**\n     * @return {boolean} Whether the matrix is sparse.\n     */\n    isSparse() {\n        return this.#matrix.sparse();\n    }\n\n    // Internal use only, by initialize* functions.\n    isReorganized() {\n        return this.#matrix.reorganized();\n    }\n\n    // Internal use only, by initialize* functions.\n    identities({ buffer = null } = {}) {\n        if (buffer != null) {\n            this.#matrix.identities(buffer.offset);\n            return buffer.array();\n        } else {\n            var output;\n            buffer = utils.createInt32WasmArray(this.#matrix.nrow());\n            try {\n                this.#matrix.identities(buffer.offset);\n                output = buffer.slice();\n            } finally {\n                buffer.free();\n            }\n            return output;\n        }\n    }\n\n    // Internal use only, by initialize* functions.\n    wipeIdentities() {\n        this.#matrix.wipe_identities();\n        return;\n    }\n}\n","import * as methods from \"../file.js\";\n\nexport function temp(prefix, extension) {\n    let tmppath;\n    do {\n        tmppath = prefix + String(Number(new Date())) + \"_\" + String(Math.round(Math.random() * 10000)) + extension;\n    } while (methods.existsFile(tmppath));\n    return tmppath;\n}\n\nexport function handleString(file) {\n    throw new Error(\"cannot access the file system in a browser context\");\n}\n","import * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as fac from \"./factorize.js\";\n\n/**\n * Create a blocking factor for a set of contiguous blocks, usually to accompany the output of {@linkcode cbind} on matrices representing different batches.\n * This can be used as the blocking factor in functions such as {@linkcode modelGeneVar} or {@linkcode scoreMarkers}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n *\n * @param {(Array|TypedArray)} ncells - Array of integers specifying the number of cells in each block.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to the sum of `ncells`.\n *\n * @return {Int32WasmArray} Array containing the blocking factor.\n * Each value specifies the block of origin for each cell.\n *\n * If `buffer` was supplied, it is used as the return value. \n */\nexport function createBlock(ncells, { buffer = null } = {}) {\n    let total = 0;\n    ncells.forEach(x => { total += x; });\n\n    let local_buffer;\n    try {\n        if (buffer == null) {\n            local_buffer = utils.createInt32WasmArray(total);\n            buffer = local_buffer;\n        } else if (buffer.length !== total) {\n            throw new Error(\"'buffer' should have length equal to sum of 'ncells'\");\n        }\n\n        let barr = buffer.array();\n        let sofar = 0;\n        for (var i = 0; i < ncells.length; i++) {\n            let old = sofar;\n            sofar += ncells[i];\n            barr.fill(i, old, sofar);\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return buffer;\n}\n\n// Soft-deprecated in favor of the more general factorize().\nexport function convertBlock(x, { buffer = null } = {}) {\n    let output = fac.factorize(x, { buffer, action: \"warn\", placeholder: 0 });\n    output.levels = output.levels.map(String);\n    return output;\n}\n\n/**\n * Filter the blocking factor, typically based on the same filtering vector as {@linkcode filterCells}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n * \n * @param {Int32WasmArray} x - A blocking factor, typically produced by {@linkcode convertBlock} or {@linkcode createBlock}.\n * @param {(Array|TypedArray|WasmArray)} subset - Array specifying the subset to retain or filter out, depending on `filter`.\n * \n * If `filter = null`, the array is expected to contain integer indices specifying the entries in `x` to retain.\n * The ordering of indices in `subset` will be respected in the subsetted array.\n *\n * If `filter = true`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * If `filter = false`, the array should be of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be retained.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?boolean} [options.filter=null] - Whether to retain truthy or falsey values in a `subset` boolean filter.\n * If `null`, `subset` should instead contain the indices of elements to retain.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to `subset`, if `filter = null`; \n * the number of falsey elements in `subset`, if `filter = false`;\n * or the number of truthy elements in `subset`, if `filter = true`.\n *\n * @return {Int32WasmArray} Array containing the desired subset of `x`. \n * If `buffer` is supplied, the returned array will be a view into `buffer`.\n */\nexport function subsetBlock(x, subset, { filter = null, buffer = null } = {}) {\n    let len = 0;\n    if (filter === null) {\n        len = subset.length;\n    } else {\n        if (subset.length != x.length) {\n            throw new Error(\"'x' and 'filter' should have the same length\");\n        }\n\n        let sum = 0;\n        subset.forEach(x => { sum += (x != 0); });\n        if (filter) {\n            len = subset.length - sum;\n        } else {\n            len = sum;\n        }\n    }\n\n    let local_buffer;\n    try {\n        if (buffer == null) {\n            local_buffer = utils.createInt32WasmArray(len);\n            buffer = local_buffer;\n        } else if (buffer.length !== len) {\n            throw new Error(\"length of 'buffer' is not consistent with 'subset'\");\n        }\n\n        let barr = buffer.array();\n        let xarr = x.array();\n\n        if (filter == null) {\n            subset.forEach((s, i) => {\n                barr[i] = xarr[s];\n            });\n        } else if (filter) {\n            let j = 0;\n            subset.forEach((y, i) => {\n                if (y == 0) {\n                    barr[j] = xarr[i];\n                    j++;\n                }\n            });\n        } else {\n            let j = 0;\n            subset.forEach((y, i) => {\n                if (y !== 0) {\n                    barr[j] = xarr[i];\n                    j++;\n                }\n            });\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return buffer;\n}\n\n/**\n * Filter the blocking factor, typically based on the same filtering vector as {@linkcode filterCells}.\n * Note that no protection is provided against empty blocks; if this is a possibility, use {@linkcode dropUnusedBlock} on the output of this function.\n * \n * @param {Int32WasmArray} x - A blocking factor, typically produced by {@linkcode convertBlock} or {@linkcode createBlock}.\n * @param {(Array|TypedArray|Uint8WasmArray)} filter - Array of length equal to that of `x`.\n * Each value is interpreted as a boolean and, if truthy, indicates that the corresponding entry of `x` should be filtered out.\n *\n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to the number of falsey elements in `filter`.\n *\n * @return {Int32WasmArray} Array of length equal to `x`, containing all entries of `x` for which `filter` is `false`.\n *\n * If `buffer` is supplied, it is used as the return value.\n */\nexport function filterBlock(x, filter, { buffer = null } = {}) {\n    return subsetBlock(x, filter, { buffer: buffer, filter: true });\n}\n\n/**\n * Reindex the blocking factor to remove unused levels.\n * This is done by adjusting the blocking IDs so that every ID from `[0, N)` is represented at least once, where `N` is the number of levels.\n *\n * @param {Int32WasmArray|Array} x - A blocking factor, typically produced by {@linkcode convertBlock} or {@link createBlock}.\n *\n * @return {Array} `x` is modified in place to remove unused levels.\n *\n * An array (denoted here as `y`) is returned that represents the mapping between the original and modified IDs,\n * i.e., running `x.map(i => y[i])` will recover the input `x`.\n * This is most commonly used to create a new array of levels, i.e., `y.map(i => old_levels[i])` will drop the unused levels. \n */\nexport function dropUnusedBlock(x) {\n    if (x instanceof wa.WasmArray) {\n        // No more wasm allocations past this point!\n        x = x.array();\n    }\n\n    let uniq = new Set(x);\n    let uniq_arr = Array.from(uniq).sort();\n    let mapping = {};\n    uniq_arr.forEach((y, i) => { mapping[y] = i; });\n\n    x.forEach((y, i) => {\n        x[i] = mapping[y];\n    });\n\n    return uniq_arr;\n}\n","import * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as gc from \"./gc.js\";\n\nfunction harvest_matrices(x) {\n    let output = utils.createBigUint64WasmArray(x.length);\n    let arr = output.array();\n    for (var i = 0; i < x.length; i++) {\n        arr[i] = BigInt(x[i].matrix.$$.ptr);\n    }\n    return output;\n}\n\n/**\n * Combine matrices by column, where all matrices contain data for the same features, in the same order.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * All of these should have the same number and order of features.\n *\n * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrices after combining them by column.\n */\nexport function cbind(inputs) {\n    let mat_ptrs;\n    let output;\n\n    try {\n        mat_ptrs = harvest_matrices(inputs);\n        output = gc.call(\n            module => module.cbind(mat_ptrs.length, mat_ptrs.offset),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(mat_ptrs);\n    }\n\n    return output;\n}\n\n/**\n * Combine matrices by row, where all matrices contain data for the same cells, in the same order.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * All of these should have the same number and order of cells.\n *\n * @return {ScranMatrix} A {@linkplain ScranMatrix} containing the matrices after combining them by row.\n */\nexport function rbind(inputs) {\n    let mat_ptrs;\n    let output;\n\n    try {\n        mat_ptrs = harvest_matrices(inputs);\n        output = gc.call(\n            module => module.rbind(mat_ptrs.length, mat_ptrs.offset),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(mat_ptrs);\n    }\n\n    return output;\n}\n\n/**\n * Combine matrices by column, after subsetting each matrix to the intersection of common features.\n *\n * @param {Array} inputs - Array of one or more {@linkplain ScranMatrix} objects.\n * @param {Array} names - Array of length equal to `inputs`.\n * Each entry should be an Array containing the row names of the corresponding entry of `inputs`.\n * Names should correspond to the rows of that entry of `inputs`.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the combined matrices.\n * - `indices`, an Int32WasmArray of length equal to the number of rows in `matrix`.\n *    This contains the index of the row in the first entry of `inputs` corresponding to each row of `matrix`,\n *    i.e., the gene at the `i`-th row of `matrix` is the same as the gene at the `indices[i]`-th row of `inputs[0]`.\n * - `names`, an array of names identifying the rows of `matrix`.\n *    This is constructed by indexing the first entry of `names` with `indices`.\n */\nexport function cbindWithNames(x, names) {\n    let mat_ptrs;\n    let renamed = [];\n    let name_ptrs;\n    let indices;\n    let output = {};\n\n    try {\n        // Building a common set of rownames.\n        if (names.length !== x.length) {\n            throw new Error(\"length of 'names' should be equal to length of 'x'\");\n        }\n\n        let common = {};\n        let universe = [];\n        for (var i = 0; i < names.length; i++) {\n            if (x[i].numberOfRows() !== names[i].length) {\n                throw new Error(\"length of each 'names' must equal number of rows of its corresponding 'x'\");\n            }\n            names[i].forEach(x => {\n                if (!(x in common)) {\n                    common[x] = universe.length;\n                    universe.push(x);\n                }\n            });\n        }\n\n        name_ptrs = utils.createBigUint64WasmArray(x.length);\n        {\n            let names_arr = name_ptrs.array();\n            for (var i = 0; i < names.length; i++) {\n                let current = names[i];\n                let replacement = utils.createInt32WasmArray(current.length);\n                let replacement_arr = replacement.array();\n                current.forEach((x, i) => {\n                    replacement_arr[i] = common[x];\n                });\n                renamed.push(replacement);\n                names_arr[i] = BigInt(replacement.offset);\n            }\n        }\n\n        mat_ptrs = harvest_matrices(x);\n        indices = utils.createInt32WasmArray(x[0].numberOfRows());\n        output.matrix = gc.call(\n            module => module.cbind_with_rownames(x.length, mat_ptrs.offset, name_ptrs.offset, indices.offset),\n            ScranMatrix\n        );\n\n        output.indices = indices.slice(0, output.matrix.numberOfRows());\n        let internames = [];\n        for (const i of output.indices) {\n            internames.push(names[0][i]);\n        }\n        output.names = internames;\n\n    } catch (e) {\n        utils.free(output.matrix);\n        throw e;\n\n    } finally {\n        utils.free(mat_ptrs);\n        utils.free(name_ptrs);\n        utils.free(indices);\n        for (const x of renamed) {\n            utils.free(x);\n        }\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport { ModelGeneVarResults } from \"./modelGeneVar.js\";\n\n/**\n * Compute the filter threshold required to retain the top `number` values.\n *\n * @param {Array|TypedArray} x - Array of numeric values, typically per-gene statistics.\n * @param {number} number - Number of top values to retain after filtering on the returned threshold.\n * This may be approximate in the presence of ties.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.largest=true] - Whether the top values in `x` are defined as the largest numeric values.\n * If `false`, the top values are considered to be the smallest.\n * @param {boolean} [options.copy=true] - Whether to copy `x` before sorting.\n * If `false`, `x` may be modified in-place.\n *\n * @return {number} Threshold to be applied to `x` to obtain the top (approximately) `number` values.\n * If `largest = true`, filtering is performed by taking all values in `x` that are greater than or equal to the returned threshold;\n * if `false`, filtering is performed by taking all values in `x` that are less than or equal to the returned threshold.\n * If `x` is zero-length, NaN is returned.\n */\nexport function computeTopThreshold(x, number, { copy = true, largest = true } = {}) {\n    if (copy) {\n        x = x.slice();\n    }\n\n    if (x instanceof Array) {\n        x.sort((a, b) => a - b); // just in case...\n    } else {\n        x.sort();\n    }\n\n    if (x.length == 0) {\n        return Number.NaN;\n    }\n\n    if (largest) {\n        return x[Math.max(0, x.length - number)]; \n    } else {\n        return x[Math.min(number, x.length) - 1]; \n    }\n}\n\n/**\n * Choose the highly variable genes from variance modelling statistics.\n *\n * @param {(TypedArray|ModelGeneVarResults)} x -\n * A TypedArray of statistics, where larger values correspond to higher variability;\n * or a {@linkplain ModelGeneVarResults} object, in which case the residuals are used as the statistics.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.number=4000] - Number of highly variable genes to select.\n * @param {number} [options.minimum=0] - Minimum value of the residual to consider for a highly variable gene.\n * By default, a highly variable gene must have a non-negative residual.\n *\n * @return {Uint8WasmArray} Array of length equal to the total number of genes,\n * where the chosen highly variable genes are marked with a value of 1 and all other genes have values of zero.\n */\nexport function chooseHVGs(x, { number = 4000, minimum = 0 } = {}) {\n    let stat; \n    if (x instanceof ModelGeneVarResults) {\n        stat = x.residuals();\n    } else {\n        stat = x.slice();\n    }\n\n    let threshold = computeTopThreshold(stat, number, { largest: true, copy: false });\n    if (threshold < minimum) {\n        threshold = minimum;\n    }\n\n    let features = utils.createUint8WasmArray(stat.length);\n    try {\n        // Do this AFTER the features allocation, so that\n        // we can set copy = false for the input array.\n        if (x instanceof ModelGeneVarResults) {\n            stat = x.residuals({ copy: false });\n        } else {\n            stat = x;\n        }\n\n        let farr = features.array();\n        stat.forEach((x, i) => {\n            farr[i] = x >= threshold;\n        });\n\n    } catch (e) {\n        features.free();\n        throw e;\n    }\n\n    return features;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\n\n/**\n * Wrapper around the k-means clustering results on the Wasm heap, produced by {@linkcode clusterKmeans}.\n * @hideconstructor\n */\nexport class ClusterKmeansResults {\n    #id;\n    #results;\n\n    #filledClusters;\n    #filledSizes;\n    #filledCenters;\n    #filledWcss;\n    #filledIterations;\n    #filledStatus;\n\n    constructor(id, raw, filled = true) {\n        this.#results = raw;\n        this.#id = id;\n\n        this.#filledClusters = filled;\n        this.#filledSizes = filled;\n        this.#filledCenters = filled;\n        this.#filledWcss = filled;\n        this.#filledIterations = filled;\n        this.#filledStatus = filled;\n\n        return;\n    }\n\n    /**\n     * @return {number} Number of cells in the results.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    /**\n     * @return {number} Number of clusters in the results.\n     */\n    numberOfClusters() {\n        return this.#results.num_clusters();\n    }\n\n    /**\n     * @param {number} iterations - Number of iterations.\n     * @return The specified number of iterations is set in this object.\n     * Typically only used after {@linkcode emptyClusterKmeansResults}.\n     */\n    setIterations(iterations) {\n        if (!this.#filledIterations) {\n            this.#filledIterations = true;\n        }\n        this.#results.set_iterations(iterations);\n        return;\n    }\n\n    /**\n     * @param {number} status - Status of the k-means clustering.\n     * @return The status is set in this object.\n     * Typically only used after {@linkcode emptyClusterKmeansResults}.\n     */\n    setStatus(status) {\n        if (!this.#filledStatus) {\n            this.#filledStatus = true;\n        }\n        this.#results.set_status(status);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster assignment for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusters({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledClusters, \n            () => { this.#filledClusters = true }, \n            COPY => utils.possibleCopy(this.#results.clusters(), COPY),\n            \"clusters\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the number of cells in each cluster.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusterSizes({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSizes, \n            () => { this.#filledSizes = true }, \n            COPY => utils.possibleCopy(this.#results.cluster_sizes(), COPY),\n            \"clusterSizes\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the within-cluster sum of squares in each cluster.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    withinClusterSumSquares({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledWcss, \n            () => { this.#filledWcss = true }, \n            COPY => utils.possibleCopy(this.#results.wcss(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the cluster centers in column-major format,\n     * where rows are dimensions and columns are the clusters.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    clusterCenters({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledCenters, \n            () => { this.#filledCenters = true }, \n            COPY => utils.possibleCopy(this.#results.centers(), COPY)\n        );\n    }\n\n    /**\n     * @return {?number} Number of refinement iterations performed by the algorithm.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setIterations setIterations}.\n     */\n    iterations() {\n        if (!this.#filledIterations) {\n            return null;\n        } else {\n            return this.#results.iterations();\n        }\n    }\n\n    /**\n     * @return {?number} Status of the algorithm - anything other than zero usually indicates a problem with convergence.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setStatus setStatus}.\n     */\n    status() {\n        if (!this.#filledStatus) {\n            return null;\n        } else {\n            return this.#results.status();\n        }\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using k-means.\n *\n* @param {(RunPCAResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPCAResults} input, we extract the principal components.\n * @param {number} clusters Number of clusters to create.\n * This should not be greater than the number of cells.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {?number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {string} [options.initMethod=\"pca-part\"] - Initialization method.\n * Setting `\"random\"` will randomly select `clusters` cells as centers.\n * Setting `\"kmeans++\"` will use the weighted sampling approach of Arthur and Vassilvitskii (2007).\n * Setting `\"pca-part\"` will use PCA partitioning.\n * @param {number} [options.initSeed=5768] - Seed to use for random number generation during initialization.\n * @param {number} [options.initPCASizeAdjust=1] - Adjustment factor for the cluster sizes, used when `initMethod = \"pca-part\"`.\n * Larger values (up to 1) will prioritize partitioning of clusters with more cells.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {ClusterKmeansResults} Object containing the clustering results.\n */\nexport function clusterKmeans(x, clusters, { numberOfDims = null, numberOfCells = null, initMethod = \"pca-part\", initSeed = 5768, initPCASizeAdjust = 1, numberOfThreads = null } = {}) {\n    var buffer;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.cluster_kmeans(pptr, numberOfDims, numberOfCells, clusters, initMethod, initSeed, initPCASizeAdjust, nthreads),\n            ClusterKmeansResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ClusterKmeansResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfClusters - Number of clusters in the dataset.\n * @param {number} numberOfDimensions - Number of dimensions of the embedding used for clustering.\n *\n * @return {ClusterKmeansResults} Object with allocated memory to store variance modelling statistics, but no actual values.\n */\nexport function emptyClusterKmeansResults(numberOfCells, numberOfClusters, numberOfDimensions) {\n    return gc.call(\n        module => new module.ClusterKmeans_Result(numberOfCells, numberOfClusters, numberOfDimensions),\n        ClusterKmeansResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { FindNearestNeighborsResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the SNN graph object on the Wasm heap, produced by {@linkcode buildSNNGraph}.\n * @hideconstructor\n */\nexport class BuildSNNGraphResults {\n    #id;\n    #graph;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#graph = raw;\n        return;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#graph !== null) {\n            gc.release(this.#id);\n            this.#graph = null;\n        }\n        return;\n    }\n\n    // Not documented, internal use only.\n    get graph() {\n        return this.#graph;\n    }\n}\n\n/**\n * Build a shared nearest graph.\n *\n * @param {(BuildNeighborSearchIndexResults|FindNearestNeighborsResults)} x \n * Either a pre-built neighbor search index for the dataset (see {@linkcode buildNeighborSearchIndex}),\n * or a pre-computed set of neighbor search results for all cells (see {@linkcode findNearestNeighbors}).\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.scheme=\"rank\"] - Weighting scheme for the edges between cells.\n * This can be based on the top ranks of the shared neighbors (`\"rank\"`),\n * the number of shared neighbors (`\"number\"`) \n * or the Jaccard index of the neighbor sets between cells (`\"jaccard\"`).\n * @param {number} [options.neighbors=10] - Number of nearest neighbors to use to construct the graph.\n * Ignored if `x` is a {@linkplain FindNearestNeighborsResults} object.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {BuildSNNGraphResults} Object containing the graph.\n */\nexport function buildSNNGraph(x, { scheme = \"rank\", neighbors = 10, numberOfThreads = null } = {}) {\n    var output;\n    var my_neighbors;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    utils.matchOptions(\"scheme\", scheme, [ \"rank\", \"number\", \"jaccard\" ]);\n\n    try {\n        let ref;\n        if (x instanceof FindNearestNeighborsResults) {\n            ref = x;\n        } else {\n            my_neighbors = findNearestNeighbors(x, neighbors, { numberOfThreads: nthreads }); \n            ref = my_neighbors ; // separate assignment is necessary for only 'my_neighbors' but not 'x' to be freed.\n        }\n\n        output = gc.call(\n            module => module.build_snn_graph(ref.results, scheme, nthreads),\n            BuildSNNGraphResults\n        );\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around the SNN multi-level clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphMultiLevelResults {\n    #id;\n    #results;\n\n    #filledBest;\n    #filledModularity;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledBest = filled;\n        this.#filledModularity = utils.spawnArray(this.numberOfLevels(), filled);\n        this.#filledMembership = utils.spawnArray(this.numberOfLevels(), filled);\n\n        return;\n    }\n\n    /**\n     * @return {?number} The clustering level with the highest modularity.\n     * Alternatively `null`, if this has not been previously set via {@linkcode ClusterSNNGraphMultiLevelResults#setBest setBest}.\n     */\n    best() {\n        if (!this.#filledBest) {\n            return null;\n        } else {\n            return this.#results.best();\n        }\n    }\n\n    #chooseLevel(level) {\n        if (level === null) {\n            level = this.best();\n            if (level == null) {\n                throw new Error(\"'best' has not yet been set via 'setBest'\");\n            }\n        }\n        return level;\n    }\n\n    /**\n     * @param {number} best - Clustering level with the highest modularity.\n     * @return `best` is set as the best clustering level.\n     * This is typically only used after {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setBest(best) {\n        if (!this.#filledBest) {\n            this.#filledBest = true;\n        }\n        this.#results.set_best(best);\n        return;\n    }\n\n    /**\n     * @return {number} Number of levels in the results.\n     */\n    numberOfLevels() {\n        return this.#results.number();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the modularity.\n     * Defaults to the best clustering level from {@linkcode ClusterSNNGraphMultiLevelResults#best best}.\n     *\n     * @return {?number} The modularity at the specified level.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphMultiLevelResults#setModularity setModularity}.\n     */\n    modularity({ level = null } = {}) {\n        level = this.#chooseLevel(level);\n        if (!this.#filledModularity[level]) {\n            return null;\n        } else {\n            return this.#results.modularity(level);\n        }\n    }\n\n    /**\n     * @param {number} level - The clustering level at which to set the modularity.\n     * @param {number} modularity - Modularity value.\n     *\n     * @return `modularity` is set as the modularity at the specified level.\n     * This is typically only used after {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(level, modularity) {\n        if (!this.#filledModularity[level]) {\n            this.#filledModularity[level] = true;\n        }\n        this.#results.set_modularity(level, modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.level=null] - The clustering level for which to obtain the cluster membership.\n     * Defaults to the best clustering level from {@linkcode ClusterSNNGraphMultiLevelResults#best best}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ level = null, copy = true, fillable = false } = {}) {\n        level = this.#chooseLevel(level);\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership[level], \n            () => { this.#filledMembership[level] = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(level), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the SNN walktrap clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphWalktrapResults {\n    #id;\n    #results;\n\n    #filledModularity;\n    #filledModularityDetails;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledModularity = filled;\n        this.#filledMembership = filled;\n        if (!filled) {\n            let n = this.numberOfMergeSteps() + 1;\n            this.#filledModularityDetails = { which: utils.spawnArray(n, false), remaining: n };\n        }\n\n        return;\n    }\n\n    /**\n     * @return {number} Number of merge steps used by the Walktrap algorithm.\n     */\n    numberOfMergeSteps() {\n        return this.#results.num_merge_steps();\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.at=null] - Index at which to extract the modularity.\n     * This can be any value from 0 to {@linkcode ClusterSNNGraphWalktrapResults#numberOfMergeSteps numberOfMergeSteps} plus 1.\n     * Set to `null` to obtain the largest modularity across all merge steps.\n     *\n     * @return {?number} The modularity at the specified merge step, or the maximum modularity across all merge steps.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphWalktrapResults#setModularity setModularity}.\n     */\n    modularity({ at = null } = {}) {\n        let fail = false;\n        if (at === null) {\n            if (!this.#filledModularity) {\n                return null;\n            }\n            at = -1;\n        } else if (!this.#filledModularity && !this.#filledModularityDetails[at]) {\n            return null;\n        }\n\n        return this.#results.modularity(at);\n    }\n\n    /**\n     * @param {number} at - Index at which to set the modularity.\n     * This can be any value from 0 to {@linkcode ClusterSNNGraphWalktrapResults#numberOfMergeSteps numberOfMergeSteps} plus 1.\n     * @param {number} modularity - Modularity value.\n     *\n     * @return Modularity value is set in this object.\n     * This is typically used after calling {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(at, modularity) {\n        if (!this.#filledModularity) {\n            this.#filledModularityDetails.which[at] = true;\n            this.#filledModularityDetails.remaining--;\n            if (this.#filledModularityDetails.remaining == 0) {\n                this.#filledModularity = true;\n            }\n        }\n        this.#results.set_modularity(at, modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership, \n            () => { this.#filledMembership = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Wrapper around the SNN Leiden clustering results on the Wasm heap, produced by {@linkcode clusterSNNGraph}.\n * @hideconstructor\n */\nexport class ClusterSNNGraphLeidenResults {\n    #id;\n    #results;\n\n    #filledModularity;\n    #filledMembership;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledModularity = filled;\n        this.#filledMembership = filled;\n        return;\n    }\n\n    /**\n     * @return {?number} The quality of the Leiden clustering.\n     * Alternatively `null`, if this has not been set by {@linkcode ClusterSNNGraphLeidenResults#setModularity setModularity}.\n     *\n     * Note that Leiden's quality score is technically a different measure from modularity.\n     * Nonetheless, we use `modularity` for consistency with the other SNN clustering result classes.\n     */\n    modularity() {\n        if (!this.#filledModularity) {\n            return null;\n        } else {\n            return this.#results.modularity();\n        }\n    }\n\n    /**\n     * @param {number} modularity - Modularity value.\n     * @return Modularity value is set in this object.\n     * This is typically used after calling {@linkcode emptyClusterSNNGraphResults}.\n     */\n    setModularity(modularity) {\n        if (!this.#filledModularity) {\n            this.#filledModularity = true;\n        }\n        this.#results.set_modularity(modularity);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the cluster membership for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    membership({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMembership, \n            () => { this.#filledMembership = true; }, \n            COPY => utils.possibleCopy(this.#results.membership(), COPY)\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Cluster cells using community detection on the SNN graph.\n *\n * @param {BuildSNNGraphResults} x - The shared nearest neighbor graph constructed by {@linkcode buildSNNGraph}.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.method=\"multilevel\"] - Community detection method to use.\n * This should be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n * @param {number} [options.multiLevelResolution=1] - The resolution of the multi-level clustering, when `method = \"multilevel\"`.\n * Larger values result in more fine-grained clusters.\n * @param {number} [options.leidenResolution=1] - The resolution of the Leiden clustering, when `method = \"leiden\"`.\n * Larger values result in more fine-grained clusters.\n * @param {boolean} [options.leidenModularityObjective=false] - Whether to use the modularity as the objective function when `method = \"leiden\"`.\n * By default, the Constant-Potts Model is used instead.\n * Set to `true` to get an interpretation of the resolution on par with that of `method = \"multilevel\"`.\n * @param {number} [options.walktrapSteps=4] - Number of steps for the Walktrap algorithm, when `method = \"walktrap\"`.\n *\n * @return {ClusterSNNGraphMultiLevelResults|ClusterSNNGraphWalktrapResults|ClusterSNNGraphLeidenResults} Object containing the clustering results.\n * The class of this object depends on the choice of `method`.\n */\nexport function clusterSNNGraph(x, { \n    method = \"multilevel\", \n    multiLevelResolution = 1, \n    leidenResolution = 1, \n    leidenModularityObjective = false,\n    walktrapSteps = 4\n} = {}) {\n    var output;\n\n    try {\n        if (method == \"multilevel\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_multilevel(x.graph, multiLevelResolution),\n                ClusterSNNGraphMultiLevelResults\n            );\n        } else if (method == \"walktrap\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_walktrap(x.graph, walktrapSteps),\n                ClusterSNNGraphWalktrapResults\n            );\n        } else if (method == \"leiden\") {\n            output = gc.call(\n                module => module.cluster_snn_graph_leiden(x.graph, leidenResolution, leidenModularityObjective),\n                ClusterSNNGraphLeidenResults\n            );\n        } else {\n            throw new Error(\"unknown method '\" + method + \"'\")\n        }\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ClusterSNNGraphMultiLevelResults} object (or one of its counterparts), to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {object} [options={}] - Optional parameters.\n * @param {string} [options.method=\"multilevel\"] - Community detection method to use.\n * This should be one of `\"multilevel\"`, `\"walktrap\"` or `\"leiden\"`.\n * @param {number} [options.numberOfLevels=1] - Number of levels for which to allocate space when `method=\"multilevel\"`.\n * @param {number} [options.numberOfMergeSteps=1] - Number of merge steps for which to allocate space when `method=\"walktrap\"`.\n *\n * @return {ClusterSNNGraphMultiLevelResults|ClusterSNNGraphWalktrapResults|ClusterSNNGraphLeidenResults} \n * Object with space allocated to store the clustering results.\n */\nexport function emptyClusterSNNGraphResults(numberOfCells, { method = \"multilevel\", numberOfLevels = 1, numberOfMergeSteps = 1 } = {}) {\n    if (method == \"multilevel\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphMultiLevel_Result(numberOfCells, numberOfLevels),\n            ClusterSNNGraphMultiLevelResults,\n            /* filled = */ false\n        );\n    } else if (method == \"walktrap\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphWalktrap_Result(numberOfCells, numberOfMergeSteps),\n            ClusterSNNGraphWalktrapResults,\n            /* filled = */ false\n        );\n    } else if (method == \"leiden\") {\n        return gc.call(\n            module => new module.ClusterSNNGraphLeiden_Result(numberOfCells),\n            ClusterSNNGraphLeidenResults,\n            /* filled = */ false\n        );\n    } else {\n        throw new Error(\"unknown method '\" + method + \"'\")\n    }\n}\n","import * as wa from \"wasmarrays.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Convert an arbitrary array into a R-style factor, with integer indices into an array of levels.\n * This is useful for formatting grouping or blocking vectors for {@linkcode scoreMarkers}, {@linkcode modelGeneVar}, etc.\n *\n * @param {Array|TypedArray} x - Array of values to be converted into a factor.\n * \n * Note that TypedArray views on Wasm-allocated buffers should only be provided if `buffer` is also provided;\n * otherwise, a Wasm memory allocation may invalidate the view.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.asWasmArray=true] - Whether to return an Int32WasmArray instance for the indices.\n * If `false`, an Int32Array is returned instead.\n * Only used if `buffer` is not supplied.\n * @param {?(Int32WasmArray|Int32Array)} [options.buffer=null] - Array in which the output is to be stored.\n * If provided, this should be of length equal to that of `x`.\n * @param {string} [options.action=\"warn\"] - Action to take when invalid values (i.e., null, NaNs) are detected in `x`.\n *\n * - `\"none\"`: the index is silently set to `placeholder`.\n * - `\"warn\"`: a warning is raised on the first occurrence of an invalid value, and the index is set to `placeholder`.\n * - `\"error\"`: an error is raised.\n * \n * @param {number} [options.placeholder=-1] - Placeholder index to use upon detecting invalid values in `x`.\n *\n * @return {object} Object containing:\n *\n * - `ids`: an Int32WasmArray or Int32Array of length equal to `x`, containing the index into `levels` for each cell.\n * - `levels`: an array of unique levels, such that `Array.from(ids).map(i => levels[i])` returns the same contents as `x` (aside from invalid values).\n *\n * If `buffer` was supplied, it is used as the value of the `ids` property.\n */\nexport function factorize(x, { asWasmArray = true, buffer = null, action = \"error\", placeholder = -1 } = {}) {\n    let levels = [];\n    let local_buffer;\n\n    let failure;\n    if (action == \"warn\") {\n        let warned = false;\n        failure = () => {\n            if (warned) {\n                console.warn (\"replacing invalid values with the placeholder index '\" + String(placeholder) + \"'\");\n                warned = true;\n            }\n        };\n    } else if (action == \"none\") {\n        failure = () => {};\n    } else if (action == \"error\") {\n        failure = () => {\n            throw new Error(\"detected invalid value (e.g., null, NaN) in 'x'\");\n        };\n    } else {\n        throw new Error(\"unknown action '\" + action + \"' for handling invalid entries\");\n    }\n\n    try {\n        if (buffer == null) {\n            local_buffer = (asWasmArray ? utils.createInt32WasmArray(x.length) : new Int32Array(x.length));\n            buffer = local_buffer;\n        } else {\n            if (buffer.length !== x.length) {\n                throw new Error(\"'buffer' should have length equal to that of 'x'\");\n            }\n            asWasmArray = buffer instanceof wa.Int32WasmArray;\n        }\n\n        let barr = (asWasmArray ? buffer.array() : buffer); // no allocations from this point onwards!\n        let mapping = new Map;\n\n        for (var i = 0; i < x.length; i++) {\n            let y = x[i];\n            if (y == null || (typeof y == \"number\" && !Number.isFinite(y))) {\n                failure();\n                barr[i] = placeholder;\n                continue;\n            }\n\n            let existing = mapping.get(y);\n            if (typeof existing == \"undefined\") {\n                let n = levels.length;\n                mapping.set(y, n);\n                levels.push(y);\n                barr[i] = n;\n            } else {\n                barr[i] = existing;\n            }\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n    }\n\n    return {\n        ids: buffer,\n        levels: levels\n    };\n}\n\n\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Filter out low-quality cells.\n *\n * @param {ScranMatrix} x The count matrix.\n * @param {(Uint8WasmArray|Array|TypedArray)} filters \n * An array of length equal to the number of columns in `x`, where truthy elements specify the cells to be discarded.\n *\n * @return {ScranMatrix} A matrix of the same type as `x`, filtered by column to remove all cells specified in `filters`. \n */\nexport function filterCells(x, filters) {\n    var filter_data;\n    var output;\n\n    try {\n        filter_data = utils.wasmifyArray(filters, \"Uint8WasmArray\");\n        if (filter_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'filters' must be equal to number of columns in 'x'\");\n        }\n        var ptr = filter_data.offset;\n\n        output = gc.call(\n            module => module.filter_cells(x.matrix, ptr, false),\n            x.constructor\n        );\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(filter_data);\n    }\n\n    return output;\n}\n","import * as utils from \"./utils.js\";\nimport * as gc from \"./gc.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\n\n/** \n * Wrapper for the neighbor search index on the Wasm heap, typically produced by {@linkcode buildNeighborSearchIndex}.\n * @hideconstructor\n */\nexport class BuildNeighborSearchIndexResults {\n    #id;\n    #index; \n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#index = raw;\n        return;\n    }\n\n    /**\n     * @return {number} Number of cells in the index.\n     */\n    numberOfCells() {\n        return this.#index.num_obs();\n    }\n\n    /**\n     * @return {number} Number of dimensions in the index.\n     */\n    numberOfDims() {\n        return this.#index.num_dim();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#index !== null) {\n            gc.release(this.#id);\n            this.#index = null;\n        }\n        return;\n    }\n\n    // Internal only, not documented.\n    get index() {\n        return this.#index;\n    }\n}\n\n/**\n * Build the nearest neighbor search index.\n *\n * @param {(RunPCAResults|Float64WasmArray|Array|TypedArray)} x - Numeric coordinates of each cell in the dataset.\n * For array inputs, this is expected to be in column-major format where the rows are the variables and the columns are the cells.\n * For a {@linkplain RunPCAResults} input, we extract the principal components.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfDims=null] - Number of variables/dimensions per cell.\n * Only used (and required) for array-like `x`.\n * @param {?number} [options.numberOfCells=null] - Number of cells.\n * Only used (and required) for array-like `x`.\n * @param {boolean} [options.approximate=true] - Whether to build an index for an approximate neighbor search.\n *\n * @return {BuildNeighborSearchIndexResults} Index object to use for neighbor searches.\n */\nexport function buildNeighborSearchIndex(x, { numberOfDims = null, numberOfCells = null, approximate = true } = {}) {\n    var buffer;\n    var output;\n\n    try {\n        let pptr;\n\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            let pcs = x.principalComponents({ copy: false });\n            pptr = pcs.byteOffset;\n\n        } else {\n            if (numberOfDims === null || numberOfCells === null) {\n                throw new Error(\"'numberOfDims' and 'numberOfCells' must be specified when 'x' is an Array\");\n            }\n\n            buffer = utils.wasmifyArray(x, \"Float64WasmArray\");\n            if (buffer.length != numberOfDims * numberOfCells) {\n                throw new Error(\"length of 'x' must be the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n\n            pptr = buffer.offset;\n        }\n\n        output = gc.call(\n            module => module.build_neighbor_index(pptr, numberOfDims, numberOfCells, approximate),\n            BuildNeighborSearchIndexResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buffer);\n    }\n\n    return output;\n}\n\n/** \n * Wrapper for the neighbor search results on the Wasm heap, typically produced by {@linkcode findNearestNeighbors}.\n * @hideconstructor\n */\nexport class FindNearestNeighborsResults {\n    #id;\n    #results;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#results = raw;\n        return;\n    }\n\n    /**\n     * @return {number} The total number of neighbors across all cells.\n     * This is usually the product of the number of neighbors and the number of cells.\n     */\n    size() {\n        return this.#results.size();\n    }\n\n    /**\n     * @return {number} The number of cells used in the search.\n     */\n    numberOfCells() {\n        return this.#results.num_obs();\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?Int32WasmArray} [options.runs=null] - A Wasm-allocated array of length equal to `numberOfCells()`,\n     * to be used to store the number of neighbors per cell.\n     * @param {?Int32WasmArray} [options.indices=null] - A Wasm-allocated array of length equal to `size()`,\n     * to be used to store the indices of the neighbors of each cell.\n     * @param {?Float64WasmArray} [options.distances=null] - A Wasm-allocated array of length equal to `size()`,\n     * to be used to store the distances to the neighbors of each cell.\n     *\n     * @return {object} \n     * An object is returned with the `runs`, `indices` and `distances` keys, each with an appropriate TypedArray as the value.\n     *\n     * If all of the arguments are non-`null`, the TypedArrays in the returned object are views on the corresponding input WasmArrays.\n     * Note that these views may be invalidated on the next allocation on the Wasm heap.\n     *\n     * If only some of the arguments are non-`null`, an error is raised.\n     */\n    serialize({ runs = null, indices = null, distances = null } = {}) {\n        var copy = (runs === null) + (indices === null) + (distances === null);\n        if (copy != 3 && copy != 0) {\n            throw new Error(\"either all or none of 'runs', 'indices' and 'distances' can be 'null'\");\n        }\n\n        var output;\n\n        if (copy === 3) {\n            var run_data;\n            var ind_data;\n            var dist_data;\n            \n            try {\n                run_data = utils.createInt32WasmArray(this.numberOfCells());\n                let s = this.size();\n                ind_data = utils.createInt32WasmArray(s);\n                dist_data = utils.createFloat64WasmArray(s);\n                this.#results.serialize(run_data.offset, ind_data.offset, dist_data.offset);\n\n                output = { \n                    \"runs\": run_data.slice(), \n                    \"indices\": ind_data.slice(), \n                    \"distances\": dist_data.slice() \n                };\n            } finally {\n                utils.free(run_data);\n                utils.free(ind_data);\n                utils.free(dist_data);\n            }\n\n        } else {\n            this.#results.serialize(runs.offset, indices.offset, distances.offset);\n            output = {\n                \"runs\": runs.array(),\n                \"indices\": indices.array(),\n                \"distances\": distances.array()\n            };\n        }\n\n        return output;\n    }\n\n    /**\n     * @param {Int32WasmArray|Array|TypedArray} runs An array of length equal to `numberOfCells()`,\n     * containing the number of neighbors per cell.\n     * @param {Int32WasmArray|Array|TypedArray} indices An array of length equal to `size()`,\n     * containing the indices of the neighbors of each cell.\n     * @param {Float64WasmArray|Array|TypedArray} indices An array of length equal to `size()`,\n     * containing the distances to the neighbors of each cell.\n     *\n     * @return {FindNearestNeighborsResults} Object containing the unserialized search results.\n     */\n    static unserialize(runs, indices, distances) {\n        var output;\n        var run_data;\n        var ind_data;\n        var dist_data;\n\n        try {\n            run_data = utils.wasmifyArray(runs, \"Int32WasmArray\");\n            ind_data = utils.wasmifyArray(indices, \"Int32WasmArray\");\n            dist_data = utils.wasmifyArray(distances, \"Float64WasmArray\");\n            output = gc.call(\n                module => new module.NeighborResults(runs.length, run_data.offset, ind_data.offset, dist_data.offset),\n                FindNearestNeighborsResults\n            );\n\n        } catch (e) {\n            utils.free(output);\n            throw e;\n\n        } finally { \n            utils.free(run_data);\n            utils.free(ind_data);\n            utils.free(dist_data);\n        }\n\n        return output;\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Find the nearest neighbors for each cell.\n *\n * @param {NeighborSearchIndex} x The neighbor search index built by {@linkcode buildNeighborSearchIndex}.\n * @param {number} k Number of neighbors to find.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {FindNearestNeighborsResults} Object containing the search results.\n */\nexport function findNearestNeighbors(x, k, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return gc.call(\n        module => module.find_nearest_neighbors(x.index, k, nthreads),\n        FindNearestNeighborsResults\n    );\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Compute group-based size factors, where composition biases are removed between groups and library size normalization is performed within groups.\n * This allows us to generate per-cell size factors in spite of the sparsity.\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {(Int32WasmArray|Array|TypedArray)} groups - Array containing the group assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.center=true] - Whether to return centered size factors.\n * If `false`, the size factors can be interpreted as the scaling to match `reference`.\n * @param {?Float64WasmArray} [options.buffer=null] - Output buffer for the size factors.\n * This should have length equal to the number of columns in `x`.\n * @param {number} [options.priorCount=10] - Prior count to use for shrinking size factors towards the relative library size.\n * Larger values result in stronger shrinkage when the coverage is low.\n * @param {?number} [options.reference=null] - Group to use as a reference.\n * This should be an entry in `groups`. \n * If `null`, it is automatically determined.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array of length equal to the number of columns in `x`, containing the size factors for all cells.\n *\n * If `buffer` was supplied, it is used as the return value.\n */\nexport function groupedSizeFactors(x, groups, { center = true, buffer = null, priorCount = 10, reference = null, numberOfThreads = null } = {}) {\n    var local_buffer;\n    var group_arr;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        if (!(buffer instanceof wa.Float64WasmArray)) {\n            local_buffer = utils.createFloat64WasmArray(x.numberOfColumns());\n            buffer = local_buffer;\n        } else if (buffer.length !== x.numberOfColumns()) {\n            throw new Error(\"length of 'buffer' must be equal to the number of columns in 'x'\");\n        }\n\n        group_arr = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (reference == null) {\n            reference = -1;\n        }\n\n        wasm.call(module => module.grouped_size_factors(x.matrix, group_arr.offset, center, priorCount, reference, buffer.offset, nthreads));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(group_arr);\n    }\n    \n    return buffer;\n}\n","/**\n * Guess the identity of the features from their names.\n *\n * @param {Array} features - Array of strings containing feature identifiers, typically Ensembl IDs or gene symbols.\n * Elements may also be `null` or undefined if an identifier is missing.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceTaxonomy=false] - Whether to force the use of taxonomy IDs for human and mouse.\n * This is `false` for back compatibility.\n *\n * @return {object} An object containing:\n *\n * - `species`, the inferred species as a string.\n *   This can be either `\"human\"` or `\"mouse\"`, or an NCBI taxonomy ID (one of 6239, 10116, 9541, 7227, 7955, 9598).\n *   If `forceTaxonomy = true`, human and mouse are replaced with 9606 and 10090, respectively.\n * - `type`: the feature identifier type.\n *   This can either be `\"ensembl\"` or `\"symbol\"`.\n * - `confidence`: the percentage of entries in `x` that are consistent with the inferred identity.\n */\nexport function guessFeatures(features, { forceTaxonomy = false } = {}) {\n    let ntotal = features.length;\n    let early_threshold = Math.ceil(ntotal / 2);\n    let format = payload => {\n        payload.confidence /= ntotal;\n        return payload;\n    };\n\n    // Duplicated entries only count as one match, so as to avoid problems with\n    // chromosome positions, feature type specifications, etc. Note that we\n    // still need to use the full length to compute 'ntotal', otherwise we\n    // wouldn't be penalizing the duplicates properly.\n    features = new Set(features); \n\n    let ensembl_human = 0;\n    let ensembl_mouse = 0;\n    let ensembl_6239 = 0;\n    let ensembl_10116 = 0; // Ensembl only, Rat symbols are indistiguishable from mice.\n    let ensembl_9541 = 0; // Ensembl only, Mfac symbols are indistiguishable from human.\n    let ensembl_7227 = 0; // Ensembl only, fly symbols are crazy.\n    let ensembl_7955 = 0;\n    let ensembl_9598 = 0; // Ensembl only, Chimp symbols are indistinguishable from human.\n\n    let symbol_human = 0;\n    let symbol_mouse = 0;\n    let symbol_6239 = 0;\n    let symbol_7955 = 0;\n\n    let hsid = (forceTaxonomy ? \"9606\" : \"human\");\n    let mmid = (forceTaxonomy ? \"10090\" : \"mouse\");\n    let collected = [];\n\n    // Checking if it's any type of Ensembl.\n    let any_ens = 0;\n    features.forEach(x => {\n        if (x && x.match(/^ENS[A-Z]*G[0-9]{11}$/)) {\n            any_ens++;\n        }\n    });\n\n    if (any_ens) {\n        features.forEach(x => {\n            if (x) {\n                if (x.startsWith(\"ENSG\")) {\n                    ensembl_human++;\n                } else if (x.startsWith(\"ENSMUSG\")) {\n                    ensembl_mouse++;\n                } else if (x.startsWith(\"ENSRNOG\")) {\n                    ensembl_10116++;\n                } else if (x.startsWith(\"ENSMFAG\")) {\n                    ensembl_9541++;\n                } else if (x.startsWith(\"ENSDARG\")) {\n                    ensembl_7955++;\n                } else if (x.startsWith(\"ENSPTRG\")) {\n                    ensembl_9598++;\n                }\n            }\n        });\n\n        collected.push({ species: hsid, type: \"ensembl\", confidence: ensembl_human });\n        collected.push({ species: mmid, type: \"ensembl\", confidence: ensembl_mouse });\n        collected.push({ species: \"10116\", type: \"ensembl\", confidence: ensembl_10116 });\n        collected.push({ species: \"9541\", type: \"ensembl\", confidence: ensembl_9541 });\n        collected.push({ species: \"7955\", type: \"ensembl\", confidence: ensembl_7955 });\n        collected.push({ species: \"9598\", type: \"ensembl\", confidence: ensembl_9598 });\n\n        // See if we can quit early and avoid the other checks.\n        for (const x of collected) {\n            if (x.confidence >= early_threshold) {\n                return format(x);\n            }\n        }\n    }\n\n    // Human symbol; starts with upper case, no lower case, and not an Ensembl of any kind.\n    features.forEach(x => {\n        if (x && x.match(/^[A-Z][^a-z]+$/) && !x.match(/^ENS[A-Z]+[0-9]{11}/)) {\n            symbol_human++;\n        }\n    });\n    {\n        let payload = { species: hsid, type: \"symbol\", confidence: symbol_human };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Mouse symbol; starts with upper case, but no upper case after that.\n    features.forEach(x => {\n        if (x && x.match(/^[A-Z][^A-Z]+$/)) {\n            symbol_mouse++;\n        }\n    });\n    {\n        let payload = { species: mmid, type: \"symbol\", confidence: symbol_mouse };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Worm Ensembl (WormBase).\n    features.forEach(x => {\n        if (x && x.match(/^WBGene[0-9]+$/)) {\n            ensembl_6239++;\n        }\n    });\n    {\n        let payload = { species: \"6239\", type: \"ensembl\", confidence: ensembl_6239 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Fly Ensembl (FlyBase).\n    features.forEach(x => {\n        if (x && x.match(/^FBgn[0-9]+$/)) {\n            ensembl_7227++;\n        }\n    });\n    {\n        let payload = { species: \"7227\", type: \"ensembl\", confidence: ensembl_7227 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Worm symbols; at least three lower case with a dash and numbers.\n    features.forEach(x => {\n        if (x && x.match(/^[a-z]{3,}-[0-9]+$/)) {\n            symbol_6239++;\n        }\n    });\n    {\n        let payload = { species: \"6239\", type: \"symbol\", confidence: symbol_6239 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Zebrafish symbols; at least three lower case letters, no dash, followed by numbers and/or more lower case.\n    features.forEach(x => {\n        if (x && x.match(/^[a-z]{3,}[0-9a-z]+$/)) {\n            symbol_7955++;\n        }\n    });\n    {\n        let payload = { species: \"7955\", type: \"symbol\", confidence: symbol_7955 };\n        if (payload.confidence >= early_threshold) {\n            return format(payload);\n        }\n        collected.push(payload);\n    }\n\n    // Picking the best.\n    let highest = collected[0];\n    for (var i = 1; i < collected.length; i++) {\n        if (collected[i].confidence > highest.confidence) {\n            highest = collected[i];\n        }\n    }\n\n    return format(highest);\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\n\n/** \n * Perform a hypergeometric test, typically for over-enrichment of markers across feature sets.\n * This can be computed for multiple feature sets by providing arrays as some or all of the arguments.\n * If multiple arrays are supplied, they must be of the same length.\n *\n * @param {number|Array|TypedArray|WasmArray} markersInSet - Number of detected markers that are also in the feature set.\n * @param {number|Array|TypedArray|WasmArray} numberOfMarkers - Total number of detected markers.\n * @param {number|Array|TypedArray|WasmArray} featureSetSize - Size of the feature set.\n * @param {number|Array|TypedArray|WasmArray} numberOfFeatures - Total number of features.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * @param {boolean} [options.assumeSorted=false] - Whether the input arrays are already sorted such that `markersInSet` is the slowest-changing value.\n * Setting this to `true` can avoid an extra sorting step for greater efficiency.\n *\n * @return {Float64Array} An array of length equal to that of the supplied arrays (or 1, if no arrays are supplied).\n * The i-th entry contains the p-value for enrichment computed using the i-th entry of each supplied array. \n */\nexport function hypergeometricTest(markersInSet, numberOfMarkers, featureSetSize, numberOfFeatures, { numberOfThreads = null, assumeSorted = false } = {}) {\n    let markersInSet_data;\n    let numberOfMarkers_data;\n    let featureSetSize_data;\n    let numberOfFeatures_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    let ntests = null;\n    let check_length = (candidate, name, sofar) => {\n        if (sofar !== null && candidate.length !== sofar) {\n            throw new Error(\"array inputs must have the same length (failing for '\" + name + \"')\");\n        }\n        return candidate.length;\n    }\n\n    if (typeof markersInSet == \"number\") {\n        markersInSet = [markersInSet];\n    } else { \n        ntests = check_length(markersInSet, \"markersInSet\", ntests);\n    }\n\n    if (typeof numberOfMarkers == \"number\") {\n        numberOfMarkers = [numberOfMarkers];\n    } else {\n        ntests = check_length(numberOfMarkers, \"numberOfMarkers\", ntests);\n    }\n\n    if (typeof featureSetSize == \"number\") {\n        featureSetSize = [featureSetSize];\n    } else {\n        ntests = check_length(featureSetSize, \"featureSetSize\", ntests);\n    }\n\n    if (typeof numberOfFeatures == \"number\") {\n        numberOfFeatures = [numberOfFeatures];\n    } else {\n        ntests = check_length(numberOfFeatures, \"numberOfFeatures\", ntests);\n    }\n\n    if (ntests == null) {\n        ntests = 1;\n    }\n\n    let output;\n    let output_data;\n\n    try {\n        markersInSet_data = utils.wasmifyArray(markersInSet, \"Int32WasmArray\");\n        numberOfMarkers_data = utils.wasmifyArray(numberOfMarkers, \"Int32WasmArray\");\n        featureSetSize_data = utils.wasmifyArray(featureSetSize, \"Int32WasmArray\");\n        numberOfFeatures_data = utils.wasmifyArray(numberOfFeatures, \"Int32WasmArray\");\n        output_data = utils.createFloat64WasmArray(ntests);\n\n        wasm.call(module => module.hypergeometric_test(\n            ntests, \n            markersInSet_data.length != 1,\n            markersInSet_data.offset,\n            featureSetSize_data.length != 1,\n            featureSetSize_data.offset,\n            numberOfMarkers_data.length != 1,\n            numberOfMarkers_data.offset,\n            numberOfFeatures_data.length != 1,\n            numberOfFeatures_data.offset,\n            assumeSorted,\n            output_data.offset,\n            nthreads\n        ));\n\n        output = output_data.slice();\n\n    } finally {\n        utils.free(markersInSet_data);\n        utils.free(numberOfMarkers_data);\n        utils.free(featureSetSize_data);\n        utils.free(numberOfFeatures_data);\n        utils.free(output_data);\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\"; \nimport { ScranMatrix } from \"./ScranMatrix.js\";\n\n/**\n * Initialize a sparse matrix from a dense array.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray|Array|TypedArray} values Values of all elements in the matrix, stored in column-major order.\n * This is generally expected to contain non-negative integers; otherwise, users should set `forceInteger = false`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if `values` contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that `values` contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`.\n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromDenseArray(numberOfRows, numberOfColumns, values, { forceInteger = true, layered = true } = {}) {\n    var val_data; \n    var output;\n    var ids = null; \n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        if (val_data.length !== numberOfRows * numberOfColumns) {\n            throw new Error(\"length of 'values' is not consistent with supplied dimensions\");\n        }\n\n        output = gc.call(\n            module => module.initialize_sparse_matrix_from_dense_vector(\n                numberOfRows, \n                numberOfColumns, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"),\n                forceInteger,\n                layered\n            ),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/**\n * Initialize a sparse matrix from its compressed components.\n *\n * @param {number} numberOfRows Number of rows in the matrix.\n * @param {number} numberOfColumns Number of columns in the matrix.\n * @param {WasmArray} values Values of the non-zero elements.\n * This is generally expected to contain non-negative integers; otherwise, users should set `forceInteger = false`.\n * @param {WasmArray} indices Row indices of the non-zero elements.\n * This should be of the same length as `values`.\n * @param {WasmArray} pointers Pointers specifying the start of each column in `indices`.\n * This should have length equal to `numberOfColumns + 1`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.byColumn=true] - Whether the input arrays are supplied in the compressed sparse column format.\n * If `true`, `indices` should contain column indices and `pointers` should specify the start of each row in `indices`.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if `values` contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that `values` contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n * \n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */ \nexport function initializeSparseMatrixFromCompressedVectors(numberOfRows, numberOfColumns, values, indices, pointers, { byColumn = true, forceInteger = true, layered = true } = {}) {\n    var val_data;\n    var ind_data;\n    var indp_data;\n    var output;\n    var ids = null;\n\n    try {\n        val_data = utils.wasmifyArray(values, null);\n        ind_data = utils.wasmifyArray(indices, null);\n        indp_data = utils.wasmifyArray(pointers, null);\n        if (val_data.length != ind_data.length) {\n            throw new Error(\"'values' and 'indices' should have the same length\");\n        }\n        if (indp_data.length != (byColumn ? numberOfColumns : numberOfRows) + 1) {\n            throw new Error(\"'pointers' does not have an appropriate length\");\n        }\n\n        output = gc.call(\n            module => module.initialize_sparse_matrix(\n                numberOfRows, \n                numberOfColumns, \n                val_data.length, \n                val_data.offset, \n                val_data.constructor.className.replace(\"Wasm\", \"\"), \n                ind_data.offset, \n                ind_data.constructor.className.replace(\"Wasm\", \"\"), \n                indp_data.offset, \n                indp_data.constructor.className.replace(\"Wasm\", \"\"), \n                byColumn,\n                forceInteger,\n                layered\n            ),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(val_data);\n        utils.free(ind_data);\n        utils.free(indp_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/** \n * Initialize a sparse matrix from a buffer containing a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options={}] - Optional parameters.\n * @param {?boolean} [options.compressed=null] - Whether the buffer is Gzip-compressed.\n * If `null`, we detect this automatically from the magic number in the header.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If `layered = true`, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If `layered = false`, this is `null`.\n */\nexport function initializeSparseMatrixFromMatrixMarket(x, { compressed = null, layered = true } = {}) {\n    var buf_data;\n    var output;\n    var ids = null;\n\n    try {\n        compressed = convert_compressed(compressed);\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            output = gc.call(\n                module => module.read_matrix_market_from_buffer(buf_data.offset, buf_data.length, compressed, layered),\n                ScranMatrix\n            );\n        } else {\n            output = gc.call(\n                module => module.read_matrix_market_from_file(x, compressed, layered),\n                ScranMatrix\n            );\n        }\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(buf_data);\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\nfunction convert_compressed(compressed) {\n    if (compressed === null) {\n        return -1;\n    } else if (compressed) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n/** \n * Extract dimensions and other details from a MatrixMarket file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of a Matrix Market file with non-negative counts.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n * On browsers, this should be a path in the virtual filesystem, typically created with {@linkcode writeFile}. \n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.compressed=null] - Whether the buffer is Gzip-compressed.\n * If `null`, we detect this automatically from the magic number in the header.\n *\n * @return {object} An object containing the number of `rows`, `columns` and `lines` in the matrix.\n */\nexport function extractMatrixMarketDimensions(x, { compressed = null } = {}) {\n    var buf_data;\n    var stats = utils.createFloat64WasmArray(3);\n    let output = {};\n\n    try {\n        compressed = convert_compressed(compressed);\n        if (typeof x !== \"string\") {\n            buf_data = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            wasm.call(module => module.read_matrix_market_header_from_buffer(buf_data.offset, buf_data.length, compressed, stats.offset));\n        } else {\n            wasm.call(module => module.read_matrix_market_header_from_file(x, compressed, stats.offset));\n        }\n\n        let sarr = stats.array();\n        output.rows = sarr[0];\n        output.columns = sarr[1];\n        output.lines = sarr[2];\n\n    } finally {\n        utils.free(buf_data);\n        utils.free(stats);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a layered sparse matrix from a HDF5 file.\n *\n * @param {string} file Path to the HDF5 file.\n * For browsers, the file should have been saved to the virtual filesystem.\n * @param {string} name Name of the dataset inside the file.\n * This can be a HDF5 Dataset for dense matrices or a HDF5 Group for sparse matrices.\n * For the latter, both H5AD and 10X-style sparse formats are supported.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce all elements to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if the relevant HDF5 dataset contains an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that the matrix contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromHDF5(file, name, { forceInteger = true, layered = true } = {}) {\n    var ids = null;\n    var output;\n\n    try {\n        output = gc.call(\n            module => module.read_hdf5_matrix(file, name, forceInteger, layered),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n\n/**\n * Extract the format and dimensions of a HDF5 matrix.\n *\n * @param {string} file Path to the HDF5 file.\n * For browsers, the file should have been saved to the virtual filesystem.\n * @param {string} name Name of the dataset inside the file.\n * This can be a HDF5 Dataset for dense matrices or a HDF5 Group for sparse matrices.\n * For the latter, both H5AD and 10X-style sparse formats are supported.\n *\n * @return {object} An object containing:\n * - `rows`, the number of rows in the matrix.\n * - `columns`, the number of columns.\n * - `format`, whether the matrix is dense, CSR or CSC.\n * - `integer`, whether the matrix data is stored as integers or doubles.\n */\nexport function extractHDF5MatrixDetails(file, name) { \n    let output = {};\n    let arr = utils.createInt32WasmArray(5);\n    try {\n        wasm.call(module => module.extract_hdf5_matrix_details(file, name, arr.offset));\n\n        let vals = arr.array();\n        if (vals[0] > 0) {\n            output.format = \"dense\";\n        } else if (vals[1] > 0) {\n            output.format = \"csc\";\n        } else {\n            output.format = \"csr\";\n        }\n\n        output.rows = vals[2];\n        output.columns = vals[3];\n        output.integer = vals[4] > 0;\n    } finally {\n        arr.free();\n    }\n    return output;\n}\n\n/**\n * Initialize a dense matrix from a column-major array.\n *\n * @param {number} numberOfRows - Number of rows.\n * @param {number} numberOfColumns - Number of columns.\n * @param {(WasmArray|TypedArray|Array)} values - Array of length equal to the product of `numberOfRows` and `numberOfColumns`,\n * containing the values to store in the array.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce `values` to integers via truncation.\n *\n * @return {ScranMatrix} A dense matrix, filled by column with the contents of `values`.\n */\nexport function initializeDenseMatrixFromDenseArray(numberOfRows, numberOfColumns, values, { forceInteger = false } = {}) {\n    var tmp;\n    var output;\n\n    try {\n        tmp = utils.wasmifyArray(values, null);\n        output = gc.call(\n            module => module.initialize_dense_matrix(\n                numberOfRows, \n                numberOfColumns, \n                tmp.offset, \n                tmp.constructor.className.replace(\"Wasm\", \"\"),\n                forceInteger\n            ),\n            ScranMatrix\n        );\n    } catch (e) {\n        utils.free(output);\n        throw e;\n    } finally {\n        utils.free(tmp);\n    }\n\n    return output;\n}\n\n/**\n * Initialize a layered sparse matrix from an RDS file.\n *\n * @param {RdsObject} x - Handle to an object inside an RDS file.\n * This should be an integer/numeric matrix, `dgCMatrix` or `dgTMatrix` object.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.consume=false] - Whether to consume the values in `x` when creating the output sparse matrix.\n * Setting this to `true` improves memory efficiency at the cost of preventing any further use of `x`.\n * @param {boolean} [options.forceInteger=true] - Whether to coerce all elements to integers via truncation.\n * @param {boolean} [options.layered=true] - Whether to create a layered sparse matrix, which reorders the rows of the loaded matrix for better memory efficiency.\n * Only used if the R matrix is of an integer type and/or `forceInteger = true`.\n * Setting to `true` assumes that the matrix contains only non-negative integers.\n *\n * @return {object} An object containing:\n * - `matrix`, a {@linkplain ScranMatrix} containing the sparse matrix data.\n *   If layering is enabled, rows are shuffled to enable use of smaller integer types for low-abundance features.\n * - `row_ids`, an Int32Array specifying the identity of each row in `matrix`. \n *   This can be interpreted as the row slicing that was applied to the original matrix to obtain `matrix`.\n *   If layering is not enabled, this is `null`.\n *\n * Layering is enabled if the matrix contains integer data (either directly or via `forceInteger = true`) and `layered = true`.\n */\nexport function initializeSparseMatrixFromRds(x, { consume = false, forceInteger = true, layered = true } = {}) {\n    var ids = null;\n    var output;\n\n    try {\n        output = gc.call(\n            module => module.initialize_sparse_matrix_from_rds(x.object.$$.ptr, forceInteger, layered, consume),\n            ScranMatrix\n        );\n\n        if (output.isReorganized()) {\n            ids = output.identities();\n            output.wipeIdentities();\n        }\n\n    } catch(e) {\n        utils.free(output);\n        throw e;\n    }\n\n    return { \"matrix\": output, \"row_ids\": ids };\n}\n","import * as utils from \"./../utils.js\";\nimport * as wasm from \"../wasm.js\";\n\nexport function computePerCellQcFilters(metrics, block, run) {\n    var block_data;\n    var output;\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != metrics.numberOfCells()) {\n                throw new Error(\"'block' must be of length equal to the number of cells in 'metrics'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = run(metrics, use_blocks, bptr);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n\n    return output;\n}\n\nexport function applyFilter(thresholds, metrics, block, buffer) {\n    var block_data;\n    var rebuffer;\n    var output;\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != metrics.numberOfCells()) {\n                throw new Error(\"'block' must be of length equal to the number of cells in 'metrics'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        let optr;\n        if (buffer == null) {\n            rebuffer = utils.createUint8WasmArray(metrics.numberOfCells());\n            optr = rebuffer.offset;\n        } else {\n            if (buffer.length != metrics.numberOfCells()) {\n                throw new Error(\"'buffer' must be of length equal to the number of cells in 'metrics'\");\n            }\n            optr = buffer.offset;\n        }\n\n        wasm.call(module => thresholds.filter(metrics.results.$$.ptr, use_blocks, bptr, optr));\n        if (buffer == null) {\n            output = rebuffer.slice();\n        } else {\n            output = buffer.array();\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n        utils.free(rebuffer);\n    }\n\n    return output;\n}\n\n","import * as wasm from \"../wasm.js\";\nimport * as utils from \"../utils.js\"; \nimport * as wa from \"wasmarrays.js\";\n\nexport function computePerCellQcMetrics(x, subsets, run) {\n    var output;\n    var tmp_subsets = [];\n    var subset_offsets;\n\n    try {\n        let nsubsets = 0;\n        let offset_offset = 0;\n\n        if (subsets != null) {\n            nsubsets = subsets.length;\n            subset_offsets = utils.createBigUint64WasmArray(nsubsets);\n            offset_offset = subset_offsets.offset;\n            let offset_arr = subset_offsets.array();\n\n            for (var i = 0; i < nsubsets; i++) {\n                // This will either create a cheap view, or it'll clone\n                // 'subsets' into the appropriate memory space.\n                let current = utils.wasmifyArray(subsets[i], \"Uint8WasmArray\");\n                if (current.length != x.numberOfRows()) {\n                    throw new Error(\"length of each array in 'subsets' should be equal to the matrix rows\");\n                }\n                tmp_subsets.push(current);\n                offset_arr[i] = BigInt(current.offset);\n            }\n        }\n\n        output = run(x.matrix, nsubsets, offset_offset);\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(subset_offsets);\n        for (const y of tmp_subsets) {\n            utils.free(y);\n        }\n    }\n\n    return output;\n}\n","import * as utils from \"../utils.js\";\n\nexport function unpack_strings(buffer, lengths) {\n    let dec = new TextDecoder();\n    let names = [];\n    let sofar = 0;\n    for (const l of lengths) {\n        let view = buffer.slice(sofar, sofar + l);\n        names.push(dec.decode(view));\n        sofar += l;\n    }\n    return names;\n}\n\nexport function repack_strings(x) {\n    let buffer;\n    let lengths;\n\n    for (const y of x) {\n        if (!(typeof y == \"string\")) {\n            throw new Error(\"all entries of 'x' should be strings for a string HDF5 dataset\");\n        }\n    }\n\n    try {\n        lengths = utils.createInt32WasmArray(x.length);\n        let lengths_arr = lengths.array();\n\n        let total = 0;\n        const enc = new TextEncoder;\n        let contents = new Array(x.length);\n\n        x.forEach((y, i) => {\n            let e = enc.encode(y);\n            lengths_arr[i] = e.length;\n            contents[i] = e;\n            total += e.length;\n        });\n\n        buffer = utils.createUint8WasmArray(total);\n        let buffer_arr = buffer.array();\n        total = 0;\n\n        contents.forEach(y => {\n            buffer_arr.set(y, total);\n            total += y.length;\n        });\n    } catch (e) {\n        utils.free(buffer);\n        utils.free(lengths);\n        throw e;\n    }\n\n    return [lengths, buffer];\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { ScranMatrix } from \"./ScranMatrix.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as init from \"./initializeSparseMatrix.js\";\n\n/**\n * Wrapper around a labelled reference dataset on the Wasm heap, typically produced by {@linkcode loadLabelledReferenceFromBuffers}.\n * @hideconstructor\n */\nclass LoadLabelledReferenceResults {\n    #id;\n    #reference;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#reference = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of samples in this dataset.\n     */\n    numberOfSamples() {\n        return this.#reference.num_samples();\n    }\n\n    /**\n     * @return {number} Number of features in this dataset.\n     */\n    numberOfFeatures() {\n        return this.#reference.num_features();\n    }\n\n    /**\n     * @return {number} Number of labels in this dataset.\n     */\n    numberOfLabels() {\n        return this.#reference.num_labels();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\n/**\n * Load a reference dataset for annotation.\n * \n * @param {Uint8Array} ranks - Buffer containing the Gzipped CSV file containing a matrix of ranks.\n * Each line corresponds to a sample and contains a comma-separated vector of ranks across all features.\n * All lines should contain the same number of entries.\n * This is effectively a row-major matrix where rows are samples and columns are features.\n * (Advanced users may note that this is transposed in C++.) \n * @param {Uint8Array} markers - Buffer containing the Gzipped GMT file containing the markers for each pairwise comparison between labels.\n * For `markers`, the GMT format is a tab-separated file with possibly variable numbers of fields for each line.\n * Each line corresponds to a pairwise comparison between labels, defined by the first two fields.\n * The remaining fields should contain indices of marker features (referring to columns of `matrix`) that are upregulated in the first label when compared to the second.\n * Markers should be sorted in order of decreasing strength.\n * @param {Uint8Array} labels - Buffer containing the Gzipped text file containing the label for each sample.\n * Each line should contain an integer representing a particular label, from `[0, N)` where `N` is the number of unique labels.\n * The number of lines should be equal to the number of rows in `matrix`.\n * The actual names of the labels are usually held elsewhere.\n * \n * @return {LoadLabelledReferenceResults} Object containing the reference dataset.\n */\nexport function loadLabelledReferenceFromBuffers(ranks, markers, labels) {\n    var output;\n    var matbuf;\n    var markbuf;\n    var labbuf;\n\n    try {\n        matbuf = utils.wasmifyArray(ranks, \"Uint8WasmArray\");\n        markbuf = utils.wasmifyArray(markers, \"Uint8WasmArray\");\n        labbuf = utils.wasmifyArray(labels, \"Uint8WasmArray\");\n        output = gc.call(\n            module => module.load_singlepp_reference(labbuf.offset, labbuf.length, markbuf.offset, markbuf.length, matbuf.offset, matbuf.length),\n            LoadLabelledReferenceResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(matbuf);\n        utils.free(markbuf);\n        utils.free(labbuf);\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around a built labelled reference dataset on the Wasm heap, typically produced by {@linkcode buildLabelledReference}.\n * @hideconstructor\n */\nclass BuildLabelledReferenceResults {\n    #id;\n    #reference;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#reference = raw;\n        return;\n    }\n\n    // internal use only.\n    get reference() {\n        return this.#reference;\n    }\n\n    /**\n     * @return {number} Number of shared features between the test and reference datasets.\n     */\n    sharedFeatures() {\n        return this.#reference.shared_features();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#reference !== null) {\n            gc.release(this.#id);\n            this.#reference = null;\n        }\n    }\n}\n\nfunction create_feature_availability(features, mat_id_buffer) {\n    let mat_id_array = mat_id_buffer.array();\n    let available = {};\n    let counter = 0;\n\n    features.forEach(y => {\n        // Nulls get incremented but they don't fall into the 'available' \n        // dictionary. The strategy is that each null is unique and can \n        // never match anything else.\n        if (y !== null) {\n            available[y] = counter;\n        }\n        mat_id_array[counter] = counter;\n        counter++;\n    });\n\n    return available;\n}\n\nfunction convert_reference_features(referenceFeatures, available, ref_id_buffer) {  \n    let ref_id_array = ref_id_buffer.array();\n    let counter = Object.keys(available).length;\n    referenceFeatures.forEach((y, i) => {\n        // If y is null, we force it to be incremented so that it's always unique.\n        if (y !== null && y in available) {\n            ref_id_array[i] = available[y];\n        } else {\n            ref_id_array[i] = counter;\n            counter++;\n        }\n    });\n    return;\n}\n\n/**\n * Build the reference dataset for annotation.\n * The build process involves harmonizing the identities of the features available in the test dataset compared to the reference.\n * Specifically, a feature must be present in both datasets in order to be retained. \n * Of those features in the intersection, only the `top` markers from each pairwise comparison are ultimately used for classification.\n *\n * Needless to say, `features` should match up to the rows of the {@linkplain ScranMatrix} that is actually used for annotation in {@linkcode labelCells}.\n *\n * @param {Array} features - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain the identifier for the corresponding row of the test matrix.\n * Any `null` entries are considered to be incomparable.\n * @param {LoadLabelledReferenceResults} loaded - A reference dataset, typically loaded with {@linkcode loadLabelledReferenceFromBuffers}.\n * @param {Array} referenceFeatures - An array of feature identifiers (usually strings) of length equal to the number of features in `reference`.\n * This is expected to exhibit some overlap with those in `features`.\n * Any `null` entries are considered to be incomparable.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.top=20] - Number of top marker features to use.\n * These features are taken from each pairwise comparison between labels.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {BuildLabelledReferenceResults} Object containing the built reference dataset.\n */\nexport function buildLabelledReference(features, loaded, referenceFeatures, { top = 20, numberOfThreads = null } = {}) {\n    var mat_id_buffer;\n    var ref_id_buffer;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var nfeat = features.length;\n        mat_id_buffer = utils.createInt32WasmArray(nfeat);\n        ref_id_buffer = utils.createInt32WasmArray(loaded.numberOfFeatures());\n        if (referenceFeatures.length != ref_id_buffer.length) {\n            throw new Error(\"length of 'referenceFeatures' should be equal to the number of features in 'reference'\");\n        }\n\n        let available = create_feature_availability(features, mat_id_buffer);\n        convert_reference_features(referenceFeatures, available, ref_id_buffer);\n\n        output = gc.call(\n            module => module.build_singlepp_reference(nfeat, mat_id_buffer.offset, loaded.reference, ref_id_buffer.offset, top, nthreads),\n            BuildLabelledReferenceResults\n        );\n\n        output.expectedNumberOfFeatures = nfeat;\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(mat_id_buffer);\n        utils.free(ref_id_buffer);\n    }\n\n    return output;\n}\n\nfunction label_cells(x, expectedNumberOfFeatures, buffer, numberOfFeatures, numberOfCells, FUN, msg) {\n    var output = null;\n    var matbuf;\n    var tempmat;\n    var tempbuf;\n    let use_buffer = (buffer instanceof wa.Int32WasmArray);\n\n    try {\n        let target;\n        if (x instanceof ScranMatrix) {\n            target = x.matrix;\n        } else if (x instanceof wa.Float64WasmArray) {\n            tempmat = init.initializeDenseMatrixFromDenseArray(numberOfFeatures, numberOfCells, x, { forceInteger: false });\n            target = tempmat.matrix;\n        } else {\n            throw new Error(\"unknown type for 'x'\");\n        }\n\n        if (target.nrow() != expectedNumberOfFeatures) {\n            throw new Error(\"number of rows in 'x' should be equal to length of 'features' used to build '\" + msg + \"'\");\n        }\n\n        let ptr;\n        if (!use_buffer) {\n            tempbuf = utils.createInt32WasmArray(target.ncol());\n            ptr = tempbuf.offset;\n        } else {\n            ptr = buffer.offset;\n        }\n\n        FUN(target, ptr);\n        if (!use_buffer) {\n            output = tempbuf.slice();\n        }\n\n    } finally {\n        utils.free(matbuf);\n        utils.free(tempmat);\n        utils.free(tempbuf);\n    }\n\n    return output;\n}\n\n/**\n * Label cells based on similarity in expression to a reference dataset.\n *\n * @param {(ScranMatrix|Float64WasmArray)} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * If a Float64WasmArray is supplied, it is assumed to contain a column-major dense matrix.\n * @param {BuildLabelledReferenceResults} reference - A built reference dataset, typically generated by {@linkcode buildLabelledReference}.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - An existing buffer to store the output labels, of length equal to the number of columns in `x`.\n * @param {?number} [options.numberOfFeatures=null] - Number of features, used when `x` is a Float64WasmArray.\n * @param {?number} [options.numberOfCells=null] - Number of cells, used when `x` is a Float64WasmArray.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Int32Array} Array containing the labels for each cell in `x`.\n *\n * If `buffer` was supplied, the returned array is a view into it.\n * Note that this may be invalidated on the next allocation on the Wasm heap.\n */\nexport function labelCells(x, reference, { buffer = null, numberOfFeatures = null, numberOfCells = null, quantile = 0.8, numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    let FUN = (target, ptr) => {\n        wasm.call(module => module.run_singlepp(target, reference.reference, quantile, ptr, nthreads));\n    };\n\n    let output = label_cells(x, reference.expectedNumberOfFeatures, buffer, numberOfFeatures, numberOfCells, FUN, \"reference\");\n\n    // This is done as the final step to avoid invalidation upon any touching\n    // of the Wasm heap, anywhere... even upon freeing.\n    if (output === null) {\n        output = buffer.array();\n    }\n\n    return output;\n}\n\n/**\n * Wrapper around integrated reference datasets on the Wasm heap, typically produced by {@linkcode integrateLabelledReferences}.\n * @hideconstructor\n */\nclass IntegrateLabelledReferencesResults {\n    #id;\n    #integrated;\n\n    constructor(id, raw) {\n        this.#id = id;\n        this.#integrated = raw;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get integrated() {\n        return this.#integrated;\n    }\n\n    /**\n     * @return {number} Number of reference datasets.\n     */\n    numberOfReferences() {\n        return this.#integrated.num_references();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#integrated !== null) {\n            gc.release(this.#id);\n            this.#integrated = null;\n        }\n    }\n}\n\n/**\n * Integrate multiple reference datasets.\n *\n * @param {Array} features - An array of feature identifiers (usually strings) of length equal to the number of rows in the test matrix.\n * Each entry should contain the identifier for the corresponding row of the test matrix.\n * Any `null` entries are considered to be incomparable.\n * @param {Array} loaded - Array of {@linkplain LabelledReference} objects, typically created with {@linkcode loadLabelledReferenceFromBuffers}.\n * @param {Array} referenceFeatures - Array of length equal to `loaded`, \n * containing arrays of feature identifiers (usually strings) of length equal to the number of features the corresponding entry of `loaded`.\n * This is expected to exhibit some overlap with those in `features`.\n * Any `null` entries are considered to be incomparable.\n * @param {Array} reference - Array of {@linkplain BuildLabelledReferenceResults} objects, typically generated by calling {@linkcode buildLabelledReference} \n * on the same `features` and the corresponding entries of `loaded` and `referenceFeatures`.\n * This should have length equal to that of `loaded`.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {IntegrateLabelledReferencesResults} Object containing the integrated references.\n */\nexport function integrateLabelledReferences(features, loaded, referenceFeatures, built, { numberOfThreads = null } = {}) {\n    let id_arr;\n    let loaded_arr2;\n    let ref_arr2;\n    let built_arr2;\n    let output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    // Checking the inputs.\n    let nrefs = loaded.length;\n    if (referenceFeatures.length != nrefs) {\n        throw new Error(\"'loaded' and 'referenceFeatures' should be of the same length\");\n    }\n    if (built.length != nrefs) {\n        throw new Error(\"'loaded' and 'built' should be of the same length\");\n    }\n    for (var i = 0; i < nrefs; i++) {\n        if (loaded[i].numberOfFeatures() != referenceFeatures[i].length) {\n            throw new Error(\"length of each 'referenceFeatures' should be equal to the number of features in the corresponding 'loaded'\");\n        }\n    }\n\n    let ref_arr = new Array(nrefs);\n\n    try {\n        id_arr = utils.createInt32WasmArray(features.length);\n        let available = create_feature_availability(features, id_arr);\n\n        loaded_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let la2 = loaded_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            la2[i] = BigInt(loaded[i].reference.$$.ptr);\n        }\n\n        ref_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let ra2 = ref_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            let current = referenceFeatures[i];\n            if (current instanceof wa.Int32WasmArray) {\n                ra2[i] = BigInt(current.offset);\n            } else {\n                ref_arr[i] = utils.createInt32WasmArray(current.length);\n                convert_reference_features(current, available, ref_arr[i]);\n                ra2[i] = BigInt(ref_arr[i].offset);\n            }\n        }\n\n        built_arr2 = utils.createBigUint64WasmArray(nrefs);\n        let ba2 = built_arr2.array();\n        for (var i = 0; i < nrefs; i++) {\n            ba2[i] = BigInt(built[i].reference.$$.ptr);\n        }\n        \n        output = gc.call(\n            module => module.integrate_singlepp_references(\n                features.length,\n                id_arr.offset,\n                nrefs,\n                loaded_arr2.offset,\n                ref_arr2.offset,\n                built_arr2.offset,\n                nthreads\n            ),\n            IntegrateLabelledReferencesResults\n        );\n\n        output.expectedNumberOfFeatures = features.length;\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(id_arr);\n        utils.free(loaded_arr2);\n        utils.free(built_arr2);\n        utils.free(ref_arr2);\n        for (const x of ref_arr) {\n            utils.free(x);\n        }\n    }\n\n    return output;\n}\n\n/**\n * Label cells based on similarity in expression to a reference dataset.\n *\n * @param {(ScranMatrix|Float64WasmArray)} x - The count matrix, or log-normalized matrix, containing features in the rows and cells in the columns.\n * If a Float64WasmArray is supplied, it is assumed to contain a column-major dense matrix.\n * @param {IntegratedLabelledReferences} integrated - An integrated set of reference datasets, typically generated by {@linkcode integrateLabelledReferences}.\n * @param {Array} assigned - An array of length equal to the number of references in `integrated`.\n * This should contain the result of classification of `x` with each individual reference via {@linkcode labelCells}.\n * Each element should be an Array, TypedArray or Int32WasmArray of length equal to the number of cells in `x`.\n * @param {object} [options={}] - Optional parameters.\n * @param {?Int32WasmArray} [options.buffer=null] - An existing buffer to store the output labels, of length equal to the number of columns in `x`.\n * @param {?number} [options.numberOfFeatures=null] - Number of features, used when `x` is a Float64WasmArray.\n * @param {?number} [options.numberOfCells=null] - Number of cells, used when `x` is a Float64WasmArray.\n * @param {number} [options.quantile=0.8] - Quantile on the correlations to use to compute the score for each label.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Int32Array} Array containing the best reference for each cell in `x`.\n *\n * If `buffer` was supplied, the returned array is a view into it.\n * Note that this may be invalidated on the next allocation on the Wasm heap.\n */\nexport function integrateCellLabels(x, assigned, integrated, { buffer = null, numberOfFeatures = null, numberOfCells = null, quantile = 0.8, numberOfThreads = null } = {}) { \n    let nrefs = integrated.numberOfReferences();\n    if (assigned.length != nrefs) {\n        throw new Error(\"length of 'assigned' should be equal to the number of references in 'integrated'\");\n    }\n\n    let output;\n    let aptrs;\n    let assigned_arrs = new Array(nrefs);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        aptrs = utils.createBigUint64WasmArray(nrefs);\n        let aptrs_arr = aptrs.array();\n        for (var i = 0; i < assigned.length; i++) {\n            let current = assigned[i];\n\n            let fail = false;\n            if (x instanceof ScranMatrix) {\n                if (current.length != x.numberOfColumns()) {\n                    fail = true;\n                }\n            } else if (current.length != numberOfCells) {\n                fail = true;\n            }\n            if (fail) {\n                throw new Error(\"length of each element 'assigned' should be equal to number of columns in 'x'\");\n            }\n\n            assigned_arrs[i] = utils.wasmifyArray(current, \"Int32WasmArray\");\n            aptrs_arr[i] = BigInt(assigned_arrs[i].offset);\n        }\n    \n        let FUN = (target, ptr) => {\n            wasm.call(module => module.integrate_singlepp(target, aptrs_arr.offset, integrated.integrated, quantile, ptr, nthreads));\n        };\n        output = label_cells(x, integrated.expectedNumberOfFeatures, buffer, numberOfFeatures, numberOfCells, FUN, \"integrated\");\n\n    } finally{\n        utils.free(aptrs);\n        for (const x of assigned_arrs) {\n            utils.free(x);\n        }\n    }\n\n    // This is done as the final step to avoid invalidation upon any touching\n    // of the Wasm heap, anywhere... even upon freeing.\n    if (output === null) {\n        output = buffer.array();\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Compute log-transformed normalized expression values.\n *\n * @param {ScranMatrix} x The count matrix, usually after filtering.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Float64WasmArray|Array|TypedArray)} [options.sizeFactors=null] - Array of positive numbers containing the size factor for each cell in `x`.\n * This should have length equal to the number of columns in `x`.\n * If `null`, size factors are computed from the column sums of `x`.\n * @param {boolean} [options.center=true] - Whether to center the size factors so that the normalized expression values are comparable in magnitude to the input counts.\n * Set this to `false` if `sizeFactors` are provided and already centered, e.g., with {@linkcode centerSizeFactors}.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to adjust the scaling of cells in different blocks, to avoid excessive up-scaling of low-coverage blocks.\n *\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * This option is ignored if `center = false`, in which case it is assumed that scaling has already been provided in the input `sizeFactors`.\n * @param {boolean} [options.allowZeros=false] - Whether size factors of zero should be allowed.\n * If `true`, no scaling normalization is performed for the corresponding cells, under the assumption they are all-zero libraries.\n * If `false`, an error is raised instead.\n *\n * @return {ScranMatrix} A matrix of the same type as `x` containing log-transformed normalized expression values.\n */\nexport function logNormCounts(x, { sizeFactors = null, center = true, block = null, allowZeros = false } = {}) {\n    var sf_data;\n    var block_data;\n    var output;\n\n    try {\n        var sfptr = 0;\n        var use_sf = false;\n\n        if (sizeFactors !== null) {\n            sf_data = utils.wasmifyArray(sizeFactors, \"Float64WasmArray\");\n            if (sf_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'sizeFactors' must be equal to number of columns in 'x'\");\n            }\n            sfptr = sf_data.offset;\n            use_sf = true;\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.log_norm_counts(x.matrix, use_sf, sfptr, use_blocks, bptr, center, allowZeros),\n            x.constructor\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(sf_data);\n        utils.free(block_data);\n    }\n    \n    return output;\n}\n\n/**\n * Center size factors in preparation for log-transformation.\n * This is usually called by {@linkcode logNormCounts} internally, but can also be directly called by users to reconstitute the size factors used in the log-normalized matrix.\n *\n * @param {TypedArray|WasmArray} sizeFactors - Array of non-negative size factors, one per cell.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell, see {@linkcode logNormCounts}.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to that of `sizeFactors`.\n * If `null`, an array is allocated by the function.\n *\n * @return {Float64WasmArray} Array containing the centered size factors.\n * If `buffer` is provided, it is returned directly.\n */\nexport function centerSizeFactors(sizeFactors, { block = null, buffer = null } = {}) {\n    let local_buffer;\n    let block_data;\n\n    try {\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(sizeFactors.length);\n            buffer = local_buffer;\n        }\n\n        if (buffer !== sizeFactors) {\n            buffer.set(sizeFactors instanceof wa.WasmArray ? sizeFactors.array() : sizeFactors);\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != buffer.length) {\n                throw new Error(\"'block' must be of length equal to that of 'sizeFactors'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        wasm.call(module => module.center_size_factors(buffer.length, buffer.offset, use_blocks, bptr));\n\n    } catch(e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n\n    return buffer;\n}\n","import * as utils from \"./utils.js\";\nimport { RunPCAResults } from \"./runPCA.js\";\nimport * as wasm from \"./wasm.js\";\n\n/**\n * Perform mutual nearest neighbor (MNN) correction on a low-dimensional representation.\n * This is primarily used to remove batch effects.\n *\n * @param {(RunPCAResults|TypedArray|Array|Float64WasmArray)} x - A matrix of low-dimensional results where rows are dimensions and columns are cells.\n * If this is a {@linkplain RunPCAResults} object, the PCs are automatically extracted.\n * Otherwise, the matrix should be provided as an array in column-major form, with specification of `numberOfDims` and `numberOfCells`.\n * @param {(Int32WasmArray|Array|TypedArray)} block - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform normalization within each block.\n * @param {object} [options={}] - Further optional parameters.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer of length equal to the product of the number of cells and dimensions,\n * to be used to store the corrected coordinates for each cell.\n * If `null`, this is allocated and returned by the function.\n * @param {?number} [options.numberOfDims=null] - Number of dimensions in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {?number} [options.numberOfCells=null] - Number of cells in `x`.\n * This should be specified if an array-like object is provided, otherwise it is ignored.\n * @param {number} [options.k=15] - Number of neighbors to use in the MNN search. \n * @param {number} [options.numberOfMADs=3] - Number of MADs to use to define the threshold on the distances to the neighbors,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustIterations=2] - Number of robustness iterations to use for computing the center of mass,\n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {number} [options.robustTrim=0.25] - Proportion of furthest observations to remove during robustness iterations, \n * see comments [here](https://ltla.github.io/CppMnnCorrect).\n * @param {string} [options.referencePolicy=\"max-rss\"] - What policy to use to choose the first reference batch.\n * This can be the largest batch (`\"max-size\"`), the most variable batch (`\"max-variance\"`), the batch with the highest RSS (`\"max-rss\"`) or batch 0 in `block` (`\"input\"`).\n * @param {boolean} [options.approximate=true] - Whether to perform an approximate nearest neighbor search.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array of length equal to `x`, containing the batch-corrected low-dimensional coordinates for all cells.\n * Values are organized using the column-major layout.\n * This is equal to `buffer` if provided.\n */\nexport function mnnCorrect(x, block, { \n    buffer = null, \n    numberOfDims = null,\n    numberOfCells = null,\n    k = 15,\n    numberOfMADs = 3, \n    robustIterations = 2, \n    robustTrim = 0.25,\n    referencePolicy = \"max-rss\",\n    approximate = true,\n    numberOfThreads = null\n} = {}) {\n\n    let local_buffer;\n    let x_data;\n    let block_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        if (x instanceof RunPCAResults) {\n            numberOfDims = x.numberOfPCs();\n            numberOfCells = x.numberOfCells();\n            x = x.principalComponents({ copy: \"view\" });\n        } else {\n            if (numberOfDims === null || numberOfCells === null || numberOfDims * numberOfCells !== x.length) {\n                throw new Error(\"length of 'x' must be equal to the product of 'numberOfDims' and 'numberOfCells'\");\n            }\n            x_data = utils.wasmifyArray(x, \"Float64WasmArray\");\n            x = x_data;\n        }\n\n        if (buffer == null) {\n            local_buffer = utils.createFloat64WasmArray(numberOfCells * numberOfDims);\n            buffer = local_buffer;\n        } else if (buffer.length !== x.length) {\n            throw new Error(\"length of 'buffer' must be equal to the product of the number of dimensions and cells\");\n        }\n\n        block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n        if (block_data.length != numberOfCells) {\n            throw new Error(\"'block' must be of length equal to the number of cells in 'x'\");\n        }\n\n        wasm.call(module => module.mnn_correct(\n            numberOfDims, \n            numberOfCells,\n            x.offset,\n            block_data.offset,\n            buffer.offset,\n            k,\n            numberOfMADs,\n            robustIterations,\n            robustTrim,\n            referencePolicy,\n            approximate,\n            nthreads\n        ));\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n        \n    } finally {\n        utils.free(x_data);\n    }\n\n    return buffer; \n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Wrapper for the variance modelling results, produced by {@linkcode modelGeneVar}.\n * @hideconstructor\n */\nexport class ModelGeneVarResults {\n    #id;\n    #results;\n\n    #filledMeans;\n    #filledVariances;\n    #filledFitted;\n    #filledResiduals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledMeans = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledVariances = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledFitted = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n        this.#filledResiduals = utils.spawnArray(this.numberOfBlocks() + 1, filled);\n\n        return;\n    }\n\n    #extract(block, copy, fillable, fillcheck, method) {\n        let fillindex = block;\n        if (block == null) {\n            let nblocks = this.numberOfBlocks();\n            fillindex = (nblocks > 1 ? nblocks : 0);\n            block = -1;\n        }\n\n        return utils.checkFillness(\n            fillable, \n            copy, \n            fillcheck[fillindex], \n            () => { fillcheck[fillindex] = true }, \n            COPY => utils.possibleCopy(this.#results[method](block), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the mean log-expression across all cells in the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    means({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledMeans, \"means\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the variance of log-expression across all cells in the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    variances({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledVariances, \"variances\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the fitted value of the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    fitted({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledFitted, \"fitted\");\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the residuals from the mean-variance trend for the specified `block`\n     * (or the average across all blocks, if `block < 0`).\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    residuals({ block = null, copy = true, fillable = false } = {}) {\n        return this.#extract(block, copy, fillable, this.#filledResiduals, \"residuals\");\n    }\n\n    /**\n     * @return {number} Number of blocks used.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Model the mean-variance trend across genes.\n *\n * @param {ScranMatrix} x - The normalized log-expression matrix.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to fit the mean-variance trend within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {number} [options.span=0.3] - Span to use for the LOWESS trend fitting.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {ModelGeneVarResults} Object containing the variance modelling results.\n */\nexport function modelGeneVar(x, { block = null, span = 0.3, numberOfThreads = null } = {}) {\n    var block_data;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var bptr = 0;\n        var use_blocks = false;\n\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.model_gene_var(x.matrix, use_blocks, bptr, span, nthreads),\n            ModelGeneVarResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n    }\n    \n    return output;\n}\n\n/**\n * Create an empty {@linkplain ModelGeneVarResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode chooseHVGs} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfGenes - Number of genes in the dataset.\n * @param {number} numberOfBlocks - Number of blocks in the dataset.\n *\n * @return {ModelGeneVarResults} Object with allocated memory to store variance modelling statistics, but no actual values.\n */\nexport function emptyModelGeneVarResults(numberOfGenes, numberOfBlocks) {\n    return gc.call(\n        module => new module.ModelGeneVar_Results(numberOfGenes, numberOfBlocks),\n        ModelGeneVarResults,\n        /* filled = */ false\n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the ADT-based metrics allocated on the Wasm heap, typically produced by {@linkcode computePerCellAdtQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellAdtQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetTotals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetTotals = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total ADT count for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected ADT features for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {?boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count in the ADT subset `i` for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    subsetTotals(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetTotals[i], \n            () => { this.#filledSubsetTotals[i] = true }, \n            COPY => utils.possibleCopy(this.#results.subset_totals(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute the per-cell QC metrics from an ADT count matrix.\n *\n * @param {ScranMatrix} x - The ADT count matrix.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellAdtQcMetricsResults} Object containing the ADT-based QC metrics.\n */\nexport function perCellAdtQcMetrics(x, subsets, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.per_cell_adt_qc_metrics(matrix, nsubsets, subset_offset, nthreads),\n            PerCellAdtQcMetricsResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellAdtQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode computePerCellAdtQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfSubsets - Number of feature subsets.\n *\n * @return {PerCellAdtQcMetricsResults} Object with allocated memory but no actual values.\n */\nexport function emptyPerCellAdtQcMetricsResults(numberOfCells, numberOfSubsets) {\n    return gc.call(\n        module => new module.PerCellAdtQcMetrics_Results(numberOfCells, numberOfSubsets),\n        PerCellAdtQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \n\n/**\n * Wrapper for the CRISPR-based metrics allocated on the Wasm heap, produced by {@linkcode perCellCrisprQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellCrisprQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledMaxProportions;\n    #filledMaxIndex;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledMaxProportions = filled;\n        this.#filledMaxIndex = filled;\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count across guides for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected guides for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY),\n            \"detected\"\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the proportion of counts in the most abundant guide for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    maxProportions({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxProportions, \n            () => { this.#filledMaxProportions = true }, \n            COPY => utils.possibleCopy(this.#results.max_proportion(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the index of the most abundant guide for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    maxIndex({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxIndex, \n            () => { this.#filledMaxIndex = true }, \n            COPY => utils.possibleCopy(this.#results.max_index(), COPY),\n            \"maxIndex\"\n        );\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute per-cell QC metrics from the CRISPR guide count matrix.\n *\n * @param {ScranMatrix} x - The count matrix for CRISPR guides.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellCrisprQcMetricsResults} Object containing the QC metrics.\n */\nexport function perCellCrisprQcMetrics(x, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n    return gc.call(\n        module => module.per_cell_crispr_qc_metrics(x.matrix, nthreads),\n        PerCellCrisprQcMetricsResults\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellCrisprQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode suggestCrisprQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n *\n * @return {PerCellCrisprQcMetricsResults} Object with allocated memory to store QC metrics, but no actual values.\n */\nexport function emptyPerCellCrisprQcMetricsResults(numberOfCells) {\n    return gc.call(\n        module => new module.PerCellCrisprQcMetrics_Results(numberOfCells),\n        PerCellCrisprQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\"; \nimport * as internal from \"./internal/computePerCellQcMetrics.js\";\n\n/**\n * Wrapper for the RNA-based metrics allocated on the Wasm heap, produced by {@linkcode perCellRnaQcMetrics}.\n * @hideconstructor\n */\nexport class PerCellRnaQcMetricsResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetProportions;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetProportions = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    // Internal use only, not documented.\n    get results() {\n        return this.#results;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the total count across genes for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    sums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Int32Array|Int32WasmArray)} Array containing the total number of detected genes for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the proportion of counts in the subset `i` for each cell.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    subsetProportions(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetProportions[i], \n            () => { this.#filledSubsetProportions[i] = true }, \n            COPY => utils.possibleCopy(this.#results.subset_proportions(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of cells in this object.\n     */\n    numberOfCells() {\n        return this.#results.num_cells();\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Compute per-cell QC metrics from the RNA count matrix.\n *\n * @param {ScranMatrix} x - The RNA count matrix for genes.\n * @param {?Array} subsets - Array of arrays of boolean values specifying the feature subsets.\n * Each internal array corresponds to a subset and should be of length equal to the number of rows.\n * Each entry of each internal array specifies whether the corresponding row of `x` belongs to that subset; \n * any value interpretable as a boolean can be used here.\n * \n * Alternatively, each internal array may be any TypedArray or TypedWasmArray.\n * Each array should be of length equal to the number of rows and values are interpreted as booleans.\n *\n * Alternatively `null`, which is taken to mean that there are no subsets.\n * @param {object} [options={}] - Optional parameters.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {PerCellRnaQcMetricsResults} Object containing the QC metrics.\n */\nexport function perCellRnaQcMetrics(x, subsets, { numberOfThreads = null } = {}) {\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n     return internal.computePerCellQcMetrics(\n        x, \n        subsets, \n        (matrix, nsubsets, subset_offset) => gc.call(\n            module => module.per_cell_rna_qc_metrics(matrix, nsubsets, subset_offset, nthreads),\n            PerCellRnaQcMetricsResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain PerCellRnaQcMetricsResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode suggestRnaQcFilters} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset.\n * @param {number} numberOfSubsets - Number of feature subsets.\n *\n * @return {PerCellRnaQcMetricsResults} Object with allocated memory to store QC metrics, but no actual values.\n */\nexport function emptyPerCellRnaQcMetricsResults(numberOfCells, numberOfSubsets) {\n    return gc.call(\n        module => new module.PerCellRnaQcMetrics_Results(numberOfCells, numberOfSubsets),\n        PerCellRnaQcMetricsResults,\n        /* filled = */ false \n    );\n}\n","import { clusterKmeans } from \"./clusterKmeans.js\";\nimport { logNormCounts } from \"./logNormCounts.js\";\nimport { groupedSizeFactors } from \"./groupedSizeFactors.js\";\nimport { runPCA } from \"./runPCA.js\";\nimport * as utils from \"./utils.js\";\n\n/**\n * Quickly compute size factors for an ADT count matrix.\n * This generates k-means clusters from a matrix of PCs before calling {@linkcode groupedSizeFactors}.\n * The aim is to account for composition biases that are common in ADT-based data, while avoiding problems with per-cell sparsity.\n *\n * @param {ScranMatrix} x - An ADT count matrix.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfClusters=20] - Number of clusters to create.\n * More clusters improves the accuracy of the size factors at the cost of precision.\n * @param {number} [options.numberOfPCs=25] - Number of PCs to use.\n * More PCs captures more biological signal at the cost of increasing noise.\n * @param {?(Float64WasmArray|Array|TypedArray)} [options.totals=null] - Array containing the total count for each column in `x`, to speed up the initial normalization.\n * If `null`, this is computed from `x`.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Blocking level for each column in `x`, see {@linkcode logNormCounts} and {@linkcode runPCA}.\n * For PCA, this is used to equalize the contribution of blocks of differing size.\n * @param {?Float64WasmArray} [options.buffer=null] - Buffer in which to store the output size factors.\n * Length should be equal to the number of columns in `x`.\n * If `null`, an array is allocated by the function.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * \n * @return {Float64WasmArray} Per-cell size factors for each column of `x`.\n *\n * If `buffer` is supplied, it is directly used as the return value.\n */\nexport function quickAdtSizeFactors(x, { numberOfClusters = 20, numberOfPCs = 25, totals = null, block = null, buffer = null, numberOfThreads = null } = {}) {\n    let norm, pcs;\n    try {\n        norm = logNormCounts(x, { sizeFactors: totals, block: block });\n        pcs = runPCA(norm, { numberOfPCs: Math.min(norm.numberOfRows() - 1, numberOfPCs), numberOfThreads: numberOfThreads, block: block, blockMethod: \"weight\" });\n    } finally {\n        utils.free(norm);\n    }\n\n    let clust;\n    try {\n        clust = clusterKmeans(pcs, numberOfClusters, { numberOfThreads: numberOfThreads });\n    } finally {\n        utils.free(pcs);\n    }\n\n    let local_buffer;\n    try {\n        if (buffer === null) {\n            local_buffer = utils.createFloat64WasmArray(x.numberOfColumns());\n            buffer = local_buffer;\n        } else if (buffer.length !== x.numberOfColumns()) {\n            throw new Error(\"length of 'buffer' should be equal to the number of columns in 'x'\");\n        }\n        groupedSizeFactors(x, clust.clusters({ copy: \"view\" }), { buffer: buffer, numberOfThreads: numberOfThreads });\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        utils.free(clust);\n    }\n\n    return buffer;\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\nimport * as packer from \"./internal/pack_strings.js\";\n\n/**\n * Base class for RDS objects.\n * @hideconstructor\n */\nexport class RdsObject {\n    constructor(id, raw, par) {\n        this.id = id;\n        this.object = raw;\n        this.parent = par;\n    }\n\n    /**\n     * @return {string} Type of the object.\n     */\n    type() {\n        return this.object.type();\n    }\n\n    /**\n     * Free the memory on the Wasm heap for this object.\n     */\n    free() {\n        if (this.object !== null) {\n            gc.release(this.id);\n            this.object = null;\n        }\n    }\n}\n\n/**\n * Vector-like R object.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsVector extends RdsObject {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @return{number} Length of the vector.\n     */\n    length() {\n        return this.object.size();\n    }\n\n    /**\n     * @return {Array} Names of all attributes.\n     */\n    attributeNames() {\n        return wasm.call(mod => {\n            this.object.fill_attribute_names();\n            let anames_buf = this.object.attribute_names_buffer();\n            let anames_len = this.object.attribute_names_length();\n            return packer.unpack_strings(anames_buf, anames_len);\n        });\n    }\n\n    /**\n     * @param {string} name - Name of the attribute of interest.\n     * @return {number} Index of `name` in the array of attributes from {@linkcode RdsVector#attributeNames attributeNames}.\n     * If `name` is not present, -1 is returned.\n     */\n    findAttribute(name) {\n        return wasm.call(mod => this.object.find_attribute(name));\n    }\n\n    /**\n     * @param {number|string} i - Index or name of the attribute of interest.\n     * @return {RdsObject} Value of the attribute.\n     */\n    attribute(i) {\n        if (typeof i == \"number\") {\n            return dispatch(mod => this.object.load_attribute_by_index(i), this.parent);\n        } else {\n            return dispatch(mod => this.object.load_attribute_by_name(i), this.parent);\n        }\n    }\n}\n\n/**\n * Integer vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsIntegerVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Values of the integer vector.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * Boolean (i.e., boolean) vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsBooleanVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Int32Array|Int32WasmArray} Values of the logical vector.\n     * Zero values are falsey and values of 1 are truthy.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * Double-precision vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsDoubleVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean|string} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     *\n     * @return {Float64Array|Float64WasmArray} Values of the double vector.\n     */\n    values({ copy = true } = {}) {\n        return utils.possibleCopy(this.object.numeric_vector(), copy);\n    }\n}\n\n/**\n * String vector from R.\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsStringVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @return {Array} Values of the string vector.\n     */\n    values() {\n        return wasm.call(mod => {\n            this.object.fill_string_vector();\n            let buf = this.object.string_vector_buffer();\n            let len = this.object.string_vector_length();\n            return packer.unpack_strings(buf, len);\n        });\n    }\n}\n\n/**\n * Generic vector from R, typically known as a \"list\".\n *\n * @augments RdsVector \n * @hideconstructor\n */\nexport class RdsGenericVector extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * @param {number} index - Index of the list element of interest.\n     * @return {RdsObject} Value of the list element.\n     */\n    load(index) {\n        return dispatch(mod => this.object.load_list_element(index), this.parent);\n    }\n}\n\n/**\n * S4 object from R, containing slot data in its attributes.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsS4Object extends RdsObject {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n\n    /**\n     * Name of the R class.\n     */\n    className() {\n        return wasm.call(mod => this.object.class_name());\n    }\n\n    /**\n     * Name of the package that defines the class.\n     */\n    packageName() {\n        return wasm.call(mod => this.object.package_name());\n    }\n\n    /**\n     * @return {Array} Names of all attributes.\n     */\n    attributeNames() {\n        return wasm.call(mod => {\n            this.object.fill_attribute_names();\n            let anames_buf = this.object.attribute_names_buffer();\n            let anames_len = this.object.attribute_names_length();\n            return packer.unpack_strings(anames_buf, anames_len);\n        });\n    }\n\n    /**\n     * @param {string} name - Name of the attribute of interest.\n     * @return {number} Index of `name` in the array of attributes from {@linkcode RdsVector#attributeNames attributeNames}.\n     * If `name` is not present, -1 is returned.\n     */\n    findAttribute(name) {\n        return wasm.call(mod => this.object.find_attribute(name));\n    }\n\n    /**\n     * @param {number|string} i - Index or name of the attribute of interest.\n     * @return {RdsObject} Value of the attribute.\n     */\n    attribute(i) {\n        if (typeof i == \"number\") {\n            return dispatch(mod => this.object.load_attribute_by_index(i), this.parent);\n        } else {\n            return dispatch(mod => this.object.load_attribute_by_name(i), this.parent);\n        }\n    }\n}\n\n/**\n * NULL type in R.\n *\n * @augments RdsObject\n * @hideconstructor\n */\nexport class RdsNull extends RdsVector {\n    constructor(id, raw, par) {\n        super(id, raw, par);\n    }\n};\n\nfunction dispatch(fun, par) {\n    let obj = wasm.call(fun);\n\n    let tt = null;\n    try {\n        tt = obj.type();\n    } catch (e) {\n        obj.delete();\n        throw e;\n    }\n\n    // Remaining steps until gc.call() should be no-throw!\n    let cons;\n    if (tt == \"integer\") {\n        cons = RdsIntegerVector;\n    } else if (tt == \"double\") {\n        cons = RdsDoubleVector;\n    } else if (tt == \"boolean\") {\n        cons = RdsBooleanVector;\n    } else if (tt == \"string\") {\n        cons = RdsStringVector;\n    } else if (tt == \"vector\") {\n        cons = RdsGenericVector;\n    } else if (tt == \"S4\") {\n        cons = RdsS4Object;\n    } else if (tt == \"null\") {\n        cons = RdsNull;\n    } else {\n        cons = RdsObject;\n    }\n\n    return gc.call(mod => obj, cons, par);\n}\n\n/**\n * Details of the RDS file.\n * @hideconstructor\n */\nexport class RdsDetails {\n    #id;\n    #obj;\n\n    constructor(id, obj) {\n        this.#id = id;\n        this.#obj = obj;\n    }\n\n    /**\n     * @return {number} Version of the RDS format. This should be 3.\n     */\n    formatVersion() {\n        return this.#obj.format_version();\n    }\n\n    /**\n     * @return {string} The R version used to create the file.\n     */\n    writerVersion() {\n        let info = this.#obj.writer_version();\n        return String(info[0]) + \".\" + String(info[1]) + \".\" + String(info[2]);\n    }\n\n    /**\n     * @return {string} The minimum R version that can read the file.\n     */\n    readerVersion() {\n        let info = this.#obj.reader_version();\n        return String(info[0]) + \".\" + String(info[1]) + \".\" + String(info[2]);\n    }\n\n    /**\n     * @return {RdsObject} Interface into the underlying R object.\n     */\n    value() {\n        return dispatch(mod => this.#obj.load(), this); \n    }\n\n    /**\n     * Free the memory on the Wasm heap for this object.\n     * Doing so will invalidate all {@linkplain RdsObject} instances derived from this object, \n     * directly via {@linkcode RdsDetails#load} or indirectly \n     * (e.g., from further {@linkcode RdsVector#attribute RdsVector.attribute} or {@linkcode RdsGenericVector#load RdsGenericVector.load} calls).\n     */\n    free() {\n        if (this.#obj !== null) {\n            gc.release(this.#id);\n            this.#obj = null;\n        }\n    }\n}\n\n/**\n * Read the contents of an RDS file.\n *\n * @param {Uint8WasmArray|Array|TypedArray|string} buffer Byte array containing the contents of an RDS file.\n * This can be raw text or Gzip-compressed.\n * \n * Alternatively, this can be a string containing a file path to a MatrixMarket file.\n *\n * @return {RdsDetails} Details of the file.\n */\nexport function readRds(x) {\n    let tmp;\n    let output;\n\n    try {\n        if (typeof x == \"string\") {\n            output = gc.call(module => module.parse_rds_from_file(x), RdsDetails)\n        } else {\n            tmp = utils.wasmifyArray(x, \"Uint8WasmArray\");\n            output = gc.call(module => module.parse_rds_from_buffer(tmp.offset, tmp.length), RdsDetails);\n        }\n    } finally {\n        utils.free(tmp);\n    }\n\n    return output;\n}\n\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\n\n/** \n * Wrapper for the PCA results on the Wasm heap, typically created by {@linkcode runPCA}.\n * @hideconstructor\n */\nexport class RunPCAResults {\n    #id;\n    #results;\n\n    #filledComponents;\n    #filledVariances;\n    #filledTotalVariance;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledComponents = filled;\n        this.#filledVariances = filled;\n        this.#filledTotalVariance = filled;\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     * \n     * @return {?(Float64Array|Float64Wasmarray)} Array containing the principal components for all cells.\n     * This should be treated as a column-major array where the rows are the PCs and columns are the cells.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    principalComponents({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledComponents, \n            () => { this.#filledComponents = true }, \n            COPY => utils.possibleCopy(this.#results.pcs(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} total - Total variance in the dataset,\n     * equal to the sum of the variances across all PCs (including those that were not explicitly computed).\n     *\n     * @return Total varaiance in this object is set to `total`.\n     * This is primarily intended for use with {@linkcode emptyRunPCAResults}.\n     */\n    setTotalVariance(total) {\n        if (!this.#filledTotalVariance) {\n            this.#filledTotalVariance = true;\n        }\n        this.#results.set_total_variance(total);\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     * \n     * @return {?(Float64Array|Float64WasmArray)} Array containing the variance explained for each requested PC.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    varianceExplained({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledVariances, \n            () => { this.#filledVariances = true }, \n            COPY => utils.possibleCopy(this.#results.variance_explained(), COPY)\n        );\n    }\n\n    /**\n     * @return {?number} The total variance in the dataset,\n     * typically used with {@linkcode PCAResults#varianceExplained varianceExplained} to compute the proportion of variance explained.\n     * Alternatively `null`, if this value has not been filled by {@linkcode ClusterKmeansResults#setTotalVariance setTotalVariance}.\n     */\n    totalVariance() {\n        if (!this.#filledTotalVariance) {\n            return null;\n        } else {\n            return this.#results.total_variance();\n        }\n    }\n\n    /**\n     * @return {number} Number of PCs available in these results.\n     */\n    numberOfPCs() {\n        return this.#results.num_pcs();\n    }\n\n    /**\n     * @return {number} Number of cells used to compute these results.\n     */\n    numberOfCells() {\n        // TODO: switch to this.#results.num_cells();\n        return this.principalComponents({ copy: false }).length / this.numberOfPCs();\n\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Run a principal components analysis on the log-expression matrix.\n * This is usually done on a subset of features, and possibly with some kind of blocking on a per-cell batch factor.\n *\n * @param {ScranMatrix} x - The log-normalized expression matrix.\n * @param {object} [options={}] - Optional parameters. \n * @param {?(Uint8WasmArray|Array|TypedArray)} [options.features=null] - Array specifying which features should be retained (e.g., HVGs).\n * This should be of length equal to the number of rows in `x`; elements should be `true` to retain each row.\n * If `null`, all features are retained.\n * @param {number} [options.numberOfPCs=25] - Number of top principal components to compute.\n * @param {boolean} [options.scale=false] - Whether to scale each feature to unit variance.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {string} [options.blockMethod=\"regress\"] - How to modify the PCA for the blocking factor.\n *\n * - `\"regress\"` will regress out the factor, effectively performing a PCA on the residuals.\n * - `\"weight\"` will weight the contribution of each blocking level equally so that larger blocks do not dominate the PCA.\n * - `\"none\"` will ignore any blocking factor, i.e., as if `block = null`.\n *\n * This option is only used if `block` is not `null`.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {RunPCAResults} Object containing the computed PCs.\n */\nexport function runPCA(x, { features = null, numberOfPCs = 25, scale = false, block = null, blockMethod = \"regress\", numberOfThreads = null } = {}) {\n    var feat_data;\n    var block_data;\n    var output;\n\n    utils.matchOptions(\"blockMethod\", blockMethod, [\"none\", \"regress\", \"weight\" ]);\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        var use_feat = false;\n        var fptr = 0;\n\n        if (features !== null) {\n            feat_data = utils.wasmifyArray(features, \"Uint8WasmArray\");\n            if (feat_data.length != x.numberOfRows()) {\n                throw new Error(\"length of 'features' should be equal to number of rows in 'x'\");\n            }\n            use_feat = true;\n            fptr = feat_data.offset;\n        }\n\n        // Avoid asking for more PCs than is possible.\n        // Remember that centering removes one df, so we subtract 1 from the dimensions.\n        numberOfPCs = Math.min(numberOfPCs, x.numberOfRows() - 1, x.numberOfColumns() - 1);\n\n        if (block === null || blockMethod == 'none') {\n            output = gc.call(\n                module => module.run_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, nthreads),\n                RunPCAResults\n            );\n\n        } else {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"length of 'block' should be equal to the number of columns in 'x'\");\n            }\n            if (blockMethod == \"regress\") {\n                output = gc.call(\n                    module => module.run_blocked_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, block_data.offset, nthreads),\n                    RunPCAResults\n                );\n            } else if (blockMethod == \"weight\") {\n                output = gc.call(\n                    module => module.run_multibatch_pca(x.matrix, numberOfPCs, use_feat, fptr, scale, block_data.offset, nthreads),\n                    RunPCAResults\n                );\n            } else {\n                throw new Error(\"unknown value '\" + blockMethod + \"' for 'blockMethod='\");\n            }\n        }\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(feat_data);\n        utils.free(block_data);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain RunPCAResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode clusterKmeans} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfCells - Number of cells in the dataset, usually after QC filtering.\n * @param {number} numberOfPCs - Number of PCs to be computed.\n *\n * @return {RunPCAResults} Object with allocated memory to store the PCs, but no actual values.\n */\nexport function emptyRunPCAResults(numberOfCells, numberOfPCs) {\n    return gc.call(\n        module => new module.RunPCA_Results(numberOfCells, numberOfPCs),\n        RunPCAResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as gc from \"./gc.js\";\nimport { BuildNeighborSearchIndexResults, findNearestNeighbors } from \"./findNearestNeighbors.js\";\n\n/**\n * Wrapper around the t-SNE status object on the Wasm heap, typically created by {@linkcode initializeTSNE}.\n * @hideconstructor\n */\nexport class InitializeTSNEResults {\n    #id;\n    #status;\n    #coordinates;\n\n    constructor(id, raw_status, raw_coordinates) {\n        this.#id = id;\n        this.#status = raw_status;\n        this.#coordinates = raw_coordinates;\n        return;\n    }\n\n    // Internal use only, not documented.\n    get status() {\n        return this.#status;\n    }\n\n    // Internal use only, not documented.\n    get coordinates() {\n        return this.#coordinates;\n    }\n\n    /**\n     * @return {InitializeTSNEResults} A deep copy of this object.\n     */\n    clone() {\n        return gc.call(\n            module => this.#status.deepcopy(), \n            InitializeTSNEResults, \n            this.#coordinates.clone()\n        );\n    }\n\n    /**\n     * @return {number} Number of cells in the dataset.\n     */\n    numberOfCells () {\n        return this.#status.num_obs();\n    }\n\n    /**\n     * @return {number} Number of iterations processed so far.\n     * This will change with repeated invocations of {@linkcode runTSNE} on this object.\n     */\n    iterations () {\n        return this.#status.iterations();\n    }\n\n    /**\n     * @return {object} Object with `x` and `y` keys.\n     * The corresponding values are Float64Array objects of length equal to the number of cells,\n     * containing the x- and  y- coordinates for each cell at the current state of the algorithm.\n     */\n    extractCoordinates() {\n        return utils.extractXY(this.numberOfCells(), this.#coordinates.array()); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */   \n    free() {\n        if (this.#status !== null) {\n            gc.release(this.#id);\n            this.#status = null;\n        }\n        if (this.#coordinates !== null) {\n            this.#coordinates.free();\n            this.#coordinates = null;\n        }\n        return;\n    }\n}\n\n/**\n * @param {number} perplexity - Perplexity to use in the t-SNE algorithm.\n * @return {number} Appropriate number of neighbors to use in the nearest neighbor search.\n */\nexport function perplexityToNeighbors(perplexity) {\n    return wasm.call(module => module.perplexity_to_k(perplexity));\n}\n\n/**\n * @param {(BuildNeighborSearchIndexResults|FindNearestNeighborsResults)} x \n * Either a pre-built neighbor search index for the dataset (see {@linkcode buildNeighborSearchIndex}),\n * or a pre-computed set of neighbor search results for all cells (see {@linkcode findNearestNeighbors}).\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.perplexity=30] - Perplexity to use when computing neighbor probabilities in the t-SNE.\n * @param {boolean} [options.checkMismatch=true] - Whether to check for a mismatch between the perplexity and the number of searched neighbors.\n * Only relevant if `x` is a {@linkplain FindNearestNeighborsResults} object.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {InitializeTSNEResults} Object containing the initial status of the t-SNE algorithm.\n */\nexport function initializeTSNE(x, { perplexity = 30, checkMismatch = true, numberOfThreads = null } = {}) {\n    var my_neighbors;\n    var raw_coords;\n    var output;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        let neighbors;\n\n        if (x instanceof BuildNeighborSearchIndexResults) {\n            let k = perplexityToNeighbors(perplexity);\n            my_neighbors = findNearestNeighbors(x, k, { numberOfThreads: nthreads });\n            neighbors = my_neighbors;\n\n        } else {\n            if (checkMismatch) {\n                let k = perplexityToNeighbors(perplexity);\n                if (k * x.numberOfCells() != x.size()) {\n                    throw new Error(\"number of neighbors in 'x' does not match '3 * perplexity'\");\n                }\n            }\n            neighbors = x;\n        }\n\n        raw_coords = utils.createFloat64WasmArray(2 * neighbors.numberOfCells());\n        wasm.call(module => module.randomize_tsne_start(neighbors.numberOfCells(), raw_coords.offset, 42));\n        output = gc.call(\n            module => module.initialize_tsne(neighbors.results, perplexity, nthreads),\n            InitializeTSNEResults,\n            raw_coords\n        );\n\n    } catch(e) {\n        utils.free(output);\n        utils.free(raw_coords);\n        throw e;\n\n    } finally {\n        utils.free(my_neighbors);\n    }\n\n    return output;\n}\n\n/**\n * Run the t-SNE algorithm on an initialized {@linkplain InitializeTSNEResults}.\n *\n * @param {InitializeTSNEResults} x A previously initialized status object from {@linkcode initializeTSNE}.\n * This may be passed through {@linkcode runTSNE} any number of times.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.maxIterations=1000] - Maximum number of iterations to perform.\n * This number includes all existing iterations that were already performed in `x` from previous calls to {@linkcode runTSNE}.\n * @param {?number} [options.runTime=null] - Number of milliseconds for which the algorithm is allowed to run before returning.\n * If `null`, no limit is imposed on the runtime.\n *\n * @return The algorithm status in `x` is advanced up to the requested number of iterations,\n * or until the requested run time is exceeded, whichever comes first.\n */\nexport function runTSNE(x, { maxIterations = 1000, runTime = null } = {}) {\n    if (runTime === null) {\n        runTime = -1;\n    }\n    wasm.call(module => module.run_tsne(x.status, runTime, maxIterations, x.coordinates.offset));\n    return;\n}\n","import * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport { buildNeighborSearchIndex, BuildNeighborSearchIndexResults } from \"./findNearestNeighbors.js\"; \n\n/**\n * Scale embeddings based on the variation between neighboring cells.\n * This aims to equalize the noise across embeddings for the same population of cells across different data modalities,\n * allowing them to be combined into a single embedding for coordinated downstream analyses.\n *\n * @param {Array} embeddings - Array of Float64WasmArrays containing column-major matrices where rows are dimensions and columns are cells.\n * All entries of this array should contain data for the same number and ordering of cells.\n * @param {number} numberOfCells - Number of cells in all embeddings.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.neighbors=20] - Number of neighbors to use for quantifying variation.\n * Larger values provide a more stable calculation but assume larger subpopulations.\n * @param {?Array} [options.indices=null] - Array of {@linkplain BuildNeighborSearchIndexResults} objects, \n * where each entry is constructed from the corresponding entry of `embeddings` (see {@linkcode buildNeighborSearchIndex}).\n * This can be used to avoid redundant calculation of indices if they are already available.\n * @param {?Float64WasmArray} [options.buffer=null] - Array in which to store the combined embedding.\n * This should have length equal to the product of `numberOfCells` and the sum of dimensions of all embeddings.\n * @param {boolean} [options.approximate=true] - Should we construct an approximate search index if `indices` is not supplied?\n * @param {?(Array|TypedArray|Float64WasmArray)} [options.weights=null] - Array of length equal to the number of embeddings, containing a non-enegative relative weight for each embedding.\n * This is used to scale each embedding if non-equal noise is desired in the combined embedding.\n * If `null`, all embeddings receive the same weight.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {Float64WasmArray} Array containing the combined embeddings in column-major format, i.e., dimensions in rows and cells in columns.\n *\n * If `buffer` was supplied, it is used as the return value.\n */\nexport function scaleByNeighbors(embeddings, numberOfCells, { neighbors = 20, indices = null, buffer = null, approximate = true, weights = null, numberOfThreads = null } = {}) {\n    let nembed = embeddings.length;\n    let embed_ptrs, index_ptrs;\n    let holding_ndims;\n    let holding_weights;\n    let local_buffer;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    let deletable = [];\n    try {\n        // Fetching the pointers.\n        embed_ptrs = utils.createBigUint64WasmArray(nembed);\n        let embed_arr = embed_ptrs.array();\n        for (var i = 0; i < nembed; i++) {\n            embed_arr[i] = BigInt(embeddings[i].offset);\n        }\n\n        let weight_offset = 0;\n        let use_weights = false;\n        if (weights !== null) {\n            use_weights = true;\n            holding_weights = utils.wasmifyArray(weights, \"Float64WasmArray\");\n            if (holding_weights.length != nembed) {\n                throw new Error(\"length of 'weights' should be equal to the number of embeddings\");\n            }\n            weight_offset = holding_weights.offset;\n        }\n\n        // Allocating output space, if necessary; and then scaling.\n        let allocator = (total_ndim) => {\n            let total_len = total_ndim * numberOfCells;\n            if (buffer === null) {\n                local_buffer = utils.createFloat64WasmArray(total_len);\n                buffer = local_buffer;\n            } else if (total_len !== buffer.length) {\n                throw new Error(\"length of 'buffer' should be equal to the product of 'numberOfCells' and the total number of dimensions\");\n            }\n        }\n\n        if (indices !== null) {\n            if (nembed !== indices.length) {\n                throw new Error(\"'indices' and 'embeddings' should have the same length\");\n            }\n\n            index_ptrs = utils.createBigUint64WasmArray(nembed);\n            let index_arr = index_ptrs.array();\n            let total_ndim = 0;\n\n            for (var i = 0; i < nembed; i++) {\n                let index = indices[i];\n                if (numberOfCells != index.numberOfCells()) {\n                    throw new Error(\"each element of 'indices' should have the same number of cells as 'numberOfCells'\");\n                }\n                if (embeddings[i].length != index.numberOfCells() * index.numberOfDims()) {\n                    throw new Error(\"length of arrays in 'embeddings' should equal the length of arrays used to build 'indices'\");\n                }\n\n                index_arr[i] = BigInt(indices[i].index.$$.ptr);\n                total_ndim += indices[i].numberOfDims();\n            }\n\n            allocator(total_ndim);\n            wasm.call(module => module.scale_by_neighbors_indices(\n                numberOfCells, \n                nembed, \n                embed_ptrs.offset, \n                index_ptrs.offset, \n                buffer.offset, \n                neighbors, \n                use_weights, \n                weight_offset,\n                nthreads\n            ));\n\n        } else {\n            holding_ndims = utils.createInt32WasmArray(nembed);\n            let ndims_arr = holding_ndims.array();\n            let total_ndim = 0;\n\n            for (var i = 0; i < nembed; i++) {\n                let n = embeddings[i].length;\n                ndims_arr[i] = Math.floor(n / numberOfCells);\n                if (numberOfCells * ndims_arr[i] !== n) {\n                    throw new Error(\"length of arrays in 'embeddings' should be a multiple of 'numberOfCells'\");\n                }\n                total_ndim += ndims_arr[i];\n            }\n\n            allocator(total_ndim);\n            wasm.call(module => module.scale_by_neighbors_matrices(\n                numberOfCells, \n                nembed, \n                holding_ndims.offset, \n                embed_ptrs.offset, \n                buffer.offset, \n                neighbors, \n                use_weights, \n                weight_offset,\n                approximate,\n                nthreads\n            ));\n        }\n\n    } catch (e) {\n        utils.free(local_buffer);\n        throw e;\n\n    } finally {\n        for (const x of deletable) {\n            x.free();\n        }\n        utils.free(embed_ptrs);\n        utils.free(index_ptrs);\n        utils.free(holding_weights);\n        utils.free(holding_ndims);\n    }\n\n    return buffer;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Compute per-cell scores for the activity of a feature set.\n *\n * @param {ScranMatrix} x - Log-normalized expression matrix.\n * @param {Uint8Array|Uint8WasmArray|TypedArray|Array} features - An array of length equal to the number of rows in `x`, indicating which features belong to the set.\n * A non-zero value for any entry indicates that the corresponding row of `x` is part of the feature set.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {boolean} [options.scale=false] - Whether to scale the expression matrix to unit variance for each feature before computing the per-feature weights.\n * Setting to `true` improves robustness (or reduces sensitivity) to the behavior of highly variable features in the set.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n *\n * @return {object} Object containing:\n *\n * - `weights`, a Float64Array containing per-gene weights for each feature in the set.\n * - `scores`, a Float64Array containing the per-cell scores for each column of `x`.\n */\nexport function scoreFeatureSet(x, features, { block = null, scale = false, numberOfThreads = null } = {}) {\n    let temp;\n    let output = {};\n    let feature_data, block_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        // Setting up the features.\n        if (features.length !== x.numberOfRows()) {\n            throw new Error(\"Uint8Array 'features' must be of length equal to the number of rows in 'x'\");\n        }\n        feature_data = utils.wasmifyArray(features, \"Uint8WasmArray\");\n\n        // Setting up the blocks.\n        var bptr = 0;\n        var use_blocks = false;\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        temp = wasm.call(module => module.score_feature_set(x.matrix, feature_data.offset, use_blocks, bptr, scale, nthreads));\n        output.weights = temp.weights().slice();\n        output.scores = temp.scores().slice();\n\n    } finally {\n        utils.free(block_data);\n        utils.free(feature_data);\n        if (temp) {\n            temp.delete();\n        }\n    }\n\n    return output;\n}\n","import * as gc from \"./gc.js\";\nimport * as wasm from \"./wasm.js\";\nimport * as utils from \"./utils.js\";\n\nfunction checkFillness2(group, summary, fillable, copy, fillcheck, getfun) {\n    return utils.checkFillness(\n        fillable, \n        copy, \n        fillcheck.filled || fillcheck.details[group][summary] || false, \n        () => { fillcheck.details[group][summary] = true }, \n        getfun  \n    );\n}\n\nfunction intifySummary(summary) {\n    if (typeof summary == \"number\") {\n        return summary; // for back-compatibility with numeric summaries.\n    }\n    let output;\n    switch (summary) {\n        case \"minimum\": \n            output = 0;\n            break;\n        case \"mean\": \n            output = 1;\n            break;\n        case \"median\":\n            output = 2;\n            break;\n        case \"maximum\": \n            output = 3;\n            break;\n        case \"min-rank\":\n            output = 4;\n            break;\n        default:\n            throw new Error(\"unknown summary type '\" + summary + \"'\");\n    }\n    return output;\n}\n\n/**\n * Wrapper around the marker scoring results on the Wasm heap, typically produced by {@linkcode scoreMarkers}.\n * @hideconstructor\n */\nexport class ScoreMarkersResults {\n    #id;\n    #results;\n\n    #filledMeans;\n    #filledDetected;\n    #filledCohen;\n    #filledLfc;\n    #filledAuc;\n    #filledDeltaDetected;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        let n = this.numberOfGroups();\n        let b = this.numberOfBlocks();\n\n        function createBlockedStatsFilled(filled) {\n            let output = { filled };\n            if (!filled) {\n                output.details = new Array(n);\n                for (var g = 0; g < n; g++) {\n                    output.details[g] = utils.spawnArray(b + 1, filled);\n                }\n            }\n            return output;\n        }\n\n        this.#filledMeans = createBlockedStatsFilled(filled);\n        this.#filledDetected = createBlockedStatsFilled(filled);\n\n        function createEffectsFilled(filled) {\n            let output = { filled };\n            if (!filled) {\n                output.details = new Array(n);\n                for (var g = 0; g < n; g++) {\n                    output.details[g] = {};\n                }\n            }\n            return output;\n        }\n\n        this.#filledCohen = createEffectsFilled(filled); \n        this.#filledLfc = createEffectsFilled(filled); \n        this.#filledAuc = createEffectsFilled(filled); \n        this.#filledDeltaDetected = createEffectsFilled(filled); \n\n        return;\n    }\n\n    #extractBlockedStat(group, block, copy, fillable, fillcheck, method) {\n        let index = block;\n        if (block == null) {\n            let nblocks = this.numberOfBlocks();\n            index = (nblocks > 1 ? nblocks : 0);\n            block = -1;\n        }\n\n        return utils.checkFillness(\n            fillable, \n            copy, \n            fillcheck.filled || fillcheck.details[group][index] || false, \n            () => { fillcheck.details[group][index] = true }, \n            COPY => utils.possibleCopy(this.#results[method](group, block), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of blocks used to compute the results.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @return {number} Number of groups in the results.\n     */\n    numberOfGroups() {\n        return this.#results.num_groups();\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the mean expression for the requested group in the requested block.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    means(group, { block = null, copy = true, fillable = false } = {}) {\n        return this.#extractBlockedStat(group, block, copy, fillable, this.#filledMeans, \"means\");\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?number} [options.block=null] - Number of the block for which to extract statistics.\n     * If `null`, the average across all blocks is returned.\n     * Otherwise, should be less than the value returned by {@linkcode ModelGeneVarResults#numberOfBlocks numberOfBlocks}.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the proportion of cells with detectable expression for the requested group in the requested block.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    detected(group, { block = null, copy = true, fillable = false } = {}) {\n        return this.#extractBlockedStat(group, block, copy, fillable, this.#filledDetected, \"detected\");\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the Cohen's d values of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized Cohen's d for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    cohen(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledCohen,\n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.cohen(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * AUCs are only computed if `computeAuc = true` in {@linkcode scoreMarkers}.\n     * If `false`, this method will throw an error.\n     *\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the AUCs of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized AUC for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    auc(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledAuc, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.auc(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the log-fold changes of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array of length equal to the number of genes,\n     * containing the summarized log-fold change for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    lfc(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledLfc, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.lfc(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @param {number} group - Group of interest.\n     * Should be non-negative and less than {@linkcode ScoreMarkersResults#numberOfGroups numberOfGroups}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {string} [options.summary=\"mean\"] - Summary statistic to be computed from the delta-detected values of all pairwise comparisons involving `group`.\n     * This can be the `\"minimum\"` across comparisons, `\"mean\"` or `\"min-rank\"`.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {Float64Array|Float64WasmArray} Array of length equal to the number of genes,\n     * containing the summarized delta-detected for the comparisons between `group` and all other groups.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    deltaDetected(group, { summary = \"mean\", copy = true, fillable = false } = {}) {\n        summary = intifySummary(summary);\n        return checkFillness2(\n            group, \n            summary, \n            fillable, \n            copy, \n            this.#filledDeltaDetected, \n            COPY => utils.possibleCopy(\n                wasm.call(_ => this.#results.delta_detected(group, summary)),\n                COPY\n            )\n        );\n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Score genes as potential markers for each group of cells.\n *\n * @param {ScranMatrix} x - Log-normalized expression matrix.\n * @param {(Int32WasmArray|Array|TypedArray)} groups - Array containing the group assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of groups.\n * @param {object} [options={}] - Optional parameters.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to perform comparisons within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n * @param {?number} [options.numberOfThreads=null] - Number of threads to use.\n * If `null`, defaults to {@linkcode maximumThreads}.\n * @param {number} [options.lfcThreshold=0] - Log-fold change threshold to use for computing Cohen's d and AUC.\n * Large positive values favor markers with large log-fold changes over those with low variance.\n * @param {boolean} [options.computeAuc=true] - Whether to compute the AUCs as an effect size.\n * This can be set to `false` for greater speed and memory efficiency.\n * @param {boolean} [options.computeMedian=false] - Whether to compute the median effect sizes across all pairwise comparisons for each group.\n * This can be used as a more robust/less sensitive alternative to the mean.\n * @param {boolean} [options.computeMaximum=false] - Whether to compute the maximum effect size across all pairwise comparisons for each group.\n * This could be used to find uniquely downregulated genes.\n *\n * @return {ScoreMarkersResults} Object containing the marker scoring results.\n */\nexport function scoreMarkers(x, groups, { block = null, numberOfThreads = null, lfcThreshold = 0, computeAuc = true, computeMedian = false, computeMaximum = false } = {}) {\n    var output;\n    var block_data;\n    var group_data;\n    let nthreads = utils.chooseNumberOfThreads(numberOfThreads);\n\n    try {\n        group_data = utils.wasmifyArray(groups, \"Int32WasmArray\");\n        if (group_data.length != x.numberOfColumns()) {\n            throw new Error(\"length of 'groups' should be equal to number of columns in 'x'\");\n        }\n\n        var bptr = 0;\n        var use_blocks = false;\n        if (block !== null) {\n            block_data = utils.wasmifyArray(block, \"Int32WasmArray\");\n            if (block_data.length != x.numberOfColumns()) {\n                throw new Error(\"'block' must be of length equal to the number of columns in 'x'\");\n            }\n            use_blocks = true;\n            bptr = block_data.offset;\n        }\n\n        output = gc.call(\n            module => module.score_markers(x.matrix, group_data.offset, use_blocks, bptr, lfcThreshold, computeAuc, computeMedian, computeMaximum, nthreads),\n            ScoreMarkersResults\n        );\n\n    } catch (e) {\n        utils.free(output);\n        throw e;\n\n    } finally {\n        utils.free(block_data);\n        utils.free(group_data);\n    }\n\n    return output;\n}\n\n/**\n * Create an empty {@linkplain ScoreMarkersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfGenes - Number of genes in the dataset.\n * @param {number} numberOfGroups - Number of groups for which to store marker detection statistics.\n * @param {number} numberOfBlocks - Number of blocks in the dataset.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.computeAuc=true] - Whether to allocate memory for storing AUCs.\n * @param {boolean} [options.computeMedian=false] - Whether to allocate memory for storing median effect sizes.\n * @param {boolean} [options.computeMaximum=false] - Whether to allocate memory for storing maximum effect sizes.\n *\n * @return {ScoreMarkersResults} Object with memory allocated to store marker statistics, but not containing any actual values.\n */\nexport function emptyScoreMarkersResults(numberOfGenes, numberOfGroups, numberOfBlocks, { computeAuc = true, computeMedian = false, computeMaximum = false } = {}) {\n    return gc.call(\n        module => new module.ScoreMarkers_Results(numberOfGenes, numberOfGroups, numberOfBlocks, computeAuc, computeMedian, computeMaximum),\n        ScoreMarkersResults,\n        /* filled = */ false\n    );\n}\n","import * as utils from \"./utils.js\";\nimport * as wasm from \"./wasm.js\";\nimport { MultiMatrix } from \"./MultiMatrix.js\";\n\n/**\n * Slice a {@linkplain ScranMatrix} by its rows.\n * \n * @param {ScranMatrix} x - The matrix of interest.\n * @param {Array} indices - Row indices to extract.\n * All indices must be non-negative integers less than `mat.numberOfRows()`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix}\n * A ScranMatrix containing the subset of rows from `mat` specified by `indices`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function subsetRows(x, indices, { inPlace = false } = {}) {\n    let xcopy;\n    let target;\n    let wasm_indices;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        wasm.call(module => module.row_subset(target.matrix, wasm_indices.offset, wasm_indices.length));\n\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return target;\n}\n\n/**\n * Slice a ScranMatrix by its columns.\n * \n * @param {ScranMatrix} x - The matrix of interest.\n * @param {Array} indices - Column indices to extract.\n * Al indices must be a non-negative integer less than `mat.numberOfColumns()`.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.inPlace=false] - Whether to modify `x` in place.\n * If `false`, a new ScranMatrix is returned.\n *\n * @return {ScranMatrix}\n * A new ScranMatrix containing the subset of columns from `mat` specified by `indices`.\n * If `inPlace = true`, this is a reference to `x`, otherwise it is a new ScranMatrix.\n */\nexport function subsetColumns(x, indices, { inPlace = false } = {}) {\n    let xcopy;\n    let target;\n    let wasm_indices;\n\n    try {\n        if (inPlace) {\n            target = x;\n        } else {\n            xcopy = x.clone();\n            target = xcopy;\n        }\n\n        wasm_indices = utils.wasmifyArray(indices, \"Int32WasmArray\");\n        wasm.call(module => module.column_subset(target.matrix, wasm_indices.offset, wasm_indices.length));\n\n    } catch (e) {\n        utils.free(xcopy);\n        throw e;\n\n    } finally {\n        utils.free(wasm_indices);\n    }\n\n    return target;\n}\n\n/**\n * Split a {@linkplain ScranMatrix} by row.\n *\n * @param {ScranMatrix} matrix - A ScranMatrix object.\n * @param {object} split - Object specifying how rows should be split.\n * Each value should be an Array/TypedArray of 0-based row indices.\n * @param {object} [options={}] - Optional parameters.\n * @param {boolean} [options.singleNull=false] - Whether `null` should be returned if `split` only contains one level and all rows are represented exactly once.\n * This can be used to avoid the creation of a redundant {@linkplain ScranMatrix} object.\n * @param {boolean} [options.createMultiMatrix=false] - Whether the output should be returned as a {@linkplain MultiMatrix}.\n *\n * @return {object|MultiMatrix} Object with the same keys as `split` where each value is a ScranMatrix for the corresponding subset of rows.\n * Alternatively, this is wrapped in a MultiMatrix if `createMultiMatrix = true`.\n */\nexport function splitRows(matrix, split, { singleNull = false, createMultiMatrix = false } = {}) { \n    let output = {};\n    let tkeys = Object.keys(split);\n\n    if (tkeys.length == 1) {\n        let chosen = split[tkeys[0]];\n        let consec = (chosen.length == matrix.numberOfRows());\n        if (consec) {\n            for (var i = 0; i < chosen.length; i++) {\n                if (i != chosen[i]) {\n                    consec = false;\n                    break;\n                }\n            }\n        }\n\n        if (consec) {\n            if (singleNull) {\n                return null;\n            } else {\n                output[tkeys[0]] = matrix.clone();\n                return output;\n            }\n        }\n    }\n\n    let stuff;\n    try {\n        for (const k of tkeys) {\n            output[k] = subsetRows(matrix, split[k]);\n        }\n\n        // Sticking this inside the trycatch, so that\n        // memory is released if the constructor fails. \n        if (createMultiMatrix) {\n            stuff = new MultiMatrix({ store: output });\n        }\n    } catch (e) {\n        for (const v of Object.values(output)) {\n            v.free();\n        }\n        throw e;\n    }\n\n    if (createMultiMatrix) {\n        return stuff;\n    } else {\n        return output;\n    }\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellAdtQcMetricsResults } from \"./perCellAdtQcMetrics.js\";\n\n/**\n * Wrapper class for the ADT-based QC filtering results, produced by {@linkcode suggestAdtQcFilters}.\n * @hideconstructor\n */\nexport class SuggestAdtQcFiltersResults {\n    #results;\n    #id;\n\n    #filledDetected;\n    #filledSubsetTotals;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledDetected = filled;\n        this.#filledSubsetTotals = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the number of detected ADTs for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsDetected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the total counts for subset `i` in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSubsetTotals(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetTotals[i], \n            () => { this.#filledSubsetTotals[i] = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_subset_totals(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellAdtQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellAdtQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestAdtQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellAdtQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellAdtQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics from the ADT count matrix.\n *\n * @param {PerCellAdtQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellAdtQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {number} [options.minDetectedDrop=0.1] - Minimum relative drop in the number of detected ADTs before a cell is to be considered a low-quality cell.\n * By default, cells must exhibit at least a 10% decrease from the median before filtering is applied.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestAdtQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestAdtQcFilters(metrics, { numberOfMADs = 3, minDetectedDrop = 0.1, block = null } = {}) {\n    if (!(metrics instanceof PerCellAdtQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellAdtQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics, \n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_adt_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs, minDetectedDrop),\n            SuggestAdtQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestAdtQcFiltersResults} object, to be filled with custom results.\n * This is typically used to generate a convenient input into later {@linkcode filterCells} calls.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfSubsets Number of feature subsets.\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestAdtQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestAdtQcFiltersResults(numberOfSubsets, numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestAdtQcFilters_Results(numberOfSubsets, numberOfBlocks),\n        SuggestAdtQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellCrisprQcMetricsResults } from \"./perCellCrisprQcMetrics.js\";\n\n/**\n * Wrapper class for the filtering results, produced by {@linkcode computeSuggestCrisprQcFilters}.\n * @hideconstructor\n */\nexport class SuggestCrisprQcFiltersResults {\n    #id;\n    #results;\n\n    #filledMaxCount;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledMaxCount = filled;\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the maximum count in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsMaxCount({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledMaxCount, \n            () => { this.#filledMaxCount = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_max_count(), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellCrisprQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellCrisprQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestCrisprQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellCrisprQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellCrisprQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics for CRISPR guide counts.\n *\n * @param {PerCellCrisprQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellCrisprQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestCrisprQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestCrisprQcFilters(metrics, { numberOfMADs = 3, block = null } = {}) {\n    if (!(metrics instanceof PerCellCrisprQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellCrisprQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics,\n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_crispr_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs),\n            SuggestCrisprQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestCrisprQcFiltersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestCrisprQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestCrisprQcFiltersResults(numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestCrisprQcFilters_Results(numberOfBlocks),\n        SuggestCrisprQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import * as gc from \"./gc.js\";\nimport * as utils from \"./utils.js\";\nimport * as internal from \"./internal/computePerCellQcFilters.js\";\nimport { PerCellRnaQcMetricsResults } from \"./perCellRnaQcMetrics.js\";\n\n/**\n * Wrapper class for the filtering results, produced by {@linkcode computeSuggestRnaQcFilters}.\n * @hideconstructor\n */\nexport class SuggestRnaQcFiltersResults {\n    #id;\n    #results;\n\n    #filledSums;\n    #filledDetected;\n    #filledSubsetProportions;\n\n    constructor(id, raw, filled = true) {\n        this.#id = id;\n        this.#results = raw;\n\n        this.#filledSums = filled;\n        this.#filledDetected = filled;\n        this.#filledSubsetProportions = utils.spawnArray(this.numberOfSubsets(), filled);\n\n        return;\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the sums for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSums({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSums, \n            () => { this.#filledSums = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_sums(), COPY)\n        );\n    }\n\n    /**\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the number of detected genes for each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsDetected({ copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledDetected, \n            () => { this.#filledDetected = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_detected(), COPY)\n        );\n    }\n\n    /**\n     * @param {number} i - Index of the feature subset of interest.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {boolean} [options.copy=true] - Whether to copy the results from the Wasm heap, see {@linkcode possibleCopy}.\n     * @param {boolean} [options.fillable=false] - Whether to return a fillable array, to write to this object.\n     * If `true`, this method automatically sets `copy = false` if `copy` was previously true.\n     * If `false` and the array was not previously filled, `null` is returned.\n     *\n     * @return {?(Float64Array|Float64WasmArray)} Array containing the filtering threshold on the proportions for subset `i` in each batch.\n     * Alternatively `null`, if `fillable = false` and the array was not already filled.\n     */\n    thresholdsSubsetProportions(i, { copy = true, fillable = false } = {}) {\n        return utils.checkFillness(\n            fillable, \n            copy, \n            this.#filledSubsetProportions[i], \n            () => { this.#filledSubsetProportions[i] = true }, \n            COPY => utils.possibleCopy(this.#results.thresholds_proportions(i), COPY)\n        );\n    }\n\n    /**\n     * @return {number} Number of feature subsets in this object.\n     */\n    numberOfSubsets() {\n        return this.#results.num_subsets();\n    }\n\n    /**\n     * @return {number} Number of blocks in this object.\n     */\n    numberOfBlocks() {\n        return this.#results.num_blocks();\n    }\n\n    /**\n     * @param {PerCellRnaQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellRnaQcMetrics}.\n     * @param {object} [options={}] - Optional parameters.\n     * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell in `metrics`.\n     * This should have length equal to the number of cells and contain all values in `[0, n)` where `n` is the return value of {@linkcode SuggestRnaQcFilters#numberOfBlocks numberOfBlocks}.\n     *\n     * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n     * This will raise an error if multiple blocks were used to compute the thresholds.\n     * @param {?Uint8WasmArray} [options.buffer=null] - Array of length equal to the number of cells in `metrics`, to be used to store the low-quality calls.\n     *\n     * @return {Uint8Array} Array of length equal to the number of cells in `metrics`.\n     * Each entry is truthy if the corresponding cell is deemed to be of low-quality based on its values in `metrics`.\n     * If `buffer` is supplied, the returned array is a view on `buffer`.\n     */\n    filter(metrics, { block = null, buffer = null } = {}) {\n        if (!(metrics instanceof PerCellRnaQcMetricsResults)) {\n            throw new Error(\"'metrics' should be a PerCellRnaQcMetricsResults object\");\n        }\n        return internal.applyFilter(this.#results, metrics, block, buffer); \n    }\n\n    /**\n     * @return Frees the memory allocated on the Wasm heap for this object.\n     * This invalidates this object and all references to it.\n     */\n    free() {\n        if (this.#results !== null) {\n            gc.release(this.#id);\n            this.#results = null;\n        }\n        return;\n    }\n}\n\n/**\n * Define filters based on the per-cell QC metrics computed from an RNA count matrix.\n *\n * @param {PerCellRnaQcMetricsResults} metrics - Per-cell QC metrics, usually computed by {@linkcode perCellRnaQcMetrics}.\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfMADs=3] - Number of median absolute deviations to use to define low-quality outliers.\n * @param {?(Int32WasmArray|Array|TypedArray)} [options.block=null] - Array containing the block assignment for each cell.\n * This should have length equal to the number of cells and contain all values from 0 to `n - 1` at least once, where `n` is the number of blocks.\n * This is used to segregate cells in order to compute filters within each block.\n * Alternatively, this may be `null`, in which case all cells are assumed to be in the same block.\n *\n * @return {SuggestRnaQcFiltersResults} Object containing the filtering results.\n */\nexport function suggestRnaQcFilters(metrics, { numberOfMADs = 3, block = null } = {}) {\n    if (!(metrics instanceof PerCellRnaQcMetricsResults)) {\n        throw new Error(\"'metrics' should be a PerCellRnaQcMetricsResults object\");\n    }\n    return internal.computePerCellQcFilters(\n        metrics,\n        block,\n        (x, use_blocks, bptr) => gc.call(\n            module => module.suggest_rna_qc_filters(x.results.$$.ptr, use_blocks, bptr, numberOfMADs),\n            SuggestRnaQcFiltersResults\n        )\n    );\n}\n\n/**\n * Create an empty {@linkplain SuggestRnaQcFiltersResults} object, to be filled with custom results.\n * Note that filling requires use of `fillable: true` in the various getters to obtain a writeable memory view.\n *\n * @param {number} numberOfSubsets Number of feature subsets.\n * @param {number} numberOfBlocks Number of blocks in the dataset.\n *\n * @return {SuggestRnaQcFiltersResults} Object with allocated memory to store QC filters, but no actual values.\n */\nexport function emptySuggestRnaQcFiltersResults(numberOfSubsets, numberOfBlocks) {\n    return gc.call(\n        module => new module.SuggestRnaQcFilters_Results(numberOfSubsets, numberOfBlocks),\n        SuggestRnaQcFiltersResults,\n        /* filled = */ false \n    );\n}\n","import { buffer, wasmArraySpace, maximumThreads } from \"./wasm.js\";\nimport * as wa from \"wasmarrays.js\";\n\n/**\n * Helper function to create a Uint8WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Uint8WasmArray} Uint8WasmArray on the **scran.js** Wasm heap.\n */\nexport function createUint8WasmArray(length) {\n    return wa.createUint8WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Int32WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Int32WasmArray} Int32WasmArray on the **scran.js** Wasm heap.\n */\nexport function createInt32WasmArray(length) {\n    return wa.createInt32WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a BigUint64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {BigUint64WasmArray} BigUint64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createBigUint64WasmArray (length) {\n    return wa.createBigUint64WasmArray(wasmArraySpace(), length);\n}\n\n/**\n * Helper function to create a Float64WasmArray from the **wasmarrays.js** package.\n *\n * @param {number} length - Length of the array.\n *\n * @return {Float64WasmArray} Float64WasmArray on the **scran.js** Wasm heap.\n */\nexport function createFloat64WasmArray(length) {\n    return wa.createFloat64WasmArray(wasmArraySpace(), length);\n}\n\nexport function wasmifyArray(x, expected) {\n    if (x instanceof wa.WasmArray) {\n        if (expected !== null && expected != x.constructor.className) {\n            throw new Error(\"expected '\" + expected + \"', got '\" + x.constructor.className + \"'\");\n        }\n\n        if (x.space === wasmArraySpace()) {\n            // Creating a view. This ensures that callers can always call\n            // free() on the output of this function without worrying about\n            // whether they are breaking something else that was using 'x'.\n            if (x.owner === null) {\n                return x.view();\n            } else {\n                return x; // it's already a view, so we just pass it along.\n            }\n        } else {\n            // If it's a different space, then we have to make a copy.\n            return x.clone(wasmArraySpace());\n        }\n    }\n\n    let y = null;\n    if (expected !== null) {\n        y = wa.convertToWasmArray(wasmArraySpace(), x, wa.stringToClass(expected));\n    } else {\n        y = wa.convertToWasmArray(wasmArraySpace(), x);\n    }\n\n    return y;\n}\n\nexport function chooseNumberOfThreads(threads) {\n    if (threads == null) {\n        return maximumThreads();\n    } else {\n        return threads;\n    }\n}\n\n/**\n * Try to free a **scran.js** object's memory (typically involving some memory allocated on the Wasm heap) by calling its `free` method.\n *\n * @param {?object} x - Instance of a **scran.js** or **wasmarrays.js** class to be freed.\n * May also be `null` or undefined.\n * \n * @return The output of `x.free()` - unless `x` is undefined or `null`, in which case nothing is performed.\n */\nexport function free(x) {\n    if (typeof x == \"undefined\" || x == null) {\n        return;\n    }\n    return x.free();\n}\n\nexport function extractXY(ncells, coordinates) {\n    let x = new Float64Array(ncells);\n    let y = new Float64Array(ncells);\n\n    for (var i = 0; i < ncells; i++) {\n        x[i] = coordinates[2 * i];\n        y[i] = coordinates[2 * i + 1];\n    }\n\n    return { \"x\": x, \"y\": y };\n}\n\n/**\n * Possibly copy an array out of the Wasm heap, avoiding potential invalidation at the cost of some efficiency.\n *\n * @param {TypedArray} x - Array of data, possibly on the **scran.js** Wasm heap.\n * @param {(string|boolean)} copy - Copying mode to use.\n *\n * @return {TypedArray|WasmArray} The return value depends on the value of `copy`:\n * - If `copy = true`, a TypedArray copy of `x` is created with `x.slice()` and returned.\n *   This is a good default to avoid invalidation of TypedArray views on the heap upon reallocation, by creating a Javascript-owned copy for downstream use.\n * - If `copy = false`, `x` is returned directly.\n *   This avoids making any copy but runs the risk of invalidation when the Wasm heap is resized;\n *   it should only be used when no further Wasm allocations are performed within the lifetime of `x`.\n * - If `copy = \"view\"`, a WasmArray view is created from `x` and returned.\n *   This avoids any copy and is robust to invalidation but requires an extra `WasmArray.array()` call to create a TypedArray.\n */\nexport function possibleCopy(x, copy) {\n    if (copy === \"view\") {\n        if (x.buffer !== buffer()) {\n            throw new Error(\"cannot use copy = \\\"view\\\" for non-Wasm TypedArrays\");\n        }\n\n        let view_class = x.constructor.name.replace(\"Array\", \"WasmArray\");\n\n        // This function should only be used for objects generated in the\n        // buffer owned by scran.js, so we can assume that x's space is the\n        // same as that of the wasmArraySpace().\n        return wa.createWasmArrayView(wasmArraySpace(), x.length, x.byteOffset, wa.stringToClass(view_class));\n\n    } else if (copy) {\n        return x.slice();\n\n    } else {\n        return x;\n    }\n}\n\nexport function matchOptions(name, value, choices) {\n    if (choices.indexOf(value) == -1) {\n        throw new Error(\"'\" + name + \"=' should be one of '\" + choices.join(\"', '\") + \"'\");\n    }\n}\n\nexport function spawnArray(n, fill) {\n    let output = new Array(n);\n    output.fill(fill);\n    return output;\n}\n\nexport function checkFillness(fill, copy, check, setFilledFun, getFun) {\n    if (!check) {\n        if (fill) {\n            setFilledFun();\n            if (copy) {\n                copy = false;\n            }\n        } else {\n            return null;\n        }\n    }\n    return getFun(copy);\n}\n","import loadScran from \"./wasm/scran.js\";\nimport { register } from \"wasmarrays.js\";\nimport * as afile from \"./abstract/file.js\";\n\nconst cache = {};\n\n/**\n * @param {object} [options={}] - Optional parameters.\n * @param {number} [options.numberOfThreads=4] - Number of threads to use for calculations.\n * This will spin up the requested number of Web Workers during module initialization.\n * @param {boolean} [options.localFile=false] - Whether or not to look for the Wasm and worker scripts locally.\n * This should only be `true` when using old versions of Node.js where file URLs are not supported, \n * and is ignored completely outside of Node.js contexts.\n *\n * @return {boolean}\n * The Wasm bindings are initialized and `true` is returned.\n * If the bindings were already initialized (e.g., by a previous call), nothing is done and `false` is returned.\n */\nexport async function initialize({ numberOfThreads = 4, localFile = false } = {}) {\n    if (\"module\" in cache) {\n        return false;\n    }\n\n    let options = {\n        scran_custom_nthreads: numberOfThreads\n    };\n\n    if (localFile) {                                                                /** NODE ONLY **/  \n        options.locateFile = (x) => import.meta.url.substring(7) + \"/../wasm/\" + x; /** NODE ONLY **/\n    }                                                                               /** NODE ONLY **/\n\n    cache.module = await loadScran(options);\n    cache.space = register(cache.module);\n\n    return true;\n}\n\n/**\n * Maximum number of threads available for computation.\n * This depends on the value specified during module initialization in {@linkcode initialize}. \n *\n * @return {number} Maximum number of available threads.\n */\nexport function maximumThreads() {\n    return cache.module.scran_custom_nthreads;\n}\n\nexport function call(func) {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n\n    var output;\n    try {\n        output = func(cache.module);    \n    } catch (e) {\n        if (typeof e == \"number\") {\n            throw new Error(cache.module.get_error_message(e));\n        } else {\n            throw e;\n        }\n    }\n    return output;\n}\n\nexport function buffer() {\n    if (! (\"module\" in cache)) {\n        throw new Error(\"Wasm module needs to be initialized via 'initialize()'\");\n    }\n    return cache.module.wasmMemory.buffer;\n}\n\n/**\n * @return {number} Integer containing the **wasmarrays.js** identifier for **scran.js**'s memory space.\n * This can be used with `createWasmArray()` and related functions from **wasmarrays.js**.\n */\nexport function wasmArraySpace() {\n    return cache.space;\n}\n\n/**\n * @return All worker threads are terminated and the module is deleted from the cache.\n * This is useful for cleaning up at the end of the analysis,\n * otherwise the workers will be shut done ungracefully on program exit.\n */\nexport function terminate() {\n    cache.module.PThread.terminateAllThreads();\n    delete cache.module;\n    return;\n}\n\n/**\n * @return {number} The current size of the Wasm heap, typically used for diagnostic reporting.\n */\nexport function heapSize() {\n    return buffer().byteLength;\n}\n","import { buffer } from \"./globals.js\";\nimport { WasmArray } from \"./base.js\";\n\n/** \n * Wrapper around an unsigned 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint8WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Uint8WasmArray extends WasmArray {\n    /**\n     * @return A Uint8Array view of the allocated memory.\n     */\n    array() {\n        return new Uint8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Uint8WasmArray\";\n    // We're returning the name explicitly here instead of relying\n    // on the constructor.name trick, as the name of the class can\n    // change during minification.\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around a signed 8-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt8WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Int8WasmArray extends WasmArray {\n    /**\n     * @return An Int8Array view of the allocated memory.\n     */\n    array() {\n        return new Int8Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Int8WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 1;\n}\n\n/** \n * Wrapper around an unsigned 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint16WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Uint16WasmArray extends WasmArray {\n    /**\n     * @return A Uint16Array view of the allocated memory.\n     */\n    array() {\n        return new Uint16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Uint16WasmArray\";\n\n    /**\n     * Size of the each data value, in bytes.\n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage a signed 16-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt16WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Int16WasmArray extends WasmArray {\n    /**\n     * @return An `Int16Array` view of the allocated memory.\n     */\n    array() {\n        return new Int16Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Int16WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 2;\n}\n\n/** \n * Manage an unsigned 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createUint32WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Uint32WasmArray extends WasmArray {\n    /**\n     * @return A Uint32Array view of the allocated memory.\n     */\n    array() {\n        return new Uint32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"Uint32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a signed 32-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createInt32WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Int32WasmArray extends WasmArray {\n    /**\n     * @return An Int32Array view of the allocated memory.\n     */\n    array() {\n        return new Int32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"Int32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage an unsigned 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigUint64WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class BigUint64WasmArray extends WasmArray {\n    /**\n     * @return A BigUint64Array view of the allocated memory.\n     */\n    array() {\n        return new BigUint64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * Name of the class.\n     */\n    static className = \"BigUint64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a signed 64-bit integer array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createBigInt64WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class BigInt64WasmArray extends WasmArray {\n    /**\n     * @return An BigInt64Array view of the allocated memory.\n     */\n    array() {\n        return new BigInt64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"BigInt64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 8;\n}\n\n/** \n * Manage a 32-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat32WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Float32WasmArray extends WasmArray {\n    /**\n     * @return A Float32Array view of the allocated memory.\n     */\n    array() {\n        return new Float32Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"Float32WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 4;\n}\n\n/** \n * Manage a 64-bit float array allocated on the Wasm heap.\n * Users may create instances using the {@linkcode createFloat64WasmArray} function.\n *\n * @augments WasmArray\n */\nexport class Float64WasmArray extends WasmArray {\n    /**\n     * @return A Float64Array view of the allocated memory.\n     */\n    array() {\n        return new Float64Array(buffer(this.space), this.offset, this.length);\n    }\n\n    /**\n     * @return Name of the class.\n     */\n    static className = \"Float64WasmArray\";\n\n    /**\n     * Size of each data value, in bytes.\n     */\n    static valueSize = 8;\n}\n\nconst choices = {\n    \"Uint8WasmArray\": Uint8WasmArray,\n    \"Int8WasmArray\": Int8WasmArray,\n    \"Uint16WasmArray\": Uint16WasmArray,\n    \"Int16WasmArray\": Int16WasmArray,\n    \"Uint32WasmArray\": Uint32WasmArray,\n    \"Int32WasmArray\": Int32WasmArray,\n    \"BigUint64WasmArray\": BigUint64WasmArray,\n    \"BigInt64WasmArray\": BigInt64WasmArray,\n    \"Float32WasmArray\": Float32WasmArray,\n    \"Float64WasmArray\": Float64WasmArray\n};\n\n/**\n * Retrieve class from its name.\n *\n * @param {string} name - Name of the {@linkplain WasmArray} class.\n *\n * @return Class object corresponding to `name`.\n */\nexport function stringToClass(name) {\n    if (!(name in choices)){ \n        throw new Error(\"unknown WasmArray class '\" + name + \"'\");\n    }\n    return choices[name];\n}\n","import { allocate } from \"./globals.js\";\nimport { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} of the specified subclass.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return Instance of a {@linkplain WasmArray} subclass.\n */\nexport function createWasmArray(space, length, arrayClass) {\n    return allocate(space, length, arrayClass);\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Uint8WasmArray}.\n */\nexport function createUint8WasmArray(space, length) { \n    return createWasmArray(space, length, Uint8WasmArray); \n}\n\n/**\n * Create a {@linkplain Int8WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Int8WasmArray}.\n */\nexport function createInt8WasmArray(space, length) { \n    return createWasmArray(space, length, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Uint16WasmArray}.\n */\nexport function createUint16WasmArray(space, length) { \n    return createWasmArray(space, length, Uint16WasmArray); \n}\n\n/**\n * Create a {@linkplain Int16WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Int16WasmArray}.\n */\nexport function createInt16WasmArray(space, length) { \n    return createWasmArray(space, length, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Uint32WasmArray}.\n */\nexport function createUint32WasmArray(space, length) { \n    return createWasmArray(space, length, Uint32WasmArray); \n}\n\n/**\n * Create a {@linkplain Int32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Int32WasmArray}.\n */\nexport function createInt32WasmArray(space, length) { \n    return createWasmArray(space, length, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain BigUint64WasmArray}.\n */\nexport function createBigUint64WasmArray(space, length) { \n    return createWasmArray(space, length, BigUint64WasmArray); \n}\n\n/**\n * Create a {@linkplain BigInt64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain BigInt64WasmArray}.\n */\nexport function createBigInt64WasmArray(space, length) { \n    return createWasmArray(space, length, BigInt64WasmArray); \n}\n\n/**\n * Create a {@linkplain Float32WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Float32WasmArray}.\n */\nexport function createFloat32WasmArray(space, length) { \n    return createWasmArray(space, length, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray}.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the array to allocate.\n * \n * @return Instance of a {@linkplain Float64WasmArray}.\n */\nexport function createFloat64WasmArray(space, length) { \n    return createWasmArray(space, length, Float64WasmArray); \n}\n","import { \n    Int8WasmArray, Uint8WasmArray,\n    Int16WasmArray, Uint16WasmArray,\n    Int32WasmArray, Uint32WasmArray,\n    BigInt64WasmArray, BigUint64WasmArray,\n    Float32WasmArray, Float64WasmArray\n} from \"./derived.js\";\n\n/**\n * Create a {@linkplain WasmArray} view of the specified subclass.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * This may need to be a certain multiple of 2, 4 or 8, depending on `arrayClass`.\n * @param {class} arrayClass - Desired subclass of the {@linkplain WasmArray}.\n * \n * @return Instance of a {@linkplain WasmArray} subclass containing a view on the heap.\n */\nexport function createWasmArrayView(space, length, offset, arrayClass) {\n    return new arrayClass(space, -1, length, offset, {});\n}\n\n/**\n * Create a {@linkplain Uint8WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Uint8WasmArray} view.\n */\nexport function createUint8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint8WasmArray); \n}\n\n/**\n * Create an {@linkplain Int8WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain Int8WasmArray} view.\n */\nexport function createInt8WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int8WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint16WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Uint16WasmArray} view.\n */\nexport function createUint16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint16WasmArray); \n}\n\n/**\n * Create an {@linkplain Int16WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain Int16WasmArray} view.\n */\nexport function createInt16WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int16WasmArray); \n}\n\n/**\n * Create a {@linkplain Uint32WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Uint32WasmArray} view.\n */\nexport function createUint32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Uint32WasmArray); \n}\n\n/**\n * Create an {@linkplain Int32WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain Int32WasmArray} view.\n */\nexport function createInt32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Int32WasmArray); \n}\n\n/**\n * Create a {@linkplain BigUint64WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain BigUint64WasmArray} view.\n */\nexport function createBigUint64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigUint64WasmArray); \n}\n\n/**\n * Create an {@linkplain BigInt64WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of an {@linkplain BigInt64WasmArray} view.\n */\nexport function createBigInt64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, BigInt64WasmArray); \n}\n\n\n/**\n * Create a {@linkplain Float32WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Float32WasmArray} view.\n */\nexport function createFloat32WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float32WasmArray); \n}\n\n/**\n * Create a {@linkplain Float64WasmArray} view.\n *\n * @param {number} space - Identifier for the Wasm memory space, produced by {@linkcode register}.\n * @param {number} length - Length of the view, in terms of the number of data elements.\n * @param {number} offset - Offset on the Wasm heap to start the view.\n * \n * @return Instance of a {@linkplain Float64WasmArray} view.\n */\nexport function createFloat64WasmArrayView(space, length, offset) { \n    return createWasmArrayView(space, length, offset, Float64WasmArray); \n}\n"],"names":["define","s","f","self","window","n","document","postMessage","o","IS_PAPA_WORKER","a","u","b","parse","e","t","r","dynamicTyping","J","dynamicTypingFunction","transform","worker","WORKERS_SUPPORTED","i","URL","webkitURL","toString","BLOB_URL","createObjectURL","Blob","type","Worker","onmessage","_","id","userStep","step","userChunk","chunk","userComplete","complete","userError","error","input","config","workerId","NODE_STREAM_INPUT","charCodeAt","slice","download","l","p","readable","read","on","g","File","Object","c","stream","unparse","m","y","delimiter","BAD_DELIMITERS","filter","indexOf","length","quotes","Array","isArray","skipEmptyLines","newline","quoteChar","header","columns","Error","escapeChar","escapeFormulae","RegExp","Q","JSON","h","keys","data","fields","meta","v","join","trim","d","push","constructor","Date","stringify","test","replace","charAt","RECORD_SEP","String","fromCharCode","UNIT_SEP","BYTE_ORDER_MARK","LocalChunkSize","RemoteChunkSize","DefaultDelimiter","Parser","E","ParserHandle","NetworkStreamer","FileStreamer","StringStreamer","ReadableStreamStreamer","jQuery","fn","this","each","prop","toUpperCase","attr","toLowerCase","FileReader","files","file","inputElem","instanceConfig","extend","before","action","reason","name","splice","_handle","_finished","_completed","_halted","_input","_baseIndex","_partialLine","_rowCount","_start","_nextChunk","isFirstChunk","_completeResults","errors","w","chunkSize","parseInt","streamer","_config","call","parseChunk","beforeFirstChunk","paused","aborted","cursor","substring","preview","results","WORKER_ID","finished","concat","_sendError","_readChunk","_chunkLoaded","XMLHttpRequest","withCredentials","onload","onerror","_chunkError","open","downloadRequestBody","downloadRequestHeaders","setRequestHeader","send","message","status","readyState","responseText","getResponseHeader","lastIndexOf","statusText","webkitSlice","mozSlice","FileReaderSync","Math","min","size","readAsText","encoding","target","result","pause","prototype","apply","arguments","resume","_streamData","_streamEnd","_streamError","_checkIsFinished","shift","_streamCleanUp","removeListener","pow","abort","k","forEach","transformHeader","map","parseFloat","code","row","split","comments","abs","successful","bestDelimiter","delimitersToGuess","getCharIndex","setTimeout","j","z","M","P","U","q","N","B","fastMode","K","W","H","L","I","F","R","C","S","D","index","T","O","A","substr","x","linebreak","truncated","terminate","create","root","factory","randomColor","seed","colorDictionary","loadColorBounds","colorRanges","options","undefined","stringToInteger","TypeError","count","totalColors","colors","color","setFormat","pickHue","pickSaturation","pickBrightness","hue","randomWithin","hueRange","getRealHueRange","getHueRange","luminosity","saturationRange","getSaturationRange","sMin","sMax","bMin","getMinimumBrightness","bMax","hsv","format","HSVtoHSL","hsl","hslColor","alpha","random","HSVtoRGB","rgbColor","HSVtoHex","lowerBounds","getColorInfo","s1","v1","s2","v2","colorInput","number","match","HexToHSB","colorName","range","golden_ratio","floor","max","rnd","rgb","componentToHex","hex","defineColor","brightnessRange","h_i","red","green","blue","cMax","delta","saturation","round","string","total","Number","MAX_SAFE_INTEGER","colorHue","isNaN","module","exports","_arrayLikeToArray","arr","len","arr2","_arrayWithHoles","_classCheckPrivateStaticAccess","receiver","classConstructor","_classCheckPrivateStaticFieldDescriptor","descriptor","_classPrivateMethodGet","privateSet","has","_classPrivateMethodInitSpec","obj","add","_classStaticPrivateFieldSpecGet","_classStaticPrivateFieldSpecSet","value","_classStaticPrivateMethodGet","method","_createForOfIteratorHelper","allowArrayLike","it","Symbol","iterator","done","_e","err","normalCompletion","didErr","next","_e2","_iterableToArrayLimit","_i","_s","_x","_r","_arr","_n","_d","_nonIterableRest","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","_objectSpread2","source","key","getOwnPropertyDescriptors","defineProperties","defineProperty","_slicedToArray","_unsupportedIterableToArray","minLen","from","_h5_file","WeakMap","_h5_path","_h5_flush","_raw_features","_raw_cells","_options","_dump_summary","WeakSet","_instantiate","_features","_cells","_feature_type_mapping","_primary_mapping","TenxHdf5Dataset","h5File","_classCallCheck","_classPrivateFieldInitSpec","writable","afile","_classPrivateFieldSet","defaults","clear","_createClass","_objectSpread","_classPrivateFieldGet","_Object$entries","entries","_Object$entries$_i","_dump_summary2","_ref$cache","cache","_features2","_cells2","output","futils","_ref2$cache","_feature_type_mapping2","_primary_mapping2","_ref3$cache","loaded","scran","cells","primary_ids","features","featureTypeRnaName","featureTypeAdtName","featureTypeCrisprName","primaryRnaFeatureIdColumn","primaryAdtFeatureIdColumn","primaryCrisprFeatureIdColumn","_unserialize","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","abrupt","stop","_x2","fun","_instantiate2","info","content","path","flush","handle","children","mhandle","fhandle","ids","eutils","feats","bioc","names","$setColumn","ftype","details","numberOfRows","RNA","ADT","CRISPR","load_data_frame","_load_data_frame","_callee7","navigator","contents","colnames","rownames","parsed","current","_iterator7","_step7","out","ghandle","chandle","dhandle","_current","_type","replacement","placeholder","new_columns","new_colnames","nest_meta","_context7","metadata","sent","startsWith","delim","data_frame","row_names","Int32Array","Float64Array","hdf5_data_frame","group","load","values","Float32Array","attributes","readAttribute","finish","resource","t0","console","warn","columnOrder","rowNames","dimensions","main_experiment_name","extract_all_features","_x3","_x4","_extract_all_features","_callee9","extract_features","full_meta","_iterator8","_step8","alt","alt_meta","_context9","_ref6","_callee8","se_meta","row_path","_context8","summarized_experiment","row_data","_x19","single_cell_experiment","alternative_experiments","t1","extract_all_assay_names","_x5","_x6","_extract_all_assay_names","_callee10","extract_assay_names","assays","_iterator10","_step10","_context10","_step9","_iterator9","ass","extract_logcounts","_x7","_x8","_extract_logcounts","_callee11","ghandle2","ghandle3","sf","ahandle","mat","_context11","log","extract_assay_raw","matrix","sizeFactors","center","row_ids","extract_assay","_x9","_x10","_x11","_x12","_extract_assay","_callee12","assay","forceInteger","counter","_iterator11","_step11","asspath","_context12","_x13","_x14","_x15","_extract_assay_raw","_callee13","assmeta","schema","is_dense","is_sparse","stuff","_stuff","_context13","hdf5_sparse_matrix","hdf5_dense_array","dataset","hdf5_delayed_array","extract_other_data","_x16","_x17","_extract_other_data","_callee14","other_path","othermeta","ofile","unpacked","_context14","buffer","compression","json_simple_list","extract_list_data_internal","NaN","_navigator","_metadata_cache","MetadataCacheWrapper","nav","_metadata","_x18","_path","_navigator2","_reset_local_caches","AbstractArtifactdbDataset","_reset_local_caches2","_summary","_callee2","_args2","_context2","t2","modality_features","modality_assay_names","_previewPrimaryIds","_callee3","fmapping","_args3","_context3","rnaExperiment","adtExperiment","crisprExperiment","_load","_callee4","mapping","altmap","alts","_iterator","_step","_i2","_Object$entries2","_Object$entries2$_i","out_ids","_args4","_context4","exp","rnaCountAssay","adtCountAssay","crisprCountAssay","_features5","_callee15","_context15","t3","_cells5","_callee16","col_path","_context16","column_data","_path2","_navigator3","_raw_features2","_raw_cells2","_raw_other","_options2","_reset_local_caches3","_features3","_cells3","_other","AbstractArtifactdbResult","_reset_local_caches4","_i3","_Object$entries3","_Object$entries3$_i","_summary2","_callee5","_ref4$cache","_iterator2","_step2","redmeta","_args5","_context5","_features4","_cells4","_other2","t4","reduced_dimension_names","other_metadata","reduced_dimensions","array","t5","_load2","_callee6","_ref5$cache","reddims","_iterator3","_step3","redmap","_iterator4","_step4","_red","_iterator5","_step5","dims","redcontents","realized","acquired","_iterator6","_step6","_i4","_Object$entries4","_Object$entries4$_i","_k","curassay","curnormalized","normed","_args6","_context6","reducedDimensionNames","primaryAssay","isPrimaryNormalized","allowZeros","_features6","_callee17","_context17","_cells6","_callee18","_context18","_other3","_callee19","_context19","other_data","SimpleFile","_ref$name","_mode","_buffer","_file","_name","Uint8Array","_ref2$copy","copy","readAsArrayBuffer","_ref3$copy","_matrix_file","_feature_file","_barcode_file","_dimensions","_fetch_dimensions","TenxMatrixMarketDataset","matrixFile","featureFile","barcodeFile","_ref","args","_args","is_gz","endsWith","_serialize","feat","barcode","genes","annotations","mtx","_fetch_dimensions2","headers","rows","NR","fname","_output","symb","types","bname","diff","conv","callback","resolve","reject","extractHDF5Strings","summarizeArray","_ref$limit","limit","chosen","Set","sort","POSITIVE_INFINITY","NEGATIVE_INFINITY","guess_compression","astream","unpackText","_ref2$compression","txt","pako","TextDecoder","decode","merge_bytes","leftovers","decoder","combined","set","stream_callback","_stream_callback","Promise","gz","onData","onEnd","msg","readLines2","_readLines","_ref4","_ref4$compression","_ref4$chunkSize","dec","lines","last","subarray","readTable2","_readTable","_ref6$compression","_ref6$delim","_ref6$chunkSize","size_left","str","ppp","pop","promoteToNumber","as_num","opt1","opt2","create_solo_default_object","modality","reportFeatures","rawFeatures","typeField","hasColumn","by_type","column","deepCopy","$removeColumn","renameByModality","featureTypeMapping","splitByModality","extractSplitPrimaryIds","featureTypeDefault","primary","col","extractPrimaryIdColumn","splitScranMatrixAndFeatures","current_features","out_mat","type_keys","skip_subset","indices","full_length","is_subset_noop","store","rename","numberOfColumns","extractPrimaryIds","extractRemappedPrimaryIds","createTsneWorker","createUmapWorker","step_name","_qc","_filter","_parameters","_cache","_raw_compute","AdtNormalizationState","qc","parameters","qc_module","filter_module","changed","utils","total_buffer","sf_buffer","centered_sf_buffer","fetchFilteredMatrix","_raw_compute2","buff","block","fetchFilteredBlock","num_pcs","num_clusters","remove_bias","valid","get","nutils","totals","numberOfPCs","numberOfClusters","_norm","AdtPcaState","norm","norm_module","pcs","block_method","fetchNormalizedMatrix","blockMethod","_inputs","AdtQualityControlState","inputs","inputs_module","metrics","filters","metrics_buffer","discard_buffer","fetchCountMatrix","automatic","tag_id_column","igg_prefix","nmads","min_detected_drop","tag_info","fetchFeatureAnnotations","subsets","fill","lower_igg","configureFeatureParameters","val","sub_arr","fetchBlock","numberOfMADs","minDetectedDrop","discard","numberOfCells","best_key","best","rn","columnNames","latest","_combined","BatchCorrectionState","combine_module","corrected","fetchNumberOfCells","fetchNumberOfDimensions","num_neighbors","approximate","needs_correction","fetchCombined","numberOfDims","view","find_usable_upstream_states","qc_states","in_use","tmp","to_use","_qc_states","_raw_compute_matrix","_raw_compute_block","CellFilteringState","rna_qc_module","adt_qc_module","crispr_qc_module","block_buffer","_raw_compute_matrix2","_raw_compute_block2","use_rna","use_adt","use_crispr","first","fetchDiscards","disc_buffer","disc_arr","max_index","keep","available","src","sub","clone","filtered_ncols","bcache","_toConsumableArray","arrayLikeToArray","iter","unsupportedIterableToArray","baseUrl","_markers","_flush_prepared","_load_reference","_build_reference","CellLabellingState","markers","markers_module","_flush_prepared2","references","species","perref","integrated","integrated_results","_Object$keys","prepared","built","raw","sharedFeatures","_compute","gene_id_column","gene_id_type","def","species2","gene_id_column2","gene_id_type2","guesses","auto","allowable","gene_ids","ref","used_refs","_feats","marker_results","ngroups","ngenes","cluster_means","means","_valid","labels","_key","as_names","_this","human_references","mouse_references","guessRnaFeatureTypes","availableReferences","_load_reference2","_build_reference2","fetchResults","numberOfGroups","numberOfFeatures","confidence","_i5","_all_loaded","free","previous","_downloadFun","_i7","_Object$values","_load_reference3","all_loaded","suffixes","gene_lines","ensembl","symbol","entrez","empty2null","all","_ref2","suffix","full","rutils","chosen_ids","_defineProperty","_snn_cluster","_kmeans_cluster","ChooseClusteringState","snn","kmeans","snn_module","kmeans_module","fetchClusters","find_nonzero_upstream_states","pca_states","weights","_pca_states","CombineEmbeddingsState","rna_pca_module","adt_pca_module","crispr_pca_module","combined_buffer","num_cells","total_dims","rna_weight","adt_weight","crispr_weight","weight_arr","collected","ncells","curpcs","fetchPCs","principalComponents","createPcsView","upstream","CrisprNormalizationState","centered_buffer","sum_buffer","createGroup","CrisprPcaState","CrisprQualityControlState","FeatureSelectionState","sorted_residuals","span","residuals","_correct","KmeansClusterState","correct","correct_module","_valid2","clusters","run_me","fetchCorrected","initMethod","_free","versus","_computeVersus","left","right","matrices","_ref$block","_ref$lfc_threshold","lfc_threshold","_ref$compute_auc","compute_auc","cache_info","left_index","left_small","right_index","run","new_clusters","leftfound","rightfound","cached","_norm_states","_choice","MarkerDetectionState","norm_states","choice","rna_norm_module","adt_norm_module","crispr_norm_module","choice_module","changed_params","lfcThreshold","computeAuc","state","_ref2$block","_ref2$lfc_threshold","_ref2$compute_auc","computeVersus","_matrices","_groups","_group_levels","_block","_block_levels","_cache2","_parameters2","MarkerDetectionStandalone","normalized","groups","_ref3$block","arrays","new_matrices","dump","retain","temp","levels","init","_ref4$copy","ret","_ref5$copy","_classPrivateFieldGet2","NeighborIndexState","RnaNormalizationState","_feat","RnaPcaState","feat_module","hvg_buffer","num_hvgs","choose_hvgs","sorted_resids","fetchSortedResiduals","threshold_at","unsorted_resids","element","_automatic","_acquire_reference","RnaQualityControlState","mito_prefix","use_reference_mito","backcomp","gene_info","lists","lower_mito","use_mito_default","_acquire_reference2","_mito_lists","_acquire_reference3","feature_type","mito_lists","_index","_compute_neighbors","_compute_graph","_compute_clusters","SnnGraphClusterState","neighbor_module","neighbors","graph","membership","scheme","algorithm","multilevel_resolution","leiden_resolution","walktrap_steps","_compute_neighbors2","_compute_graph2","_compute_clusters2","fetchIndex","multiLevelResolution","leidenResolution","leidenModularityObjective","walktrapSteps","_reloaded","_worker_id","_ready","_run","_core","TsneState","reloaded","aworkers","_vizutils$initializeW","vizutils","worker_id","ready","_fetchResults","_ref$copy","iterations","perplexity","animate","same_neighbors","_core2","then","reneighbor","nn_out","UmapState","num_epochs","min_dist","registerCallback","sendMessage","transfer","terminateWorker","freeCache","changedParametersIllegal","xskip","yskip","ArrayBuffer","isView","changedParameters","xnull","ynull","xarr","yarr","xkeys","ykeys","_xkeys","allocateCachedArray","reallocate","candidate","className","owner","findValidUpstreamStates","states","checkIndices","defaultDownload","_defaultDownload","url","resp","fetch","ok","arrayBuffer","guessFeatureTypes","forceTaxonomy","subsetInvalidFactors","invalid","transformed","num_invalid","_loop","new_ids","new_levels","summaries2int","formatMarkerResults","rankEffect","ordering","ranking","increasing","cohen","summary","auc","lfc","deltaDetected","reorder","stats","thing","stat_detected","detected","stat_mean","stat_lfc","stat_delta_d","locateVersusCache","bigg","biggversus","smal","rerun","freeVersusResults","_i8","_i9","_Object$values2","_i10","_Object$values3","_i11","_Object$keys2","computeVersusResults","new_block","modmat","subsetSums","discards","sums","fetchMetrics","oarr","_get","Reflect","bind","property","base","hasOwnProperty","getPrototypeOf","desc","areArraysEqual","isArrayLike","formatLengthError","checkStringArray","typeMessage","checkNamesArray","numExpected","lengthMessage","sum","combineNames","all_names","all_lengths","total_n","all_null","createSequence","convertToInt32Array","checkNonNegative","object2map","Map","presplitFactor","factor","by","LENGTH","_bioconductor_LENGTH","SLICE","_ref$allowView","allowView","_bioconductor_SLICE","start","end","COMBINE","objects","_bioconductor_COMBINE","con1","con2","total_LENGTH","BigInt64Array","BigUint64Array","position","CLONE","_ref2$deepCopy","_bioconductor_CLONE","_step3$value","SPLIT","misc","_bioconductor_SPLIT","NUMBER_OF_ROWS","_bioconductor_NUMBER_OF_ROWS","NUMBER_OF_COLUMNS","_bioconductor_NUMBER_OF_COLUMNS","SLICE_2D","_ref3$allowView","_bioconductor_SLICE_2D","COMBINE_ROWS","_bioconductor_COMBINE_ROWS","COMBINE_COLUMNS","_bioconductor_COMBINE_COLUMNS","setterTarget","inPlace","generics","cloneField","Annotated","_ref$inPlace","cutils","setMetadata","_check_entry_index","InternalList","order","expected","observed","_entries","_order","_check_entry_index2","ii","delete","_ref2$inPlace","_ref3$inPlace","new_entries","_ref4$inPlace","new_order","_ref5$inPlace","_ref6$deepCopy","FUN","_ref7$inPlace","combiner","first_order","found","DataFrame","_ann$Annotated","_inherits","_super","_createSuper","_ref$numberOfRows","_ref$rowNames","_ref$columnOrder","_ref$metadata","_possibleConstructorReturn","_numberOfRows","_rowNames","_columns","il","cause","entry","numberOfEntries","removeColumn","setColumn","setNames","setColumnNames","setRowNames","_ref6$inPlace","sliceColumns","_ref7","new_numberOfRows","_ref7$allowView","new_rowNames","all_n","all_l","yi","_ref8","_ref8$deepCopy","_getPrototypeOf","ann","flexibleCombineRows","ckeys","corder","cnames","copies","dummy","verifyElementMetadata","elementMetadata","df","Vector","_ref$names","_ref$elementMetadata","_elementMetadata","_names","setElementMetadata","_ref4$allowView","all_em","_ref5","_ref5$deepCopy","buildIntervalTree","_ref2$slice","_convertPositionToRan","_ref$slice","positions","fillIndex","at","rank2position","new_starts","new_ends","pos","idx","startRanks","endRanks","convertPositionToRank","tree","create_node","recursive_build_tree","one_past_the_end","_tree","left_bound","right_bound","start_overlaps_sorted","overlaps","end_overlaps_sorted","left_node","right_node","node","queryIntervalTree","recursive_query_tree","overlap","IRanges","_vec$Vector","width","_width","_this2","setStart","setWidth","olap","IRangesOverlapIndex","all_s","all_w","vec","query","GRanges","seqnames","ranges","_ref$strand","strand","_seqnames","_ranges","_convertToInt8Array","_checkStrandedness","Int8Array","_strand","setSeqnames","ir","setRanges","setStrand","_ref5$restrictToSeqna","restrictToSeqnames","_ref5$restrictToStran","restrictToStrand","by_seqname","starts","ends","seqname_indices","by_strand","str_indices","GRangesOverlapIndex","_ref6$allowView","all_sn","all_rr","all_st","_ref7$deepCopy","_ref8$ignoreStrand","ignoreStrand","my_results","allowed_strands","seq_index","sstr","_staged_setGroup","_flush_staged_setGroup","GroupedGRanges","_ref$rangeLengths","rangeLengths","_assertThisInitialized","gr","_rangeLengths","accumulated","_computeStarts","_rangeStarts","_flush_staged_setGroup2","_ref2$allowView","nops","setGroup","GroupedGRangesOverlapIndex","buildOverlapIndex","runs","lengths","staged","last_start","more_ranges","current_start","nranges","fullLength","rangeStarts","rev_map","_reverseMapping","_loop2","_extractor","_inserter","_primarySlicer","_secondarySlicer","DenseMatrix","_ref$columnMajor","columnMajor","_numberOfColumns","_values","_columnMajor","_extractor2","setValues","_inserter2","setRow","_objectDestructuringEmpty","full_rows","is_row_range","new_rows","full_columns","is_column_range","new_values","_primarySlicer2","primaryFun","secondaryFun","isPrimaryMajor","secondaryName","num_primary","num_secondary","primary_major","used_primary","cur_primary","out_offset","in_offset","out_offset2","view_offset","_combiner","nprimary","nsecondary","primaryMajor","offset","primarySlice","fullPrimary","isPrimaryRange","primaryDim","secondarySlice","fullSecondary","isSecondaryRange","inSecondaryDim","outSecondaryDim","outputValues","_secondarySlicer2","pi","inPrimary","outPrimary","si","SummarizedExperiment","_ref$assayOrder","assayOrder","_ref$rowData","rowData","_ref$columnData","columnData","_ref$columnNames","_assays","nrows","ncols","nr","nc","_rowData","_columnData","_columnNames","removeAssay","setAssay","setAssayNames","sliceAssays","setRowData","setColumnData","_ref8$inPlace","_ref9$inPlace","_ref10","_ref10$allowView","all_dfs","_ref11","_ref11$deepCopy","_check_rowRanges","RangedSummarizedExperiment","_se$SummarizedExperim","rowRanges","ggr","_check_rowRanges2","_rowRanges","setRowRanges","has_empty","has_ggr","se","widths","_ref3","SingleCellExperiment","_rse$RangedSummarized","_options$reducedDimen","reducedDimensions","_options$reducedDimen2","reducedDimensionOrder","_options$alternativeE","alternativeExperiments","_options$alternativeE2","alternativeExperimentOrder","_options$rowRanges","_reducedDimensions","_alternativeExperiments","removeReducedDimension","setReducedDimension","setReducedDimensionNames","sliceReducedDimensions","removeAlternativeExperiment","setAlternativeExperiment","setAlternativeExperimentNames","sliceAlternativeExperiments","_ref9","_ref9$allowView","rse","_collections","fetchAllCollections","_fetchAllCollections","_ref$download","cres","coll_data","reference_download","decompressLines","_genes","fetchAllGenes","_fetchAllGenes","_ref$types","promises","processing","_t","resolved","res","gene_data","processed","gene_download","_sets","fetchAllSets","_fetchAllSets","_yield$Promise$all","_yield$Promise$all2","sres","set_data","collection","fetchGenesForAllSets","_fetchGenesForAllSets","fetchSetsForAllGenes","_fetchSetsForAllGenes","countSetOverlaps","setsForSomeGenes","set_count","_step2$value","by_symbol","by_symbol_lower","mapGenesByIdentifier","_mapGenesByIdentifier","_ref$lowerCase","lowerCase","host","sfound","tfound","reindexGenesForAllSets","geneMapping","genesForSets","reverse_mapping","gesel_gene","Uint32Array","new_sets","subset","gene","reindexSetsForAllGenes","setsForGenes","remapped","searchGenes","_searchGenes","queries","_ref$ignoreCase","ignoreCase","findings","_store","_ncols","MultiMatrix","_ref$store","old","new_matrix","to","_id","_matrix","ScranMatrix","gc","nrow","ncol","_ref$buffer","_ref2$buffer","sparse","reorganized","_ref3$buffer","identities","wipe_identities","prefix","extension","tmppath","methods","handleString","createBlock","local_buffer","barr","sofar","subsetBlock","_ref3$filter","filterBlock","_ref4$buffer","dropUnusedBlock","wa","uniq","uniq_arr","harvest_matrices","BigInt","$$","ptr","cbindWithNames","mat_ptrs","name_ptrs","renamed","common","universe","names_arr","replacement_arr","cbind_with_rownames","internames","_renamed","computeTopThreshold","_ref$largest","largest","_results","_filledClusters","_filledSizes","_filledCenters","_filledWcss","_filledIterations","_filledStatus","ClusterKmeansResults","filled","num_obs","set_iterations","set_status","_ref$fillable","fillable","COPY","_ref2$fillable","cluster_sizes","_this3","_ref3$fillable","wcss","_this4","_ref4$fillable","centers","clusterKmeans","_ref5$numberOfDims","_ref5$numberOfCells","_ref5$initMethod","_ref5$initSeed","initSeed","_ref5$initPCASizeAdju","initPCASizeAdjust","_ref5$numberOfThreads","numberOfThreads","nthreads","pptr","RunPCAResults","byteOffset","cluster_kmeans","_graph","BuildSNNGraphResults","buildSNNGraph","my_neighbors","_ref$scheme","_ref$neighbors","_ref$numberOfThreads","FindNearestNeighborsResults","findNearestNeighbors","build_snn_graph","_id2","_filledBest","_filledModularity","_filledMembership","_chooseLevel","ClusterSNNGraphMultiLevelResults","numberOfLevels","set_best","_ref2$level","level","_chooseLevel2","modularity","set_modularity","_ref3$level","_id3","_results2","_filledModularity2","_filledModularityDetails","_filledMembership2","ClusterSNNGraphWalktrapResults","numberOfMergeSteps","which","remaining","num_merge_steps","_ref4$at","_ref5$fillable","_id4","_results3","_filledModularity3","_filledMembership3","ClusterSNNGraphLeidenResults","_ref6$copy","_ref6$fillable","clusterSNNGraph","_ref7$method","_ref7$multiLevelResol","_ref7$leidenResolutio","_ref7$leidenModularit","_ref7$walktrapSteps","cluster_snn_graph_multilevel","cluster_snn_graph_walktrap","cluster_snn_graph_leiden","factorize","failure","_ref$asWasmArray","asWasmArray","_ref$action","_ref$placeholder","warned","isFinite","existing","filterCells","filter_data","filter_cells","BuildNeighborSearchIndexResults","num_dim","buildNeighborSearchIndex","_ref$numberOfDims","_ref$numberOfCells","_ref$approximate","build_neighbor_index","run_data","ind_data","dist_data","_ref2$runs","_ref2$indices","_ref2$distances","distances","serialize","NeighborResults","_ref3$numberOfThreads","find_nearest_neighbors","groupedSizeFactors","group_arr","_ref$center","_ref$priorCount","priorCount","_ref$reference","reference","wasm","grouped_size_factors","guessFeatures","_ref$forceTaxonomy","ntotal","early_threshold","ceil","payload","ensembl_human","ensembl_mouse","ensembl_6239","ensembl_10116","ensembl_9541","ensembl_7227","ensembl_7955","ensembl_9598","symbol_human","symbol_mouse","symbol_6239","symbol_7955","hsid","mmid","any_ens","highest","hypergeometricTest","markersInSet","numberOfMarkers","featureSetSize","markersInSet_data","numberOfMarkers_data","featureSetSize_data","numberOfFeatures_data","output_data","_ref$assumeSorted","assumeSorted","ntests","check_length","hypergeometric_test","initializeSparseMatrixFromMatrixMarket","buf_data","_ref3$compressed","compressed","_ref3$layered","layered","convert_compressed","read_matrix_market_from_buffer","read_matrix_market_from_file","isReorganized","wipeIdentities","extractMatrixMarketDimensions","_ref4$compressed","read_matrix_market_header_from_buffer","read_matrix_market_header_from_file","sarr","initializeSparseMatrixFromHDF5","_ref5$forceInteger","_ref5$layered","read_hdf5_matrix","extractHDF5MatrixDetails","extract_hdf5_matrix_details","vals","integer","initializeDenseMatrixFromDenseArray","_ref6$forceInteger","initialize_dense_matrix","initializeSparseMatrixFromRds","_ref7$consume","consume","_ref7$forceInteger","_ref7$layered","initialize_sparse_matrix_from_rds","computePerCellQcFilters","block_data","bptr","use_blocks","applyFilter","thresholds","rebuffer","optr","computePerCellQcMetrics","subset_offsets","tmp_subsets","nsubsets","offset_offset","offset_arr","_tmp_subsets","unpack_strings","repack_strings","lengths_arr","enc","TextEncoder","encode","buffer_arr","_reference","LoadLabelledReferenceResults","num_samples","num_features","num_labels","loadLabelledReferenceFromBuffers","ranks","matbuf","markbuf","labbuf","load_singlepp_reference","_reference2","BuildLabelledReferenceResults","shared_features","create_feature_availability","mat_id_buffer","mat_id_array","convert_reference_features","referenceFeatures","ref_id_buffer","ref_id_array","buildLabelledReference","_ref$top","top","nfeat","build_singlepp_reference","expectedNumberOfFeatures","label_cells","tempmat","tempbuf","use_buffer","labelCells","_ref2$numberOfFeature","_ref2$numberOfCells","_ref2$quantile","quantile","_ref2$numberOfThreads","run_singlepp","_integrated","IntegrateLabelledReferencesResults","num_references","integrateLabelledReferences","id_arr","loaded_arr2","ref_arr2","built_arr2","nrefs","ref_arr","la2","ra2","ba2","integrate_singlepp_references","_ref_arr","integrateCellLabels","assigned","aptrs","_ref4$numberOfFeature","_ref4$numberOfCells","_ref4$quantile","_ref4$numberOfThreads","numberOfReferences","assigned_arrs","aptrs_arr","fail","integrate_singlepp","_assigned_arrs","logNormCounts","sf_data","_ref$sizeFactors","_ref$allowZeros","sfptr","use_sf","log_norm_counts","centerSizeFactors","center_size_factors","mnnCorrect","x_data","_ref$k","_ref$numberOfMADs","_ref$robustIterations","robustIterations","_ref$robustTrim","robustTrim","_ref$referencePolicy","referencePolicy","mnn_correct","_filledMeans","_filledVariances","_filledFitted","_filledResiduals","_extract","ModelGeneVarResults","numberOfBlocks","_extract2","_ref4$block","num_blocks","fillcheck","fillindex","nblocks","modelGeneVar","_ref5$block","_ref5$span","model_gene_var","_filledSums","_filledDetected","_filledSubsetTotals","PerCellAdtQcMetricsResults","numberOfSubsets","subset_totals","num_subsets","perCellAdtQcMetrics","internal","subset_offset","per_cell_adt_qc_metrics","_filledMaxProportions","_filledMaxIndex","PerCellCrisprQcMetricsResults","max_proportion","perCellCrisprQcMetrics","per_cell_crispr_qc_metrics","_filledSubsetProportions","PerCellRnaQcMetricsResults","subset_proportions","perCellRnaQcMetrics","per_cell_rna_qc_metrics","quickAdtSizeFactors","clust","_ref$numberOfClusters","_ref$numberOfPCs","_ref$totals","runPCA","RdsObject","par","parent","RdsVector","_RdsObject","mod","fill_attribute_names","anames_buf","attribute_names_buffer","anames_len","attribute_names_length","packer","find_attribute","dispatch","load_attribute_by_index","load_attribute_by_name","RdsIntegerVector","_RdsVector","_super2","numeric_vector","RdsBooleanVector","_RdsVector2","_super3","RdsDoubleVector","_RdsVector3","_super4","RdsStringVector","_RdsVector4","_super5","fill_string_vector","buf","string_vector_buffer","string_vector_length","RdsGenericVector","_RdsVector5","_super6","_this5","load_list_element","RdsS4Object","_RdsObject2","_super7","_this6","class_name","_this7","package_name","_this8","_this9","_this10","RdsNull","_RdsVector6","_super8","cons","tt","_obj","RdsDetails","format_version","writer_version","reader_version","_this11","readRds","parse_rds_from_file","parse_rds_from_buffer","_filledComponents","_filledTotalVariance","set_total_variance","variance_explained","total_variance","feat_data","_ref3$features","_ref3$numberOfPCs","_ref3$scale","scale","_ref3$blockMethod","use_feat","fptr","run_pca","run_blocked_pca","run_multibatch_pca","perplexityToNeighbors","perplexity_to_k","scaleByNeighbors","embeddings","embed_ptrs","index_ptrs","holding_ndims","holding_weights","_ref$indices","_ref$weights","nembed","embed_arr","weight_offset","use_weights","allocator","total_ndim","total_len","index_arr","scale_by_neighbors_indices","ndims_arr","scale_by_neighbors_matrices","_deletable","scoreFeatureSet","feature_data","_ref$scale","score_feature_set","scores","checkFillness2","getfun","intifySummary","_filledCohen","_filledLfc","_filledAuc","_filledDeltaDetected","_extractBlockedStat","ScoreMarkersResults","createBlockedStatsFilled","createEffectsFilled","num_groups","_extractBlockedStat2","_ref3$summary","_ref4$summary","_ref5$summary","_ref6$summary","delta_detected","scoreMarkers","group_data","_ref7$block","_ref7$numberOfThreads","_ref7$lfcThreshold","_ref7$computeAuc","_ref7$computeMedian","computeMedian","_ref7$computeMaximum","computeMaximum","score_markers","subsetRows","xcopy","wasm_indices","row_subset","subsetColumns","column_subset","splitRows","_ref3$singleNull","singleNull","_ref3$createMultiMatr","createMultiMatrix","tkeys","consec","_tkeys","SuggestAdtQcFiltersResults","thresholds_detected","thresholds_subset_totals","suggestAdtQcFilters","_ref4$numberOfMADs","_ref4$minDetectedDrop","suggest_adt_qc_filters","_filledMaxCount","SuggestCrisprQcFiltersResults","thresholds_max_count","suggestCrisprQcFilters","_ref3$numberOfMADs","suggest_crispr_qc_filters","SuggestRnaQcFiltersResults","thresholds_sums","thresholds_proportions","suggestRnaQcFilters","_ref5$numberOfMADs","suggest_rna_qc_filters","createUint8WasmArray","wasmArraySpace","createInt32WasmArray","createBigUint64WasmArray","createFloat64WasmArray","wasmifyArray","space","chooseNumberOfThreads","threads","maximumThreads","possibleCopy","view_class","matchOptions","choices","spawnArray","checkFillness","check","setFilledFun","getFun","initialize","_initialize","_ref$localFile","localFile","scran_custom_nthreads","locateFile","import","loadScran","register","func","get_error_message","wasmMemory","Uint8WasmArray","_WasmArray","WasmArray","Int8WasmArray","_WasmArray2","Uint16WasmArray","_WasmArray3","Uint16Array","Int16WasmArray","_WasmArray4","Int16Array","Uint32WasmArray","_WasmArray5","Int32WasmArray","_WasmArray6","BigUint64WasmArray","_WasmArray7","BigInt64WasmArray","_WasmArray8","Float32WasmArray","_WasmArray9","_super9","Float64WasmArray","_WasmArray10","_super10","stringToClass","createWasmArray","arrayClass","allocate","createWasmArrayView"],"sourceRoot":""}